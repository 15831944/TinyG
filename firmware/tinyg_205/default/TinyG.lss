
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  00009172  00009206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000412  00802100  00802100  00009306  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  00009306  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e14  00000000  00000000  00009686  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d42b  00000000  00000000  0000a49a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d57  00000000  00000000  000178c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004e46  00000000  00000000  0001a61c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  0001f464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023d4  00000000  00000000  0001ff74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b16  00000000  00000000  00022348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00025e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__ctors_end>
       4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      10:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      14:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      18:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      1c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      20:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      24:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      28:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      2c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      30:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      34:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      38:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <__vector_14>
      3c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      44:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      48:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      4c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      50:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      54:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      58:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      60:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      64:	0c 94 79 32 	jmp	0x64f2	; 0x64f2 <__vector_25>
      68:	0c 94 15 30 	jmp	0x602a	; 0x602a <__vector_26>
      6c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      70:	0c 94 1b 35 	jmp	0x6a36	; 0x6a36 <__vector_28>
      74:	0c 94 d1 32 	jmp	0x65a2	; 0x65a2 <__vector_29>
      78:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      7c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      80:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      84:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      88:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      8c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      90:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      94:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      98:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ac:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <__vector_43>
      b0:	0c 94 11 2f 	jmp	0x5e22	; 0x5e22 <__vector_44>
      b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      bc:	0c 94 04 27 	jmp	0x4e08	; 0x4e08 <__vector_47>
      c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ec:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      fc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     100:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__vector_64>
     104:	0c 94 25 2f 	jmp	0x5e4a	; 0x5e4a <__vector_65>
     108:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__vector_66>
     10c:	0c 94 e9 2e 	jmp	0x5dd2	; 0x5dd2 <__vector_67>
     110:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     114:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     118:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     11c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     120:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     124:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     128:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     12c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     130:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     134:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__vector_77>
     138:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     13c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     140:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     144:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     148:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     14c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     150:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     154:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     158:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     15c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     160:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     164:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     168:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     16c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     170:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     174:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     178:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     17c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     180:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     184:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     188:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     18c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     190:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     194:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     198:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     19c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1a0:	0c 94 f3 2e 	jmp	0x5de6	; 0x5de6 <__vector_104>
     1a4:	0c 94 fd 2e 	jmp	0x5dfa	; 0x5dfa <__vector_105>
     1a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1ac:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b0:	0c 94 9f 26 	jmp	0x4d3e	; 0x4d3e <__vector_108>
     1b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1bc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3808>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3805>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3802>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3799>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3796>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3793>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3725>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3723>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3721>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3719>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3717>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3715>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3713>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3711>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3709>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3707>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3702>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3688>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3686>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3684>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3682>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3680>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <__c.3660>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <square_test1>:
     750:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     760:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     770:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     780:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     790:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007be <square_test2>:
     7be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7de:	78 30 20 79 30 00                                   x0 y0.

000007e4 <square_test10>:
     7e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     804:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000810 <circle_test10>:
     810:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     820:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     830:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     840:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     850:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     860:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     870:	30 00                                               0.

00000872 <square_circle_test10>:
     872:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     882:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     892:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e2:	31 30 20 79 30 00                                   10 y0.

000008e8 <square_circle_test100>:
     8e8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8f8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     908:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     918:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     928:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     938:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     948:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     958:	35 30 20 6a 30 00                                   50 j0.

0000095e <spiral_test5>:
     95e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     96e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     97e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     98e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     99e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9ae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9be:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9ce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009d8 <spiral_test50a>:
     9d8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9e8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009f8 <dwell_test1>:
     9f8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a88:	20 78 30 00                                          x0.

00000a8c <dwell_test2>:
     a8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     aac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     abc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     acc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     adc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     aec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     afc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b16 <dwell_testMax>:
     b16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b20 <g0_test1>:
     b20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b40 <g0_test2>:
     b40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b70:	79 30 20 7a 30 00                                   y0 z0.

00000b76 <g0_test3>:
     b76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba4 <radius_arc_test1>:
     ba4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc4:	72 35 30 0a 00                                      r50..

00000bc9 <radius_arc_test2>:
     bc9:	67 32 0a 00                                         g2..

00000bcd <zoetrope>:
     bcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     bdd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bed:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     bfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cad:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cbd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ccd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     cdd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ced:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     cfd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     dad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ddd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     ded:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     dfd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e0d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e1d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e2d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e3d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e4d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e5d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e6d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e7d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e8d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e9d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     ead:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ebd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ecd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     edd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     eed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     efd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f0d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f1d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f2d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f3d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f4d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f5d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f6d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f7d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f8d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f9d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fbd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fcd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fdd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     fed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     ffd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    100d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    101d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    102d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    103d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    104d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    105d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    106d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    107d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    108d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    109d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    10fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    110d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    111d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    112d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    113d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    114d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    115d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    116d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    117d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    118d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    119d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    11fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    120d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    121d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    122d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    123d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    124d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    125d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    126d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    127d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    128d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    129d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    12fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    130d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    131d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    132d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    133d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    134d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    135d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    136d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    137d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    138d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    139d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    13fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    140d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    141d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    142d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    143d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    144d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    145d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    146d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    147d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    148d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    149d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    14fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    150d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    151d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    152d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    153d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    154d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    155d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    156d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    157d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001588 <contraptor_circle>:
    1588:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1598:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1608:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1618:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1628:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1638:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1648:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1658:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1668:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1678:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1688:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1698:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1708:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1718:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1728:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1738:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1748:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1758:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1768:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1778:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1788:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1798:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1808:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1818:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1828:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1838:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1848:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1858:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1868:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1878:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1888:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1898:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18a8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18b8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18c8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18d8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18e8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18f8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1908:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1918:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1928:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1938:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1948:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1958:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001968 <tgModeStringControl>:
    1968:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001975 <tgModeStringConfig>:
    1975:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001981 <tgModeStringGCode>:
    1981:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

0000198d <tgModeStringDirect>:
    198d:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

0000199a <tgModeStrings>:
    199a:	68 19 75 19 81 19 8d 19                             h.u.....

000019a2 <__c.3908>:
    19a2:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    19b2:	69 6c 65 0a 00                                      ile..

000019b7 <__c.3971>:
    19b7:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

000019c5 <__c.3888>:
    19c5:	62 75 69 6c 64 20 32 30 35 00                       build 205.

000019cf <__c.3886>:
    19cf:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    19df:	25 53 0a 00                                         %S..

000019e3 <bsel>:
    19e3:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000019ee <bscale>:
    19ee:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000019f9 <readlnFuncs>:
    19f9:	de 31 b3 31 b3 31 1e 32 b3 31 b3 31 b3 31 b3 31     .1.1.1.2.1.1.1.1
    1a09:	0a 32 b3 31 de 31 b3 31 b3 31 de 31 b3 31 b3 31     .2.1.1.1.1.1.1.1
    1a19:	b3 31 2a 32 b3 31 24 32 b3 31 b3 31 b3 31 b3 31     .1*2.1$2.1.1.1.1
    1a29:	1e 32 b3 31 b3 31 1e 32 b3 31 b3 31 b3 31 b3 31     .2.1.1.2.1.1.1.1
    1a39:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1a49:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1a59:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1a69:	b3 31 b3 31 b3 31 00 32 b3 31 b3 31 b3 31 b3 31     .1.1.1.2.1.1.1.1
    1a79:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1a89:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1a99:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1aa9:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1ab9:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1ac9:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1ad9:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31     .1.1.1.1.1.1.1.1
    1ae9:	b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 b3 31 0a 32     .1.1.1.1.1.1.1.2

00001af9 <getcFuncs>:
    1af9:	2f 31 1f 31 1f 31 1e 32 1f 31 1f 31 1f 31 1f 31     /1.1.1.2.1.1.1.1
    1b09:	50 31 1f 31 2f 31 1f 31 1f 31 2f 31 1f 31 1f 31     P1.1/1.1.1/1.1.1
    1b19:	1f 31 2a 32 1f 31 24 32 1f 31 1f 31 1f 31 1f 31     .1*2.1$2.1.1.1.1
    1b29:	1e 32 1f 31 1f 31 1e 32 1f 31 1f 31 1f 31 1f 31     .2.1.1.2.1.1.1.1
    1b39:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1b49:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1b59:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1b69:	1f 31 1f 31 1f 31 46 31 1f 31 1f 31 1f 31 1f 31     .1.1.1F1.1.1.1.1
    1b79:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1b89:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1b99:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1ba9:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1bb9:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1bc9:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1bd9:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31     .1.1.1.1.1.1.1.1
    1be9:	1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 1f 31 50 31     .1.1.1.1.1.1.1P1

00001bf9 <readlnFuncs>:
    1bf9:	80 34 55 34 55 34 c0 34 55 34 55 34 55 34 55 34     .4U4U4.4U4U4U4U4
    1c09:	ac 34 55 34 80 34 55 34 55 34 80 34 55 34 55 34     .4U4.4U4U4.4U4U4
    1c19:	55 34 cc 34 55 34 c6 34 55 34 55 34 55 34 55 34     U4.4U4.4U4U4U4U4
    1c29:	c0 34 55 34 55 34 c0 34 55 34 55 34 55 34 55 34     .4U4U4.4U4U4U4U4
    1c39:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1c49:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1c59:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1c69:	55 34 55 34 55 34 a2 34 55 34 55 34 55 34 55 34     U4U4U4.4U4U4U4U4
    1c79:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1c89:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1c99:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1ca9:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1cb9:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1cc9:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1cd9:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 55 34     U4U4U4U4U4U4U4U4
    1ce9:	55 34 55 34 55 34 55 34 55 34 55 34 55 34 ac 34     U4U4U4U4U4U4U4.4

00001cf9 <getcFuncs>:
    1cf9:	ec 33 dc 33 dc 33 c0 34 dc 33 dc 33 dc 33 dc 33     .3.3.3.4.3.3.3.3
    1d09:	0d 34 dc 33 ec 33 dc 33 dc 33 ec 33 dc 33 dc 33     .4.3.3.3.3.3.3.3
    1d19:	dc 33 cc 34 dc 33 c6 34 dc 33 dc 33 dc 33 dc 33     .3.4.3.4.3.3.3.3
    1d29:	c0 34 dc 33 dc 33 c0 34 dc 33 dc 33 dc 33 dc 33     .4.3.3.4.3.3.3.3
    1d39:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1d49:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1d59:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1d69:	dc 33 dc 33 dc 33 03 34 dc 33 dc 33 dc 33 dc 33     .3.3.3.4.3.3.3.3
    1d79:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1d89:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1d99:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1da9:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1db9:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1dc9:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1dd9:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33     .3.3.3.3.3.3.3.3
    1de9:	dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 dc 33 0d 34     .3.3.3.3.3.3.3.4

00001df9 <pstr_inf>:
    1df9:	49 4e 46                                            INF

00001dfc <pstr_inity>:
    1dfc:	49 4e 49 54 59                                      INITY

00001e01 <pstr_nan>:
    1e01:	4e 41 4e                                            NAN

00001e04 <pwr_m10>:
    1e04:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e14:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e1c <pwr_p10>:
    1e1c:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e2c:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e3c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e4c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e5c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e6c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e7c:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e8c:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e9c:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eac:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ebc:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ecc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1edc:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1eec:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1efc:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f0c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f1c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f2c:	3d 27                                               ='

00001f2e <__ctors_end>:
    1f2e:	11 24       	eor	r1, r1
    1f30:	1f be       	out	0x3f, r1	; 63
    1f32:	cf ef       	ldi	r28, 0xFF	; 255
    1f34:	df e5       	ldi	r29, 0x5F	; 95
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	0c bf       	out	0x3c, r16	; 60

00001f3e <__do_copy_data>:
    1f3e:	11 e2       	ldi	r17, 0x21	; 33
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e2       	ldi	r27, 0x20	; 32
    1f44:	e2 e7       	ldi	r30, 0x72	; 114
    1f46:	f1 e9       	ldi	r31, 0x91	; 145
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0b bf       	out	0x3b, r16	; 59
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <__do_copy_data+0x14>
    1f4e:	07 90       	elpm	r0, Z+
    1f50:	0d 92       	st	X+, r0
    1f52:	a0 30       	cpi	r26, 0x00	; 0
    1f54:	b1 07       	cpc	r27, r17
    1f56:	d9 f7       	brne	.-10     	; 0x1f4e <__do_copy_data+0x10>

00001f58 <__do_clear_bss>:
    1f58:	15 e2       	ldi	r17, 0x25	; 37
    1f5a:	a0 e0       	ldi	r26, 0x00	; 0
    1f5c:	b1 e2       	ldi	r27, 0x21	; 33
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <.do_clear_bss_start>

00001f60 <.do_clear_bss_loop>:
    1f60:	1d 92       	st	X+, r1

00001f62 <.do_clear_bss_start>:
    1f62:	a2 31       	cpi	r26, 0x12	; 18
    1f64:	b1 07       	cpc	r27, r17
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <.do_clear_bss_loop>
    1f68:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <main>
    1f6c:	0c 94 b7 48 	jmp	0x916e	; 0x916e <_exit>

00001f70 <__bad_interrupt>:
    1f70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f74 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f74:	f8 94       	cli
	xmega_init();				// xmega setup
    1f76:	0e 94 b3 1b 	call	0x3766	; 0x3766 <xmega_init>
	xio_init();					// xmega io subsystem
    1f7a:	0e 94 46 29 	call	0x528c	; 0x528c <xio_init>

	cfg_init();					// get config record from eeprom
    1f7e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <cfg_init>
	st_init(); 					// stepper subsystem
    1f82:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <st_init>
	ls_init();					// limit switches
    1f86:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <ls_init>
	mv_init();					// move buffers
    1f8a:	0e 94 93 2c 	call	0x5926	; 0x5926 <mv_init>
	mc_init();					// motion control subsystem
    1f8e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <mc_init>
	spindle_init();				// spindle controller
    1f92:	0e 94 3f 24 	call	0x487e	; 0x487e <spindle_init>
	en_init();					// encoders
    1f96:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <en_init>
	gc_init();					// gcode-parser
    1f9a:	0e 94 09 10 	call	0x2012	; 0x2012 <gc_init>
	dd_init();					// direct drive commands
    1f9e:	0e 94 8f 2c 	call	0x591e	; 0x591e <dd_init>
	tg_init();					// tinyg parsers
    1fa2:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fa6:	0e 94 41 28 	call	0x5082	; 0x5082 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1faa:	e0 ea       	ldi	r30, 0xA0	; 160
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 91 a2 00 	lds	r24, 0x00A2
    1fb2:	81 60       	ori	r24, 0x01	; 1
    1fb4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fb6:	80 91 a2 00 	lds	r24, 0x00A2
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fbe:	80 91 a2 00 	lds	r24, 0x00A2
    1fc2:	84 60       	ori	r24, 0x04	; 4
    1fc4:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fc6:	78 94       	sei
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");
//	xio_usb_queue_RX_string("g0x0y0z0\n");

	for(;;){
		tg_controller();
    1fc8:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <tg_controller>
    1fcc:	fd cf       	rjmp	.-6      	; 0x1fc8 <main+0x54>

00001fce <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fce:	80 93 4d 21 	sts	0x214D, r24
	gc.plane_axis_1 = axis_1;
    1fd2:	60 93 4e 21 	sts	0x214E, r22
	gc.plane_axis_2 = axis_2;
    1fd6:	40 93 4f 21 	sts	0x214F, r20
}
    1fda:	08 95       	ret

00001fdc <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	7b 01       	movw	r14, r22
    1fe6:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1fe8:	80 91 0d 21 	lds	r24, 0x210D
    1fec:	88 23       	and	r24, r24
    1fee:	51 f0       	breq	.+20     	; 0x2004 <to_millimeters+0x28>
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	25 e8       	ldi	r18, 0x85	; 133
    1ff6:	32 e4       	ldi	r19, 0x42	; 66
    1ff8:	41 e2       	ldi	r20, 0x21	; 33
    1ffa:	5d e3       	ldi	r21, 0x3D	; 61
    1ffc:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    2000:	7b 01       	movw	r14, r22
    2002:	8c 01       	movw	r16, r24
}
    2004:	b7 01       	movw	r22, r14
    2006:	c8 01       	movw	r24, r16
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	08 95       	ret

00002012 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2012:	86 e5       	ldi	r24, 0x56	; 86
    2014:	e0 e0       	ldi	r30, 0x00	; 0
    2016:	f1 e2       	ldi	r31, 0x21	; 33
    2018:	df 01       	movw	r26, r30
    201a:	1d 92       	st	X+, r1
    201c:	8a 95       	dec	r24
    201e:	e9 f7       	brne	.-6      	; 0x201a <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	80 93 11 21 	sts	0x2111, r24
    202c:	90 93 12 21 	sts	0x2112, r25
    2030:	a0 93 13 21 	sts	0x2113, r26
    2034:	b0 93 14 21 	sts	0x2114, r27
	gc.radius = 0;							// radius value
    2038:	80 93 15 21 	sts	0x2115, r24
    203c:	90 93 16 21 	sts	0x2116, r25
    2040:	a0 93 17 21 	sts	0x2117, r26
    2044:	b0 93 18 21 	sts	0x2118, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2048:	80 91 83 22 	lds	r24, 0x2283
    204c:	90 91 84 22 	lds	r25, 0x2284
    2050:	a0 91 85 22 	lds	r26, 0x2285
    2054:	b0 91 86 22 	lds	r27, 0x2286
    2058:	80 93 19 21 	sts	0x2119, r24
    205c:	90 93 1a 21 	sts	0x211A, r25
    2060:	a0 93 1b 21 	sts	0x211B, r26
    2064:	b0 93 1c 21 	sts	0x211C, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2068:	80 91 87 22 	lds	r24, 0x2287
    206c:	90 91 88 22 	lds	r25, 0x2288
    2070:	a0 91 89 22 	lds	r26, 0x2289
    2074:	b0 91 8a 22 	lds	r27, 0x228A
    2078:	80 93 1d 21 	sts	0x211D, r24
    207c:	90 93 1e 21 	sts	0x211E, r25
    2080:	a0 93 1f 21 	sts	0x211F, r26
    2084:	b0 93 20 21 	sts	0x2120, r27

	gc.absolute_mode = TRUE;
    2088:	21 e0       	ldi	r18, 0x01	; 1
    208a:	20 93 0e 21 	sts	0x210E, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf eb       	ldi	r27, 0xBF	; 191
    2096:	80 93 25 21 	sts	0x2125, r24
    209a:	90 93 26 21 	sts	0x2126, r25
    209e:	a0 93 27 21 	sts	0x2127, r26
    20a2:	b0 93 28 21 	sts	0x2128, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20a6:	10 92 0f 21 	sts	0x210F, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20aa:	10 92 54 21 	sts	0x2154, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20ae:	10 92 55 21 	sts	0x2155, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20b2:	10 92 4d 21 	sts	0x214D, r1
	gc.plane_axis_1 = axis_1;
    20b6:	20 93 4e 21 	sts	0x214E, r18
	gc.plane_axis_2 = axis_2;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 93 4f 21 	sts	0x214F, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20c0:	08 95       	ret

000020c2 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	0f 92       	push	r0
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	3b 01       	movw	r6, r22
    20ec:	2a 01       	movw	r4, r20
    20ee:	49 01       	movw	r8, r18
    20f0:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    20f2:	d8 01       	movw	r26, r16
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	e0 81       	ld	r30, Z
    20fe:	ee 23       	and	r30, r30
    2100:	41 f0       	breq	.+16     	; 0x2112 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2102:	dc 01       	movw	r26, r24
    2104:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2106:	e1 54       	subi	r30, 0x41	; 65
    2108:	ea 31       	cpi	r30, 0x1A	; 26
    210a:	30 f0       	brcs	.+12     	; 0x2118 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    210c:	8d e0       	ldi	r24, 0x0D	; 13
    210e:	80 93 00 21 	sts	0x2100, r24
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	35 c0       	rjmp	.+106    	; 0x2182 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2118:	f8 01       	movw	r30, r16
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2124:	89 01       	movw	r16, r18
    2126:	08 0f       	add	r16, r24
    2128:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    212a:	c8 01       	movw	r24, r16
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <strtod>
    2136:	6b 01       	movw	r12, r22
    2138:	7c 01       	movw	r14, r24
    213a:	d3 01       	movw	r26, r6
    213c:	6d 93       	st	X+, r22
    213e:	7d 93       	st	X+, r23
    2140:	8d 93       	st	X+, r24
    2142:	9c 93       	st	X, r25
    2144:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	80 17       	cp	r24, r16
    214c:	91 07       	cpc	r25, r17
    214e:	11 f4       	brne	.+4      	; 0x2154 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2150:	8f e0       	ldi	r24, 0x0F	; 15
    2152:	dd cf       	rjmp	.-70     	; 0x210e <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2154:	88 19       	sub	r24, r8
    2156:	99 09       	sbc	r25, r9
    2158:	f5 01       	movw	r30, r10
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    215e:	c7 01       	movw	r24, r14
    2160:	b6 01       	movw	r22, r12
    2162:	0e 94 50 44 	call	0x88a0	; 0x88a0 <trunc>
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	c7 01       	movw	r24, r14
    216c:	b6 01       	movw	r22, r12
    216e:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2172:	d2 01       	movw	r26, r4
    2174:	6d 93       	st	X+, r22
    2176:	7d 93       	st	X+, r23
    2178:	8d 93       	st	X+, r24
    217a:	9c 93       	st	X, r25
    217c:	13 97       	sbiw	r26, 0x03	; 3
    217e:	21 e0       	ldi	r18, 0x01	; 1
    2180:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2182:	c9 01       	movw	r24, r18
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	7f 90       	pop	r7
    21a2:	6f 90       	pop	r6
    21a4:	5f 90       	pop	r5
    21a6:	4f 90       	pop	r4
    21a8:	08 95       	ret

000021aa <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21aa:	af 92       	push	r10
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	79 01       	movw	r14, r18
    21bc:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21be:	5f 77       	andi	r21, 0x7F	; 127
    21c0:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    21c4:	0e 94 a5 40 	call	0x814a	; 0x814a <atan>
    21c8:	5b 01       	movw	r10, r22
    21ca:	6c 01       	movw	r12, r24

	if (y>0) {
    21cc:	c8 01       	movw	r24, r16
    21ce:	b7 01       	movw	r22, r14
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	0e 94 d0 42 	call	0x85a0	; 0x85a0 <__gesf2>
    21dc:	18 16       	cp	r1, r24
    21de:	cc f0       	brlt	.+50     	; 0x2212 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21e0:	c6 01       	movw	r24, r12
    21e2:	b5 01       	movw	r22, r10
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 d0 42 	call	0x85a0	; 0x85a0 <__gesf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <theta+0x54>
	    {
			return(M_PI-theta);
    21f4:	6b ed       	ldi	r22, 0xDB	; 219
    21f6:	7f e0       	ldi	r23, 0x0F	; 15
    21f8:	89 e4       	ldi	r24, 0x49	; 73
    21fa:	90 e4       	ldi	r25, 0x40	; 64
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    21fe:	6b ed       	ldi	r22, 0xDB	; 219
    2200:	7f e0       	ldi	r23, 0x0F	; 15
    2202:	89 e4       	ldi	r24, 0x49	; 73
    2204:	90 ec       	ldi	r25, 0xC0	; 192
    2206:	a6 01       	movw	r20, r12
    2208:	95 01       	movw	r18, r10
    220a:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    220e:	5b 01       	movw	r10, r22
    2210:	6c 01       	movw	r12, r24
		}
	}
}
    2212:	b5 01       	movw	r22, r10
    2214:	c6 01       	movw	r24, r12
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	08 95       	ret

00002228 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	68 97       	sbiw	r28, 0x18	; 24
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    225c:	e5 e3       	ldi	r30, 0x35	; 53
    225e:	f1 e2       	ldi	r31, 0x21	; 33
    2260:	8c e0       	ldi	r24, 0x0C	; 12
    2262:	df 01       	movw	r26, r30
    2264:	28 2f       	mov	r18, r24
    2266:	1d 92       	st	X+, r1
    2268:	2a 95       	dec	r18
    226a:	e9 f7       	brne	.-6      	; 0x2266 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    226c:	3c 96       	adiw	r30, 0x0c	; 12
    226e:	df 01       	movw	r26, r30
    2270:	1d 92       	st	X+, r1
    2272:	8a 95       	dec	r24
    2274:	e9 f7       	brne	.-6      	; 0x2270 <gc_execute_block+0x48>

	gc.status = TG_OK;
    2276:	10 92 00 21 	sts	0x2100, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    227a:	10 92 10 21 	sts	0x2110, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    227e:	10 92 55 21 	sts	0x2155, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2282:	5e 01       	movw	r10, r28
    2284:	08 94       	sec
    2286:	a1 1c       	adc	r10, r1
    2288:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    228a:	ff 24       	eor	r15, r15
    228c:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    228e:	be e0       	ldi	r27, 0x0E	; 14
    2290:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2292:	a2 e0       	ldi	r26, 0x02	; 2
    2294:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2296:	77 24       	eor	r7, r7
    2298:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    229a:	f3 e0       	ldi	r31, 0x03	; 3
    229c:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    229e:	e4 e0       	ldi	r30, 0x04	; 4
    22a0:	6e 2e       	mov	r6, r30
    22a2:	0a c1       	rjmp	.+532    	; 0x24b8 <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22a4:	80 91 01 21 	lds	r24, 0x2101
    22a8:	8d 34       	cpi	r24, 0x4D	; 77
    22aa:	09 f4       	brne	.+2      	; 0x22ae <gc_execute_block+0x86>
    22ac:	be c0       	rjmp	.+380    	; 0x242a <gc_execute_block+0x202>
    22ae:	84 35       	cpi	r24, 0x54	; 84
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <gc_execute_block+0x8c>
    22b2:	f0 c0       	rjmp	.+480    	; 0x2494 <gc_execute_block+0x26c>
    22b4:	87 34       	cpi	r24, 0x47	; 71
    22b6:	09 f0       	breq	.+2      	; 0x22ba <gc_execute_block+0x92>
    22b8:	fb c0       	rjmp	.+502    	; 0x24b0 <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22ba:	60 91 02 21 	lds	r22, 0x2102
    22be:	70 91 03 21 	lds	r23, 0x2103
    22c2:	80 91 04 21 	lds	r24, 0x2104
    22c6:	90 91 05 21 	lds	r25, 0x2105
    22ca:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    22ce:	65 31       	cpi	r22, 0x15	; 21
    22d0:	71 05       	cpc	r23, r1
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <gc_execute_block+0xae>
    22d4:	8f c0       	rjmp	.+286    	; 0x23f4 <gc_execute_block+0x1cc>
    22d6:	66 31       	cpi	r22, 0x16	; 22
    22d8:	71 05       	cpc	r23, r1
    22da:	84 f5       	brge	.+96     	; 0x233c <gc_execute_block+0x114>
    22dc:	64 30       	cpi	r22, 0x04	; 4
    22de:	71 05       	cpc	r23, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <gc_execute_block+0xbc>
    22e2:	6d c0       	rjmp	.+218    	; 0x23be <gc_execute_block+0x196>
    22e4:	65 30       	cpi	r22, 0x05	; 5
    22e6:	71 05       	cpc	r23, r1
    22e8:	a4 f4       	brge	.+40     	; 0x2312 <gc_execute_block+0xea>
    22ea:	61 30       	cpi	r22, 0x01	; 1
    22ec:	71 05       	cpc	r23, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <gc_execute_block+0xca>
    22f0:	57 c0       	rjmp	.+174    	; 0x23a0 <gc_execute_block+0x178>
    22f2:	62 30       	cpi	r22, 0x02	; 2
    22f4:	71 05       	cpc	r23, r1
    22f6:	24 f4       	brge	.+8      	; 0x2300 <gc_execute_block+0xd8>
    22f8:	67 2b       	or	r22, r23
    22fa:	09 f4       	brne	.+2      	; 0x22fe <gc_execute_block+0xd6>
    22fc:	4c c0       	rjmp	.+152    	; 0x2396 <gc_execute_block+0x16e>
    22fe:	c7 c0       	rjmp	.+398    	; 0x248e <gc_execute_block+0x266>
    2300:	62 30       	cpi	r22, 0x02	; 2
    2302:	71 05       	cpc	r23, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <gc_execute_block+0xe0>
    2306:	51 c0       	rjmp	.+162    	; 0x23aa <gc_execute_block+0x182>
    2308:	63 30       	cpi	r22, 0x03	; 3
    230a:	71 05       	cpc	r23, r1
    230c:	09 f0       	breq	.+2      	; 0x2310 <gc_execute_block+0xe8>
    230e:	bf c0       	rjmp	.+382    	; 0x248e <gc_execute_block+0x266>
    2310:	51 c0       	rjmp	.+162    	; 0x23b4 <gc_execute_block+0x18c>
    2312:	62 31       	cpi	r22, 0x12	; 18
    2314:	71 05       	cpc	r23, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <gc_execute_block+0xf2>
    2318:	5c c0       	rjmp	.+184    	; 0x23d2 <gc_execute_block+0x1aa>
    231a:	63 31       	cpi	r22, 0x13	; 19
    231c:	71 05       	cpc	r23, r1
    231e:	2c f4       	brge	.+10     	; 0x232a <gc_execute_block+0x102>
    2320:	61 31       	cpi	r22, 0x11	; 17
    2322:	71 05       	cpc	r23, r1
    2324:	09 f0       	breq	.+2      	; 0x2328 <gc_execute_block+0x100>
    2326:	b3 c0       	rjmp	.+358    	; 0x248e <gc_execute_block+0x266>
    2328:	4d c0       	rjmp	.+154    	; 0x23c4 <gc_execute_block+0x19c>
    232a:	63 31       	cpi	r22, 0x13	; 19
    232c:	71 05       	cpc	r23, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <gc_execute_block+0x10a>
    2330:	57 c0       	rjmp	.+174    	; 0x23e0 <gc_execute_block+0x1b8>
    2332:	64 31       	cpi	r22, 0x14	; 20
    2334:	71 05       	cpc	r23, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <gc_execute_block+0x112>
    2338:	aa c0       	rjmp	.+340    	; 0x248e <gc_execute_block+0x266>
    233a:	59 c0       	rjmp	.+178    	; 0x23ee <gc_execute_block+0x1c6>
    233c:	6a 35       	cpi	r22, 0x5A	; 90
    233e:	71 05       	cpc	r23, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <gc_execute_block+0x11c>
    2342:	64 c0       	rjmp	.+200    	; 0x240c <gc_execute_block+0x1e4>
    2344:	6b 35       	cpi	r22, 0x5B	; 91
    2346:	71 05       	cpc	r23, r1
    2348:	ac f4       	brge	.+42     	; 0x2374 <gc_execute_block+0x14c>
    234a:	6e 31       	cpi	r22, 0x1E	; 30
    234c:	71 05       	cpc	r23, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <gc_execute_block+0x12a>
    2350:	54 c0       	rjmp	.+168    	; 0x23fa <gc_execute_block+0x1d2>
    2352:	6f 31       	cpi	r22, 0x1F	; 31
    2354:	71 05       	cpc	r23, r1
    2356:	2c f4       	brge	.+10     	; 0x2362 <gc_execute_block+0x13a>
    2358:	6c 31       	cpi	r22, 0x1C	; 28
    235a:	71 05       	cpc	r23, r1
    235c:	09 f0       	breq	.+2      	; 0x2360 <gc_execute_block+0x138>
    235e:	97 c0       	rjmp	.+302    	; 0x248e <gc_execute_block+0x266>
    2360:	4c c0       	rjmp	.+152    	; 0x23fa <gc_execute_block+0x1d2>
    2362:	65 33       	cpi	r22, 0x35	; 53
    2364:	71 05       	cpc	r23, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <gc_execute_block+0x142>
    2368:	4b c0       	rjmp	.+150    	; 0x2400 <gc_execute_block+0x1d8>
    236a:	60 35       	cpi	r22, 0x50	; 80
    236c:	71 05       	cpc	r23, r1
    236e:	09 f0       	breq	.+2      	; 0x2372 <gc_execute_block+0x14a>
    2370:	8e c0       	rjmp	.+284    	; 0x248e <gc_execute_block+0x266>
    2372:	49 c0       	rjmp	.+146    	; 0x2406 <gc_execute_block+0x1de>
    2374:	6c 35       	cpi	r22, 0x5C	; 92
    2376:	71 05       	cpc	r23, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <gc_execute_block+0x154>
    237a:	4e c0       	rjmp	.+156    	; 0x2418 <gc_execute_block+0x1f0>
    237c:	6c 35       	cpi	r22, 0x5C	; 92
    237e:	71 05       	cpc	r23, r1
    2380:	0c f4       	brge	.+2      	; 0x2384 <gc_execute_block+0x15c>
    2382:	47 c0       	rjmp	.+142    	; 0x2412 <gc_execute_block+0x1ea>
    2384:	6d 35       	cpi	r22, 0x5D	; 93
    2386:	71 05       	cpc	r23, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <gc_execute_block+0x164>
    238a:	49 c0       	rjmp	.+146    	; 0x241e <gc_execute_block+0x1f6>
    238c:	6e 35       	cpi	r22, 0x5E	; 94
    238e:	71 05       	cpc	r23, r1
    2390:	09 f0       	breq	.+2      	; 0x2394 <gc_execute_block+0x16c>
    2392:	7d c0       	rjmp	.+250    	; 0x248e <gc_execute_block+0x266>
    2394:	47 c0       	rjmp	.+142    	; 0x2424 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2396:	f0 92 55 21 	sts	0x2155, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    239a:	10 92 0b 21 	sts	0x210B, r1
    239e:	88 c0       	rjmp	.+272    	; 0x24b0 <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23a0:	f0 92 55 21 	sts	0x2155, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23a4:	f0 92 0b 21 	sts	0x210B, r15
    23a8:	83 c0       	rjmp	.+262    	; 0x24b0 <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23aa:	f0 92 55 21 	sts	0x2155, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23ae:	e0 92 0b 21 	sts	0x210B, r14
    23b2:	7e c0       	rjmp	.+252    	; 0x24b0 <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23b4:	f0 92 55 21 	sts	0x2155, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23b8:	d0 92 0b 21 	sts	0x210B, r13
    23bc:	79 c0       	rjmp	.+242    	; 0x24b0 <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23be:	e0 92 55 21 	sts	0x2155, r14
    23c2:	76 c0       	rjmp	.+236    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23c4:	10 92 4d 21 	sts	0x214D, r1
	gc.plane_axis_1 = axis_1;
    23c8:	f0 92 4e 21 	sts	0x214E, r15
	gc.plane_axis_2 = axis_2;
    23cc:	e0 92 4f 21 	sts	0x214F, r14
    23d0:	6f c0       	rjmp	.+222    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23d2:	10 92 4d 21 	sts	0x214D, r1
	gc.plane_axis_1 = axis_1;
    23d6:	e0 92 4e 21 	sts	0x214E, r14
	gc.plane_axis_2 = axis_2;
    23da:	f0 92 4f 21 	sts	0x214F, r15
    23de:	68 c0       	rjmp	.+208    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e0:	f0 92 4d 21 	sts	0x214D, r15
	gc.plane_axis_1 = axis_1;
    23e4:	e0 92 4e 21 	sts	0x214E, r14
	gc.plane_axis_2 = axis_2;
    23e8:	10 92 4f 21 	sts	0x214F, r1
    23ec:	61 c0       	rjmp	.+194    	; 0x24b0 <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    23ee:	f0 92 0d 21 	sts	0x210D, r15
    23f2:	5e c0       	rjmp	.+188    	; 0x24b0 <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    23f4:	10 92 0d 21 	sts	0x210D, r1
    23f8:	5b c0       	rjmp	.+182    	; 0x24b0 <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    23fa:	d0 92 55 21 	sts	0x2155, r13
    23fe:	58 c0       	rjmp	.+176    	; 0x24b0 <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    2400:	f0 92 54 21 	sts	0x2154, r15
    2404:	55 c0       	rjmp	.+170    	; 0x24b0 <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2406:	60 92 0b 21 	sts	0x210B, r6
    240a:	52 c0       	rjmp	.+164    	; 0x24b0 <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    240c:	f0 92 0e 21 	sts	0x210E, r15
    2410:	4f c0       	rjmp	.+158    	; 0x24b0 <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    2412:	10 92 0e 21 	sts	0x210E, r1
    2416:	4c c0       	rjmp	.+152    	; 0x24b0 <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2418:	f0 92 10 21 	sts	0x2110, r15
    241c:	49 c0       	rjmp	.+146    	; 0x24b0 <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    241e:	f0 92 0c 21 	sts	0x210C, r15
    2422:	46 c0       	rjmp	.+140    	; 0x24b0 <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2424:	10 92 0c 21 	sts	0x210C, r1
    2428:	43 c0       	rjmp	.+134    	; 0x24b0 <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    242a:	60 91 02 21 	lds	r22, 0x2102
    242e:	70 91 03 21 	lds	r23, 0x2103
    2432:	80 91 04 21 	lds	r24, 0x2104
    2436:	90 91 05 21 	lds	r25, 0x2105
    243a:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    243e:	63 30       	cpi	r22, 0x03	; 3
    2440:	71 05       	cpc	r23, r1
    2442:	e1 f0       	breq	.+56     	; 0x247c <gc_execute_block+0x254>
    2444:	64 30       	cpi	r22, 0x04	; 4
    2446:	71 05       	cpc	r23, r1
    2448:	34 f4       	brge	.+12     	; 0x2456 <gc_execute_block+0x22e>
    244a:	77 fd       	sbrc	r23, 7
    244c:	20 c0       	rjmp	.+64     	; 0x248e <gc_execute_block+0x266>
    244e:	62 30       	cpi	r22, 0x02	; 2
    2450:	71 05       	cpc	r23, r1
    2452:	74 f0       	brlt	.+28     	; 0x2470 <gc_execute_block+0x248>
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <gc_execute_block+0x24e>
    2456:	65 30       	cpi	r22, 0x05	; 5
    2458:	71 05       	cpc	r23, r1
    245a:	b1 f0       	breq	.+44     	; 0x2488 <gc_execute_block+0x260>
    245c:	65 30       	cpi	r22, 0x05	; 5
    245e:	71 05       	cpc	r23, r1
    2460:	84 f0       	brlt	.+32     	; 0x2482 <gc_execute_block+0x25a>
    2462:	6e 31       	cpi	r22, 0x1E	; 30
    2464:	71 05       	cpc	r23, r1
    2466:	39 f0       	breq	.+14     	; 0x2476 <gc_execute_block+0x24e>
    2468:	6c 33       	cpi	r22, 0x3C	; 60
    246a:	71 05       	cpc	r23, r1
    246c:	81 f4       	brne	.+32     	; 0x248e <gc_execute_block+0x266>
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2470:	f0 92 0a 21 	sts	0x210A, r15
    2474:	1d c0       	rjmp	.+58     	; 0x24b0 <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2476:	e0 92 0a 21 	sts	0x210A, r14
    247a:	1a c0       	rjmp	.+52     	; 0x24b0 <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    247c:	f0 92 51 21 	sts	0x2151, r15
    2480:	17 c0       	rjmp	.+46     	; 0x24b0 <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    2482:	70 92 51 21 	sts	0x2151, r7
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    2488:	10 92 51 21 	sts	0x2151, r1
    248c:	11 c0       	rjmp	.+34     	; 0x24b0 <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    248e:	c0 92 00 21 	sts	0x2100, r12
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2494:	60 91 02 21 	lds	r22, 0x2102
    2498:	70 91 03 21 	lds	r23, 0x2103
    249c:	80 91 04 21 	lds	r24, 0x2104
    24a0:	90 91 05 21 	lds	r25, 0x2105
    24a4:	0e 94 50 44 	call	0x88a0	; 0x88a0 <trunc>
    24a8:	0e 94 54 41 	call	0x82a8	; 0x82a8 <__fixunssfsi>
    24ac:	60 93 50 21 	sts	0x2150, r22
		}
		if(gc.status) {
    24b0:	80 91 00 21 	lds	r24, 0x2100
    24b4:	88 23       	and	r24, r24
    24b6:	69 f4       	brne	.+26     	; 0x24d2 <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	91 e2       	ldi	r25, 0x21	; 33
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	71 e2       	ldi	r23, 0x21	; 33
    24c0:	46 e0       	ldi	r20, 0x06	; 6
    24c2:	51 e2       	ldi	r21, 0x21	; 33
    24c4:	94 01       	movw	r18, r8
    24c6:	85 01       	movw	r16, r10
    24c8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_gc_next_statement>
    24cc:	89 2b       	or	r24, r25
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <gc_execute_block+0x2aa>
    24d0:	e9 ce       	rjmp	.-558    	; 0x22a4 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24d2:	80 91 00 21 	lds	r24, 0x2100
    24d6:	88 23       	and	r24, r24
    24d8:	09 f0       	breq	.+2      	; 0x24dc <gc_execute_block+0x2b4>
    24da:	99 c3       	rjmp	.+1842   	; 0x2c0e <gc_execute_block+0x9e6>
		return(gc.status); 
	}

	i = 0;
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24e0:	e1 e4       	ldi	r30, 0x41	; 65
    24e2:	f1 e2       	ldi	r31, 0x21	; 33
    24e4:	8c e0       	ldi	r24, 0x0C	; 12
    24e6:	df 01       	movw	r26, r30
    24e8:	1d 92       	st	X+, r1
    24ea:	8a 95       	dec	r24
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    24ee:	df 01       	movw	r26, r30
    24f0:	1c 97       	sbiw	r26, 0x0c	; 12
    24f2:	78 97       	sbiw	r30, 0x18	; 24
    24f4:	8c e0       	ldi	r24, 0x0C	; 12
    24f6:	01 90       	ld	r0, Z+
    24f8:	0d 92       	st	X+, r0
    24fa:	81 50       	subi	r24, 0x01	; 1
    24fc:	e1 f7       	brne	.-8      	; 0x24f6 <gc_execute_block+0x2ce>
    24fe:	c6 c0       	rjmp	.+396    	; 0x268c <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2500:	c0 90 02 21 	lds	r12, 0x2102
    2504:	d0 90 03 21 	lds	r13, 0x2103
    2508:	e0 90 04 21 	lds	r14, 0x2104
    250c:	f0 90 05 21 	lds	r15, 0x2105
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2510:	80 91 0d 21 	lds	r24, 0x210D
    2514:	88 23       	and	r24, r24
    2516:	19 f4       	brne	.+6      	; 0x251e <gc_execute_block+0x2f6>
    2518:	a7 01       	movw	r20, r14
    251a:	96 01       	movw	r18, r12
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <gc_execute_block+0x30a>
    251e:	c7 01       	movw	r24, r14
    2520:	b6 01       	movw	r22, r12
    2522:	25 e8       	ldi	r18, 0x85	; 133
    2524:	32 e4       	ldi	r19, 0x42	; 66
    2526:	41 e2       	ldi	r20, 0x21	; 33
    2528:	5d e3       	ldi	r21, 0x3D	; 61
    252a:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2532:	20 93 21 21 	sts	0x2121, r18
    2536:	30 93 22 21 	sts	0x2122, r19
    253a:	40 93 23 21 	sts	0x2123, r20
    253e:	50 93 24 21 	sts	0x2124, r21
		switch(gc.letter) {
    2542:	00 91 01 21 	lds	r16, 0x2101
    2546:	00 35       	cpi	r16, 0x50	; 80
    2548:	09 f4       	brne	.+2      	; 0x254c <gc_execute_block+0x324>
    254a:	47 c0       	rjmp	.+142    	; 0x25da <gc_execute_block+0x3b2>
    254c:	01 35       	cpi	r16, 0x51	; 81
    254e:	58 f4       	brcc	.+22     	; 0x2566 <gc_execute_block+0x33e>
    2550:	06 34       	cpi	r16, 0x46	; 70
    2552:	c1 f0       	breq	.+48     	; 0x2584 <gc_execute_block+0x35c>
    2554:	06 34       	cpi	r16, 0x46	; 70
    2556:	08 f4       	brcc	.+2      	; 0x255a <gc_execute_block+0x332>
    2558:	9f c0       	rjmp	.+318    	; 0x2698 <gc_execute_block+0x470>
    255a:	80 2f       	mov	r24, r16
    255c:	89 54       	subi	r24, 0x49	; 73
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	08 f0       	brcs	.+2      	; 0x2564 <gc_execute_block+0x33c>
    2562:	9a c0       	rjmp	.+308    	; 0x2698 <gc_execute_block+0x470>
    2564:	2d c0       	rjmp	.+90     	; 0x25c0 <gc_execute_block+0x398>
    2566:	03 35       	cpi	r16, 0x53	; 83
    2568:	09 f4       	brne	.+2      	; 0x256c <gc_execute_block+0x344>
    256a:	4b c0       	rjmp	.+150    	; 0x2602 <gc_execute_block+0x3da>
    256c:	04 35       	cpi	r16, 0x54	; 84
    256e:	20 f4       	brcc	.+8      	; 0x2578 <gc_execute_block+0x350>
    2570:	02 35       	cpi	r16, 0x52	; 82
    2572:	09 f0       	breq	.+2      	; 0x2576 <gc_execute_block+0x34e>
    2574:	91 c0       	rjmp	.+290    	; 0x2698 <gc_execute_block+0x470>
    2576:	3a c0       	rjmp	.+116    	; 0x25ec <gc_execute_block+0x3c4>
    2578:	80 2f       	mov	r24, r16
    257a:	88 55       	subi	r24, 0x58	; 88
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	08 f0       	brcs	.+2      	; 0x2582 <gc_execute_block+0x35a>
    2580:	8b c0       	rjmp	.+278    	; 0x2698 <gc_execute_block+0x470>
    2582:	48 c0       	rjmp	.+144    	; 0x2614 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2584:	80 91 0c 21 	lds	r24, 0x210C
    2588:	88 23       	and	r24, r24
    258a:	49 f0       	breq	.+18     	; 0x259e <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    258c:	20 93 25 21 	sts	0x2125, r18
    2590:	30 93 26 21 	sts	0x2126, r19
    2594:	40 93 27 21 	sts	0x2127, r20
    2598:	50 93 28 21 	sts	0x2128, r21
    259c:	7d c0       	rjmp	.+250    	; 0x2698 <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    259e:	ca 01       	movw	r24, r20
    25a0:	b9 01       	movw	r22, r18
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e7       	ldi	r20, 0x70	; 112
    25a8:	52 e4       	ldi	r21, 0x42	; 66
    25aa:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    25ae:	60 93 19 21 	sts	0x2119, r22
    25b2:	70 93 1a 21 	sts	0x211A, r23
    25b6:	80 93 1b 21 	sts	0x211B, r24
    25ba:	90 93 1c 21 	sts	0x211C, r25
    25be:	6c c0       	rjmp	.+216    	; 0x2698 <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25c0:	e0 2f       	mov	r30, r16
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	e3 5e       	subi	r30, 0xE3	; 227
    25ce:	ff 4d       	sbci	r31, 0xDF	; 223
    25d0:	20 83       	st	Z, r18
    25d2:	31 83       	std	Z+1, r19	; 0x01
    25d4:	42 83       	std	Z+2, r20	; 0x02
    25d6:	53 83       	std	Z+3, r21	; 0x03
    25d8:	5f c0       	rjmp	.+190    	; 0x2698 <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25da:	c0 92 11 21 	sts	0x2111, r12
    25de:	d0 92 12 21 	sts	0x2112, r13
    25e2:	e0 92 13 21 	sts	0x2113, r14
    25e6:	f0 92 14 21 	sts	0x2114, r15
    25ea:	56 c0       	rjmp	.+172    	; 0x2698 <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    25ec:	20 93 15 21 	sts	0x2115, r18
    25f0:	30 93 16 21 	sts	0x2116, r19
    25f4:	40 93 17 21 	sts	0x2117, r20
    25f8:	50 93 18 21 	sts	0x2118, r21
    25fc:	70 92 0f 21 	sts	0x210F, r7
    2600:	4b c0       	rjmp	.+150    	; 0x2698 <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    2602:	c7 01       	movw	r24, r14
    2604:	b6 01       	movw	r22, r12
    2606:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    260a:	60 93 52 21 	sts	0x2152, r22
    260e:	70 93 53 21 	sts	0x2153, r23
    2612:	42 c0       	rjmp	.+132    	; 0x2698 <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2614:	80 91 10 21 	lds	r24, 0x2110
    2618:	88 23       	and	r24, r24
    261a:	69 f0       	breq	.+26     	; 0x2636 <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    261c:	e0 2f       	mov	r30, r16
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	ee 0f       	add	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	e0 56       	subi	r30, 0x60	; 96
    262a:	f0 4e       	sbci	r31, 0xE0	; 224
    262c:	21 a7       	std	Z+41, r18	; 0x29
    262e:	32 a7       	std	Z+42, r19	; 0x2a
    2630:	43 a7       	std	Z+43, r20	; 0x2b
    2632:	54 a7       	std	Z+44, r21	; 0x2c
    2634:	31 c0       	rjmp	.+98     	; 0x2698 <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2636:	80 91 0e 21 	lds	r24, 0x210E
    263a:	88 23       	and	r24, r24
    263c:	21 f4       	brne	.+8      	; 0x2646 <gc_execute_block+0x41e>
    263e:	80 91 54 21 	lds	r24, 0x2154
    2642:	88 23       	and	r24, r24
    2644:	69 f0       	breq	.+26     	; 0x2660 <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2646:	e0 2f       	mov	r30, r16
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	e0 56       	subi	r30, 0x60	; 96
    2654:	f0 4e       	sbci	r31, 0xE0	; 224
    2656:	25 ab       	std	Z+53, r18	; 0x35
    2658:	36 ab       	std	Z+54, r19	; 0x36
    265a:	47 ab       	std	Z+55, r20	; 0x37
    265c:	50 af       	std	Z+56, r21	; 0x38
    265e:	1c c0       	rjmp	.+56     	; 0x2698 <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	00 0f       	add	r16, r16
    2664:	11 1f       	adc	r17, r17
    2666:	00 0f       	add	r16, r16
    2668:	11 1f       	adc	r17, r17
    266a:	00 56       	subi	r16, 0x60	; 96
    266c:	10 4e       	sbci	r17, 0xE0	; 224
    266e:	f8 01       	movw	r30, r16
    2670:	65 a9       	ldd	r22, Z+53	; 0x35
    2672:	76 a9       	ldd	r23, Z+54	; 0x36
    2674:	87 a9       	ldd	r24, Z+55	; 0x37
    2676:	90 ad       	ldd	r25, Z+56	; 0x38
    2678:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    267c:	d8 01       	movw	r26, r16
    267e:	d5 96       	adiw	r26, 0x35	; 53
    2680:	6d 93       	st	X+, r22
    2682:	7d 93       	st	X+, r23
    2684:	8d 93       	st	X+, r24
    2686:	9c 93       	st	X, r25
    2688:	d8 97       	sbiw	r26, 0x38	; 56
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    268c:	5e 01       	movw	r10, r28
    268e:	08 94       	sec
    2690:	a1 1c       	adc	r10, r1
    2692:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2694:	77 24       	eor	r7, r7
    2696:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	91 e2       	ldi	r25, 0x21	; 33
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	71 e2       	ldi	r23, 0x21	; 33
    26a0:	46 e0       	ldi	r20, 0x06	; 6
    26a2:	51 e2       	ldi	r21, 0x21	; 33
    26a4:	94 01       	movw	r18, r8
    26a6:	85 01       	movw	r16, r10
    26a8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_gc_next_statement>
    26ac:	89 2b       	or	r24, r25
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <gc_execute_block+0x48a>
    26b0:	27 cf       	rjmp	.-434    	; 0x2500 <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26b2:	80 91 00 21 	lds	r24, 0x2100
    26b6:	88 23       	and	r24, r24
    26b8:	09 f0       	breq	.+2      	; 0x26bc <gc_execute_block+0x494>
    26ba:	a9 c2       	rjmp	.+1362   	; 0x2c0e <gc_execute_block+0x9e6>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26bc:	80 91 51 21 	lds	r24, 0x2151
    26c0:	88 23       	and	r24, r24
    26c2:	71 f0       	breq	.+28     	; 0x26e0 <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26c4:	40 91 52 21 	lds	r20, 0x2152
    26c8:	50 91 53 21 	lds	r21, 0x2153
    26cc:	66 27       	eor	r22, r22
    26ce:	57 fd       	sbrc	r21, 7
    26d0:	60 95       	com	r22
    26d2:	76 2f       	mov	r23, r22
    26d4:	99 27       	eor	r25, r25
    26d6:	87 fd       	sbrc	r24, 7
    26d8:	90 95       	com	r25
    26da:	0e 94 46 24 	call	0x488c	; 0x488c <spindle_run>
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26e0:	0e 94 56 24 	call	0x48ac	; 0x48ac <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    26e4:	80 91 55 21 	lds	r24, 0x2155
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	49 f0       	breq	.+18     	; 0x26fe <gc_execute_block+0x4d6>
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	21 f0       	breq	.+8      	; 0x26f8 <gc_execute_block+0x4d0>
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <gc_execute_block+0x4ce>
    26f4:	7d c2       	rjmp	.+1274   	; 0x2bf0 <gc_execute_block+0x9c8>
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    26f8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <mc_go_home>
    26fc:	77 c2       	rjmp	.+1262   	; 0x2bec <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    26fe:	60 91 11 21 	lds	r22, 0x2111
    2702:	70 91 12 21 	lds	r23, 0x2112
    2706:	80 91 13 21 	lds	r24, 0x2113
    270a:	90 91 14 21 	lds	r25, 0x2114
    270e:	0e 94 31 1c 	call	0x3862	; 0x3862 <mc_dwell>
    2712:	6c c2       	rjmp	.+1240   	; 0x2bec <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2714:	b0 91 0b 21 	lds	r27, 0x210B
    2718:	b8 8f       	std	Y+24, r27	; 0x18
    271a:	b2 30       	cpi	r27, 0x02	; 2
    271c:	20 f0       	brcs	.+8      	; 0x2726 <gc_execute_block+0x4fe>
    271e:	b4 30       	cpi	r27, 0x04	; 4
    2720:	08 f0       	brcs	.+2      	; 0x2724 <gc_execute_block+0x4fc>
    2722:	66 c2       	rjmp	.+1228   	; 0x2bf0 <gc_execute_block+0x9c8>
    2724:	31 c0       	rjmp	.+98     	; 0x2788 <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2726:	60 91 35 21 	lds	r22, 0x2135
    272a:	70 91 36 21 	lds	r23, 0x2136
    272e:	80 91 37 21 	lds	r24, 0x2137
    2732:	90 91 38 21 	lds	r25, 0x2138
    2736:	20 91 39 21 	lds	r18, 0x2139
    273a:	30 91 3a 21 	lds	r19, 0x213A
    273e:	40 91 3b 21 	lds	r20, 0x213B
    2742:	50 91 3c 21 	lds	r21, 0x213C
    2746:	e0 90 3d 21 	lds	r14, 0x213D
    274a:	f0 90 3e 21 	lds	r15, 0x213E
    274e:	00 91 3f 21 	lds	r16, 0x213F
    2752:	10 91 40 21 	lds	r17, 0x2140
    2756:	80 90 0c 21 	lds	r8, 0x210C
    275a:	88 20       	and	r8, r8
    275c:	49 f0       	breq	.+18     	; 0x2770 <gc_execute_block+0x548>
    275e:	a0 90 25 21 	lds	r10, 0x2125
    2762:	b0 90 26 21 	lds	r11, 0x2126
    2766:	c0 90 27 21 	lds	r12, 0x2127
    276a:	d0 90 28 21 	lds	r13, 0x2128
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <gc_execute_block+0x558>
    2770:	a0 90 19 21 	lds	r10, 0x2119
    2774:	b0 90 1a 21 	lds	r11, 0x211A
    2778:	c0 90 1b 21 	lds	r12, 0x211B
    277c:	d0 90 1c 21 	lds	r13, 0x211C
    2780:	99 24       	eor	r9, r9
    2782:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <mc_line>
    2786:	32 c2       	rjmp	.+1124   	; 0x2bec <gc_execute_block+0x9c4>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2788:	80 91 0f 21 	lds	r24, 0x210F
    278c:	88 23       	and	r24, r24
    278e:	09 f4       	brne	.+2      	; 0x2792 <gc_execute_block+0x56a>
    2790:	ec c0       	rjmp	.+472    	; 0x296a <gc_execute_block+0x742>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2792:	e0 91 4d 21 	lds	r30, 0x214D
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	e0 50       	subi	r30, 0x00	; 0
    27a2:	ff 4d       	sbci	r31, 0xDF	; 223
    27a4:	65 a9       	ldd	r22, Z+53	; 0x35
    27a6:	76 a9       	ldd	r23, Z+54	; 0x36
    27a8:	87 a9       	ldd	r24, Z+55	; 0x37
    27aa:	90 ad       	ldd	r25, Z+56	; 0x38
    27ac:	21 a5       	ldd	r18, Z+41	; 0x29
    27ae:	32 a5       	ldd	r19, Z+42	; 0x2a
    27b0:	43 a5       	ldd	r20, Z+43	; 0x2b
    27b2:	54 a5       	ldd	r21, Z+44	; 0x2c
    27b4:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    27b8:	6f 83       	std	Y+7, r22	; 0x07
    27ba:	78 87       	std	Y+8, r23	; 0x08
    27bc:	89 87       	std	Y+9, r24	; 0x09
    27be:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27c0:	e0 91 4e 21 	lds	r30, 0x214E
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	e0 50       	subi	r30, 0x00	; 0
    27d0:	ff 4d       	sbci	r31, 0xDF	; 223
    27d2:	65 a9       	ldd	r22, Z+53	; 0x35
    27d4:	76 a9       	ldd	r23, Z+54	; 0x36
    27d6:	87 a9       	ldd	r24, Z+55	; 0x37
    27d8:	90 ad       	ldd	r25, Z+56	; 0x38
    27da:	21 a5       	ldd	r18, Z+41	; 0x29
    27dc:	32 a5       	ldd	r19, Z+42	; 0x2a
    27de:	43 a5       	ldd	r20, Z+43	; 0x2b
    27e0:	54 a5       	ldd	r21, Z+44	; 0x2c
    27e2:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    27e6:	1b 01       	movw	r2, r22
    27e8:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    27ea:	10 92 41 21 	sts	0x2141, r1
    27ee:	10 92 42 21 	sts	0x2142, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    27f2:	60 90 15 21 	lds	r6, 0x2115
    27f6:	70 90 16 21 	lds	r7, 0x2116
    27fa:	80 90 17 21 	lds	r8, 0x2117
    27fe:	90 90 18 21 	lds	r9, 0x2118
    2802:	c4 01       	movw	r24, r8
    2804:	b3 01       	movw	r22, r6
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	50 e4       	ldi	r21, 0x40	; 64
    280e:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    2812:	a4 01       	movw	r20, r8
    2814:	93 01       	movw	r18, r6
    2816:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    281a:	5b 01       	movw	r10, r22
    281c:	6c 01       	movw	r12, r24
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	9b 01       	movw	r18, r22
    2828:	ac 01       	movw	r20, r24
    282a:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    282e:	7b 01       	movw	r14, r22
    2830:	8c 01       	movw	r16, r24
    2832:	c2 01       	movw	r24, r4
    2834:	b1 01       	movw	r22, r2
    2836:	a2 01       	movw	r20, r4
    2838:	91 01       	movw	r18, r2
    283a:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	c8 01       	movw	r24, r16
    2844:	b7 01       	movw	r22, r14
    2846:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	c6 01       	movw	r24, r12
    2850:	b5 01       	movw	r22, r10
    2852:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2856:	0e 94 0f 44 	call	0x881e	; 0x881e <sqrt>
    285a:	7b 01       	movw	r14, r22
    285c:	8c 01       	movw	r16, r24
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	a2 01       	movw	r20, r4
    2868:	91 01       	movw	r18, r2
    286a:	0e 94 dd 42 	call	0x85ba	; 0x85ba <hypot>
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	17 fb       	bst	r17, 7
    2874:	10 95       	com	r17
    2876:	17 f9       	bld	r17, 7
    2878:	10 95       	com	r17
    287a:	c8 01       	movw	r24, r16
    287c:	b7 01       	movw	r22, r14
    287e:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2882:	7b 01       	movw	r14, r22
    2884:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2886:	a8 01       	movw	r20, r16
    2888:	97 01       	movw	r18, r14
    288a:	0e 94 57 44 	call	0x88ae	; 0x88ae <__unordsf2>
    288e:	88 23       	and	r24, r24
    2890:	21 f0       	breq	.+8      	; 0x289a <gc_execute_block+0x672>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2892:	80 e1       	ldi	r24, 0x10	; 16
    2894:	80 93 00 21 	sts	0x2100, r24
    2898:	65 c0       	rjmp	.+202    	; 0x2964 <gc_execute_block+0x73c>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    289a:	e8 8d       	ldd	r30, Y+24	; 0x18
    289c:	e3 30       	cpi	r30, 0x03	; 3
    289e:	21 f4       	brne	.+8      	; 0x28a8 <gc_execute_block+0x680>
		h_x2_div_d = -h_x2_div_d;
    28a0:	17 fb       	bst	r17, 7
    28a2:	10 95       	com	r17
    28a4:	17 f9       	bld	r17, 7
    28a6:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28a8:	c4 01       	movw	r24, r8
    28aa:	b3 01       	movw	r22, r6
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <__cmpsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	24 f4       	brge	.+8      	; 0x28c4 <gc_execute_block+0x69c>
		h_x2_div_d = -h_x2_div_d; 
    28bc:	17 fb       	bst	r17, 7
    28be:	10 95       	com	r17
    28c0:	17 f9       	bld	r17, 7
    28c2:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28c4:	80 91 4d 21 	lds	r24, 0x214D
    28c8:	c8 2e       	mov	r12, r24
    28ca:	dd 24       	eor	r13, r13
    28cc:	cc 0c       	add	r12, r12
    28ce:	dd 1c       	adc	r13, r13
    28d0:	cc 0c       	add	r12, r12
    28d2:	dd 1c       	adc	r13, r13
    28d4:	21 e4       	ldi	r18, 0x41	; 65
    28d6:	31 e2       	ldi	r19, 0x21	; 33
    28d8:	c2 0e       	add	r12, r18
    28da:	d3 1e       	adc	r13, r19
    28dc:	c2 01       	movw	r24, r4
    28de:	b1 01       	movw	r22, r2
    28e0:	a8 01       	movw	r20, r16
    28e2:	97 01       	movw	r18, r14
    28e4:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    2904:	d6 01       	movw	r26, r12
    2906:	6d 93       	st	X+, r22
    2908:	7d 93       	st	X+, r23
    290a:	8d 93       	st	X+, r24
    290c:	9c 93       	st	X, r25
    290e:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2910:	80 91 4e 21 	lds	r24, 0x214E
    2914:	c8 2e       	mov	r12, r24
    2916:	dd 24       	eor	r13, r13
    2918:	cc 0c       	add	r12, r12
    291a:	dd 1c       	adc	r13, r13
    291c:	cc 0c       	add	r12, r12
    291e:	dd 1c       	adc	r13, r13
    2920:	e1 e4       	ldi	r30, 0x41	; 65
    2922:	f1 e2       	ldi	r31, 0x21	; 33
    2924:	ce 0e       	add	r12, r30
    2926:	df 1e       	adc	r13, r31
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	a8 01       	movw	r20, r16
    2932:	97 01       	movw	r18, r14
    2934:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
    293c:	c2 01       	movw	r24, r4
    293e:	b1 01       	movw	r22, r2
    2940:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    2950:	d6 01       	movw	r26, r12
    2952:	6d 93       	st	X+, r22
    2954:	7d 93       	st	X+, r23
    2956:	8d 93       	st	X+, r24
    2958:	9c 93       	st	X, r25
    295a:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    295c:	80 91 00 21 	lds	r24, 0x2100
    2960:	88 23       	and	r24, r24
    2962:	19 f0       	breq	.+6      	; 0x296a <gc_execute_block+0x742>
			return (gc.status);
    2964:	80 91 00 21 	lds	r24, 0x2100
    2968:	41 c1       	rjmp	.+642    	; 0x2bec <gc_execute_block+0x9c4>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    296a:	e0 91 4d 21 	lds	r30, 0x214D
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	ef 5b       	subi	r30, 0xBF	; 191
    297a:	fe 4d       	sbci	r31, 0xDE	; 222
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	90 58       	subi	r25, 0x80	; 128
    2986:	e0 91 4e 21 	lds	r30, 0x214E
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	ef 5b       	subi	r30, 0xBF	; 191
    2996:	fe 4d       	sbci	r31, 0xDE	; 222
    2998:	20 81       	ld	r18, Z
    299a:	31 81       	ldd	r19, Z+1	; 0x01
    299c:	42 81       	ldd	r20, Z+2	; 0x02
    299e:	53 81       	ldd	r21, Z+3	; 0x03
    29a0:	50 58       	subi	r21, 0x80	; 128
    29a2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <theta>
    29a6:	6f 87       	std	Y+15, r22	; 0x0f
    29a8:	78 8b       	std	Y+16, r23	; 0x10
    29aa:	89 8b       	std	Y+17, r24	; 0x11
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	0e 94 57 44 	call	0x88ae	; 0x88ae <__unordsf2>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <gc_execute_block+0x794>
    29ba:	54 c0       	rjmp	.+168    	; 0x2a64 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29bc:	e0 91 4d 21 	lds	r30, 0x214D
    29c0:	0e 2f       	mov	r16, r30
    29c2:	10 e0       	ldi	r17, 0x00	; 0
    29c4:	e0 91 4e 21 	lds	r30, 0x214E
    29c8:	ce 2e       	mov	r12, r30
    29ca:	dd 24       	eor	r13, r13
    29cc:	00 0f       	add	r16, r16
    29ce:	11 1f       	adc	r17, r17
    29d0:	00 0f       	add	r16, r16
    29d2:	11 1f       	adc	r17, r17
    29d4:	00 50       	subi	r16, 0x00	; 0
    29d6:	1f 4d       	sbci	r17, 0xDF	; 223
    29d8:	f8 01       	movw	r30, r16
    29da:	ef 5b       	subi	r30, 0xBF	; 191
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	d8 01       	movw	r26, r16
    29e0:	d5 96       	adiw	r26, 0x35	; 53
    29e2:	6d 91       	ld	r22, X+
    29e4:	7d 91       	ld	r23, X+
    29e6:	8d 91       	ld	r24, X+
    29e8:	9c 91       	ld	r25, X
    29ea:	d8 97       	sbiw	r26, 0x38	; 56
    29ec:	20 81       	ld	r18, Z
    29ee:	31 81       	ldd	r19, Z+1	; 0x01
    29f0:	42 81       	ldd	r20, Z+2	; 0x02
    29f2:	53 81       	ldd	r21, Z+3	; 0x03
    29f4:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    29f8:	f8 01       	movw	r30, r16
    29fa:	21 a5       	ldd	r18, Z+41	; 0x29
    29fc:	32 a5       	ldd	r19, Z+42	; 0x2a
    29fe:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a00:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a02:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2a06:	7b 01       	movw	r14, r22
    2a08:	8c 01       	movw	r16, r24
    2a0a:	cc 0c       	add	r12, r12
    2a0c:	dd 1c       	adc	r13, r13
    2a0e:	cc 0c       	add	r12, r12
    2a10:	dd 1c       	adc	r13, r13
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	31 e2       	ldi	r19, 0x21	; 33
    2a16:	c2 0e       	add	r12, r18
    2a18:	d3 1e       	adc	r13, r19
    2a1a:	f6 01       	movw	r30, r12
    2a1c:	ef 5b       	subi	r30, 0xBF	; 191
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	d6 01       	movw	r26, r12
    2a22:	d5 96       	adiw	r26, 0x35	; 53
    2a24:	6d 91       	ld	r22, X+
    2a26:	7d 91       	ld	r23, X+
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	d8 97       	sbiw	r26, 0x38	; 56
    2a2e:	20 81       	ld	r18, Z
    2a30:	31 81       	ldd	r19, Z+1	; 0x01
    2a32:	42 81       	ldd	r20, Z+2	; 0x02
    2a34:	53 81       	ldd	r21, Z+3	; 0x03
    2a36:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	21 a5       	ldd	r18, Z+41	; 0x29
    2a3e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a40:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a42:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a44:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2a48:	9b 01       	movw	r18, r22
    2a4a:	ac 01       	movw	r20, r24
    2a4c:	c8 01       	movw	r24, r16
    2a4e:	b7 01       	movw	r22, r14
    2a50:	0e 94 d5 10 	call	0x21aa	; 0x21aa <theta>
    2a54:	7b 01       	movw	r14, r22
    2a56:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a58:	a8 01       	movw	r20, r16
    2a5a:	97 01       	movw	r18, r14
    2a5c:	0e 94 57 44 	call	0x88ae	; 0x88ae <__unordsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	19 f0       	breq	.+6      	; 0x2a6a <gc_execute_block+0x842>
		FAIL(TG_ARC_ERROR); 
    2a64:	82 e1       	ldi	r24, 0x12	; 18
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	c1 c0       	rjmp	.+386    	; 0x2bec <gc_execute_block+0x9c4>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	b7 01       	movw	r22, r14
    2a6e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a70:	38 89       	ldd	r19, Y+16	; 0x10
    2a72:	49 89       	ldd	r20, Y+17	; 0x11
    2a74:	5a 89       	ldd	r21, Y+18	; 0x12
    2a76:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <__cmpsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	54 f4       	brge	.+20     	; 0x2a92 <gc_execute_block+0x86a>
		theta_end += 2*M_PI;
    2a7e:	c8 01       	movw	r24, r16
    2a80:	b7 01       	movw	r22, r14
    2a82:	2b ed       	ldi	r18, 0xDB	; 219
    2a84:	3f e0       	ldi	r19, 0x0F	; 15
    2a86:	49 ec       	ldi	r20, 0xC9	; 201
    2a88:	50 e4       	ldi	r21, 0x40	; 64
    2a8a:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    2a8e:	7b 01       	movw	r14, r22
    2a90:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2a92:	c8 01       	movw	r24, r16
    2a94:	b7 01       	movw	r22, r14
    2a96:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a98:	38 89       	ldd	r19, Y+16	; 0x10
    2a9a:	49 89       	ldd	r20, Y+17	; 0x11
    2a9c:	5a 89       	ldd	r21, Y+18	; 0x12
    2a9e:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2aa2:	6b 87       	std	Y+11, r22	; 0x0b
    2aa4:	7c 87       	std	Y+12, r23	; 0x0c
    2aa6:	8d 87       	std	Y+13, r24	; 0x0d
    2aa8:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2aaa:	80 91 0b 21 	lds	r24, 0x210B
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	71 f4       	brne	.+28     	; 0x2ace <gc_execute_block+0x8a6>
		angular_travel = angular_travel - 2*M_PI;
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	2b ed       	ldi	r18, 0xDB	; 219
    2abc:	3f e0       	ldi	r19, 0x0F	; 15
    2abe:	49 ec       	ldi	r20, 0xC9	; 201
    2ac0:	50 e4       	ldi	r21, 0x40	; 64
    2ac2:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2ac6:	6b 87       	std	Y+11, r22	; 0x0b
    2ac8:	7c 87       	std	Y+12, r23	; 0x0c
    2aca:	8d 87       	std	Y+13, r24	; 0x0d
    2acc:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2ace:	80 91 4d 21 	lds	r24, 0x214D
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	2d 83       	std	Y+5, r18	; 0x05
    2ad8:	3e 83       	std	Y+6, r19	; 0x06
    2ada:	f9 01       	movw	r30, r18
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	ef 5b       	subi	r30, 0xBF	; 191
    2ae6:	fe 4d       	sbci	r31, 0xDE	; 222
    2ae8:	e0 80       	ld	r14, Z
    2aea:	f1 80       	ldd	r15, Z+1	; 0x01
    2aec:	02 81       	ldd	r16, Z+2	; 0x02
    2aee:	13 81       	ldd	r17, Z+3	; 0x03
    2af0:	80 91 4e 21 	lds	r24, 0x214E
    2af4:	a8 2f       	mov	r26, r24
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	ab 83       	std	Y+3, r26	; 0x03
    2afa:	bc 83       	std	Y+4, r27	; 0x04
    2afc:	fd 01       	movw	r30, r26
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	ee 0f       	add	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	ef 5b       	subi	r30, 0xBF	; 191
    2b08:	fe 4d       	sbci	r31, 0xDE	; 222
    2b0a:	20 81       	ld	r18, Z
    2b0c:	31 81       	ldd	r19, Z+1	; 0x01
    2b0e:	42 81       	ldd	r20, Z+2	; 0x02
    2b10:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b12:	80 91 4f 21 	lds	r24, 0x214F
    2b16:	28 2e       	mov	r2, r24
    2b18:	33 24       	eor	r3, r3
    2b1a:	f1 01       	movw	r30, r2
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	e0 50       	subi	r30, 0x00	; 0
    2b26:	ff 4d       	sbci	r31, 0xDF	; 223
    2b28:	85 a9       	ldd	r24, Z+53	; 0x35
    2b2a:	96 a9       	ldd	r25, Z+54	; 0x36
    2b2c:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b2e:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b30:	8c 8b       	std	Y+20, r24	; 0x14
    2b32:	9d 8b       	std	Y+21, r25	; 0x15
    2b34:	ae 8b       	std	Y+22, r26	; 0x16
    2b36:	bf 8b       	std	Y+23, r27	; 0x17
    2b38:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b3a:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b3c:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b3e:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b40:	90 91 0c 21 	lds	r25, 0x210C
    2b44:	9b 8b       	std	Y+19, r25	; 0x13
    2b46:	99 23       	and	r25, r25
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <gc_execute_block+0x934>
    2b4a:	40 90 25 21 	lds	r4, 0x2125
    2b4e:	50 90 26 21 	lds	r5, 0x2126
    2b52:	60 90 27 21 	lds	r6, 0x2127
    2b56:	70 90 28 21 	lds	r7, 0x2128
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <gc_execute_block+0x944>
    2b5c:	40 90 19 21 	lds	r4, 0x2119
    2b60:	50 90 1a 21 	lds	r5, 0x211A
    2b64:	60 90 1b 21 	lds	r6, 0x211B
    2b68:	70 90 1c 21 	lds	r7, 0x211C
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	b7 01       	movw	r22, r14
    2b70:	0e 94 dd 42 	call	0x85ba	; 0x85ba <hypot>
    2b74:	7b 01       	movw	r14, r22
    2b76:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b78:	ad b7       	in	r26, 0x3d	; 61
    2b7a:	be b7       	in	r27, 0x3e	; 62
    2b7c:	1a 97       	sbiw	r26, 0x0a	; 10
    2b7e:	ad bf       	out	0x3d, r26	; 61
    2b80:	be bf       	out	0x3e, r27	; 62
    2b82:	8d b6       	in	r8, 0x3d	; 61
    2b84:	9e b6       	in	r9, 0x3e	; 62
    2b86:	08 94       	sec
    2b88:	81 1c       	adc	r8, r1
    2b8a:	91 1c       	adc	r9, r1
    2b8c:	6c 89       	ldd	r22, Y+20	; 0x14
    2b8e:	7d 89       	ldd	r23, Y+21	; 0x15
    2b90:	8e 89       	ldd	r24, Y+22	; 0x16
    2b92:	9f 89       	ldd	r25, Y+23	; 0x17
    2b94:	a6 01       	movw	r20, r12
    2b96:	95 01       	movw	r18, r10
    2b98:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    2b9c:	5b 01       	movw	r10, r22
    2b9e:	6c 01       	movw	r12, r24
    2ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba4:	f4 01       	movw	r30, r8
    2ba6:	20 83       	st	Z, r18
    2ba8:	31 83       	std	Z+1, r19	; 0x01
    2baa:	22 82       	std	Z+2, r2	; 0x02
    2bac:	33 82       	std	Z+3, r3	; 0x03
    2bae:	d4 01       	movw	r26, r8
    2bb0:	14 96       	adiw	r26, 0x04	; 4
    2bb2:	4d 92       	st	X+, r4
    2bb4:	5d 92       	st	X+, r5
    2bb6:	6d 92       	st	X+, r6
    2bb8:	7c 92       	st	X, r7
    2bba:	17 97       	sbiw	r26, 0x07	; 7
    2bbc:	eb 89       	ldd	r30, Y+19	; 0x13
    2bbe:	18 96       	adiw	r26, 0x08	; 8
    2bc0:	ec 93       	st	X, r30
    2bc2:	18 97       	sbiw	r26, 0x08	; 8
    2bc4:	19 96       	adiw	r26, 0x09	; 9
    2bc6:	1c 92       	st	X, r1
    2bc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bca:	78 89       	ldd	r23, Y+16	; 0x10
    2bcc:	89 89       	ldd	r24, Y+17	; 0x11
    2bce:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bd4:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bd6:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bd8:	8d 80       	ldd	r8, Y+5	; 0x05
    2bda:	9e 80       	ldd	r9, Y+6	; 0x06
    2bdc:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2be0:	2d b7       	in	r18, 0x3d	; 61
    2be2:	3e b7       	in	r19, 0x3e	; 62
    2be4:	26 5f       	subi	r18, 0xF6	; 246
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	2d bf       	out	0x3d, r18	; 61
    2bea:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2bec:	80 93 00 21 	sts	0x2100, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2bf0:	80 91 00 21 	lds	r24, 0x2100
    2bf4:	88 23       	and	r24, r24
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <gc_execute_block+0x9d4>
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	49 f4       	brne	.+18     	; 0x2c0e <gc_execute_block+0x9e6>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2bfc:	e9 e2       	ldi	r30, 0x29	; 41
    2bfe:	f1 e2       	ldi	r31, 0x21	; 33
    2c00:	df 01       	movw	r26, r30
    2c02:	1c 96       	adiw	r26, 0x0c	; 12
    2c04:	9c e0       	ldi	r25, 0x0C	; 12
    2c06:	0d 90       	ld	r0, X+
    2c08:	01 92       	st	Z+, r0
    2c0a:	91 50       	subi	r25, 0x01	; 1
    2c0c:	e1 f7       	brne	.-8      	; 0x2c06 <gc_execute_block+0x9de>
	};
	return(gc.status);
}
    2c0e:	68 96       	adiw	r28, 0x18	; 24
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	bf 90       	pop	r11
    2c26:	af 90       	pop	r10
    2c28:	9f 90       	pop	r9
    2c2a:	8f 90       	pop	r8
    2c2c:	7f 90       	pop	r7
    2c2e:	6f 90       	pop	r6
    2c30:	5f 90       	pop	r5
    2c32:	4f 90       	pop	r4
    2c34:	3f 90       	pop	r3
    2c36:	2f 90       	pop	r2
    2c38:	08 95       	ret

00002c3a <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	ec 01       	movw	r28, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	10 c0       	rjmp	.+32     	; 0x2c66 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != 0) {			// NUL character
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c46:	e1 32       	cpi	r30, 0x21	; 33
    2c48:	70 f0       	brcs	.+28     	; 0x2c66 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c4a:	8e 2f       	mov	r24, r30
    2c4c:	81 56       	subi	r24, 0x61	; 97
    2c4e:	a9 2f       	mov	r26, r25
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	9f 5f       	subi	r25, 0xFF	; 255
    2c54:	8a 31       	cpi	r24, 0x1A	; 26
    2c56:	20 f4       	brcc	.+8      	; 0x2c60 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c58:	ac 0f       	add	r26, r28
    2c5a:	bd 1f       	adc	r27, r29
    2c5c:	e0 52       	subi	r30, 0x20	; 32
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c60:	ac 0f       	add	r26, r28
    2c62:	bd 1f       	adc	r27, r29
    2c64:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != 0) {			// NUL character
    2c66:	fe 01       	movw	r30, r28
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f1 1d       	adc	r31, r1
    2c6c:	e0 81       	ld	r30, Z
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	ee 23       	and	r30, r30
    2c72:	49 f7       	brne	.-46     	; 0x2c46 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c74:	fe 01       	movw	r30, r28
    2c76:	e9 0f       	add	r30, r25
    2c78:	f1 1d       	adc	r31, r1
    2c7a:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c7c:	88 81       	ld	r24, Y
    2c7e:	88 32       	cpi	r24, 0x28	; 40
    2c80:	61 f0       	breq	.+24     	; 0x2c9a <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c82:	81 35       	cpi	r24, 0x51	; 81
    2c84:	11 f4       	brne	.+4      	; 0x2c8a <gc_gcode_parser+0x50>
    2c86:	8b e0       	ldi	r24, 0x0B	; 11
    2c88:	09 c0       	rjmp	.+18     	; 0x2c9c <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2c8a:	8f 32       	cpi	r24, 0x2F	; 47
    2c8c:	31 f0       	breq	.+12     	; 0x2c9a <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c8e:	ce 01       	movw	r24, r28
    2c90:	0e 94 14 11 	call	0x2228	; 0x2228 <gc_execute_block>
    2c94:	80 93 00 21 	sts	0x2100, r24
    2c98:	01 c0       	rjmp	.+2      	; 0x2c9c <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	cb e8       	ldi	r28, 0x8B	; 139
    2cb4:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cb6:	68 81       	ld	r22, Y
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	88 27       	eor	r24, r24
    2cbc:	77 fd       	sbrc	r23, 7
    2cbe:	80 95       	com	r24
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    2cc6:	9b 01       	movw	r18, r22
    2cc8:	ac 01       	movw	r20, r24
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	84 eb       	ldi	r24, 0xB4	; 180
    2ce0:	93 e4       	ldi	r25, 0x43	; 67
    2ce2:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2ce6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ce8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cea:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cec:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cee:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2cf2:	6b 8b       	std	Y+19, r22	; 0x13
    2cf4:	7c 8b       	std	Y+20, r23	; 0x14
    2cf6:	8d 8b       	std	Y+21, r24	; 0x15
    2cf8:	9e 8b       	std	Y+22, r25	; 0x16
    2cfa:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2cfc:	82 e2       	ldi	r24, 0x22	; 34
    2cfe:	cb 3e       	cpi	r28, 0xEB	; 235
    2d00:	d8 07       	cpc	r29, r24
    2d02:	c9 f6       	brne	.-78     	; 0x2cb6 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d04:	00 91 8b 22 	lds	r16, 0x228B
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	b8 01       	movw	r22, r16
    2d0c:	88 27       	eor	r24, r24
    2d0e:	77 fd       	sbrc	r23, 7
    2d10:	80 95       	com	r24
    2d12:	98 2f       	mov	r25, r24
    2d14:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    2d18:	9b 01       	movw	r18, r22
    2d1a:	ac 01       	movw	r20, r24
    2d1c:	60 91 92 22 	lds	r22, 0x2292
    2d20:	70 91 93 22 	lds	r23, 0x2293
    2d24:	80 91 94 22 	lds	r24, 0x2294
    2d28:	90 91 95 22 	lds	r25, 0x2295
    2d2c:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	84 eb       	ldi	r24, 0xB4	; 180
    2d3a:	93 e4       	ldi	r25, 0x43	; 67
    2d3c:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2d40:	6b 01       	movw	r12, r22
    2d42:	7c 01       	movw	r14, r24
    2d44:	80 91 90 22 	lds	r24, 0x2290
    2d48:	90 91 91 22 	lds	r25, 0x2291
    2d4c:	08 9f       	mul	r16, r24
    2d4e:	b0 01       	movw	r22, r0
    2d50:	09 9f       	mul	r16, r25
    2d52:	70 0d       	add	r23, r0
    2d54:	18 9f       	mul	r17, r24
    2d56:	70 0d       	add	r23, r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 80 41 	call	0x8300	; 0x8300 <__floatunsisf>
    2d62:	a7 01       	movw	r20, r14
    2d64:	96 01       	movw	r18, r12
    2d66:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2d6a:	60 93 83 22 	sts	0x2283, r22
    2d6e:	70 93 84 22 	sts	0x2284, r23
    2d72:	80 93 85 22 	sts	0x2285, r24
    2d76:	90 93 86 22 	sts	0x2286, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d7a:	80 91 8e 22 	lds	r24, 0x228E
    2d7e:	90 91 8f 22 	lds	r25, 0x228F
    2d82:	08 9f       	mul	r16, r24
    2d84:	b0 01       	movw	r22, r0
    2d86:	09 9f       	mul	r16, r25
    2d88:	70 0d       	add	r23, r0
    2d8a:	18 9f       	mul	r17, r24
    2d8c:	70 0d       	add	r23, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 80 41 	call	0x8300	; 0x8300 <__floatunsisf>
    2d98:	a7 01       	movw	r20, r14
    2d9a:	96 01       	movw	r18, r12
    2d9c:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    2da0:	60 93 87 22 	sts	0x2287, r22
    2da4:	70 93 88 22 	sts	0x2288, r23
    2da8:	80 93 89 22 	sts	0x2289, r24
    2dac:	90 93 8a 22 	sts	0x228A, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	08 95       	ret

00002dc2 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dc2:	ed e7       	ldi	r30, 0x7D	; 125
    2dc4:	f2 e2       	ldi	r31, 0x22	; 34
    2dc6:	84 e6       	ldi	r24, 0x64	; 100
    2dc8:	80 93 7d 22 	sts	0x227D, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2dcc:	8a e0       	ldi	r24, 0x0A	; 10
    2dce:	97 ed       	ldi	r25, 0xD7	; 215
    2dd0:	a3 e2       	ldi	r26, 0x23	; 35
    2dd2:	bc e3       	ldi	r27, 0x3C	; 60
    2dd4:	80 93 7f 22 	sts	0x227F, r24
    2dd8:	90 93 80 22 	sts	0x2280, r25
    2ddc:	a0 93 81 22 	sts	0x2281, r26
    2de0:	b0 93 82 22 	sts	0x2282, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2de4:	8c ed       	ldi	r24, 0xDC	; 220
    2de6:	95 e0       	ldi	r25, 0x05	; 5
    2de8:	80 93 8e 22 	sts	0x228E, r24
    2dec:	90 93 8f 22 	sts	0x228F, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2df0:	80 93 a6 22 	sts	0x22A6, r24
    2df4:	90 93 a7 22 	sts	0x22A7, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2df8:	80 93 be 22 	sts	0x22BE, r24
    2dfc:	90 93 bf 22 	sts	0x22BF, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e00:	80 93 d6 22 	sts	0x22D6, r24
    2e04:	90 93 d7 22 	sts	0x22D7, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e08:	80 93 90 22 	sts	0x2290, r24
    2e0c:	90 93 91 22 	sts	0x2291, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e10:	80 93 a8 22 	sts	0x22A8, r24
    2e14:	90 93 a9 22 	sts	0x22A9, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e18:	80 93 c0 22 	sts	0x22C0, r24
    2e1c:	90 93 c1 22 	sts	0x22C1, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e20:	80 93 d8 22 	sts	0x22D8, r24
    2e24:	90 93 d9 22 	sts	0x22D9, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e28:	86 e6       	ldi	r24, 0x66	; 102
    2e2a:	96 e6       	ldi	r25, 0x66	; 102
    2e2c:	a6 ee       	ldi	r26, 0xE6	; 230
    2e2e:	bf e3       	ldi	r27, 0x3F	; 63
    2e30:	80 93 92 22 	sts	0x2292, r24
    2e34:	90 93 93 22 	sts	0x2293, r25
    2e38:	a0 93 94 22 	sts	0x2294, r26
    2e3c:	b0 93 95 22 	sts	0x2295, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e40:	80 93 aa 22 	sts	0x22AA, r24
    2e44:	90 93 ab 22 	sts	0x22AB, r25
    2e48:	a0 93 ac 22 	sts	0x22AC, r26
    2e4c:	b0 93 ad 22 	sts	0x22AD, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e50:	80 93 c2 22 	sts	0x22C2, r24
    2e54:	90 93 c3 22 	sts	0x22C3, r25
    2e58:	a0 93 c4 22 	sts	0x22C4, r26
    2e5c:	b0 93 c5 22 	sts	0x22C5, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e60:	80 93 da 22 	sts	0x22DA, r24
    2e64:	90 93 db 22 	sts	0x22DB, r25
    2e68:	a0 93 dc 22 	sts	0x22DC, r26
    2e6c:	b0 93 dd 22 	sts	0x22DD, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e70:	8c e5       	ldi	r24, 0x5C	; 92
    2e72:	9f e8       	ldi	r25, 0x8F	; 143
    2e74:	a2 ea       	ldi	r26, 0xA2	; 162
    2e76:	bf e3       	ldi	r27, 0x3F	; 63
    2e78:	80 93 96 22 	sts	0x2296, r24
    2e7c:	90 93 97 22 	sts	0x2297, r25
    2e80:	a0 93 98 22 	sts	0x2298, r26
    2e84:	b0 93 99 22 	sts	0x2299, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e88:	80 93 ae 22 	sts	0x22AE, r24
    2e8c:	90 93 af 22 	sts	0x22AF, r25
    2e90:	a0 93 b0 22 	sts	0x22B0, r26
    2e94:	b0 93 b1 22 	sts	0x22B1, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e98:	80 93 c6 22 	sts	0x22C6, r24
    2e9c:	90 93 c7 22 	sts	0x22C7, r25
    2ea0:	a0 93 c8 22 	sts	0x22C8, r26
    2ea4:	b0 93 c9 22 	sts	0x22C9, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ea8:	80 93 de 22 	sts	0x22DE, r24
    2eac:	90 93 df 22 	sts	0x22DF, r25
    2eb0:	a0 93 e0 22 	sts	0x22E0, r26
    2eb4:	b0 93 e1 22 	sts	0x22E1, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a8 ec       	ldi	r26, 0xC8	; 200
    2ebe:	b3 e4       	ldi	r27, 0x43	; 67
    2ec0:	80 93 9a 22 	sts	0x229A, r24
    2ec4:	90 93 9b 22 	sts	0x229B, r25
    2ec8:	a0 93 9c 22 	sts	0x229C, r26
    2ecc:	b0 93 9d 22 	sts	0x229D, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ed0:	80 93 b2 22 	sts	0x22B2, r24
    2ed4:	90 93 b3 22 	sts	0x22B3, r25
    2ed8:	a0 93 b4 22 	sts	0x22B4, r26
    2edc:	b0 93 b5 22 	sts	0x22B5, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a6 e9       	ldi	r26, 0x96	; 150
    2ee6:	b3 e4       	ldi	r27, 0x43	; 67
    2ee8:	80 93 ca 22 	sts	0x22CA, r24
    2eec:	90 93 cb 22 	sts	0x22CB, r25
    2ef0:	a0 93 cc 22 	sts	0x22CC, r26
    2ef4:	b0 93 cd 22 	sts	0x22CD, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a0 e8       	ldi	r26, 0x80	; 128
    2efe:	bf eb       	ldi	r27, 0xBF	; 191
    2f00:	80 93 e2 22 	sts	0x22E2, r24
    2f04:	90 93 e3 22 	sts	0x22E3, r25
    2f08:	a0 93 e4 22 	sts	0x22E4, r26
    2f0c:	b0 93 e5 22 	sts	0x22E5, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f10:	88 e0       	ldi	r24, 0x08	; 8
    2f12:	80 93 8b 22 	sts	0x228B, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f16:	80 93 a3 22 	sts	0x22A3, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f1a:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f1c:	80 93 d3 22 	sts	0x22D3, r24

	cfg.a[X].polarity = X_POLARITY;
    2f20:	10 92 8d 22 	sts	0x228D, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	80 93 a5 22 	sts	0x22A5, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f2a:	10 92 bd 22 	sts	0x22BD, r1
	cfg.a[A].polarity = A_POLARITY;
    2f2e:	10 92 d5 22 	sts	0x22D5, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f32:	80 93 a2 22 	sts	0x22A2, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f36:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f38:	80 93 d2 22 	sts	0x22D2, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f3c:	10 92 ea 22 	sts	0x22EA, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f40:	80 93 8c 22 	sts	0x228C, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f44:	80 93 a4 22 	sts	0x22A4, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f48:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f4a:	80 93 d4 22 	sts	0x22D4, r24

	_cfg_computed();		// generate computed values from the above
    2f4e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_cfg_computed>
}
    2f52:	08 95       	ret

00002f54 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f54:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <cfg_reset>
}
    2f58:	08 95       	ret

00002f5a <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f5a:	8c 30       	cpi	r24, 0x0C	; 12
    2f5c:	31 f1       	breq	.+76     	; 0x2faa <_cfg_print_status+0x50>
    2f5e:	8d 30       	cpi	r24, 0x0D	; 13
    2f60:	30 f4       	brcc	.+12     	; 0x2f6e <_cfg_print_status+0x14>
    2f62:	82 30       	cpi	r24, 0x02	; 2
    2f64:	59 f0       	breq	.+22     	; 0x2f7c <_cfg_print_status+0x22>
    2f66:	8b 30       	cpi	r24, 0x0B	; 11
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <_cfg_print_status+0x12>
    2f6a:	45 c0       	rjmp	.+138    	; 0x2ff6 <_cfg_print_status+0x9c>
    2f6c:	0c c0       	rjmp	.+24     	; 0x2f86 <_cfg_print_status+0x2c>
    2f6e:	80 31       	cpi	r24, 0x10	; 16
    2f70:	09 f1       	breq	.+66     	; 0x2fb4 <_cfg_print_status+0x5a>
    2f72:	82 31       	cpi	r24, 0x12	; 18
    2f74:	81 f1       	breq	.+96     	; 0x2fd6 <_cfg_print_status+0x7c>
    2f76:	8f 30       	cpi	r24, 0x0F	; 15
    2f78:	f1 f5       	brne	.+124    	; 0x2ff6 <_cfg_print_status+0x9c>
    2f7a:	12 c0       	rjmp	.+36     	; 0x2fa0 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <_cfg_print_status+0x24>
    2f7e:	0f 92       	push	r0
    2f80:	85 e1       	ldi	r24, 0x15	; 21
    2f82:	94 e0       	ldi	r25, 0x04	; 4
    2f84:	1b c0       	rjmp	.+54     	; 0x2fbc <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f86:	0f 92       	push	r0
    2f88:	0f 92       	push	r0
    2f8a:	8f ef       	ldi	r24, 0xFF	; 255
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	ed b7       	in	r30, 0x3d	; 61
    2f90:	fe b7       	in	r31, 0x3e	; 62
    2f92:	81 83       	std	Z+1, r24	; 0x01
    2f94:	92 83       	std	Z+2, r25	; 0x02
    2f96:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <_cfg_print_status+0x48>
    2fa2:	0f 92       	push	r0
    2fa4:	88 ee       	ldi	r24, 0xE8	; 232
    2fa6:	93 e0       	ldi	r25, 0x03	; 3
    2fa8:	09 c0       	rjmp	.+18     	; 0x2fbc <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <_cfg_print_status+0x52>
    2fac:	0f 92       	push	r0
    2fae:	8e ec       	ldi	r24, 0xCE	; 206
    2fb0:	93 e0       	ldi	r25, 0x03	; 3
    2fb2:	04 c0       	rjmp	.+8      	; 0x2fbc <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <_cfg_print_status+0x5c>
    2fb6:	0f 92       	push	r0
    2fb8:	84 eb       	ldi	r24, 0xB4	; 180
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	ed b7       	in	r30, 0x3d	; 61
    2fbe:	fe b7       	in	r31, 0x3e	; 62
    2fc0:	81 83       	std	Z+1, r24	; 0x01
    2fc2:	92 83       	std	Z+2, r25	; 0x02
    2fc4:	63 83       	std	Z+3, r22	; 0x03
    2fc6:	74 83       	std	Z+4, r23	; 0x04
    2fc8:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <_cfg_print_status+0x7e>
    2fd8:	0f 92       	push	r0
    2fda:	89 e9       	ldi	r24, 0x99	; 153
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
    2fde:	ed b7       	in	r30, 0x3d	; 61
    2fe0:	fe b7       	in	r31, 0x3e	; 62
    2fe2:	81 83       	std	Z+1, r24	; 0x01
    2fe4:	92 83       	std	Z+2, r25	; 0x02
    2fe6:	63 83       	std	Z+3, r22	; 0x03
    2fe8:	74 83       	std	Z+4, r23	; 0x04
    2fea:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	08 95       	ret

00002ff8 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3000:	e8 2e       	mov	r14, r24
    3002:	ff 24       	eor	r15, r15
    3004:	87 01       	movw	r16, r14
    3006:	00 0f       	add	r16, r16
    3008:	11 1f       	adc	r17, r17
    300a:	f8 01       	movw	r30, r16
    300c:	ed 5b       	subi	r30, 0xBD	; 189
    300e:	fd 4f       	sbci	r31, 0xFD	; 253
    3010:	25 91       	lpm	r18, Z+
    3012:	34 91       	lpm	r19, Z+
    3014:	00 d0       	rcall	.+0      	; 0x3016 <_cfg_dump_axis+0x1e>
    3016:	0f 92       	push	r0
    3018:	88 e3       	ldi	r24, 0x38	; 56
    301a:	96 e0       	ldi	r25, 0x06	; 6
    301c:	ad b7       	in	r26, 0x3d	; 61
    301e:	be b7       	in	r27, 0x3e	; 62
    3020:	11 96       	adiw	r26, 0x01	; 1
    3022:	8d 93       	st	X+, r24
    3024:	9c 93       	st	X, r25
    3026:	12 97       	sbiw	r26, 0x02	; 2
    3028:	13 96       	adiw	r26, 0x03	; 3
    302a:	2d 93       	st	X+, r18
    302c:	3c 93       	st	X, r19
    302e:	14 97       	sbiw	r26, 0x04	; 4
    3030:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	96 e0       	ldi	r25, 0x06	; 6
    3038:	ed b7       	in	r30, 0x3d	; 61
    303a:	fe b7       	in	r31, 0x3e	; 62
    303c:	81 83       	std	Z+1, r24	; 0x01
    303e:	92 83       	std	Z+2, r25	; 0x02
    3040:	0e 0d       	add	r16, r14
    3042:	1f 1d       	adc	r17, r15
    3044:	83 e0       	ldi	r24, 0x03	; 3
    3046:	00 0f       	add	r16, r16
    3048:	11 1f       	adc	r17, r17
    304a:	8a 95       	dec	r24
    304c:	e1 f7       	brne	.-8      	; 0x3046 <_cfg_dump_axis+0x4e>
    304e:	03 58       	subi	r16, 0x83	; 131
    3050:	1d 4d       	sbci	r17, 0xDD	; 221
    3052:	d8 01       	movw	r26, r16
    3054:	51 96       	adiw	r26, 0x11	; 17
    3056:	8d 91       	ld	r24, X+
    3058:	9c 91       	ld	r25, X
    305a:	52 97       	sbiw	r26, 0x12	; 18
    305c:	83 83       	std	Z+3, r24	; 0x03
    305e:	94 83       	std	Z+4, r25	; 0x04
    3060:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3064:	88 ec       	ldi	r24, 0xC8	; 200
    3066:	95 e0       	ldi	r25, 0x05	; 5
    3068:	ed b7       	in	r30, 0x3d	; 61
    306a:	fe b7       	in	r31, 0x3e	; 62
    306c:	81 83       	std	Z+1, r24	; 0x01
    306e:	92 83       	std	Z+2, r25	; 0x02
    3070:	d8 01       	movw	r26, r16
    3072:	53 96       	adiw	r26, 0x13	; 19
    3074:	8d 91       	ld	r24, X+
    3076:	9c 91       	ld	r25, X
    3078:	54 97       	sbiw	r26, 0x14	; 20
    307a:	83 83       	std	Z+3, r24	; 0x03
    307c:	94 83       	std	Z+4, r25	; 0x04
    307e:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3082:	ed b7       	in	r30, 0x3d	; 61
    3084:	fe b7       	in	r31, 0x3e	; 62
    3086:	31 96       	adiw	r30, 0x01	; 1
    3088:	85 e9       	ldi	r24, 0x95	; 149
    308a:	95 e0       	ldi	r25, 0x05	; 5
    308c:	ad b7       	in	r26, 0x3d	; 61
    308e:	be b7       	in	r27, 0x3e	; 62
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	8d 93       	st	X+, r24
    3094:	9c 93       	st	X, r25
    3096:	12 97       	sbiw	r26, 0x02	; 2
    3098:	d8 01       	movw	r26, r16
    309a:	1e 96       	adiw	r26, 0x0e	; 14
    309c:	8c 91       	ld	r24, X
    309e:	82 83       	std	Z+2, r24	; 0x02
    30a0:	13 82       	std	Z+3, r1	; 0x03
    30a2:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30a6:	0f 92       	push	r0
    30a8:	0f 92       	push	r0
    30aa:	8e e5       	ldi	r24, 0x5E	; 94
    30ac:	95 e0       	ldi	r25, 0x05	; 5
    30ae:	ed b7       	in	r30, 0x3d	; 61
    30b0:	fe b7       	in	r31, 0x3e	; 62
    30b2:	81 83       	std	Z+1, r24	; 0x01
    30b4:	92 83       	std	Z+2, r25	; 0x02
    30b6:	f8 01       	movw	r30, r16
    30b8:	85 89       	ldd	r24, Z+21	; 0x15
    30ba:	96 89       	ldd	r25, Z+22	; 0x16
    30bc:	a7 89       	ldd	r26, Z+23	; 0x17
    30be:	b0 8d       	ldd	r27, Z+24	; 0x18
    30c0:	ed b7       	in	r30, 0x3d	; 61
    30c2:	fe b7       	in	r31, 0x3e	; 62
    30c4:	83 83       	std	Z+3, r24	; 0x03
    30c6:	94 83       	std	Z+4, r25	; 0x04
    30c8:	a5 83       	std	Z+5, r26	; 0x05
    30ca:	b6 83       	std	Z+6, r27	; 0x06
    30cc:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30d0:	8b e2       	ldi	r24, 0x2B	; 43
    30d2:	95 e0       	ldi	r25, 0x05	; 5
    30d4:	ad b7       	in	r26, 0x3d	; 61
    30d6:	be b7       	in	r27, 0x3e	; 62
    30d8:	11 96       	adiw	r26, 0x01	; 1
    30da:	8d 93       	st	X+, r24
    30dc:	9c 93       	st	X, r25
    30de:	12 97       	sbiw	r26, 0x02	; 2
    30e0:	f8 01       	movw	r30, r16
    30e2:	81 8d       	ldd	r24, Z+25	; 0x19
    30e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    30e6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30e8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30ea:	ed b7       	in	r30, 0x3d	; 61
    30ec:	fe b7       	in	r31, 0x3e	; 62
    30ee:	83 83       	std	Z+3, r24	; 0x03
    30f0:	94 83       	std	Z+4, r25	; 0x04
    30f2:	a5 83       	std	Z+5, r26	; 0x05
    30f4:	b6 83       	std	Z+6, r27	; 0x06
    30f6:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    30fa:	88 ef       	ldi	r24, 0xF8	; 248
    30fc:	94 e0       	ldi	r25, 0x04	; 4
    30fe:	ad b7       	in	r26, 0x3d	; 61
    3100:	be b7       	in	r27, 0x3e	; 62
    3102:	11 96       	adiw	r26, 0x01	; 1
    3104:	8d 93       	st	X+, r24
    3106:	9c 93       	st	X, r25
    3108:	12 97       	sbiw	r26, 0x02	; 2
    310a:	f8 01       	movw	r30, r16
    310c:	85 8d       	ldd	r24, Z+29	; 0x1d
    310e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3110:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3112:	b0 a1       	ldd	r27, Z+32	; 0x20
    3114:	ed b7       	in	r30, 0x3d	; 61
    3116:	fe b7       	in	r31, 0x3e	; 62
    3118:	83 83       	std	Z+3, r24	; 0x03
    311a:	94 83       	std	Z+4, r25	; 0x04
    311c:	a5 83       	std	Z+5, r26	; 0x05
    311e:	b6 83       	std	Z+6, r27	; 0x06
    3120:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	ed b7       	in	r30, 0x3d	; 61
    312a:	fe b7       	in	r31, 0x3e	; 62
    312c:	31 96       	adiw	r30, 0x01	; 1
    312e:	87 ec       	ldi	r24, 0xC7	; 199
    3130:	94 e0       	ldi	r25, 0x04	; 4
    3132:	ad b7       	in	r26, 0x3d	; 61
    3134:	be b7       	in	r27, 0x3e	; 62
    3136:	11 96       	adiw	r26, 0x01	; 1
    3138:	8d 93       	st	X+, r24
    313a:	9c 93       	st	X, r25
    313c:	12 97       	sbiw	r26, 0x02	; 2
    313e:	d8 01       	movw	r26, r16
    3140:	95 96       	adiw	r26, 0x25	; 37
    3142:	8c 91       	ld	r24, X
    3144:	82 83       	std	Z+2, r24	; 0x02
    3146:	13 82       	std	Z+3, r1	; 0x03
    3148:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    314c:	ed b7       	in	r30, 0x3d	; 61
    314e:	fe b7       	in	r31, 0x3e	; 62
    3150:	31 96       	adiw	r30, 0x01	; 1
    3152:	86 e9       	ldi	r24, 0x96	; 150
    3154:	94 e0       	ldi	r25, 0x04	; 4
    3156:	ad b7       	in	r26, 0x3d	; 61
    3158:	be b7       	in	r27, 0x3e	; 62
    315a:	11 96       	adiw	r26, 0x01	; 1
    315c:	8d 93       	st	X+, r24
    315e:	9c 93       	st	X, r25
    3160:	12 97       	sbiw	r26, 0x02	; 2
    3162:	d8 01       	movw	r26, r16
    3164:	1f 96       	adiw	r26, 0x0f	; 15
    3166:	8c 91       	ld	r24, X
    3168:	82 83       	std	Z+2, r24	; 0x02
    316a:	13 82       	std	Z+3, r1	; 0x03
    316c:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3170:	ed b7       	in	r30, 0x3d	; 61
    3172:	fe b7       	in	r31, 0x3e	; 62
    3174:	31 96       	adiw	r30, 0x01	; 1
    3176:	86 e6       	ldi	r24, 0x66	; 102
    3178:	94 e0       	ldi	r25, 0x04	; 4
    317a:	ad b7       	in	r26, 0x3d	; 61
    317c:	be b7       	in	r27, 0x3e	; 62
    317e:	11 96       	adiw	r26, 0x01	; 1
    3180:	8d 93       	st	X+, r24
    3182:	9c 93       	st	X, r25
    3184:	12 97       	sbiw	r26, 0x02	; 2
    3186:	d8 01       	movw	r26, r16
    3188:	50 96       	adiw	r26, 0x10	; 16
    318a:	8c 91       	ld	r24, X
    318c:	82 83       	std	Z+2, r24	; 0x02
    318e:	13 82       	std	Z+3, r1	; 0x03
    3190:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3194:	0f 92       	push	r0
    3196:	0f 92       	push	r0
    3198:	82 e3       	ldi	r24, 0x32	; 50
    319a:	94 e0       	ldi	r25, 0x04	; 4
    319c:	ed b7       	in	r30, 0x3d	; 61
    319e:	fe b7       	in	r31, 0x3e	; 62
    31a0:	81 83       	std	Z+1, r24	; 0x01
    31a2:	92 83       	std	Z+2, r25	; 0x02
    31a4:	f8 01       	movw	r30, r16
    31a6:	81 a1       	ldd	r24, Z+33	; 0x21
    31a8:	92 a1       	ldd	r25, Z+34	; 0x22
    31aa:	a3 a1       	ldd	r26, Z+35	; 0x23
    31ac:	b4 a1       	ldd	r27, Z+36	; 0x24
    31ae:	ed b7       	in	r30, 0x3d	; 61
    31b0:	fe b7       	in	r31, 0x3e	; 62
    31b2:	83 83       	std	Z+3, r24	; 0x03
    31b4:	94 83       	std	Z+4, r25	; 0x04
    31b6:	a5 83       	std	Z+5, r26	; 0x05
    31b8:	b6 83       	std	Z+6, r27	; 0x06
    31ba:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    31be:	8d b7       	in	r24, 0x3d	; 61
    31c0:	9e b7       	in	r25, 0x3e	; 62
    31c2:	06 96       	adiw	r24, 0x06	; 6
    31c4:	8d bf       	out	0x3d, r24	; 61
    31c6:	9e bf       	out	0x3e, r25	; 62
}
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	08 95       	ret

000031d2 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31d2:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <cfg_dump+0x4>
    31d6:	0f 92       	push	r0
    31d8:	ed b7       	in	r30, 0x3d	; 61
    31da:	fe b7       	in	r31, 0x3e	; 62
    31dc:	31 96       	adiw	r30, 0x01	; 1
    31de:	8c ef       	ldi	r24, 0xFC	; 252
    31e0:	96 e0       	ldi	r25, 0x06	; 6
    31e2:	ad b7       	in	r26, 0x3d	; 61
    31e4:	be b7       	in	r27, 0x3e	; 62
    31e6:	11 96       	adiw	r26, 0x01	; 1
    31e8:	8d 93       	st	X+, r24
    31ea:	9c 93       	st	X, r25
    31ec:	12 97       	sbiw	r26, 0x02	; 2
    31ee:	80 91 7d 22 	lds	r24, 0x227D
    31f2:	82 83       	std	Z+2, r24	; 0x02
    31f4:	13 82       	std	Z+3, r1	; 0x03
    31f6:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	85 ed       	ldi	r24, 0xD5	; 213
    3200:	96 e0       	ldi	r25, 0x06	; 6
    3202:	ed b7       	in	r30, 0x3d	; 61
    3204:	fe b7       	in	r31, 0x3e	; 62
    3206:	81 83       	std	Z+1, r24	; 0x01
    3208:	92 83       	std	Z+2, r25	; 0x02
    320a:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    320e:	00 d0       	rcall	.+0      	; 0x3210 <cfg_dump+0x3e>
    3210:	0f 92       	push	r0
    3212:	8b ea       	ldi	r24, 0xAB	; 171
    3214:	96 e0       	ldi	r25, 0x06	; 6
    3216:	ad b7       	in	r26, 0x3d	; 61
    3218:	be b7       	in	r27, 0x3e	; 62
    321a:	11 96       	adiw	r26, 0x01	; 1
    321c:	8d 93       	st	X+, r24
    321e:	9c 93       	st	X, r25
    3220:	12 97       	sbiw	r26, 0x02	; 2
    3222:	80 91 7f 22 	lds	r24, 0x227F
    3226:	90 91 80 22 	lds	r25, 0x2280
    322a:	a0 91 81 22 	lds	r26, 0x2281
    322e:	b0 91 82 22 	lds	r27, 0x2282
    3232:	ed b7       	in	r30, 0x3d	; 61
    3234:	fe b7       	in	r31, 0x3e	; 62
    3236:	83 83       	std	Z+3, r24	; 0x03
    3238:	94 83       	std	Z+4, r25	; 0x04
    323a:	a5 83       	std	Z+5, r26	; 0x05
    323c:	b6 83       	std	Z+6, r27	; 0x06
    323e:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3242:	81 e8       	ldi	r24, 0x81	; 129
    3244:	96 e0       	ldi	r25, 0x06	; 6
    3246:	ad b7       	in	r26, 0x3d	; 61
    3248:	be b7       	in	r27, 0x3e	; 62
    324a:	11 96       	adiw	r26, 0x01	; 1
    324c:	8d 93       	st	X+, r24
    324e:	9c 93       	st	X, r25
    3250:	12 97       	sbiw	r26, 0x02	; 2
    3252:	80 91 87 22 	lds	r24, 0x2287
    3256:	90 91 88 22 	lds	r25, 0x2288
    325a:	a0 91 89 22 	lds	r26, 0x2289
    325e:	b0 91 8a 22 	lds	r27, 0x228A
    3262:	ed b7       	in	r30, 0x3d	; 61
    3264:	fe b7       	in	r31, 0x3e	; 62
    3266:	83 83       	std	Z+3, r24	; 0x03
    3268:	94 83       	std	Z+4, r25	; 0x04
    326a:	a5 83       	std	Z+5, r26	; 0x05
    326c:	b6 83       	std	Z+6, r27	; 0x06
    326e:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3272:	86 e5       	ldi	r24, 0x56	; 86
    3274:	96 e0       	ldi	r25, 0x06	; 6
    3276:	ad b7       	in	r26, 0x3d	; 61
    3278:	be b7       	in	r27, 0x3e	; 62
    327a:	11 96       	adiw	r26, 0x01	; 1
    327c:	8d 93       	st	X+, r24
    327e:	9c 93       	st	X, r25
    3280:	12 97       	sbiw	r26, 0x02	; 2
    3282:	80 91 83 22 	lds	r24, 0x2283
    3286:	90 91 84 22 	lds	r25, 0x2284
    328a:	a0 91 85 22 	lds	r26, 0x2285
    328e:	b0 91 86 22 	lds	r27, 0x2286
    3292:	ed b7       	in	r30, 0x3d	; 61
    3294:	fe b7       	in	r31, 0x3e	; 62
    3296:	83 83       	std	Z+3, r24	; 0x03
    3298:	94 83       	std	Z+4, r25	; 0x04
    329a:	a5 83       	std	Z+5, r26	; 0x05
    329c:	b6 83       	std	Z+6, r27	; 0x06
    329e:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    32a2:	10 e0       	ldi	r17, 0x00	; 0
    32a4:	8d b7       	in	r24, 0x3d	; 61
    32a6:	9e b7       	in	r25, 0x3e	; 62
    32a8:	06 96       	adiw	r24, 0x06	; 6
    32aa:	8d bf       	out	0x3d, r24	; 61
    32ac:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32ae:	81 2f       	mov	r24, r17
    32b0:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32b4:	1f 5f       	subi	r17, 0xFF	; 255
    32b6:	14 30       	cpi	r17, 0x04	; 4
    32b8:	d1 f7       	brne	.-12     	; 0x32ae <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32ba:	1f 91       	pop	r17
    32bc:	08 95       	ret

000032be <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	6d e7       	ldi	r22, 0x7D	; 125
    32c4:	72 e2       	ldi	r23, 0x22	; 34
    32c6:	4e e6       	ldi	r20, 0x6E	; 110
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	0e 94 a2 2a 	call	0x5544	; 0x5544 <memcpy_to_eeprom_with_checksum>
}
    32ce:	08 95       	ret

000032d0 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32d8:	84 36       	cpi	r24, 0x64	; 100
    32da:	19 f0       	breq	.+6      	; 0x32e2 <cfg_read+0x12>
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	0d c0       	rjmp	.+26     	; 0x32fc <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32e2:	8d e7       	ldi	r24, 0x7D	; 125
    32e4:	92 e2       	ldi	r25, 0x22	; 34
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	4e e6       	ldi	r20, 0x6E	; 110
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	0e 94 fe 29 	call	0x53fc	; 0x53fc <memcpy_from_eeprom_with_checksum>
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	11 f0       	breq	.+4      	; 0x32fa <cfg_read+0x2a>
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    32fc:	c9 01       	movw	r24, r18
    32fe:	08 95       	ret

00003300 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	1f 93       	push	r17
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	0f 92       	push	r0
    3310:	0f 92       	push	r0
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3318:	19 82       	std	Y+1, r1	; 0x01
    331a:	1a 82       	std	Y+2, r1	; 0x02
    331c:	cc 24       	eor	r12, r12
    331e:	dd 24       	eor	r13, r13
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	2b c0       	rjmp	.+86     	; 0x337c <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3326:	9d 33       	cpi	r25, 0x3D	; 61
    3328:	49 f4       	brne	.+18     	; 0x333c <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    332a:	f7 01       	movw	r30, r14
    332c:	e2 0f       	add	r30, r18
    332e:	f1 1d       	adc	r31, r1
    3330:	10 82       	st	Z, r1
    3332:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3334:	67 01       	movw	r12, r14
    3336:	c2 0e       	add	r12, r18
    3338:	d1 1c       	adc	r13, r1
    333a:	20 c0       	rjmp	.+64     	; 0x337c <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    333c:	9d 32       	cpi	r25, 0x2D	; 45
    333e:	c9 f0       	breq	.+50     	; 0x3372 <cfg_parse+0x72>
    3340:	9b 32       	cpi	r25, 0x2B	; 43
    3342:	b9 f0       	breq	.+46     	; 0x3372 <cfg_parse+0x72>
    3344:	9e 32       	cpi	r25, 0x2E	; 46
    3346:	a9 f0       	breq	.+42     	; 0x3372 <cfg_parse+0x72>
    3348:	9f 33       	cpi	r25, 0x3F	; 63
    334a:	99 f0       	breq	.+38     	; 0x3372 <cfg_parse+0x72>
    334c:	98 32       	cpi	r25, 0x28	; 40
    334e:	89 f0       	breq	.+34     	; 0x3372 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3350:	89 2f       	mov	r24, r25
    3352:	81 56       	subi	r24, 0x61	; 97
    3354:	8a 31       	cpi	r24, 0x1A	; 26
    3356:	28 f4       	brcc	.+10     	; 0x3362 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3358:	f7 01       	movw	r30, r14
    335a:	e2 0f       	add	r30, r18
    335c:	f1 1d       	adc	r31, r1
    335e:	90 52       	subi	r25, 0x20	; 32
    3360:	0b c0       	rjmp	.+22     	; 0x3378 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3362:	89 2f       	mov	r24, r25
    3364:	81 54       	subi	r24, 0x41	; 65
    3366:	8a 31       	cpi	r24, 0x1A	; 26
    3368:	20 f0       	brcs	.+8      	; 0x3372 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    336a:	89 2f       	mov	r24, r25
    336c:	80 53       	subi	r24, 0x30	; 48
    336e:	8a 30       	cpi	r24, 0x0A	; 10
    3370:	28 f4       	brcc	.+10     	; 0x337c <cfg_parse+0x7c>
			text[j++] = c;
    3372:	f7 01       	movw	r30, r14
    3374:	e2 0f       	add	r30, r18
    3376:	f1 1d       	adc	r31, r1
    3378:	90 83       	st	Z, r25
    337a:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    337c:	f7 01       	movw	r30, r14
    337e:	e3 0f       	add	r30, r19
    3380:	f1 1d       	adc	r31, r1
    3382:	90 81       	ld	r25, Z
    3384:	3f 5f       	subi	r19, 0xFF	; 255
    3386:	99 23       	and	r25, r25
    3388:	71 f6       	brne	.-100    	; 0x3326 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    338a:	f7 01       	movw	r30, r14
    338c:	e2 0f       	add	r30, r18
    338e:	f1 1d       	adc	r31, r1
    3390:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    3392:	2f 5f       	subi	r18, 0xFF	; 255
    3394:	c7 01       	movw	r24, r14
    3396:	82 0f       	add	r24, r18
    3398:	91 1d       	adc	r25, r1
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    339e:	10 92 7e 22 	sts	0x227E, r1
	switch (text[0]) {
    33a2:	f7 01       	movw	r30, r14
    33a4:	80 81       	ld	r24, Z
    33a6:	81 35       	cpi	r24, 0x51	; 81
    33a8:	d1 f0       	breq	.+52     	; 0x33de <cfg_parse+0xde>
    33aa:	82 35       	cpi	r24, 0x52	; 82
    33ac:	60 f4       	brcc	.+24     	; 0x33c6 <cfg_parse+0xc6>
    33ae:	81 34       	cpi	r24, 0x41	; 65
    33b0:	59 f1       	breq	.+86     	; 0x3408 <cfg_parse+0x108>
    33b2:	82 34       	cpi	r24, 0x42	; 66
    33b4:	28 f4       	brcc	.+10     	; 0x33c0 <cfg_parse+0xc0>
    33b6:	88 32       	cpi	r24, 0x28	; 40
    33b8:	11 f1       	breq	.+68     	; 0x33fe <cfg_parse+0xfe>
    33ba:	8f 33       	cpi	r24, 0x3F	; 63
    33bc:	39 f5       	brne	.+78     	; 0x340c <cfg_parse+0x10c>
    33be:	0c c0       	rjmp	.+24     	; 0x33d8 <cfg_parse+0xd8>
    33c0:	8d 34       	cpi	r24, 0x4D	; 77
    33c2:	21 f5       	brne	.+72     	; 0x340c <cfg_parse+0x10c>
    33c4:	0e c0       	rjmp	.+28     	; 0x33e2 <cfg_parse+0xe2>
    33c6:	89 35       	cpi	r24, 0x59	; 89
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <cfg_parse+0xd4>
    33ca:	8a 35       	cpi	r24, 0x5A	; 90
    33cc:	d9 f0       	breq	.+54     	; 0x3404 <cfg_parse+0x104>
    33ce:	88 35       	cpi	r24, 0x58	; 88
    33d0:	e9 f4       	brne	.+58     	; 0x340c <cfg_parse+0x10c>
    33d2:	1f c0       	rjmp	.+62     	; 0x3412 <cfg_parse+0x112>
    33d4:	11 e0       	ldi	r17, 0x01	; 1
    33d6:	1e c0       	rjmp	.+60     	; 0x3414 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33d8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <cfg_dump>
    33dc:	10 c0       	rjmp	.+32     	; 0x33fe <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33de:	8b e0       	ldi	r24, 0x0B	; 11
    33e0:	16 c0       	rjmp	.+44     	; 0x340e <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33e2:	c6 01       	movw	r24, r12
    33e4:	be 01       	movw	r22, r28
    33e6:	6f 5f       	subi	r22, 0xFF	; 255
    33e8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ea:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <strtod>
    33ee:	60 93 7f 22 	sts	0x227F, r22
    33f2:	70 93 80 22 	sts	0x2280, r23
    33f6:	80 93 81 22 	sts	0x2281, r24
    33fa:	90 93 82 22 	sts	0x2282, r25
				  status(TG_OK); 
    33fe:	10 92 7e 22 	sts	0x227E, r1
    3402:	07 c0       	rjmp	.+14     	; 0x3412 <cfg_parse+0x112>
				  break;
    3404:	12 e0       	ldi	r17, 0x02	; 2
    3406:	06 c0       	rjmp	.+12     	; 0x3414 <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3408:	13 e0       	ldi	r17, 0x03	; 3
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    340c:	8c e0       	ldi	r24, 0x0C	; 12
    340e:	80 93 7e 22 	sts	0x227E, r24
    3412:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3414:	80 91 7e 22 	lds	r24, 0x227E
    3418:	88 23       	and	r24, r24
    341a:	09 f0       	breq	.+2      	; 0x341e <cfg_parse+0x11e>
    341c:	ee c0       	rjmp	.+476    	; 0x35fa <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    341e:	10 92 7e 22 	sts	0x227E, r1
		switch (text[1]) {
    3422:	f7 01       	movw	r30, r14
    3424:	81 81       	ldd	r24, Z+1	; 0x01
    3426:	8c 34       	cpi	r24, 0x4C	; 76
    3428:	09 f4       	brne	.+2      	; 0x342c <cfg_parse+0x12c>
    342a:	b8 c0       	rjmp	.+368    	; 0x359c <cfg_parse+0x29c>
    342c:	8d 34       	cpi	r24, 0x4D	; 77
    342e:	30 f4       	brcc	.+12     	; 0x343c <cfg_parse+0x13c>
    3430:	84 34       	cpi	r24, 0x44	; 68
    3432:	a9 f1       	breq	.+106    	; 0x349e <cfg_parse+0x19e>
    3434:	86 34       	cpi	r24, 0x46	; 70
    3436:	09 f0       	breq	.+2      	; 0x343a <cfg_parse+0x13a>
    3438:	dd c0       	rjmp	.+442    	; 0x35f4 <cfg_parse+0x2f4>
    343a:	1d c0       	rjmp	.+58     	; 0x3476 <cfg_parse+0x176>
    343c:	80 35       	cpi	r24, 0x50	; 80
    343e:	09 f4       	brne	.+2      	; 0x3442 <cfg_parse+0x142>
    3440:	47 c0       	rjmp	.+142    	; 0x34d0 <cfg_parse+0x1d0>
    3442:	83 35       	cpi	r24, 0x53	; 83
    3444:	21 f0       	breq	.+8      	; 0x344e <cfg_parse+0x14e>
    3446:	8d 34       	cpi	r24, 0x4D	; 77
    3448:	09 f0       	breq	.+2      	; 0x344c <cfg_parse+0x14c>
    344a:	d4 c0       	rjmp	.+424    	; 0x35f4 <cfg_parse+0x2f4>
    344c:	58 c0       	rjmp	.+176    	; 0x34fe <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    344e:	c6 01       	movw	r24, r12
    3450:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <atoi>
    3454:	21 2f       	mov	r18, r17
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	f9 01       	movw	r30, r18
    345a:	ee 0f       	add	r30, r30
    345c:	ff 1f       	adc	r31, r31
    345e:	e2 0f       	add	r30, r18
    3460:	f3 1f       	adc	r31, r19
    3462:	53 e0       	ldi	r21, 0x03	; 3
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	5a 95       	dec	r21
    346a:	e1 f7       	brne	.-8      	; 0x3464 <cfg_parse+0x164>
    346c:	e3 58       	subi	r30, 0x83	; 131
    346e:	fd 4d       	sbci	r31, 0xDD	; 221
    3470:	81 8b       	std	Z+17, r24	; 0x11
    3472:	92 8b       	std	Z+18, r25	; 0x12
    3474:	c2 c0       	rjmp	.+388    	; 0x35fa <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3476:	c6 01       	movw	r24, r12
    3478:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <atoi>
    347c:	21 2f       	mov	r18, r17
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	f9 01       	movw	r30, r18
    3482:	ee 0f       	add	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	23 e0       	ldi	r18, 0x03	; 3
    348c:	ee 0f       	add	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	2a 95       	dec	r18
    3492:	e1 f7       	brne	.-8      	; 0x348c <cfg_parse+0x18c>
    3494:	e3 58       	subi	r30, 0x83	; 131
    3496:	fd 4d       	sbci	r31, 0xDD	; 221
    3498:	83 8b       	std	Z+19, r24	; 0x13
    349a:	94 8b       	std	Z+20, r25	; 0x14
    349c:	ae c0       	rjmp	.+348    	; 0x35fa <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    349e:	c6 01       	movw	r24, r12
    34a0:	be 01       	movw	r22, r28
    34a2:	6f 5f       	subi	r22, 0xFF	; 255
    34a4:	7f 4f       	sbci	r23, 0xFF	; 255
    34a6:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <strtod>
    34aa:	21 2f       	mov	r18, r17
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	f9 01       	movw	r30, r18
    34b0:	ee 0f       	add	r30, r30
    34b2:	ff 1f       	adc	r31, r31
    34b4:	e2 0f       	add	r30, r18
    34b6:	f3 1f       	adc	r31, r19
    34b8:	b3 e0       	ldi	r27, 0x03	; 3
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ba 95       	dec	r27
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <cfg_parse+0x1ba>
    34c2:	e3 58       	subi	r30, 0x83	; 131
    34c4:	fd 4d       	sbci	r31, 0xDD	; 221
    34c6:	65 8b       	std	Z+21, r22	; 0x15
    34c8:	76 8b       	std	Z+22, r23	; 0x16
    34ca:	87 8b       	std	Z+23, r24	; 0x17
    34cc:	90 8f       	std	Z+24, r25	; 0x18
    34ce:	95 c0       	rjmp	.+298    	; 0x35fa <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34d0:	c6 01       	movw	r24, r12
    34d2:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <atoi>
    34d6:	68 2f       	mov	r22, r24
    34d8:	81 2f       	mov	r24, r17
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	fc 01       	movw	r30, r24
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	e8 0f       	add	r30, r24
    34e4:	f9 1f       	adc	r31, r25
    34e6:	73 e0       	ldi	r23, 0x03	; 3
    34e8:	ee 0f       	add	r30, r30
    34ea:	ff 1f       	adc	r31, r31
    34ec:	7a 95       	dec	r23
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <cfg_parse+0x1e8>
    34f0:	e3 58       	subi	r30, 0x83	; 131
    34f2:	fd 4d       	sbci	r31, 0xDD	; 221
    34f4:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    34f6:	81 2f       	mov	r24, r17
    34f8:	0e 94 c8 24 	call	0x4990	; 0x4990 <st_set_polarity>
    34fc:	7e c0       	rjmp	.+252    	; 0x35fa <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    34fe:	f7 01       	movw	r30, r14
    3500:	82 81       	ldd	r24, Z+2	; 0x02
    3502:	89 34       	cpi	r24, 0x49	; 73
    3504:	99 f4       	brne	.+38     	; 0x352c <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3506:	c6 01       	movw	r24, r12
    3508:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <atoi>
    350c:	21 2f       	mov	r18, r17
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	f9 01       	movw	r30, r18
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	53 e0       	ldi	r21, 0x03	; 3
    351c:	ee 0f       	add	r30, r30
    351e:	ff 1f       	adc	r31, r31
    3520:	5a 95       	dec	r21
    3522:	e1 f7       	brne	.-8      	; 0x351c <cfg_parse+0x21c>
    3524:	e3 58       	subi	r30, 0x83	; 131
    3526:	fd 4d       	sbci	r31, 0xDD	; 221
    3528:	86 87       	std	Z+14, r24	; 0x0e
    352a:	67 c0       	rjmp	.+206    	; 0x35fa <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    352c:	f7 01       	movw	r30, r14
    352e:	83 81       	ldd	r24, Z+3	; 0x03
    3530:	82 35       	cpi	r24, 0x52	; 82
    3532:	c9 f4       	brne	.+50     	; 0x3566 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3534:	c6 01       	movw	r24, r12
    3536:	be 01       	movw	r22, r28
    3538:	6f 5f       	subi	r22, 0xFF	; 255
    353a:	7f 4f       	sbci	r23, 0xFF	; 255
    353c:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <strtod>
    3540:	21 2f       	mov	r18, r17
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	f9 01       	movw	r30, r18
    3546:	ee 0f       	add	r30, r30
    3548:	ff 1f       	adc	r31, r31
    354a:	e2 0f       	add	r30, r18
    354c:	f3 1f       	adc	r31, r19
    354e:	13 e0       	ldi	r17, 0x03	; 3
    3550:	ee 0f       	add	r30, r30
    3552:	ff 1f       	adc	r31, r31
    3554:	1a 95       	dec	r17
    3556:	e1 f7       	brne	.-8      	; 0x3550 <cfg_parse+0x250>
    3558:	e3 58       	subi	r30, 0x83	; 131
    355a:	fd 4d       	sbci	r31, 0xDD	; 221
    355c:	61 8f       	std	Z+25, r22	; 0x19
    355e:	72 8f       	std	Z+26, r23	; 0x1a
    3560:	83 8f       	std	Z+27, r24	; 0x1b
    3562:	94 8f       	std	Z+28, r25	; 0x1c
    3564:	4a c0       	rjmp	.+148    	; 0x35fa <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3566:	84 35       	cpi	r24, 0x54	; 84
    3568:	c9 f4       	brne	.+50     	; 0x359c <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    356a:	c6 01       	movw	r24, r12
    356c:	be 01       	movw	r22, r28
    356e:	6f 5f       	subi	r22, 0xFF	; 255
    3570:	7f 4f       	sbci	r23, 0xFF	; 255
    3572:	0e 94 eb 44 	call	0x89d6	; 0x89d6 <strtod>
    3576:	21 2f       	mov	r18, r17
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	f9 01       	movw	r30, r18
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	e2 0f       	add	r30, r18
    3582:	f3 1f       	adc	r31, r19
    3584:	a3 e0       	ldi	r26, 0x03	; 3
    3586:	ee 0f       	add	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	aa 95       	dec	r26
    358c:	e1 f7       	brne	.-8      	; 0x3586 <cfg_parse+0x286>
    358e:	e3 58       	subi	r30, 0x83	; 131
    3590:	fd 4d       	sbci	r31, 0xDD	; 221
    3592:	65 8f       	std	Z+29, r22	; 0x1d
    3594:	76 8f       	std	Z+30, r23	; 0x1e
    3596:	87 8f       	std	Z+31, r24	; 0x1f
    3598:	90 a3       	std	Z+32, r25	; 0x20
    359a:	2f c0       	rjmp	.+94     	; 0x35fa <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    359c:	f7 01       	movw	r30, r14
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	8f 34       	cpi	r24, 0x4F	; 79
    35a2:	99 f4       	brne	.+38     	; 0x35ca <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35a4:	c6 01       	movw	r24, r12
    35a6:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <atoi>
    35aa:	21 2f       	mov	r18, r17
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	f9 01       	movw	r30, r18
    35b0:	ee 0f       	add	r30, r30
    35b2:	ff 1f       	adc	r31, r31
    35b4:	e2 0f       	add	r30, r18
    35b6:	f3 1f       	adc	r31, r19
    35b8:	53 e0       	ldi	r21, 0x03	; 3
    35ba:	ee 0f       	add	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	5a 95       	dec	r21
    35c0:	e1 f7       	brne	.-8      	; 0x35ba <cfg_parse+0x2ba>
    35c2:	e3 58       	subi	r30, 0x83	; 131
    35c4:	fd 4d       	sbci	r31, 0xDD	; 221
    35c6:	87 87       	std	Z+15, r24	; 0x0f
    35c8:	18 c0       	rjmp	.+48     	; 0x35fa <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35ca:	89 34       	cpi	r24, 0x49	; 73
    35cc:	99 f4       	brne	.+38     	; 0x35f4 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35ce:	c6 01       	movw	r24, r12
    35d0:	0e 94 59 46 	call	0x8cb2	; 0x8cb2 <atoi>
    35d4:	21 2f       	mov	r18, r17
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	f9 01       	movw	r30, r18
    35da:	ee 0f       	add	r30, r30
    35dc:	ff 1f       	adc	r31, r31
    35de:	e2 0f       	add	r30, r18
    35e0:	f3 1f       	adc	r31, r19
    35e2:	23 e0       	ldi	r18, 0x03	; 3
    35e4:	ee 0f       	add	r30, r30
    35e6:	ff 1f       	adc	r31, r31
    35e8:	2a 95       	dec	r18
    35ea:	e1 f7       	brne	.-8      	; 0x35e4 <cfg_parse+0x2e4>
    35ec:	e3 58       	subi	r30, 0x83	; 131
    35ee:	fd 4d       	sbci	r31, 0xDD	; 221
    35f0:	85 a3       	std	Z+37, r24	; 0x25
    35f2:	03 c0       	rjmp	.+6      	; 0x35fa <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    35f4:	8c e0       	ldi	r24, 0x0C	; 12
    35f6:	80 93 7e 22 	sts	0x227E, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    35fa:	80 91 7e 22 	lds	r24, 0x227E
    35fe:	b7 01       	movw	r22, r14
    3600:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3604:	80 91 7e 22 	lds	r24, 0x227E
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	1f 91       	pop	r17
    3614:	ff 90       	pop	r15
    3616:	ef 90       	pop	r14
    3618:	df 90       	pop	r13
    361a:	cf 90       	pop	r12
    361c:	08 95       	ret

0000361e <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	a8 97       	sbiw	r28, 0x28	; 40
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0b e4       	ldi	r16, 0x4B	; 75
    3636:	12 e0       	ldi	r17, 0x02	; 2
    3638:	a0 e0       	ldi	r26, 0x00	; 0
    363a:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    363c:	7e 01       	movw	r14, r28
    363e:	08 94       	sec
    3640:	e1 1c       	adc	r14, r1
    3642:	f1 1c       	adc	r15, r1
    3644:	02 c0       	rjmp	.+4      	; 0x364a <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3646:	0f 5f       	subi	r16, 0xFF	; 255
    3648:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    364a:	f8 01       	movw	r30, r16
    364c:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    364e:	88 23       	and	r24, r24
    3650:	89 f4       	brne	.+34     	; 0x3674 <cfg_test+0x56>
			text[j] = 0;
    3652:	ce 01       	movw	r24, r28
    3654:	01 96       	adiw	r24, 0x01	; 1
    3656:	a8 0f       	add	r26, r24
    3658:	b9 1f       	adc	r27, r25
    365a:	1c 92       	st	X, r1
			cfg_parse(text);
    365c:	0e 94 80 19 	call	0x3300	; 0x3300 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3660:	a8 96       	adiw	r28, 0x28	; 40
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3674:	8d 30       	cpi	r24, 0x0D	; 13
    3676:	21 f0       	breq	.+8      	; 0x3680 <cfg_test+0x62>
    3678:	8a 30       	cpi	r24, 0x0A	; 10
    367a:	11 f0       	breq	.+4      	; 0x3680 <cfg_test+0x62>
    367c:	8b 33       	cpi	r24, 0x3B	; 59
    367e:	49 f4       	brne	.+18     	; 0x3692 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3680:	ae 0d       	add	r26, r14
    3682:	bf 1d       	adc	r27, r15
    3684:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3686:	c7 01       	movw	r24, r14
    3688:	0e 94 80 19 	call	0x3300	; 0x3300 <cfg_parse>
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	da cf       	rjmp	.-76     	; 0x3646 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    3692:	81 32       	cpi	r24, 0x21	; 33
    3694:	c0 f2       	brcs	.-80     	; 0x3646 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    3696:	f7 01       	movw	r30, r14
    3698:	ea 0f       	add	r30, r26
    369a:	fb 1f       	adc	r31, r27
    369c:	80 83       	st	Z, r24
    369e:	11 96       	adiw	r26, 0x01	; 1
    36a0:	d2 cf       	rjmp	.-92     	; 0x3646 <cfg_test+0x28>

000036a2 <en_init>:


void en_init(void) 
{
	return;
}
    36a2:	08 95       	ret

000036a4 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36a4:	88 23       	and	r24, r24
    36a6:	b1 f0       	breq	.+44     	; 0x36d4 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36a8:	e0 91 79 22 	lds	r30, 0x2279
    36ac:	f0 91 7a 22 	lds	r31, 0x227A
    36b0:	80 e2       	ldi	r24, 0x20	; 32
    36b2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36b4:	e0 91 69 22 	lds	r30, 0x2269
    36b8:	f0 91 6a 22 	lds	r31, 0x226A
    36bc:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36be:	e0 91 59 22 	lds	r30, 0x2259
    36c2:	f0 91 5a 22 	lds	r31, 0x225A
    36c6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c8:	e0 91 49 22 	lds	r30, 0x2249
    36cc:	f0 91 4a 22 	lds	r31, 0x224A
    36d0:	85 83       	std	Z+5, r24	; 0x05
    36d2:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36d4:	e0 91 79 22 	lds	r30, 0x2279
    36d8:	f0 91 7a 22 	lds	r31, 0x227A
    36dc:	80 e2       	ldi	r24, 0x20	; 32
    36de:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36e0:	e0 91 69 22 	lds	r30, 0x2269
    36e4:	f0 91 6a 22 	lds	r31, 0x226A
    36e8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ea:	e0 91 59 22 	lds	r30, 0x2259
    36ee:	f0 91 5a 22 	lds	r31, 0x225A
    36f2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f4:	e0 91 49 22 	lds	r30, 0x2249
    36f8:	f0 91 4a 22 	lds	r31, 0x224A
    36fc:	86 83       	std	Z+6, r24	; 0x06
    36fe:	08 95       	ret

00003700 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3700:	0f 93       	push	r16
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	0f 92       	push	r0
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    370c:	8b ec       	ldi	r24, 0xCB	; 203
    370e:	e0 e5       	ldi	r30, 0x50	; 80
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3714:	88 e0       	ldi	r24, 0x08	; 8
    3716:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    371a:	80 91 51 00 	lds	r24, 0x0051
    371e:	83 ff       	sbrs	r24, 3
    3720:	fc cf       	rjmp	.-8      	; 0x371a <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3722:	82 ec       	ldi	r24, 0xC2	; 194
    3724:	e0 e5       	ldi	r30, 0x50	; 80
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    372a:	88 e1       	ldi	r24, 0x18	; 24
    372c:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3730:	80 91 51 00 	lds	r24, 0x0051
    3734:	84 ff       	sbrs	r24, 4
    3736:	fc cf       	rjmp	.-8      	; 0x3730 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3738:	8f b7       	in	r24, 0x3f	; 63
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    373e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3740:	24 e0       	ldi	r18, 0x04	; 4
    3742:	80 e4       	ldi	r24, 0x40	; 64
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	fc 01       	movw	r30, r24
    3748:	08 ed       	ldi	r16, 0xD8	; 216
    374a:	04 bf       	out	0x34, r16	; 52
    374c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3752:	80 91 50 00 	lds	r24, 0x0050
    3756:	8e 7f       	andi	r24, 0xFE	; 254
    3758:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    375c:	0f 90       	pop	r0
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	0f 91       	pop	r16
    3764:	08 95       	ret

00003766 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3766:	0e 94 80 1b 	call	0x3700	; 0x3700 <xmega_init_clocks>
}
    376a:	08 95       	ret

0000376c <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    376c:	0f 93       	push	r16
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	0f 92       	push	r0
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3778:	2f b7       	in	r18, 0x3f	; 63
    377a:	29 83       	std	Y+1, r18	; 0x01
    377c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    377e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3780:	fc 01       	movw	r30, r24
    3782:	08 ed       	ldi	r16, 0xD8	; 216
    3784:	04 bf       	out	0x34, r16	; 52
    3786:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	8f bf       	out	0x3f, r24	; 63
#endif
}
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	0f 91       	pop	r16
    3794:	08 95       	ret

00003796 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3796:	10 92 56 21 	sts	0x2156, r1
	ma.arc_state = MC_STATE_OFF;
    379a:	10 92 eb 22 	sts	0x22EB, r1
	return (TG_OK);
}
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	08 95       	ret

000037a4 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37a4:	8c e0       	ldi	r24, 0x0C	; 12
    37a6:	e7 e5       	ldi	r30, 0x57	; 87
    37a8:	f1 e2       	ldi	r31, 0x21	; 33
    37aa:	df 01       	movw	r26, r30
    37ac:	1d 92       	st	X+, r1
    37ae:	8a 95       	dec	r24
    37b0:	e9 f7       	brne	.-6      	; 0x37ac <mc_go_home+0x8>
	return (TG_OK);
}
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	08 95       	ret

000037b8 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37b8:	8c e0       	ldi	r24, 0x0C	; 12
    37ba:	e7 e5       	ldi	r30, 0x57	; 87
    37bc:	f1 e2       	ldi	r31, 0x21	; 33
    37be:	df 01       	movw	r26, r30
    37c0:	1d 92       	st	X+, r1
    37c2:	8a 95       	dec	r24
    37c4:	e9 f7       	brne	.-6      	; 0x37c0 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37c6:	10 92 56 21 	sts	0x2156, r1
	ma.arc_state = MC_STATE_OFF;
    37ca:	10 92 eb 22 	sts	0x22EB, r1
}
    37ce:	08 95       	ret

000037d0 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37d0:	af 92       	push	r10
    37d2:	bf 92       	push	r11
    37d4:	cf 92       	push	r12
    37d6:	df 92       	push	r13
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37e0:	80 91 56 21 	lds	r24, 0x2156
    37e4:	88 23       	and	r24, r24
    37e6:	19 f4       	brne	.+6      	; 0x37ee <mc_line_continue+0x1e>
    37e8:	23 e0       	ldi	r18, 0x03	; 3
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	30 c0       	rjmp	.+96     	; 0x384e <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    37ee:	82 e0       	ldi	r24, 0x02	; 2
    37f0:	80 93 56 21 	sts	0x2156, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    37f4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <mv_test_move_buffer_full>
    37f8:	88 23       	and	r24, r24
    37fa:	19 f0       	breq	.+6      	; 0x3802 <mc_line_continue+0x32>
    37fc:	22 e0       	ldi	r18, 0x02	; 2
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	26 c0       	rjmp	.+76     	; 0x384e <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3802:	60 91 6f 21 	lds	r22, 0x216F
    3806:	70 91 70 21 	lds	r23, 0x2170
    380a:	80 91 71 21 	lds	r24, 0x2171
    380e:	90 91 72 21 	lds	r25, 0x2172
    3812:	20 91 73 21 	lds	r18, 0x2173
    3816:	30 91 74 21 	lds	r19, 0x2174
    381a:	40 91 75 21 	lds	r20, 0x2175
    381e:	50 91 76 21 	lds	r21, 0x2176
    3822:	e0 90 77 21 	lds	r14, 0x2177
    3826:	f0 90 78 21 	lds	r15, 0x2178
    382a:	00 91 79 21 	lds	r16, 0x2179
    382e:	10 91 7a 21 	lds	r17, 0x217A
    3832:	a0 90 7b 21 	lds	r10, 0x217B
    3836:	b0 90 7c 21 	lds	r11, 0x217C
    383a:	c0 90 7d 21 	lds	r12, 0x217D
    383e:	d0 90 7e 21 	lds	r13, 0x217E
    3842:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3846:	10 92 56 21 	sts	0x2156, r1
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    384e:	c9 01       	movw	r24, r18
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	ff 90       	pop	r15
    3856:	ef 90       	pop	r14
    3858:	df 90       	pop	r13
    385a:	cf 90       	pop	r12
    385c:	bf 90       	pop	r11
    385e:	af 90       	pop	r10
    3860:	08 95       	ret

00003862 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3862:	10 92 6f 21 	sts	0x216F, r1
    3866:	10 92 70 21 	sts	0x2170, r1
    386a:	10 92 71 21 	sts	0x2171, r1
    386e:	10 92 72 21 	sts	0x2172, r1
	mc.steps[Y] = 0;
    3872:	10 92 73 21 	sts	0x2173, r1
    3876:	10 92 74 21 	sts	0x2174, r1
    387a:	10 92 75 21 	sts	0x2175, r1
    387e:	10 92 76 21 	sts	0x2176, r1
	mc.steps[Z] = 0;
    3882:	10 92 77 21 	sts	0x2177, r1
    3886:	10 92 78 21 	sts	0x2178, r1
    388a:	10 92 79 21 	sts	0x2179, r1
    388e:	10 92 7a 21 	sts	0x217A, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	20 93 7f 21 	sts	0x217F, r18
    389e:	30 93 80 21 	sts	0x2180, r19
    38a2:	40 93 81 21 	sts	0x2181, r20
    38a6:	50 93 82 21 	sts	0x2182, r21
	mc.microseconds = trunc(seconds*1000000);
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	34 e2       	ldi	r19, 0x24	; 36
    38ae:	44 e7       	ldi	r20, 0x74	; 116
    38b0:	59 e4       	ldi	r21, 0x49	; 73
    38b2:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    38b6:	0e 94 54 41 	call	0x82a8	; 0x82a8 <__fixunssfsi>
    38ba:	60 93 7b 21 	sts	0x217B, r22
    38be:	70 93 7c 21 	sts	0x217C, r23
    38c2:	80 93 7d 21 	sts	0x217D, r24
    38c6:	90 93 7e 21 	sts	0x217E, r25
	mc.line_state = MC_STATE_NEW;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	80 93 56 21 	sts	0x2156, r24
	return (mc_line_continue());
    38d0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_line_continue>
}
    38d4:	08 95       	ret

000038d6 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38d6:	2f 92       	push	r2
    38d8:	3f 92       	push	r3
    38da:	4f 92       	push	r4
    38dc:	5f 92       	push	r5
    38de:	6f 92       	push	r6
    38e0:	7f 92       	push	r7
    38e2:	8f 92       	push	r8
    38e4:	9f 92       	push	r9
    38e6:	af 92       	push	r10
    38e8:	bf 92       	push	r11
    38ea:	cf 92       	push	r12
    38ec:	df 92       	push	r13
    38ee:	ef 92       	push	r14
    38f0:	ff 92       	push	r15
    38f2:	0f 93       	push	r16
    38f4:	1f 93       	push	r17
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	cd b7       	in	r28, 0x3d	; 61
    38fc:	de b7       	in	r29, 0x3e	; 62
    38fe:	62 97       	sbiw	r28, 0x12	; 18
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	19 01       	movw	r2, r18
    3906:	2a 01       	movw	r4, r20
    3908:	ad 86       	std	Y+13, r10	; 0x0d
    390a:	be 86       	std	Y+14, r11	; 0x0e
    390c:	cf 86       	std	Y+15, r12	; 0x0f
    390e:	d8 8a       	std	Y+16, r13	; 0x10
    3910:	89 8a       	std	Y+17, r8	; 0x11
    3912:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3914:	20 91 9e 22 	lds	r18, 0x229E
    3918:	30 91 9f 22 	lds	r19, 0x229F
    391c:	40 91 a0 22 	lds	r20, 0x22A0
    3920:	50 91 a1 22 	lds	r21, 0x22A1
    3924:	29 87       	std	Y+9, r18	; 0x09
    3926:	3a 87       	std	Y+10, r19	; 0x0a
    3928:	4b 87       	std	Y+11, r20	; 0x0b
    392a:	5c 87       	std	Y+12, r21	; 0x0c
    392c:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3930:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    3934:	3b 01       	movw	r6, r22
    3936:	4c 01       	movw	r8, r24
    3938:	60 92 63 21 	sts	0x2163, r6
    393c:	70 92 64 21 	sts	0x2164, r7
    3940:	80 92 65 21 	sts	0x2165, r8
    3944:	90 92 66 21 	sts	0x2166, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3948:	80 91 b6 22 	lds	r24, 0x22B6
    394c:	90 91 b7 22 	lds	r25, 0x22B7
    3950:	a0 91 b8 22 	lds	r26, 0x22B8
    3954:	b0 91 b9 22 	lds	r27, 0x22B9
    3958:	8d 83       	std	Y+5, r24	; 0x05
    395a:	9e 83       	std	Y+6, r25	; 0x06
    395c:	af 83       	std	Y+7, r26	; 0x07
    395e:	b8 87       	std	Y+8, r27	; 0x08
    3960:	c2 01       	movw	r24, r4
    3962:	b1 01       	movw	r22, r2
    3964:	2d 81       	ldd	r18, Y+5	; 0x05
    3966:	3e 81       	ldd	r19, Y+6	; 0x06
    3968:	4f 81       	ldd	r20, Y+7	; 0x07
    396a:	58 85       	ldd	r21, Y+8	; 0x08
    396c:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3970:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    3974:	5b 01       	movw	r10, r22
    3976:	6c 01       	movw	r12, r24
    3978:	a0 92 67 21 	sts	0x2167, r10
    397c:	b0 92 68 21 	sts	0x2168, r11
    3980:	c0 92 69 21 	sts	0x2169, r12
    3984:	d0 92 6a 21 	sts	0x216A, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3988:	20 91 ce 22 	lds	r18, 0x22CE
    398c:	30 91 cf 22 	lds	r19, 0x22CF
    3990:	40 91 d0 22 	lds	r20, 0x22D0
    3994:	50 91 d1 22 	lds	r21, 0x22D1
    3998:	29 83       	std	Y+1, r18	; 0x01
    399a:	3a 83       	std	Y+2, r19	; 0x02
    399c:	4b 83       	std	Y+3, r20	; 0x03
    399e:	5c 83       	std	Y+4, r21	; 0x04
    39a0:	c8 01       	movw	r24, r16
    39a2:	b7 01       	movw	r22, r14
    39a4:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    39a8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    39ac:	9b 01       	movw	r18, r22
    39ae:	ac 01       	movw	r20, r24
    39b0:	20 93 6b 21 	sts	0x216B, r18
    39b4:	30 93 6c 21 	sts	0x216C, r19
    39b8:	40 93 6d 21 	sts	0x216D, r20
    39bc:	50 93 6e 21 	sts	0x216E, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39c0:	80 91 57 21 	lds	r24, 0x2157
    39c4:	90 91 58 21 	lds	r25, 0x2158
    39c8:	a0 91 59 21 	lds	r26, 0x2159
    39cc:	b0 91 5a 21 	lds	r27, 0x215A
    39d0:	84 01       	movw	r16, r8
    39d2:	73 01       	movw	r14, r6
    39d4:	e8 1a       	sub	r14, r24
    39d6:	f9 0a       	sbc	r15, r25
    39d8:	0a 0b       	sbc	r16, r26
    39da:	1b 0b       	sbc	r17, r27
    39dc:	e0 92 6f 21 	sts	0x216F, r14
    39e0:	f0 92 70 21 	sts	0x2170, r15
    39e4:	00 93 71 21 	sts	0x2171, r16
    39e8:	10 93 72 21 	sts	0x2172, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39ec:	80 91 5b 21 	lds	r24, 0x215B
    39f0:	90 91 5c 21 	lds	r25, 0x215C
    39f4:	a0 91 5d 21 	lds	r26, 0x215D
    39f8:	b0 91 5e 21 	lds	r27, 0x215E
    39fc:	a8 1a       	sub	r10, r24
    39fe:	b9 0a       	sbc	r11, r25
    3a00:	ca 0a       	sbc	r12, r26
    3a02:	db 0a       	sbc	r13, r27
    3a04:	a0 92 73 21 	sts	0x2173, r10
    3a08:	b0 92 74 21 	sts	0x2174, r11
    3a0c:	c0 92 75 21 	sts	0x2175, r12
    3a10:	d0 92 76 21 	sts	0x2176, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a14:	80 91 5f 21 	lds	r24, 0x215F
    3a18:	90 91 60 21 	lds	r25, 0x2160
    3a1c:	a0 91 61 21 	lds	r26, 0x2161
    3a20:	b0 91 62 21 	lds	r27, 0x2162
    3a24:	19 01       	movw	r2, r18
    3a26:	2a 01       	movw	r4, r20
    3a28:	28 1a       	sub	r2, r24
    3a2a:	39 0a       	sbc	r3, r25
    3a2c:	4a 0a       	sbc	r4, r26
    3a2e:	5b 0a       	sbc	r5, r27
    3a30:	20 92 77 21 	sts	0x2177, r2
    3a34:	30 92 78 21 	sts	0x2178, r3
    3a38:	40 92 79 21 	sts	0x2179, r4
    3a3c:	50 92 7a 21 	sts	0x217A, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3a40:	d6 01       	movw	r26, r12
    3a42:	c5 01       	movw	r24, r10
    3a44:	8e 0d       	add	r24, r14
    3a46:	9f 1d       	adc	r25, r15
    3a48:	a0 1f       	adc	r26, r16
    3a4a:	b1 1f       	adc	r27, r17
    3a4c:	82 0d       	add	r24, r2
    3a4e:	93 1d       	adc	r25, r3
    3a50:	a4 1d       	adc	r26, r4
    3a52:	b5 1d       	adc	r27, r5
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	a1 05       	cpc	r26, r1
    3a58:	b1 05       	cpc	r27, r1
    3a5a:	19 f4       	brne	.+6      	; 0x3a62 <mc_line+0x18c>
    3a5c:	23 e1       	ldi	r18, 0x13	; 19
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	72 c0       	rjmp	.+228    	; 0x3b46 <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    3a62:	49 89       	ldd	r20, Y+17	; 0x11
    3a64:	5a 89       	ldd	r21, Y+18	; 0x12
    3a66:	45 2b       	or	r20, r21
    3a68:	59 f0       	breq	.+22     	; 0x3a80 <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a6a:	60 ec       	ldi	r22, 0xC0	; 192
    3a6c:	71 ee       	ldi	r23, 0xE1	; 225
    3a6e:	84 e6       	ldi	r24, 0x64	; 100
    3a70:	9c e4       	ldi	r25, 0x4C	; 76
    3a72:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a74:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a76:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a78:	58 89       	ldd	r21, Y+16	; 0x10
    3a7a:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3a7e:	4a c0       	rjmp	.+148    	; 0x3b14 <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a80:	c8 01       	movw	r24, r16
    3a82:	b7 01       	movw	r22, r14
    3a84:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3a88:	29 85       	ldd	r18, Y+9	; 0x09
    3a8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a90:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3a94:	0e 94 4d 44 	call	0x889a	; 0x889a <square>
    3a98:	3b 01       	movw	r6, r22
    3a9a:	4c 01       	movw	r8, r24
    3a9c:	c6 01       	movw	r24, r12
    3a9e:	b5 01       	movw	r22, r10
    3aa0:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3aa4:	2d 81       	ldd	r18, Y+5	; 0x05
    3aa6:	3e 81       	ldd	r19, Y+6	; 0x06
    3aa8:	4f 81       	ldd	r20, Y+7	; 0x07
    3aaa:	58 85       	ldd	r21, Y+8	; 0x08
    3aac:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3ab0:	0e 94 4d 44 	call	0x889a	; 0x889a <square>
    3ab4:	5b 01       	movw	r10, r22
    3ab6:	6c 01       	movw	r12, r24
    3ab8:	c2 01       	movw	r24, r4
    3aba:	b1 01       	movw	r22, r2
    3abc:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3ac0:	29 81       	ldd	r18, Y+1	; 0x01
    3ac2:	3a 81       	ldd	r19, Y+2	; 0x02
    3ac4:	4b 81       	ldd	r20, Y+3	; 0x03
    3ac6:	5c 81       	ldd	r21, Y+4	; 0x04
    3ac8:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3acc:	0e 94 4d 44 	call	0x889a	; 0x889a <square>
    3ad0:	7b 01       	movw	r14, r22
    3ad2:	8c 01       	movw	r16, r24
    3ad4:	c4 01       	movw	r24, r8
    3ad6:	b3 01       	movw	r22, r6
    3ad8:	a6 01       	movw	r20, r12
    3ada:	95 01       	movw	r18, r10
    3adc:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    3ae0:	a8 01       	movw	r20, r16
    3ae2:	97 01       	movw	r18, r14
    3ae4:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    3ae8:	0e 94 0f 44 	call	0x881e	; 0x881e <sqrt>
    3aec:	60 93 7f 21 	sts	0x217F, r22
    3af0:	70 93 80 21 	sts	0x2180, r23
    3af4:	80 93 81 21 	sts	0x2181, r24
    3af8:	90 93 82 21 	sts	0x2182, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3afc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3afe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b00:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b02:	58 89       	ldd	r21, Y+16	; 0x10
    3b04:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	34 e2       	ldi	r19, 0x24	; 36
    3b0c:	44 e7       	ldi	r20, 0x74	; 116
    3b0e:	59 e4       	ldi	r21, 0x49	; 73
    3b10:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3b14:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    3b18:	60 93 7b 21 	sts	0x217B, r22
    3b1c:	70 93 7c 21 	sts	0x217C, r23
    3b20:	80 93 7d 21 	sts	0x217D, r24
    3b24:	90 93 7e 21 	sts	0x217E, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	80 93 56 21 	sts	0x2156, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b2e:	e7 e5       	ldi	r30, 0x57	; 87
    3b30:	f1 e2       	ldi	r31, 0x21	; 33
    3b32:	df 01       	movw	r26, r30
    3b34:	1c 96       	adiw	r26, 0x0c	; 12
    3b36:	8c e0       	ldi	r24, 0x0C	; 12
    3b38:	0d 90       	ld	r0, X+
    3b3a:	01 92       	st	Z+, r0
    3b3c:	81 50       	subi	r24, 0x01	; 1
    3b3e:	e1 f7       	brne	.-8      	; 0x3b38 <mc_line+0x262>
	return (mc_line_continue());
    3b40:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_line_continue>
    3b44:	9c 01       	movw	r18, r24
}
    3b46:	c9 01       	movw	r24, r18
    3b48:	62 96       	adiw	r28, 0x12	; 18
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	cf 91       	pop	r28
    3b50:	df 91       	pop	r29
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	df 90       	pop	r13
    3b5c:	cf 90       	pop	r12
    3b5e:	bf 90       	pop	r11
    3b60:	af 90       	pop	r10
    3b62:	9f 90       	pop	r9
    3b64:	8f 90       	pop	r8
    3b66:	7f 90       	pop	r7
    3b68:	6f 90       	pop	r6
    3b6a:	5f 90       	pop	r5
    3b6c:	4f 90       	pop	r4
    3b6e:	3f 90       	pop	r3
    3b70:	2f 90       	pop	r2
    3b72:	08 95       	ret

00003b74 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b74:	8f 92       	push	r8
    3b76:	9f 92       	push	r9
    3b78:	af 92       	push	r10
    3b7a:	bf 92       	push	r11
    3b7c:	cf 92       	push	r12
    3b7e:	df 92       	push	r13
    3b80:	ef 92       	push	r14
    3b82:	ff 92       	push	r15
    3b84:	0f 93       	push	r16
    3b86:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b88:	80 91 eb 22 	lds	r24, 0x22EB
    3b8c:	88 23       	and	r24, r24
    3b8e:	19 f4       	brne	.+6      	; 0x3b96 <mc_arc_continue+0x22>
    3b90:	23 e0       	ldi	r18, 0x03	; 3
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	dd c0       	rjmp	.+442    	; 0x3d50 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b96:	81 30       	cpi	r24, 0x01	; 1
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <mc_arc_continue+0x28>
    3b9a:	ca c0       	rjmp	.+404    	; 0x3d30 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3b9c:	10 92 ee 22 	sts	0x22EE, r1
    3ba0:	10 92 ef 22 	sts	0x22EF, r1
		ma.arc_state = MC_STATE_RUNNING;
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	80 93 eb 22 	sts	0x22EB, r24
    3baa:	c2 c0       	rjmp	.+388    	; 0x3d30 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3bac:	0e 94 ba 2c 	call	0x5974	; 0x5974 <mv_test_move_buffer_full>
    3bb0:	88 23       	and	r24, r24
    3bb2:	19 f0       	breq	.+6      	; 0x3bba <mc_arc_continue+0x46>
    3bb4:	22 e0       	ldi	r18, 0x02	; 2
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	cb c0       	rjmp	.+406    	; 0x3d50 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3bba:	80 91 ee 22 	lds	r24, 0x22EE
    3bbe:	90 91 ef 22 	lds	r25, 0x22EF
    3bc2:	01 96       	adiw	r24, 0x01	; 1
    3bc4:	80 93 ee 22 	sts	0x22EE, r24
    3bc8:	90 93 ef 22 	sts	0x22EF, r25
		ma.theta += ma.theta_per_segment;
    3bcc:	60 91 10 23 	lds	r22, 0x2310
    3bd0:	70 91 11 23 	lds	r23, 0x2311
    3bd4:	80 91 12 23 	lds	r24, 0x2312
    3bd8:	90 91 13 23 	lds	r25, 0x2313
    3bdc:	20 91 1c 23 	lds	r18, 0x231C
    3be0:	30 91 1d 23 	lds	r19, 0x231D
    3be4:	40 91 1e 23 	lds	r20, 0x231E
    3be8:	50 91 1f 23 	lds	r21, 0x231F
    3bec:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    3bf0:	7b 01       	movw	r14, r22
    3bf2:	8c 01       	movw	r16, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	d8 01       	movw	r26, r16
    3bf8:	80 93 10 23 	sts	0x2310, r24
    3bfc:	90 93 11 23 	sts	0x2311, r25
    3c00:	a0 93 12 23 	sts	0x2312, r26
    3c04:	b0 93 13 23 	sts	0x2313, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3c08:	b7 01       	movw	r22, r14
    3c0a:	c8 01       	movw	r24, r16
    3c0c:	0e 94 05 44 	call	0x880a	; 0x880a <sin>
    3c10:	80 90 14 23 	lds	r8, 0x2314
    3c14:	90 90 15 23 	lds	r9, 0x2315
    3c18:	a0 90 16 23 	lds	r10, 0x2316
    3c1c:	b0 90 17 23 	lds	r11, 0x2317
    3c20:	c0 90 f2 22 	lds	r12, 0x22F2
    3c24:	d0 90 f3 22 	lds	r13, 0x22F3
    3c28:	cc 0c       	add	r12, r12
    3c2a:	dd 1c       	adc	r13, r13
    3c2c:	cc 0c       	add	r12, r12
    3c2e:	dd 1c       	adc	r13, r13
    3c30:	2b ee       	ldi	r18, 0xEB	; 235
    3c32:	32 e2       	ldi	r19, 0x22	; 34
    3c34:	c2 0e       	add	r12, r18
    3c36:	d3 1e       	adc	r13, r19
    3c38:	a5 01       	movw	r20, r10
    3c3a:	94 01       	movw	r18, r8
    3c3c:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3c40:	9b 01       	movw	r18, r22
    3c42:	ac 01       	movw	r20, r24
    3c44:	60 91 08 23 	lds	r22, 0x2308
    3c48:	70 91 09 23 	lds	r23, 0x2309
    3c4c:	80 91 0a 23 	lds	r24, 0x230A
    3c50:	90 91 0b 23 	lds	r25, 0x230B
    3c54:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    3c58:	f6 01       	movw	r30, r12
    3c5a:	65 87       	std	Z+13, r22	; 0x0d
    3c5c:	76 87       	std	Z+14, r23	; 0x0e
    3c5e:	87 87       	std	Z+15, r24	; 0x0f
    3c60:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c62:	b7 01       	movw	r22, r14
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <cos>
    3c6a:	00 91 f4 22 	lds	r16, 0x22F4
    3c6e:	10 91 f5 22 	lds	r17, 0x22F5
    3c72:	00 0f       	add	r16, r16
    3c74:	11 1f       	adc	r17, r17
    3c76:	00 0f       	add	r16, r16
    3c78:	11 1f       	adc	r17, r17
    3c7a:	05 51       	subi	r16, 0x15	; 21
    3c7c:	1d 4d       	sbci	r17, 0xDD	; 221
    3c7e:	a5 01       	movw	r20, r10
    3c80:	94 01       	movw	r18, r8
    3c82:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3c86:	9b 01       	movw	r18, r22
    3c88:	ac 01       	movw	r20, r24
    3c8a:	60 91 0c 23 	lds	r22, 0x230C
    3c8e:	70 91 0d 23 	lds	r23, 0x230D
    3c92:	80 91 0e 23 	lds	r24, 0x230E
    3c96:	90 91 0f 23 	lds	r25, 0x230F
    3c9a:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    3c9e:	f8 01       	movw	r30, r16
    3ca0:	65 87       	std	Z+13, r22	; 0x0d
    3ca2:	76 87       	std	Z+14, r23	; 0x0e
    3ca4:	87 87       	std	Z+15, r24	; 0x0f
    3ca6:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3ca8:	00 91 f6 22 	lds	r16, 0x22F6
    3cac:	10 91 f7 22 	lds	r17, 0x22F7
    3cb0:	00 0f       	add	r16, r16
    3cb2:	11 1f       	adc	r17, r17
    3cb4:	00 0f       	add	r16, r16
    3cb6:	11 1f       	adc	r17, r17
    3cb8:	05 51       	subi	r16, 0x15	; 21
    3cba:	1d 4d       	sbci	r17, 0xDD	; 221
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	65 85       	ldd	r22, Z+13	; 0x0d
    3cc0:	76 85       	ldd	r23, Z+14	; 0x0e
    3cc2:	87 85       	ldd	r24, Z+15	; 0x0f
    3cc4:	90 89       	ldd	r25, Z+16	; 0x10
    3cc6:	20 91 20 23 	lds	r18, 0x2320
    3cca:	30 91 21 23 	lds	r19, 0x2321
    3cce:	40 91 22 23 	lds	r20, 0x2322
    3cd2:	50 91 23 23 	lds	r21, 0x2323
    3cd6:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    3cda:	f8 01       	movw	r30, r16
    3cdc:	65 87       	std	Z+13, r22	; 0x0d
    3cde:	76 87       	std	Z+14, r23	; 0x0e
    3ce0:	87 87       	std	Z+15, r24	; 0x0f
    3ce2:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3ce4:	60 91 f8 22 	lds	r22, 0x22F8
    3ce8:	70 91 f9 22 	lds	r23, 0x22F9
    3cec:	80 91 fa 22 	lds	r24, 0x22FA
    3cf0:	90 91 fb 22 	lds	r25, 0x22FB
    3cf4:	20 91 fc 22 	lds	r18, 0x22FC
    3cf8:	30 91 fd 22 	lds	r19, 0x22FD
    3cfc:	40 91 fe 22 	lds	r20, 0x22FE
    3d00:	50 91 ff 22 	lds	r21, 0x22FF
    3d04:	e0 90 00 23 	lds	r14, 0x2300
    3d08:	f0 90 01 23 	lds	r15, 0x2301
    3d0c:	00 91 02 23 	lds	r16, 0x2302
    3d10:	10 91 03 23 	lds	r17, 0x2303
    3d14:	a0 90 18 23 	lds	r10, 0x2318
    3d18:	b0 90 19 23 	lds	r11, 0x2319
    3d1c:	c0 90 1a 23 	lds	r12, 0x231A
    3d20:	d0 90 1b 23 	lds	r13, 0x231B
    3d24:	80 90 f0 22 	lds	r8, 0x22F0
    3d28:	90 90 f1 22 	lds	r9, 0x22F1
    3d2c:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d30:	20 91 ee 22 	lds	r18, 0x22EE
    3d34:	30 91 ef 22 	lds	r19, 0x22EF
    3d38:	80 91 ec 22 	lds	r24, 0x22EC
    3d3c:	90 91 ed 22 	lds	r25, 0x22ED
    3d40:	82 17       	cp	r24, r18
    3d42:	93 07       	cpc	r25, r19
    3d44:	0c f0       	brlt	.+2      	; 0x3d48 <mc_arc_continue+0x1d4>
    3d46:	32 cf       	rjmp	.-412    	; 0x3bac <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d48:	10 92 eb 22 	sts	0x22EB, r1
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d50:	c9 01       	movw	r24, r18
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	cf 90       	pop	r12
    3d5e:	bf 90       	pop	r11
    3d60:	af 90       	pop	r10
    3d62:	9f 90       	pop	r9
    3d64:	8f 90       	pop	r8
    3d66:	08 95       	ret

00003d68 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d68:	2f 92       	push	r2
    3d6a:	3f 92       	push	r3
    3d6c:	4f 92       	push	r4
    3d6e:	5f 92       	push	r5
    3d70:	6f 92       	push	r6
    3d72:	7f 92       	push	r7
    3d74:	8f 92       	push	r8
    3d76:	9f 92       	push	r9
    3d78:	af 92       	push	r10
    3d7a:	bf 92       	push	r11
    3d7c:	cf 92       	push	r12
    3d7e:	df 92       	push	r13
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	28 97       	sbiw	r28, 0x08	; 8
    3d92:	cd bf       	out	0x3d, r28	; 61
    3d94:	de bf       	out	0x3e, r29	; 62
    3d96:	69 83       	std	Y+1, r22	; 0x01
    3d98:	7a 83       	std	Y+2, r23	; 0x02
    3d9a:	8b 83       	std	Y+3, r24	; 0x03
    3d9c:	9c 83       	std	Y+4, r25	; 0x04
    3d9e:	29 01       	movw	r4, r18
    3da0:	3a 01       	movw	r6, r20
    3da2:	ed 82       	std	Y+5, r14	; 0x05
    3da4:	fe 82       	std	Y+6, r15	; 0x06
    3da6:	0f 83       	std	Y+7, r16	; 0x07
    3da8:	18 87       	std	Y+8, r17	; 0x08
    3daa:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3dac:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3dae:	60 93 10 23 	sts	0x2310, r22
    3db2:	70 93 11 23 	sts	0x2311, r23
    3db6:	80 93 12 23 	sts	0x2312, r24
    3dba:	90 93 13 23 	sts	0x2313, r25
	ma.radius = radius;
    3dbe:	e0 92 14 23 	sts	0x2314, r14
    3dc2:	f0 92 15 23 	sts	0x2315, r15
    3dc6:	00 93 16 23 	sts	0x2316, r16
    3dca:	10 93 17 23 	sts	0x2317, r17
	ma.angular_travel = angular_travel;
    3dce:	20 93 24 23 	sts	0x2324, r18
    3dd2:	30 93 25 23 	sts	0x2325, r19
    3dd6:	40 93 26 23 	sts	0x2326, r20
    3dda:	50 93 27 23 	sts	0x2327, r21
	ma.linear_travel = linear_travel;
    3dde:	a0 92 28 23 	sts	0x2328, r10
    3de2:	b0 92 29 23 	sts	0x2329, r11
    3de6:	c0 92 2a 23 	sts	0x232A, r12
    3dea:	d0 92 2b 23 	sts	0x232B, r13
	ma.feed_rate = feed_rate;
    3dee:	8a a1       	ldd	r24, Y+34	; 0x22
    3df0:	9b a1       	ldd	r25, Y+35	; 0x23
    3df2:	ac a1       	ldd	r26, Y+36	; 0x24
    3df4:	bd a1       	ldd	r27, Y+37	; 0x25
    3df6:	80 93 18 23 	sts	0x2318, r24
    3dfa:	90 93 19 23 	sts	0x2319, r25
    3dfe:	a0 93 1a 23 	sts	0x231A, r26
    3e02:	b0 93 1b 23 	sts	0x231B, r27
	ma.invert_feed_rate = invert_feed_rate;
    3e06:	ae a1       	ldd	r26, Y+38	; 0x26
    3e08:	bf a1       	ldd	r27, Y+39	; 0x27
    3e0a:	a0 93 f0 22 	sts	0x22F0, r26
    3e0e:	b0 93 f1 22 	sts	0x22F1, r27
	ma.axis_1 = axis_1;
    3e12:	80 92 f2 22 	sts	0x22F2, r8
    3e16:	90 92 f3 22 	sts	0x22F3, r9
	ma.axis_2 = axis_2;
    3e1a:	20 92 f4 22 	sts	0x22F4, r2
    3e1e:	30 92 f5 22 	sts	0x22F5, r3
	ma.axis_linear = axis_linear;
    3e22:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e24:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e26:	e0 93 f6 22 	sts	0x22F6, r30
    3e2a:	f0 93 f7 22 	sts	0x22F7, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e2e:	ca 01       	movw	r24, r20
    3e30:	b9 01       	movw	r22, r18
    3e32:	a8 01       	movw	r20, r16
    3e34:	97 01       	movw	r18, r14
    3e36:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3e3a:	7b 01       	movw	r14, r22
    3e3c:	8c 01       	movw	r16, r24
    3e3e:	c6 01       	movw	r24, r12
    3e40:	b5 01       	movw	r22, r10
    3e42:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    3e46:	97 ff       	sbrs	r25, 7
    3e48:	07 c0       	rjmp	.+14     	; 0x3e58 <mc_arc+0xf0>
    3e4a:	90 95       	com	r25
    3e4c:	80 95       	com	r24
    3e4e:	70 95       	com	r23
    3e50:	61 95       	neg	r22
    3e52:	7f 4f       	sbci	r23, 0xFF	; 255
    3e54:	8f 4f       	sbci	r24, 0xFF	; 255
    3e56:	9f 4f       	sbci	r25, 0xFF	; 255
    3e58:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3e5c:	9b 01       	movw	r18, r22
    3e5e:	ac 01       	movw	r20, r24
    3e60:	c8 01       	movw	r24, r16
    3e62:	b7 01       	movw	r22, r14
    3e64:	0e 94 dd 42 	call	0x85ba	; 0x85ba <hypot>
    3e68:	7b 01       	movw	r14, r22
    3e6a:	8c 01       	movw	r16, r24
    3e6c:	60 93 04 23 	sts	0x2304, r22
    3e70:	70 93 05 23 	sts	0x2305, r23
    3e74:	80 93 06 23 	sts	0x2306, r24
    3e78:	90 93 07 23 	sts	0x2307, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e7c:	2a e0       	ldi	r18, 0x0A	; 10
    3e7e:	37 ed       	ldi	r19, 0xD7	; 215
    3e80:	43 e2       	ldi	r20, 0x23	; 35
    3e82:	5c e3       	ldi	r21, 0x3C	; 60
    3e84:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <__cmpsf2>
    3e88:	88 23       	and	r24, r24
    3e8a:	1c f4       	brge	.+6      	; 0x3e92 <mc_arc+0x12a>
    3e8c:	22 e1       	ldi	r18, 0x12	; 18
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	fb c0       	rjmp	.+502    	; 0x4088 <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e92:	c8 01       	movw	r24, r16
    3e94:	b7 01       	movw	r22, r14
    3e96:	20 91 7f 22 	lds	r18, 0x227F
    3e9a:	30 91 80 22 	lds	r19, 0x2280
    3e9e:	40 91 81 22 	lds	r20, 0x2281
    3ea2:	50 91 82 22 	lds	r21, 0x2282
    3ea6:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3eaa:	0e 94 cd 40 	call	0x819a	; 0x819a <ceil>
    3eae:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    3eb2:	8b 01       	movw	r16, r22
    3eb4:	60 93 ec 22 	sts	0x22EC, r22
    3eb8:	70 93 ed 22 	sts	0x22ED, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3ebc:	8e a1       	ldd	r24, Y+38	; 0x26
    3ebe:	9f a1       	ldd	r25, Y+39	; 0x27
    3ec0:	89 2b       	or	r24, r25
    3ec2:	b9 f0       	breq	.+46     	; 0x3ef2 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3ec4:	b8 01       	movw	r22, r16
    3ec6:	88 27       	eor	r24, r24
    3ec8:	77 fd       	sbrc	r23, 7
    3eca:	80 95       	com	r24
    3ecc:	98 2f       	mov	r25, r24
    3ece:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3ed2:	9b 01       	movw	r18, r22
    3ed4:	ac 01       	movw	r20, r24
    3ed6:	6a a1       	ldd	r22, Y+34	; 0x22
    3ed8:	7b a1       	ldd	r23, Y+35	; 0x23
    3eda:	8c a1       	ldd	r24, Y+36	; 0x24
    3edc:	9d a1       	ldd	r25, Y+37	; 0x25
    3ede:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3ee2:	60 93 18 23 	sts	0x2318, r22
    3ee6:	70 93 19 23 	sts	0x2319, r23
    3eea:	80 93 1a 23 	sts	0x231A, r24
    3eee:	90 93 1b 23 	sts	0x231B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3ef2:	b8 01       	movw	r22, r16
    3ef4:	88 27       	eor	r24, r24
    3ef6:	77 fd       	sbrc	r23, 7
    3ef8:	80 95       	com	r24
    3efa:	98 2f       	mov	r25, r24
    3efc:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3f00:	7b 01       	movw	r14, r22
    3f02:	8c 01       	movw	r16, r24
    3f04:	c3 01       	movw	r24, r6
    3f06:	b2 01       	movw	r22, r4
    3f08:	a8 01       	movw	r20, r16
    3f0a:	97 01       	movw	r18, r14
    3f0c:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3f10:	60 93 1c 23 	sts	0x231C, r22
    3f14:	70 93 1d 23 	sts	0x231D, r23
    3f18:	80 93 1e 23 	sts	0x231E, r24
    3f1c:	90 93 1f 23 	sts	0x231F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f20:	c6 01       	movw	r24, r12
    3f22:	b5 01       	movw	r22, r10
    3f24:	a8 01       	movw	r20, r16
    3f26:	97 01       	movw	r18, r14
    3f28:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3f2c:	60 93 20 23 	sts	0x2320, r22
    3f30:	70 93 21 23 	sts	0x2321, r23
    3f34:	80 93 22 23 	sts	0x2322, r24
    3f38:	90 93 23 23 	sts	0x2323, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f3c:	69 81       	ldd	r22, Y+1	; 0x01
    3f3e:	7a 81       	ldd	r23, Y+2	; 0x02
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	9c 81       	ldd	r25, Y+4	; 0x04
    3f44:	0e 94 05 44 	call	0x880a	; 0x880a <sin>
    3f48:	5b 01       	movw	r10, r22
    3f4a:	6c 01       	movw	r12, r24
    3f4c:	f4 01       	movw	r30, r8
    3f4e:	ee 0f       	add	r30, r30
    3f50:	ff 1f       	adc	r31, r31
    3f52:	ee 0f       	add	r30, r30
    3f54:	ff 1f       	adc	r31, r31
    3f56:	ea 5a       	subi	r30, 0xAA	; 170
    3f58:	fe 4d       	sbci	r31, 0xDE	; 222
    3f5a:	61 81       	ldd	r22, Z+1	; 0x01
    3f5c:	72 81       	ldd	r23, Z+2	; 0x02
    3f5e:	83 81       	ldd	r24, Z+3	; 0x03
    3f60:	94 81       	ldd	r25, Z+4	; 0x04
    3f62:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3f66:	f4 01       	movw	r30, r8
    3f68:	ee 0f       	add	r30, r30
    3f6a:	ff 1f       	adc	r31, r31
    3f6c:	e8 0d       	add	r30, r8
    3f6e:	f9 1d       	adc	r31, r9
    3f70:	13 e0       	ldi	r17, 0x03	; 3
    3f72:	ee 0f       	add	r30, r30
    3f74:	ff 1f       	adc	r31, r31
    3f76:	1a 95       	dec	r17
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <mc_arc+0x20a>
    3f7a:	e3 58       	subi	r30, 0x83	; 131
    3f7c:	fd 4d       	sbci	r31, 0xDD	; 221
    3f7e:	21 a1       	ldd	r18, Z+33	; 0x21
    3f80:	32 a1       	ldd	r19, Z+34	; 0x22
    3f82:	43 a1       	ldd	r20, Z+35	; 0x23
    3f84:	54 a1       	ldd	r21, Z+36	; 0x24
    3f86:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    3f8a:	7b 01       	movw	r14, r22
    3f8c:	8c 01       	movw	r16, r24
    3f8e:	c6 01       	movw	r24, r12
    3f90:	b5 01       	movw	r22, r10
    3f92:	2d 81       	ldd	r18, Y+5	; 0x05
    3f94:	3e 81       	ldd	r19, Y+6	; 0x06
    3f96:	4f 81       	ldd	r20, Y+7	; 0x07
    3f98:	58 85       	ldd	r21, Y+8	; 0x08
    3f9a:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    3f9e:	9b 01       	movw	r18, r22
    3fa0:	ac 01       	movw	r20, r24
    3fa2:	c8 01       	movw	r24, r16
    3fa4:	b7 01       	movw	r22, r14
    3fa6:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    3faa:	60 93 08 23 	sts	0x2308, r22
    3fae:	70 93 09 23 	sts	0x2309, r23
    3fb2:	80 93 0a 23 	sts	0x230A, r24
    3fb6:	90 93 0b 23 	sts	0x230B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3fba:	69 81       	ldd	r22, Y+1	; 0x01
    3fbc:	7a 81       	ldd	r23, Y+2	; 0x02
    3fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc2:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <cos>
    3fc6:	5b 01       	movw	r10, r22
    3fc8:	6c 01       	movw	r12, r24
    3fca:	f1 01       	movw	r30, r2
    3fcc:	ee 0f       	add	r30, r30
    3fce:	ff 1f       	adc	r31, r31
    3fd0:	ee 0f       	add	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	ea 5a       	subi	r30, 0xAA	; 170
    3fd6:	fe 4d       	sbci	r31, 0xDE	; 222
    3fd8:	61 81       	ldd	r22, Z+1	; 0x01
    3fda:	72 81       	ldd	r23, Z+2	; 0x02
    3fdc:	83 81       	ldd	r24, Z+3	; 0x03
    3fde:	94 81       	ldd	r25, Z+4	; 0x04
    3fe0:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    3fe4:	f1 01       	movw	r30, r2
    3fe6:	ee 0f       	add	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	e2 0d       	add	r30, r2
    3fec:	f3 1d       	adc	r31, r3
    3fee:	53 e0       	ldi	r21, 0x03	; 3
    3ff0:	ee 0f       	add	r30, r30
    3ff2:	ff 1f       	adc	r31, r31
    3ff4:	5a 95       	dec	r21
    3ff6:	e1 f7       	brne	.-8      	; 0x3ff0 <mc_arc+0x288>
    3ff8:	e3 58       	subi	r30, 0x83	; 131
    3ffa:	fd 4d       	sbci	r31, 0xDD	; 221
    3ffc:	21 a1       	ldd	r18, Z+33	; 0x21
    3ffe:	32 a1       	ldd	r19, Z+34	; 0x22
    4000:	43 a1       	ldd	r20, Z+35	; 0x23
    4002:	54 a1       	ldd	r21, Z+36	; 0x24
    4004:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    4008:	7b 01       	movw	r14, r22
    400a:	8c 01       	movw	r16, r24
    400c:	c6 01       	movw	r24, r12
    400e:	b5 01       	movw	r22, r10
    4010:	2d 81       	ldd	r18, Y+5	; 0x05
    4012:	3e 81       	ldd	r19, Y+6	; 0x06
    4014:	4f 81       	ldd	r20, Y+7	; 0x07
    4016:	58 85       	ldd	r21, Y+8	; 0x08
    4018:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    401c:	9b 01       	movw	r18, r22
    401e:	ac 01       	movw	r20, r24
    4020:	c8 01       	movw	r24, r16
    4022:	b7 01       	movw	r22, r14
    4024:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    4028:	60 93 0c 23 	sts	0x230C, r22
    402c:	70 93 0d 23 	sts	0x230D, r23
    4030:	80 93 0e 23 	sts	0x230E, r24
    4034:	90 93 0f 23 	sts	0x230F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4038:	e8 a1       	ldd	r30, Y+32	; 0x20
    403a:	f9 a1       	ldd	r31, Y+33	; 0x21
    403c:	ee 0f       	add	r30, r30
    403e:	ff 1f       	adc	r31, r31
    4040:	ee 0f       	add	r30, r30
    4042:	ff 1f       	adc	r31, r31
    4044:	8f 01       	movw	r16, r30
    4046:	05 51       	subi	r16, 0x15	; 21
    4048:	1d 4d       	sbci	r17, 0xDD	; 221
    404a:	ea 5a       	subi	r30, 0xAA	; 170
    404c:	fe 4d       	sbci	r31, 0xDE	; 222
    404e:	61 81       	ldd	r22, Z+1	; 0x01
    4050:	72 81       	ldd	r23, Z+2	; 0x02
    4052:	83 81       	ldd	r24, Z+3	; 0x03
    4054:	94 81       	ldd	r25, Z+4	; 0x04
    4056:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    405a:	20 91 ce 22 	lds	r18, 0x22CE
    405e:	30 91 cf 22 	lds	r19, 0x22CF
    4062:	40 91 d0 22 	lds	r20, 0x22D0
    4066:	50 91 d1 22 	lds	r21, 0x22D1
    406a:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    406e:	d8 01       	movw	r26, r16
    4070:	1d 96       	adiw	r26, 0x0d	; 13
    4072:	6d 93       	st	X+, r22
    4074:	7d 93       	st	X+, r23
    4076:	8d 93       	st	X+, r24
    4078:	9c 93       	st	X, r25
    407a:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	80 93 eb 22 	sts	0x22EB, r24
	return (mc_arc_continue());
    4082:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <mc_arc_continue>
    4086:	9c 01       	movw	r18, r24
}
    4088:	c9 01       	movw	r24, r18
    408a:	28 96       	adiw	r28, 0x08	; 8
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	de bf       	out	0x3e, r29	; 62
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	ff 90       	pop	r15
    409a:	ef 90       	pop	r14
    409c:	df 90       	pop	r13
    409e:	cf 90       	pop	r12
    40a0:	bf 90       	pop	r11
    40a2:	af 90       	pop	r10
    40a4:	9f 90       	pop	r9
    40a6:	8f 90       	pop	r8
    40a8:	7f 90       	pop	r7
    40aa:	6f 90       	pop	r6
    40ac:	5f 90       	pop	r5
    40ae:	4f 90       	pop	r4
    40b0:	3f 90       	pop	r3
    40b2:	2f 90       	pop	r2
    40b4:	08 95       	ret

000040b6 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    40b6:	2f 92       	push	r2
    40b8:	3f 92       	push	r3
    40ba:	4f 92       	push	r4
    40bc:	5f 92       	push	r5
    40be:	6f 92       	push	r6
    40c0:	7f 92       	push	r7
    40c2:	8f 92       	push	r8
    40c4:	9f 92       	push	r9
    40c6:	af 92       	push	r10
    40c8:	bf 92       	push	r11
    40ca:	cf 92       	push	r12
    40cc:	df 92       	push	r13
    40ce:	ef 92       	push	r14
    40d0:	ff 92       	push	r15
    40d2:	0f 93       	push	r16
    40d4:	1f 93       	push	r17
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	28 97       	sbiw	r28, 0x08	; 8
    40e0:	cd bf       	out	0x3d, r28	; 61
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	69 83       	std	Y+1, r22	; 0x01
    40e6:	7a 83       	std	Y+2, r23	; 0x02
    40e8:	8b 83       	std	Y+3, r24	; 0x03
    40ea:	9c 83       	std	Y+4, r25	; 0x04
    40ec:	29 01       	movw	r4, r18
    40ee:	3a 01       	movw	r6, r20
    40f0:	ed 82       	std	Y+5, r14	; 0x05
    40f2:	fe 82       	std	Y+6, r15	; 0x06
    40f4:	0f 83       	std	Y+7, r16	; 0x07
    40f6:	18 87       	std	Y+8, r17	; 0x08
    40f8:	2e 8c       	ldd	r2, Y+30	; 0x1e
    40fa:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    40fc:	60 93 10 23 	sts	0x2310, r22
    4100:	70 93 11 23 	sts	0x2311, r23
    4104:	80 93 12 23 	sts	0x2312, r24
    4108:	90 93 13 23 	sts	0x2313, r25
	ma.radius = radius;
    410c:	e0 92 14 23 	sts	0x2314, r14
    4110:	f0 92 15 23 	sts	0x2315, r15
    4114:	00 93 16 23 	sts	0x2316, r16
    4118:	10 93 17 23 	sts	0x2317, r17
	ma.angular_travel = angular_travel;
    411c:	20 93 24 23 	sts	0x2324, r18
    4120:	30 93 25 23 	sts	0x2325, r19
    4124:	40 93 26 23 	sts	0x2326, r20
    4128:	50 93 27 23 	sts	0x2327, r21
	ma.linear_travel = linear_travel;
    412c:	a0 92 28 23 	sts	0x2328, r10
    4130:	b0 92 29 23 	sts	0x2329, r11
    4134:	c0 92 2a 23 	sts	0x232A, r12
    4138:	d0 92 2b 23 	sts	0x232B, r13
	ma.feed_rate = feed_rate;
    413c:	8a a1       	ldd	r24, Y+34	; 0x22
    413e:	9b a1       	ldd	r25, Y+35	; 0x23
    4140:	ac a1       	ldd	r26, Y+36	; 0x24
    4142:	bd a1       	ldd	r27, Y+37	; 0x25
    4144:	80 93 18 23 	sts	0x2318, r24
    4148:	90 93 19 23 	sts	0x2319, r25
    414c:	a0 93 1a 23 	sts	0x231A, r26
    4150:	b0 93 1b 23 	sts	0x231B, r27
	ma.invert_feed_rate = invert_feed_rate;
    4154:	ae a1       	ldd	r26, Y+38	; 0x26
    4156:	bf a1       	ldd	r27, Y+39	; 0x27
    4158:	a0 93 f0 22 	sts	0x22F0, r26
    415c:	b0 93 f1 22 	sts	0x22F1, r27
	ma.axis_1 = axis_1;
    4160:	80 92 f2 22 	sts	0x22F2, r8
    4164:	90 92 f3 22 	sts	0x22F3, r9
	ma.axis_2 = axis_2;
    4168:	20 92 f4 22 	sts	0x22F4, r2
    416c:	30 92 f5 22 	sts	0x22F5, r3
	ma.axis_linear = axis_linear;
    4170:	e8 a1       	ldd	r30, Y+32	; 0x20
    4172:	f9 a1       	ldd	r31, Y+33	; 0x21
    4174:	e0 93 f6 22 	sts	0x22F6, r30
    4178:	f0 93 f7 22 	sts	0x22F7, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    417c:	ca 01       	movw	r24, r20
    417e:	b9 01       	movw	r22, r18
    4180:	a8 01       	movw	r20, r16
    4182:	97 01       	movw	r18, r14
    4184:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    4188:	7b 01       	movw	r14, r22
    418a:	8c 01       	movw	r16, r24
    418c:	c6 01       	movw	r24, r12
    418e:	b5 01       	movw	r22, r10
    4190:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    4194:	97 ff       	sbrs	r25, 7
    4196:	07 c0       	rjmp	.+14     	; 0x41a6 <mc_arc_blocking+0xf0>
    4198:	90 95       	com	r25
    419a:	80 95       	com	r24
    419c:	70 95       	com	r23
    419e:	61 95       	neg	r22
    41a0:	7f 4f       	sbci	r23, 0xFF	; 255
    41a2:	8f 4f       	sbci	r24, 0xFF	; 255
    41a4:	9f 4f       	sbci	r25, 0xFF	; 255
    41a6:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    41aa:	9b 01       	movw	r18, r22
    41ac:	ac 01       	movw	r20, r24
    41ae:	c8 01       	movw	r24, r16
    41b0:	b7 01       	movw	r22, r14
    41b2:	0e 94 dd 42 	call	0x85ba	; 0x85ba <hypot>
    41b6:	7b 01       	movw	r14, r22
    41b8:	8c 01       	movw	r16, r24
    41ba:	60 93 04 23 	sts	0x2304, r22
    41be:	70 93 05 23 	sts	0x2305, r23
    41c2:	80 93 06 23 	sts	0x2306, r24
    41c6:	90 93 07 23 	sts	0x2307, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41ca:	2a e0       	ldi	r18, 0x0A	; 10
    41cc:	37 ed       	ldi	r19, 0xD7	; 215
    41ce:	43 e2       	ldi	r20, 0x23	; 35
    41d0:	5c e3       	ldi	r21, 0x3C	; 60
    41d2:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <__cmpsf2>
    41d6:	88 23       	and	r24, r24
    41d8:	1c f4       	brge	.+6      	; 0x41e0 <mc_arc_blocking+0x12a>
    41da:	22 e1       	ldi	r18, 0x12	; 18
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	c7 c1       	rjmp	.+910    	; 0x456e <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41e0:	c8 01       	movw	r24, r16
    41e2:	b7 01       	movw	r22, r14
    41e4:	20 91 7f 22 	lds	r18, 0x227F
    41e8:	30 91 80 22 	lds	r19, 0x2280
    41ec:	40 91 81 22 	lds	r20, 0x2281
    41f0:	50 91 82 22 	lds	r21, 0x2282
    41f4:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    41f8:	0e 94 cd 40 	call	0x819a	; 0x819a <ceil>
    41fc:	0e 94 4f 41 	call	0x829e	; 0x829e <__fixsfsi>
    4200:	8b 01       	movw	r16, r22
    4202:	60 93 ec 22 	sts	0x22EC, r22
    4206:	70 93 ed 22 	sts	0x22ED, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    420a:	2e a1       	ldd	r18, Y+38	; 0x26
    420c:	3f a1       	ldd	r19, Y+39	; 0x27
    420e:	23 2b       	or	r18, r19
    4210:	b9 f0       	breq	.+46     	; 0x4240 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    4212:	b8 01       	movw	r22, r16
    4214:	88 27       	eor	r24, r24
    4216:	77 fd       	sbrc	r23, 7
    4218:	80 95       	com	r24
    421a:	98 2f       	mov	r25, r24
    421c:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    4220:	9b 01       	movw	r18, r22
    4222:	ac 01       	movw	r20, r24
    4224:	6a a1       	ldd	r22, Y+34	; 0x22
    4226:	7b a1       	ldd	r23, Y+35	; 0x23
    4228:	8c a1       	ldd	r24, Y+36	; 0x24
    422a:	9d a1       	ldd	r25, Y+37	; 0x25
    422c:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    4230:	60 93 18 23 	sts	0x2318, r22
    4234:	70 93 19 23 	sts	0x2319, r23
    4238:	80 93 1a 23 	sts	0x231A, r24
    423c:	90 93 1b 23 	sts	0x231B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4240:	b8 01       	movw	r22, r16
    4242:	88 27       	eor	r24, r24
    4244:	77 fd       	sbrc	r23, 7
    4246:	80 95       	com	r24
    4248:	98 2f       	mov	r25, r24
    424a:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    424e:	7b 01       	movw	r14, r22
    4250:	8c 01       	movw	r16, r24
    4252:	c3 01       	movw	r24, r6
    4254:	b2 01       	movw	r22, r4
    4256:	a8 01       	movw	r20, r16
    4258:	97 01       	movw	r18, r14
    425a:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    425e:	60 93 1c 23 	sts	0x231C, r22
    4262:	70 93 1d 23 	sts	0x231D, r23
    4266:	80 93 1e 23 	sts	0x231E, r24
    426a:	90 93 1f 23 	sts	0x231F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    426e:	c6 01       	movw	r24, r12
    4270:	b5 01       	movw	r22, r10
    4272:	a8 01       	movw	r20, r16
    4274:	97 01       	movw	r18, r14
    4276:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    427a:	60 93 20 23 	sts	0x2320, r22
    427e:	70 93 21 23 	sts	0x2321, r23
    4282:	80 93 22 23 	sts	0x2322, r24
    4286:	90 93 23 23 	sts	0x2323, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    428a:	69 81       	ldd	r22, Y+1	; 0x01
    428c:	7a 81       	ldd	r23, Y+2	; 0x02
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	9c 81       	ldd	r25, Y+4	; 0x04
    4292:	0e 94 05 44 	call	0x880a	; 0x880a <sin>
    4296:	5b 01       	movw	r10, r22
    4298:	6c 01       	movw	r12, r24
    429a:	f4 01       	movw	r30, r8
    429c:	ee 0f       	add	r30, r30
    429e:	ff 1f       	adc	r31, r31
    42a0:	ee 0f       	add	r30, r30
    42a2:	ff 1f       	adc	r31, r31
    42a4:	ea 5a       	subi	r30, 0xAA	; 170
    42a6:	fe 4d       	sbci	r31, 0xDE	; 222
    42a8:	61 81       	ldd	r22, Z+1	; 0x01
    42aa:	72 81       	ldd	r23, Z+2	; 0x02
    42ac:	83 81       	ldd	r24, Z+3	; 0x03
    42ae:	94 81       	ldd	r25, Z+4	; 0x04
    42b0:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    42b4:	f4 01       	movw	r30, r8
    42b6:	ee 0f       	add	r30, r30
    42b8:	ff 1f       	adc	r31, r31
    42ba:	e8 0d       	add	r30, r8
    42bc:	f9 1d       	adc	r31, r9
    42be:	13 e0       	ldi	r17, 0x03	; 3
    42c0:	ee 0f       	add	r30, r30
    42c2:	ff 1f       	adc	r31, r31
    42c4:	1a 95       	dec	r17
    42c6:	e1 f7       	brne	.-8      	; 0x42c0 <mc_arc_blocking+0x20a>
    42c8:	e3 58       	subi	r30, 0x83	; 131
    42ca:	fd 4d       	sbci	r31, 0xDD	; 221
    42cc:	21 a1       	ldd	r18, Z+33	; 0x21
    42ce:	32 a1       	ldd	r19, Z+34	; 0x22
    42d0:	43 a1       	ldd	r20, Z+35	; 0x23
    42d2:	54 a1       	ldd	r21, Z+36	; 0x24
    42d4:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    42d8:	7b 01       	movw	r14, r22
    42da:	8c 01       	movw	r16, r24
    42dc:	c6 01       	movw	r24, r12
    42de:	b5 01       	movw	r22, r10
    42e0:	2d 81       	ldd	r18, Y+5	; 0x05
    42e2:	3e 81       	ldd	r19, Y+6	; 0x06
    42e4:	4f 81       	ldd	r20, Y+7	; 0x07
    42e6:	58 85       	ldd	r21, Y+8	; 0x08
    42e8:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    42ec:	9b 01       	movw	r18, r22
    42ee:	ac 01       	movw	r20, r24
    42f0:	c8 01       	movw	r24, r16
    42f2:	b7 01       	movw	r22, r14
    42f4:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    42f8:	60 93 08 23 	sts	0x2308, r22
    42fc:	70 93 09 23 	sts	0x2309, r23
    4300:	80 93 0a 23 	sts	0x230A, r24
    4304:	90 93 0b 23 	sts	0x230B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4308:	69 81       	ldd	r22, Y+1	; 0x01
    430a:	7a 81       	ldd	r23, Y+2	; 0x02
    430c:	8b 81       	ldd	r24, Y+3	; 0x03
    430e:	9c 81       	ldd	r25, Y+4	; 0x04
    4310:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <cos>
    4314:	5b 01       	movw	r10, r22
    4316:	6c 01       	movw	r12, r24
    4318:	f1 01       	movw	r30, r2
    431a:	ee 0f       	add	r30, r30
    431c:	ff 1f       	adc	r31, r31
    431e:	ee 0f       	add	r30, r30
    4320:	ff 1f       	adc	r31, r31
    4322:	ea 5a       	subi	r30, 0xAA	; 170
    4324:	fe 4d       	sbci	r31, 0xDE	; 222
    4326:	61 81       	ldd	r22, Z+1	; 0x01
    4328:	72 81       	ldd	r23, Z+2	; 0x02
    432a:	83 81       	ldd	r24, Z+3	; 0x03
    432c:	94 81       	ldd	r25, Z+4	; 0x04
    432e:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    4332:	f1 01       	movw	r30, r2
    4334:	ee 0f       	add	r30, r30
    4336:	ff 1f       	adc	r31, r31
    4338:	e2 0d       	add	r30, r2
    433a:	f3 1d       	adc	r31, r3
    433c:	53 e0       	ldi	r21, 0x03	; 3
    433e:	ee 0f       	add	r30, r30
    4340:	ff 1f       	adc	r31, r31
    4342:	5a 95       	dec	r21
    4344:	e1 f7       	brne	.-8      	; 0x433e <mc_arc_blocking+0x288>
    4346:	e3 58       	subi	r30, 0x83	; 131
    4348:	fd 4d       	sbci	r31, 0xDD	; 221
    434a:	21 a1       	ldd	r18, Z+33	; 0x21
    434c:	32 a1       	ldd	r19, Z+34	; 0x22
    434e:	43 a1       	ldd	r20, Z+35	; 0x23
    4350:	54 a1       	ldd	r21, Z+36	; 0x24
    4352:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    4356:	7b 01       	movw	r14, r22
    4358:	8c 01       	movw	r16, r24
    435a:	c6 01       	movw	r24, r12
    435c:	b5 01       	movw	r22, r10
    435e:	2d 81       	ldd	r18, Y+5	; 0x05
    4360:	3e 81       	ldd	r19, Y+6	; 0x06
    4362:	4f 81       	ldd	r20, Y+7	; 0x07
    4364:	58 85       	ldd	r21, Y+8	; 0x08
    4366:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    436a:	9b 01       	movw	r18, r22
    436c:	ac 01       	movw	r20, r24
    436e:	c8 01       	movw	r24, r16
    4370:	b7 01       	movw	r22, r14
    4372:	0e 94 40 40 	call	0x8080	; 0x8080 <__subsf3>
    4376:	60 93 0c 23 	sts	0x230C, r22
    437a:	70 93 0d 23 	sts	0x230D, r23
    437e:	80 93 0e 23 	sts	0x230E, r24
    4382:	90 93 0f 23 	sts	0x230F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4386:	e8 a1       	ldd	r30, Y+32	; 0x20
    4388:	f9 a1       	ldd	r31, Y+33	; 0x21
    438a:	ee 0f       	add	r30, r30
    438c:	ff 1f       	adc	r31, r31
    438e:	ee 0f       	add	r30, r30
    4390:	ff 1f       	adc	r31, r31
    4392:	8f 01       	movw	r16, r30
    4394:	05 51       	subi	r16, 0x15	; 21
    4396:	1d 4d       	sbci	r17, 0xDD	; 221
    4398:	ea 5a       	subi	r30, 0xAA	; 170
    439a:	fe 4d       	sbci	r31, 0xDE	; 222
    439c:	61 81       	ldd	r22, Z+1	; 0x01
    439e:	72 81       	ldd	r23, Z+2	; 0x02
    43a0:	83 81       	ldd	r24, Z+3	; 0x03
    43a2:	94 81       	ldd	r25, Z+4	; 0x04
    43a4:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    43a8:	20 91 ce 22 	lds	r18, 0x22CE
    43ac:	30 91 cf 22 	lds	r19, 0x22CF
    43b0:	40 91 d0 22 	lds	r20, 0x22D0
    43b4:	50 91 d1 22 	lds	r21, 0x22D1
    43b8:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    43bc:	d8 01       	movw	r26, r16
    43be:	1d 96       	adiw	r26, 0x0d	; 13
    43c0:	6d 93       	st	X+, r22
    43c2:	7d 93       	st	X+, r23
    43c4:	8d 93       	st	X+, r24
    43c6:	9c 93       	st	X, r25
    43c8:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43ca:	10 92 ee 22 	sts	0x22EE, r1
    43ce:	10 92 ef 22 	sts	0x22EF, r1
    43d2:	bf c0       	rjmp	.+382    	; 0x4552 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43d4:	60 91 10 23 	lds	r22, 0x2310
    43d8:	70 91 11 23 	lds	r23, 0x2311
    43dc:	80 91 12 23 	lds	r24, 0x2312
    43e0:	90 91 13 23 	lds	r25, 0x2313
    43e4:	20 91 1c 23 	lds	r18, 0x231C
    43e8:	30 91 1d 23 	lds	r19, 0x231D
    43ec:	40 91 1e 23 	lds	r20, 0x231E
    43f0:	50 91 1f 23 	lds	r21, 0x231F
    43f4:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    43f8:	7b 01       	movw	r14, r22
    43fa:	8c 01       	movw	r16, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	d8 01       	movw	r26, r16
    4400:	80 93 10 23 	sts	0x2310, r24
    4404:	90 93 11 23 	sts	0x2311, r25
    4408:	a0 93 12 23 	sts	0x2312, r26
    440c:	b0 93 13 23 	sts	0x2313, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    4410:	b7 01       	movw	r22, r14
    4412:	c8 01       	movw	r24, r16
    4414:	0e 94 05 44 	call	0x880a	; 0x880a <sin>
    4418:	80 90 14 23 	lds	r8, 0x2314
    441c:	90 90 15 23 	lds	r9, 0x2315
    4420:	a0 90 16 23 	lds	r10, 0x2316
    4424:	b0 90 17 23 	lds	r11, 0x2317
    4428:	c0 90 f2 22 	lds	r12, 0x22F2
    442c:	d0 90 f3 22 	lds	r13, 0x22F3
    4430:	cc 0c       	add	r12, r12
    4432:	dd 1c       	adc	r13, r13
    4434:	cc 0c       	add	r12, r12
    4436:	dd 1c       	adc	r13, r13
    4438:	eb ee       	ldi	r30, 0xEB	; 235
    443a:	f2 e2       	ldi	r31, 0x22	; 34
    443c:	ce 0e       	add	r12, r30
    443e:	df 1e       	adc	r13, r31
    4440:	a5 01       	movw	r20, r10
    4442:	94 01       	movw	r18, r8
    4444:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    4448:	9b 01       	movw	r18, r22
    444a:	ac 01       	movw	r20, r24
    444c:	60 91 08 23 	lds	r22, 0x2308
    4450:	70 91 09 23 	lds	r23, 0x2309
    4454:	80 91 0a 23 	lds	r24, 0x230A
    4458:	90 91 0b 23 	lds	r25, 0x230B
    445c:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    4460:	d6 01       	movw	r26, r12
    4462:	1d 96       	adiw	r26, 0x0d	; 13
    4464:	6d 93       	st	X+, r22
    4466:	7d 93       	st	X+, r23
    4468:	8d 93       	st	X+, r24
    446a:	9c 93       	st	X, r25
    446c:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    446e:	b7 01       	movw	r22, r14
    4470:	c8 01       	movw	r24, r16
    4472:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <cos>
    4476:	00 91 f4 22 	lds	r16, 0x22F4
    447a:	10 91 f5 22 	lds	r17, 0x22F5
    447e:	00 0f       	add	r16, r16
    4480:	11 1f       	adc	r17, r17
    4482:	00 0f       	add	r16, r16
    4484:	11 1f       	adc	r17, r17
    4486:	05 51       	subi	r16, 0x15	; 21
    4488:	1d 4d       	sbci	r17, 0xDD	; 221
    448a:	a5 01       	movw	r20, r10
    448c:	94 01       	movw	r18, r8
    448e:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    4492:	9b 01       	movw	r18, r22
    4494:	ac 01       	movw	r20, r24
    4496:	60 91 0c 23 	lds	r22, 0x230C
    449a:	70 91 0d 23 	lds	r23, 0x230D
    449e:	80 91 0e 23 	lds	r24, 0x230E
    44a2:	90 91 0f 23 	lds	r25, 0x230F
    44a6:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    44aa:	f8 01       	movw	r30, r16
    44ac:	65 87       	std	Z+13, r22	; 0x0d
    44ae:	76 87       	std	Z+14, r23	; 0x0e
    44b0:	87 87       	std	Z+15, r24	; 0x0f
    44b2:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    44b4:	00 91 f6 22 	lds	r16, 0x22F6
    44b8:	10 91 f7 22 	lds	r17, 0x22F7
    44bc:	00 0f       	add	r16, r16
    44be:	11 1f       	adc	r17, r17
    44c0:	00 0f       	add	r16, r16
    44c2:	11 1f       	adc	r17, r17
    44c4:	05 51       	subi	r16, 0x15	; 21
    44c6:	1d 4d       	sbci	r17, 0xDD	; 221
    44c8:	d8 01       	movw	r26, r16
    44ca:	1d 96       	adiw	r26, 0x0d	; 13
    44cc:	6d 91       	ld	r22, X+
    44ce:	7d 91       	ld	r23, X+
    44d0:	8d 91       	ld	r24, X+
    44d2:	9c 91       	ld	r25, X
    44d4:	50 97       	sbiw	r26, 0x10	; 16
    44d6:	20 91 20 23 	lds	r18, 0x2320
    44da:	30 91 21 23 	lds	r19, 0x2321
    44de:	40 91 22 23 	lds	r20, 0x2322
    44e2:	50 91 23 23 	lds	r21, 0x2323
    44e6:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    44ea:	f8 01       	movw	r30, r16
    44ec:	65 87       	std	Z+13, r22	; 0x0d
    44ee:	76 87       	std	Z+14, r23	; 0x0e
    44f0:	87 87       	std	Z+15, r24	; 0x0f
    44f2:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44f4:	60 91 f8 22 	lds	r22, 0x22F8
    44f8:	70 91 f9 22 	lds	r23, 0x22F9
    44fc:	80 91 fa 22 	lds	r24, 0x22FA
    4500:	90 91 fb 22 	lds	r25, 0x22FB
    4504:	20 91 fc 22 	lds	r18, 0x22FC
    4508:	30 91 fd 22 	lds	r19, 0x22FD
    450c:	40 91 fe 22 	lds	r20, 0x22FE
    4510:	50 91 ff 22 	lds	r21, 0x22FF
    4514:	e0 90 00 23 	lds	r14, 0x2300
    4518:	f0 90 01 23 	lds	r15, 0x2301
    451c:	00 91 02 23 	lds	r16, 0x2302
    4520:	10 91 03 23 	lds	r17, 0x2303
    4524:	a0 90 18 23 	lds	r10, 0x2318
    4528:	b0 90 19 23 	lds	r11, 0x2319
    452c:	c0 90 1a 23 	lds	r12, 0x231A
    4530:	d0 90 1b 23 	lds	r13, 0x231B
    4534:	80 90 f0 22 	lds	r8, 0x22F0
    4538:	90 90 f1 22 	lds	r9, 0x22F1
    453c:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4540:	80 91 ee 22 	lds	r24, 0x22EE
    4544:	90 91 ef 22 	lds	r25, 0x22EF
    4548:	01 96       	adiw	r24, 0x01	; 1
    454a:	80 93 ee 22 	sts	0x22EE, r24
    454e:	90 93 ef 22 	sts	0x22EF, r25
    4552:	20 91 ee 22 	lds	r18, 0x22EE
    4556:	30 91 ef 22 	lds	r19, 0x22EF
    455a:	80 91 ec 22 	lds	r24, 0x22EC
    455e:	90 91 ed 22 	lds	r25, 0x22ED
    4562:	82 17       	cp	r24, r18
    4564:	93 07       	cpc	r25, r19
    4566:	0c f0       	brlt	.+2      	; 0x456a <mc_arc_blocking+0x4b4>
    4568:	35 cf       	rjmp	.-406    	; 0x43d4 <mc_arc_blocking+0x31e>
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    456e:	c9 01       	movw	r24, r18
    4570:	28 96       	adiw	r28, 0x08	; 8
    4572:	cd bf       	out	0x3d, r28	; 61
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	cf 91       	pop	r28
    4578:	df 91       	pop	r29
    457a:	1f 91       	pop	r17
    457c:	0f 91       	pop	r16
    457e:	ff 90       	pop	r15
    4580:	ef 90       	pop	r14
    4582:	df 90       	pop	r13
    4584:	cf 90       	pop	r12
    4586:	bf 90       	pop	r11
    4588:	af 90       	pop	r10
    458a:	9f 90       	pop	r9
    458c:	8f 90       	pop	r8
    458e:	7f 90       	pop	r7
    4590:	6f 90       	pop	r6
    4592:	5f 90       	pop	r5
    4594:	4f 90       	pop	r4
    4596:	3f 90       	pop	r3
    4598:	2f 90       	pop	r2
    459a:	08 95       	ret

0000459c <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    459c:	2f 92       	push	r2
    459e:	3f 92       	push	r3
    45a0:	4f 92       	push	r4
    45a2:	5f 92       	push	r5
    45a4:	6f 92       	push	r6
    45a6:	7f 92       	push	r7
    45a8:	8f 92       	push	r8
    45aa:	9f 92       	push	r9
    45ac:	af 92       	push	r10
    45ae:	bf 92       	push	r11
    45b0:	cf 92       	push	r12
    45b2:	df 92       	push	r13
    45b4:	ef 92       	push	r14
    45b6:	ff 92       	push	r15
    45b8:	0f 93       	push	r16
    45ba:	1f 93       	push	r17
    45bc:	df 93       	push	r29
    45be:	cf 93       	push	r28
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	6a 97       	sbiw	r28, 0x1a	; 26
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	de bf       	out	0x3e, r29	; 62
    45ca:	19 01       	movw	r2, r18
    45cc:	2a 01       	movw	r4, r20
    45ce:	ad 8a       	std	Y+21, r10	; 0x15
    45d0:	be 8a       	std	Y+22, r11	; 0x16
    45d2:	cf 8a       	std	Y+23, r12	; 0x17
    45d4:	d8 8e       	std	Y+24, r13	; 0x18
    45d6:	89 8e       	std	Y+25, r8	; 0x19
    45d8:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45da:	20 91 9e 22 	lds	r18, 0x229E
    45de:	30 91 9f 22 	lds	r19, 0x229F
    45e2:	40 91 a0 22 	lds	r20, 0x22A0
    45e6:	50 91 a1 22 	lds	r21, 0x22A1
    45ea:	29 8b       	std	Y+17, r18	; 0x11
    45ec:	3a 8b       	std	Y+18, r19	; 0x12
    45ee:	4b 8b       	std	Y+19, r20	; 0x13
    45f0:	5c 8b       	std	Y+20, r21	; 0x14
    45f2:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    45f6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    45fa:	3b 01       	movw	r6, r22
    45fc:	4c 01       	movw	r8, r24
    45fe:	60 92 63 21 	sts	0x2163, r6
    4602:	70 92 64 21 	sts	0x2164, r7
    4606:	80 92 65 21 	sts	0x2165, r8
    460a:	90 92 66 21 	sts	0x2166, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    460e:	80 91 b6 22 	lds	r24, 0x22B6
    4612:	90 91 b7 22 	lds	r25, 0x22B7
    4616:	a0 91 b8 22 	lds	r26, 0x22B8
    461a:	b0 91 b9 22 	lds	r27, 0x22B9
    461e:	8d 87       	std	Y+13, r24	; 0x0d
    4620:	9e 87       	std	Y+14, r25	; 0x0e
    4622:	af 87       	std	Y+15, r26	; 0x0f
    4624:	b8 8b       	std	Y+16, r27	; 0x10
    4626:	c2 01       	movw	r24, r4
    4628:	b1 01       	movw	r22, r2
    462a:	2d 85       	ldd	r18, Y+13	; 0x0d
    462c:	3e 85       	ldd	r19, Y+14	; 0x0e
    462e:	4f 85       	ldd	r20, Y+15	; 0x0f
    4630:	58 89       	ldd	r21, Y+16	; 0x10
    4632:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    4636:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    463a:	5b 01       	movw	r10, r22
    463c:	6c 01       	movw	r12, r24
    463e:	a0 92 67 21 	sts	0x2167, r10
    4642:	b0 92 68 21 	sts	0x2168, r11
    4646:	c0 92 69 21 	sts	0x2169, r12
    464a:	d0 92 6a 21 	sts	0x216A, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    464e:	20 91 ce 22 	lds	r18, 0x22CE
    4652:	30 91 cf 22 	lds	r19, 0x22CF
    4656:	40 91 d0 22 	lds	r20, 0x22D0
    465a:	50 91 d1 22 	lds	r21, 0x22D1
    465e:	29 87       	std	Y+9, r18	; 0x09
    4660:	3a 87       	std	Y+10, r19	; 0x0a
    4662:	4b 87       	std	Y+11, r20	; 0x0b
    4664:	5c 87       	std	Y+12, r21	; 0x0c
    4666:	c8 01       	movw	r24, r16
    4668:	b7 01       	movw	r22, r14
    466a:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    466e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    4672:	9b 01       	movw	r18, r22
    4674:	ac 01       	movw	r20, r24
    4676:	20 93 6b 21 	sts	0x216B, r18
    467a:	30 93 6c 21 	sts	0x216C, r19
    467e:	40 93 6d 21 	sts	0x216D, r20
    4682:	50 93 6e 21 	sts	0x216E, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4686:	80 91 57 21 	lds	r24, 0x2157
    468a:	90 91 58 21 	lds	r25, 0x2158
    468e:	a0 91 59 21 	lds	r26, 0x2159
    4692:	b0 91 5a 21 	lds	r27, 0x215A
    4696:	84 01       	movw	r16, r8
    4698:	73 01       	movw	r14, r6
    469a:	e8 1a       	sub	r14, r24
    469c:	f9 0a       	sbc	r15, r25
    469e:	0a 0b       	sbc	r16, r26
    46a0:	1b 0b       	sbc	r17, r27
    46a2:	ed 82       	std	Y+5, r14	; 0x05
    46a4:	fe 82       	std	Y+6, r15	; 0x06
    46a6:	0f 83       	std	Y+7, r16	; 0x07
    46a8:	18 87       	std	Y+8, r17	; 0x08
    46aa:	e0 92 6f 21 	sts	0x216F, r14
    46ae:	f0 92 70 21 	sts	0x2170, r15
    46b2:	00 93 71 21 	sts	0x2171, r16
    46b6:	10 93 72 21 	sts	0x2172, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    46ba:	80 91 5b 21 	lds	r24, 0x215B
    46be:	90 91 5c 21 	lds	r25, 0x215C
    46c2:	a0 91 5d 21 	lds	r26, 0x215D
    46c6:	b0 91 5e 21 	lds	r27, 0x215E
    46ca:	86 01       	movw	r16, r12
    46cc:	75 01       	movw	r14, r10
    46ce:	e8 1a       	sub	r14, r24
    46d0:	f9 0a       	sbc	r15, r25
    46d2:	0a 0b       	sbc	r16, r26
    46d4:	1b 0b       	sbc	r17, r27
    46d6:	e9 82       	std	Y+1, r14	; 0x01
    46d8:	fa 82       	std	Y+2, r15	; 0x02
    46da:	0b 83       	std	Y+3, r16	; 0x03
    46dc:	1c 83       	std	Y+4, r17	; 0x04
    46de:	e0 92 73 21 	sts	0x2173, r14
    46e2:	f0 92 74 21 	sts	0x2174, r15
    46e6:	00 93 75 21 	sts	0x2175, r16
    46ea:	10 93 76 21 	sts	0x2176, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46ee:	80 91 5f 21 	lds	r24, 0x215F
    46f2:	90 91 60 21 	lds	r25, 0x2160
    46f6:	a0 91 61 21 	lds	r26, 0x2161
    46fa:	b0 91 62 21 	lds	r27, 0x2162
    46fe:	19 01       	movw	r2, r18
    4700:	2a 01       	movw	r4, r20
    4702:	28 1a       	sub	r2, r24
    4704:	39 0a       	sbc	r3, r25
    4706:	4a 0a       	sbc	r4, r26
    4708:	5b 0a       	sbc	r5, r27
    470a:	20 92 77 21 	sts	0x2177, r2
    470e:	30 92 78 21 	sts	0x2178, r3
    4712:	40 92 79 21 	sts	0x2179, r4
    4716:	50 92 7a 21 	sts	0x217A, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    471a:	d8 01       	movw	r26, r16
    471c:	c7 01       	movw	r24, r14
    471e:	0d 81       	ldd	r16, Y+5	; 0x05
    4720:	1e 81       	ldd	r17, Y+6	; 0x06
    4722:	2f 81       	ldd	r18, Y+7	; 0x07
    4724:	38 85       	ldd	r19, Y+8	; 0x08
    4726:	80 0f       	add	r24, r16
    4728:	91 1f       	adc	r25, r17
    472a:	a2 1f       	adc	r26, r18
    472c:	b3 1f       	adc	r27, r19
    472e:	82 0d       	add	r24, r2
    4730:	93 1d       	adc	r25, r3
    4732:	a4 1d       	adc	r26, r4
    4734:	b5 1d       	adc	r27, r5
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	a1 05       	cpc	r26, r1
    473a:	b1 05       	cpc	r27, r1
    473c:	19 f4       	brne	.+6      	; 0x4744 <mc_line_blocking+0x1a8>
    473e:	23 e1       	ldi	r18, 0x13	; 19
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	86 c0       	rjmp	.+268    	; 0x4850 <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    4744:	29 8d       	ldd	r18, Y+25	; 0x19
    4746:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4748:	23 2b       	or	r18, r19
    474a:	59 f0       	breq	.+22     	; 0x4762 <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    474c:	60 ec       	ldi	r22, 0xC0	; 192
    474e:	71 ee       	ldi	r23, 0xE1	; 225
    4750:	84 e6       	ldi	r24, 0x64	; 100
    4752:	9c e4       	ldi	r25, 0x4C	; 76
    4754:	2d 89       	ldd	r18, Y+21	; 0x15
    4756:	3e 89       	ldd	r19, Y+22	; 0x16
    4758:	4f 89       	ldd	r20, Y+23	; 0x17
    475a:	58 8d       	ldd	r21, Y+24	; 0x18
    475c:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    4760:	4e c0       	rjmp	.+156    	; 0x47fe <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4762:	6d 81       	ldd	r22, Y+5	; 0x05
    4764:	7e 81       	ldd	r23, Y+6	; 0x06
    4766:	8f 81       	ldd	r24, Y+7	; 0x07
    4768:	98 85       	ldd	r25, Y+8	; 0x08
    476a:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    476e:	29 89       	ldd	r18, Y+17	; 0x11
    4770:	3a 89       	ldd	r19, Y+18	; 0x12
    4772:	4b 89       	ldd	r20, Y+19	; 0x13
    4774:	5c 89       	ldd	r21, Y+20	; 0x14
    4776:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    477a:	0e 94 4d 44 	call	0x889a	; 0x889a <square>
    477e:	3b 01       	movw	r6, r22
    4780:	4c 01       	movw	r8, r24
    4782:	69 81       	ldd	r22, Y+1	; 0x01
    4784:	7a 81       	ldd	r23, Y+2	; 0x02
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	9c 81       	ldd	r25, Y+4	; 0x04
    478a:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    478e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4790:	3e 85       	ldd	r19, Y+14	; 0x0e
    4792:	4f 85       	ldd	r20, Y+15	; 0x0f
    4794:	58 89       	ldd	r21, Y+16	; 0x10
    4796:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    479a:	0e 94 4d 44 	call	0x889a	; 0x889a <square>
    479e:	5b 01       	movw	r10, r22
    47a0:	6c 01       	movw	r12, r24
    47a2:	c2 01       	movw	r24, r4
    47a4:	b1 01       	movw	r22, r2
    47a6:	0e 94 82 41 	call	0x8304	; 0x8304 <__floatsisf>
    47aa:	29 85       	ldd	r18, Y+9	; 0x09
    47ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    47ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    47b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    47b2:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    47b6:	0e 94 4d 44 	call	0x889a	; 0x889a <square>
    47ba:	7b 01       	movw	r14, r22
    47bc:	8c 01       	movw	r16, r24
    47be:	c4 01       	movw	r24, r8
    47c0:	b3 01       	movw	r22, r6
    47c2:	a6 01       	movw	r20, r12
    47c4:	95 01       	movw	r18, r10
    47c6:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    47ca:	a8 01       	movw	r20, r16
    47cc:	97 01       	movw	r18, r14
    47ce:	0e 94 41 40 	call	0x8082	; 0x8082 <__addsf3>
    47d2:	0e 94 0f 44 	call	0x881e	; 0x881e <sqrt>
    47d6:	60 93 7f 21 	sts	0x217F, r22
    47da:	70 93 80 21 	sts	0x2180, r23
    47de:	80 93 81 21 	sts	0x2181, r24
    47e2:	90 93 82 21 	sts	0x2182, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    47e6:	2d 89       	ldd	r18, Y+21	; 0x15
    47e8:	3e 89       	ldd	r19, Y+22	; 0x16
    47ea:	4f 89       	ldd	r20, Y+23	; 0x17
    47ec:	58 8d       	ldd	r21, Y+24	; 0x18
    47ee:	0e 94 e7 40 	call	0x81ce	; 0x81ce <__divsf3>
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	34 e2       	ldi	r19, 0x24	; 36
    47f6:	44 e7       	ldi	r20, 0x74	; 116
    47f8:	59 e4       	ldi	r21, 0x49	; 73
    47fa:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    47fe:	0e 94 72 43 	call	0x86e4	; 0x86e4 <lround>
    4802:	60 93 7b 21 	sts	0x217B, r22
    4806:	70 93 7c 21 	sts	0x217C, r23
    480a:	80 93 7d 21 	sts	0x217D, r24
    480e:	90 93 7e 21 	sts	0x217E, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4812:	a0 90 7b 21 	lds	r10, 0x217B
    4816:	b0 90 7c 21 	lds	r11, 0x217C
    481a:	c0 90 7d 21 	lds	r12, 0x217D
    481e:	d0 90 7e 21 	lds	r13, 0x217E
    4822:	6d 81       	ldd	r22, Y+5	; 0x05
    4824:	7e 81       	ldd	r23, Y+6	; 0x06
    4826:	8f 81       	ldd	r24, Y+7	; 0x07
    4828:	98 85       	ldd	r25, Y+8	; 0x08
    482a:	29 81       	ldd	r18, Y+1	; 0x01
    482c:	3a 81       	ldd	r19, Y+2	; 0x02
    482e:	4b 81       	ldd	r20, Y+3	; 0x03
    4830:	5c 81       	ldd	r21, Y+4	; 0x04
    4832:	82 01       	movw	r16, r4
    4834:	71 01       	movw	r14, r2
    4836:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    483a:	e7 e5       	ldi	r30, 0x57	; 87
    483c:	f1 e2       	ldi	r31, 0x21	; 33
    483e:	df 01       	movw	r26, r30
    4840:	1c 96       	adiw	r26, 0x0c	; 12
    4842:	8c e0       	ldi	r24, 0x0C	; 12
    4844:	0d 90       	ld	r0, X+
    4846:	01 92       	st	Z+, r0
    4848:	81 50       	subi	r24, 0x01	; 1
    484a:	e1 f7       	brne	.-8      	; 0x4844 <mc_line_blocking+0x2a8>
    484c:	20 e0       	ldi	r18, 0x00	; 0
    484e:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    4850:	c9 01       	movw	r24, r18
    4852:	6a 96       	adiw	r28, 0x1a	; 26
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	de bf       	out	0x3e, r29	; 62
    4858:	cf 91       	pop	r28
    485a:	df 91       	pop	r29
    485c:	1f 91       	pop	r17
    485e:	0f 91       	pop	r16
    4860:	ff 90       	pop	r15
    4862:	ef 90       	pop	r14
    4864:	df 90       	pop	r13
    4866:	cf 90       	pop	r12
    4868:	bf 90       	pop	r11
    486a:	af 90       	pop	r10
    486c:	9f 90       	pop	r9
    486e:	8f 90       	pop	r8
    4870:	7f 90       	pop	r7
    4872:	6f 90       	pop	r6
    4874:	5f 90       	pop	r5
    4876:	4f 90       	pop	r4
    4878:	3f 90       	pop	r3
    487a:	2f 90       	pop	r2
    487c:	08 95       	ret

0000487e <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    487e:	e0 e6       	ldi	r30, 0x60	; 96
    4880:	f6 e0       	ldi	r31, 0x06	; 6
    4882:	80 e4       	ldi	r24, 0x40	; 64
    4884:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4886:	80 e8       	ldi	r24, 0x80	; 128
    4888:	81 83       	std	Z+1, r24	; 0x01
}
    488a:	08 95       	ret

0000488c <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    488c:	97 fd       	sbrc	r25, 7
    488e:	05 c0       	rjmp	.+10     	; 0x489a <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4890:	80 e8       	ldi	r24, 0x80	; 128
    4892:	e0 e6       	ldi	r30, 0x60	; 96
    4894:	f6 e0       	ldi	r31, 0x06	; 6
    4896:	85 83       	std	Z+5, r24	; 0x05
    4898:	04 c0       	rjmp	.+8      	; 0x48a2 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    489a:	80 e8       	ldi	r24, 0x80	; 128
    489c:	e0 e6       	ldi	r30, 0x60	; 96
    489e:	f6 e0       	ldi	r31, 0x06	; 6
    48a0:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    48a2:	80 e4       	ldi	r24, 0x40	; 64
    48a4:	e0 e6       	ldi	r30, 0x60	; 96
    48a6:	f6 e0       	ldi	r31, 0x06	; 6
    48a8:	85 83       	std	Z+5, r24	; 0x05
}
    48aa:	08 95       	ret

000048ac <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    48ac:	80 e4       	ldi	r24, 0x40	; 64
    48ae:	e0 e6       	ldi	r30, 0x60	; 96
    48b0:	f6 e0       	ldi	r31, 0x06	; 6
    48b2:	86 83       	std	Z+6, r24	; 0x06
}
    48b4:	08 95       	ret

000048b6 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    48ba:	10 92 3a 22 	sts	0x223A, r1
	ax.exec_mutex = FALSE;
    48be:	10 92 39 22 	sts	0x2239, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    48c2:	80 e0       	ldi	r24, 0x00	; 0
    48c4:	96 e0       	ldi	r25, 0x06	; 6
    48c6:	80 93 49 22 	sts	0x2249, r24
    48ca:	90 93 4a 22 	sts	0x224A, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    48ce:	80 ea       	ldi	r24, 0xA0	; 160
    48d0:	96 e0       	ldi	r25, 0x06	; 6
    48d2:	80 93 59 22 	sts	0x2259, r24
    48d6:	90 93 5a 22 	sts	0x225A, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    48da:	80 e8       	ldi	r24, 0x80	; 128
    48dc:	96 e0       	ldi	r25, 0x06	; 6
    48de:	80 93 69 22 	sts	0x2269, r24
    48e2:	90 93 6a 22 	sts	0x226A, r25
	ax.a[A].port = &A_MOTOR_PORT;
    48e6:	80 e6       	ldi	r24, 0x60	; 96
    48e8:	96 e0       	ldi	r25, 0x06	; 6
    48ea:	80 93 79 22 	sts	0x2279, r24
    48ee:	90 93 7a 22 	sts	0x227A, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	98 e0       	ldi	r25, 0x08	; 8
    48f6:	80 93 4b 22 	sts	0x224B, r24
    48fa:	90 93 4c 22 	sts	0x224C, r25
	ax.a[Y].timer = &Y_TIMER;
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	99 e0       	ldi	r25, 0x09	; 9
    4902:	80 93 5b 22 	sts	0x225B, r24
    4906:	90 93 5c 22 	sts	0x225C, r25
	ax.a[Z].timer = &Z_TIMER;
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	9a e0       	ldi	r25, 0x0A	; 10
    490e:	80 93 6b 22 	sts	0x226B, r24
    4912:	90 93 6c 22 	sts	0x226C, r25
	ax.a[A].timer = &A_TIMER;
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	9b e0       	ldi	r25, 0x0B	; 11
    491a:	80 93 7b 22 	sts	0x227B, r24
    491e:	90 93 7c 22 	sts	0x227C, r25
    4922:	cd e8       	ldi	r28, 0x8D	; 141
    4924:	d2 e2       	ldi	r29, 0x22	; 34
    4926:	a7 e4       	ldi	r26, 0x47	; 71
    4928:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    492a:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    492c:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    492e:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    4930:	88 81       	ld	r24, Y
    4932:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4934:	12 96       	adiw	r26, 0x02	; 2
    4936:	ed 91       	ld	r30, X+
    4938:	fc 91       	ld	r31, X
    493a:	13 97       	sbiw	r26, 0x03	; 3
    493c:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    493e:	12 96       	adiw	r26, 0x02	; 2
    4940:	ed 91       	ld	r30, X+
    4942:	fc 91       	ld	r31, X
    4944:	13 97       	sbiw	r26, 0x03	; 3
    4946:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    4948:	12 96       	adiw	r26, 0x02	; 2
    494a:	ed 91       	ld	r30, X+
    494c:	fc 91       	ld	r31, X
    494e:	13 97       	sbiw	r26, 0x03	; 3
    4950:	84 81       	ldd	r24, Z+4	; 0x04
    4952:	88 61       	ori	r24, 0x18	; 24
    4954:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4956:	12 96       	adiw	r26, 0x02	; 2
    4958:	ed 91       	ld	r30, X+
    495a:	fc 91       	ld	r31, X
    495c:	13 97       	sbiw	r26, 0x03	; 3
    495e:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4960:	14 96       	adiw	r26, 0x04	; 4
    4962:	ed 91       	ld	r30, X+
    4964:	fc 91       	ld	r31, X
    4966:	15 97       	sbiw	r26, 0x05	; 5
    4968:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    496a:	14 96       	adiw	r26, 0x04	; 4
    496c:	ed 91       	ld	r30, X+
    496e:	fc 91       	ld	r31, X
    4970:	15 97       	sbiw	r26, 0x05	; 5
    4972:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4974:	14 96       	adiw	r26, 0x04	; 4
    4976:	ed 91       	ld	r30, X+
    4978:	fc 91       	ld	r31, X
    497a:	15 97       	sbiw	r26, 0x05	; 5
    497c:	96 83       	std	Z+6, r25	; 0x06
    497e:	68 96       	adiw	r28, 0x18	; 24
    4980:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    4982:	82 e2       	ldi	r24, 0x22	; 34
    4984:	cd 3e       	cpi	r28, 0xED	; 237
    4986:	d8 07       	cpc	r29, r24
    4988:	99 f6       	brne	.-90     	; 0x4930 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	08 95       	ret

00004990 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4990:	e8 2f       	mov	r30, r24
    4992:	f0 e0       	ldi	r31, 0x00	; 0
    4994:	84 e0       	ldi	r24, 0x04	; 4
    4996:	ee 0f       	add	r30, r30
    4998:	ff 1f       	adc	r31, r31
    499a:	8a 95       	dec	r24
    499c:	e1 f7       	brne	.-8      	; 0x4996 <st_set_polarity+0x6>
    499e:	e7 5c       	subi	r30, 0xC7	; 199
    49a0:	fd 4d       	sbci	r31, 0xDD	; 221
    49a2:	66 87       	std	Z+14, r22	; 0x0e
}
    49a4:	08 95       	ret

000049a6 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    49a6:	2d e3       	ldi	r18, 0x3D	; 61
    49a8:	32 e2       	ldi	r19, 0x22	; 34
    49aa:	80 e0       	ldi	r24, 0x00	; 0
    49ac:	90 e1       	ldi	r25, 0x10	; 16
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	80 93 3d 22 	sts	0x223D, r24
    49b6:	90 93 3e 22 	sts	0x223E, r25
    49ba:	a0 93 3f 22 	sts	0x223F, r26
    49be:	b0 93 40 22 	sts	0x2240, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    49c2:	e0 91 4b 22 	lds	r30, 0x224B
    49c6:	f0 91 4c 22 	lds	r31, 0x224C
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	90 e1       	ldi	r25, 0x10	; 16
    49ce:	86 a3       	std	Z+38, r24	; 0x26
    49d0:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    49d2:	41 e0       	ldi	r20, 0x01	; 1
    49d4:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	98 e0       	ldi	r25, 0x08	; 8
    49da:	a0 e0       	ldi	r26, 0x00	; 0
    49dc:	b0 e0       	ldi	r27, 0x00	; 0
    49de:	80 93 4d 22 	sts	0x224D, r24
    49e2:	90 93 4e 22 	sts	0x224E, r25
    49e6:	a0 93 4f 22 	sts	0x224F, r26
    49ea:	b0 93 50 22 	sts	0x2250, r27
	ax.a[Y].timer->PER = 0x2000;
    49ee:	e0 91 5b 22 	lds	r30, 0x225B
    49f2:	f0 91 5c 22 	lds	r31, 0x225C
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	90 e2       	ldi	r25, 0x20	; 32
    49fa:	86 a3       	std	Z+38, r24	; 0x26
    49fc:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49fe:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	96 e0       	ldi	r25, 0x06	; 6
    4a04:	a0 e0       	ldi	r26, 0x00	; 0
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	80 93 5d 22 	sts	0x225D, r24
    4a0c:	90 93 5e 22 	sts	0x225E, r25
    4a10:	a0 93 5f 22 	sts	0x225F, r26
    4a14:	b0 93 60 22 	sts	0x2260, r27
	ax.a[Z].timer->PER = 0x3000;
    4a18:	e0 91 6b 22 	lds	r30, 0x226B
    4a1c:	f0 91 6c 22 	lds	r31, 0x226C
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	90 e3       	ldi	r25, 0x30	; 48
    4a24:	86 a3       	std	Z+38, r24	; 0x26
    4a26:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4a28:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	94 e0       	ldi	r25, 0x04	; 4
    4a2e:	a0 e0       	ldi	r26, 0x00	; 0
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	80 93 6d 22 	sts	0x226D, r24
    4a36:	90 93 6e 22 	sts	0x226E, r25
    4a3a:	a0 93 6f 22 	sts	0x226F, r26
    4a3e:	b0 93 70 22 	sts	0x2270, r27
	ax.a[A].timer->PER = 0x4000;
    4a42:	d9 01       	movw	r26, r18
    4a44:	de 96       	adiw	r26, 0x3e	; 62
    4a46:	ed 91       	ld	r30, X+
    4a48:	fc 91       	ld	r31, X
    4a4a:	df 97       	sbiw	r26, 0x3f	; 63
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	90 e4       	ldi	r25, 0x40	; 64
    4a50:	86 a3       	std	Z+38, r24	; 0x26
    4a52:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a54:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a56:	23 50       	subi	r18, 0x03	; 3
    4a58:	30 40       	sbci	r19, 0x00	; 0
    4a5a:	f9 01       	movw	r30, r18
    4a5c:	80 81       	ld	r24, Z
    4a5e:	8f 60       	ori	r24, 0x0F	; 15
    4a60:	80 83       	st	Z, r24
}
    4a62:	08 95       	ret

00004a64 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a64:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a66:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <mv_flush>
	sei();
    4a6a:	78 94       	sei
}
    4a6c:	08 95       	ret

00004a6e <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a6e:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a70:	e0 91 4b 22 	lds	r30, 0x224B
    4a74:	f0 91 4c 22 	lds	r31, 0x224C
    4a78:	10 82       	st	Z, r1
    4a7a:	e0 91 5b 22 	lds	r30, 0x225B
    4a7e:	f0 91 5c 22 	lds	r31, 0x225C
    4a82:	10 82       	st	Z, r1
    4a84:	e0 91 6b 22 	lds	r30, 0x226B
    4a88:	f0 91 6c 22 	lds	r31, 0x226C
    4a8c:	10 82       	st	Z, r1
    4a8e:	e0 91 7b 22 	lds	r30, 0x227B
    4a92:	f0 91 7c 22 	lds	r31, 0x227C
    4a96:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a98:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a9c:	10 92 3a 22 	sts	0x223A, r1
	sei();
    4aa0:	78 94       	sei
}
    4aa2:	08 95       	ret

00004aa4 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4aa4:	cf 92       	push	r12
    4aa6:	df 92       	push	r13
    4aa8:	ef 92       	push	r14
    4aaa:	ff 92       	push	r15
    4aac:	0f 93       	push	r16
    4aae:	1f 93       	push	r17
    4ab0:	cf 93       	push	r28
    4ab2:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4ab4:	80 91 39 22 	lds	r24, 0x2239
    4ab8:	88 23       	and	r24, r24
    4aba:	09 f0       	breq	.+2      	; 0x4abe <st_execute_move+0x1a>
    4abc:	32 c1       	rjmp	.+612    	; 0x4d22 <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	80 93 39 22 	sts	0x2239, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4ac4:	80 91 3a 22 	lds	r24, 0x223A
    4ac8:	88 23       	and	r24, r24
    4aca:	09 f0       	breq	.+2      	; 0x4ace <st_execute_move+0x2a>
    4acc:	28 c1       	rjmp	.+592    	; 0x4d1e <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4ace:	0e 94 98 2c 	call	0x5930	; 0x5930 <mv_dequeue_move_buffer>
    4ad2:	80 93 3b 22 	sts	0x223B, r24
    4ad6:	90 93 3c 22 	sts	0x223C, r25
    4ada:	89 2b       	or	r24, r25
    4adc:	09 f4       	brne	.+2      	; 0x4ae0 <st_execute_move+0x3c>
    4ade:	1f c1       	rjmp	.+574    	; 0x4d1e <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4ae0:	6d e3       	ldi	r22, 0x3D	; 61
    4ae2:	72 e2       	ldi	r23, 0x22	; 34
    4ae4:	00 e0       	ldi	r16, 0x00	; 0
    4ae6:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4ae8:	94 e0       	ldi	r25, 0x04	; 4
    4aea:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4af0:	f0 2e       	mov	r15, r16
    4af2:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4af4:	db 01       	movw	r26, r22
    4af6:	1e 96       	adiw	r26, 0x0e	; 14
    4af8:	ed 91       	ld	r30, X+
    4afa:	fc 91       	ld	r31, X
    4afc:	1f 97       	sbiw	r26, 0x0f	; 15
    4afe:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4b00:	c0 91 3b 22 	lds	r28, 0x223B
    4b04:	d0 91 3c 22 	lds	r29, 0x223C
    4b08:	c8 01       	movw	r24, r16
    4b0a:	fc 01       	movw	r30, r24
    4b0c:	b3 e0       	ldi	r27, 0x03	; 3
    4b0e:	ee 0f       	add	r30, r30
    4b10:	ff 1f       	adc	r31, r31
    4b12:	ba 95       	dec	r27
    4b14:	e1 f7       	brne	.-8      	; 0x4b0e <st_execute_move+0x6a>
    4b16:	88 0f       	add	r24, r24
    4b18:	99 1f       	adc	r25, r25
    4b1a:	e8 0f       	add	r30, r24
    4b1c:	f9 1f       	adc	r31, r25
    4b1e:	ec 0f       	add	r30, r28
    4b20:	fd 1f       	adc	r31, r29
    4b22:	80 81       	ld	r24, Z
    4b24:	91 81       	ldd	r25, Z+1	; 0x01
    4b26:	a2 81       	ldd	r26, Z+2	; 0x02
    4b28:	b3 81       	ldd	r27, Z+3	; 0x03
    4b2a:	00 97       	sbiw	r24, 0x00	; 0
    4b2c:	a1 05       	cpc	r26, r1
    4b2e:	b1 05       	cpc	r27, r1
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <st_execute_move+0x90>
    4b32:	a6 c0       	rjmp	.+332    	; 0x4c80 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4b34:	c8 01       	movw	r24, r16
    4b36:	9c 01       	movw	r18, r24
    4b38:	f3 e0       	ldi	r31, 0x03	; 3
    4b3a:	22 0f       	add	r18, r18
    4b3c:	33 1f       	adc	r19, r19
    4b3e:	fa 95       	dec	r31
    4b40:	e1 f7       	brne	.-8      	; 0x4b3a <st_execute_move+0x96>
    4b42:	88 0f       	add	r24, r24
    4b44:	99 1f       	adc	r25, r25
    4b46:	28 0f       	add	r18, r24
    4b48:	39 1f       	adc	r19, r25
    4b4a:	c2 0f       	add	r28, r18
    4b4c:	d3 1f       	adc	r29, r19
    4b4e:	89 85       	ldd	r24, Y+9	; 0x09
    4b50:	fb 01       	movw	r30, r22
    4b52:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b54:	e0 91 3b 22 	lds	r30, 0x223B
    4b58:	f0 91 3c 22 	lds	r31, 0x223C
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	9c 01       	movw	r18, r24
    4b60:	53 e0       	ldi	r21, 0x03	; 3
    4b62:	22 0f       	add	r18, r18
    4b64:	33 1f       	adc	r19, r19
    4b66:	5a 95       	dec	r21
    4b68:	e1 f7       	brne	.-8      	; 0x4b62 <st_execute_move+0xbe>
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	28 0f       	add	r18, r24
    4b70:	39 1f       	adc	r19, r25
    4b72:	e2 0f       	add	r30, r18
    4b74:	f3 1f       	adc	r31, r19
    4b76:	90 85       	ldd	r25, Z+8	; 0x08
    4b78:	db 01       	movw	r26, r22
    4b7a:	1a 96       	adiw	r26, 0x0a	; 10
    4b7c:	8c 91       	ld	r24, X
    4b7e:	1a 97       	sbiw	r26, 0x0a	; 10
    4b80:	1c 96       	adiw	r26, 0x0c	; 12
    4b82:	ed 91       	ld	r30, X+
    4b84:	fc 91       	ld	r31, X
    4b86:	1d 97       	sbiw	r26, 0x0d	; 13
    4b88:	98 17       	cp	r25, r24
    4b8a:	11 f0       	breq	.+4      	; 0x4b90 <st_execute_move+0xec>
    4b8c:	d5 82       	std	Z+5, r13	; 0x05
    4b8e:	01 c0       	rjmp	.+2      	; 0x4b92 <st_execute_move+0xee>
    4b90:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b92:	40 91 3b 22 	lds	r20, 0x223B
    4b96:	50 91 3c 22 	lds	r21, 0x223C
    4b9a:	8f 2d       	mov	r24, r15
    4b9c:	9e 2d       	mov	r25, r14
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	33 e0       	ldi	r19, 0x03	; 3
    4ba2:	ee 0f       	add	r30, r30
    4ba4:	ff 1f       	adc	r31, r31
    4ba6:	3a 95       	dec	r19
    4ba8:	e1 f7       	brne	.-8      	; 0x4ba2 <st_execute_move+0xfe>
    4baa:	88 0f       	add	r24, r24
    4bac:	99 1f       	adc	r25, r25
    4bae:	e8 0f       	add	r30, r24
    4bb0:	f9 1f       	adc	r31, r25
    4bb2:	e4 0f       	add	r30, r20
    4bb4:	f5 1f       	adc	r31, r21
    4bb6:	80 81       	ld	r24, Z
    4bb8:	91 81       	ldd	r25, Z+1	; 0x01
    4bba:	a2 81       	ldd	r26, Z+2	; 0x02
    4bbc:	b3 81       	ldd	r27, Z+3	; 0x03
    4bbe:	fb 01       	movw	r30, r22
    4bc0:	80 83       	st	Z, r24
    4bc2:	91 83       	std	Z+1, r25	; 0x01
    4bc4:	a2 83       	std	Z+2, r26	; 0x02
    4bc6:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4bc8:	8f 2d       	mov	r24, r15
    4bca:	9e 2d       	mov	r25, r14
    4bcc:	fc 01       	movw	r30, r24
    4bce:	b3 e0       	ldi	r27, 0x03	; 3
    4bd0:	ee 0f       	add	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	ba 95       	dec	r27
    4bd6:	e1 f7       	brne	.-8      	; 0x4bd0 <st_execute_move+0x12c>
    4bd8:	88 0f       	add	r24, r24
    4bda:	99 1f       	adc	r25, r25
    4bdc:	e8 0f       	add	r30, r24
    4bde:	f9 1f       	adc	r31, r25
    4be0:	e4 0f       	add	r30, r20
    4be2:	f5 1f       	adc	r31, r21
    4be4:	86 81       	ldd	r24, Z+6	; 0x06
    4be6:	97 81       	ldd	r25, Z+7	; 0x07
    4be8:	db 01       	movw	r26, r22
    4bea:	16 96       	adiw	r26, 0x06	; 6
    4bec:	8d 93       	st	X+, r24
    4bee:	9c 93       	st	X, r25
    4bf0:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4bf2:	8f 2d       	mov	r24, r15
    4bf4:	9e 2d       	mov	r25, r14
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	33 e0       	ldi	r19, 0x03	; 3
    4bfa:	ee 0f       	add	r30, r30
    4bfc:	ff 1f       	adc	r31, r31
    4bfe:	3a 95       	dec	r19
    4c00:	e1 f7       	brne	.-8      	; 0x4bfa <st_execute_move+0x156>
    4c02:	88 0f       	add	r24, r24
    4c04:	99 1f       	adc	r25, r25
    4c06:	e8 0f       	add	r30, r24
    4c08:	f9 1f       	adc	r31, r25
    4c0a:	e4 0f       	add	r30, r20
    4c0c:	f5 1f       	adc	r31, r21
    4c0e:	86 81       	ldd	r24, Z+6	; 0x06
    4c10:	97 81       	ldd	r25, Z+7	; 0x07
    4c12:	18 96       	adiw	r26, 0x08	; 8
    4c14:	8d 93       	st	X+, r24
    4c16:	9c 93       	st	X, r25
    4c18:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4c1a:	8f 2d       	mov	r24, r15
    4c1c:	9e 2d       	mov	r25, r14
    4c1e:	fc 01       	movw	r30, r24
    4c20:	33 e0       	ldi	r19, 0x03	; 3
    4c22:	ee 0f       	add	r30, r30
    4c24:	ff 1f       	adc	r31, r31
    4c26:	3a 95       	dec	r19
    4c28:	e1 f7       	brne	.-8      	; 0x4c22 <st_execute_move+0x17e>
    4c2a:	88 0f       	add	r24, r24
    4c2c:	99 1f       	adc	r25, r25
    4c2e:	e8 0f       	add	r30, r24
    4c30:	f9 1f       	adc	r31, r25
    4c32:	e4 0f       	add	r30, r20
    4c34:	f5 1f       	adc	r31, r21
    4c36:	84 81       	ldd	r24, Z+4	; 0x04
    4c38:	95 81       	ldd	r25, Z+5	; 0x05
    4c3a:	14 96       	adiw	r26, 0x04	; 4
    4c3c:	8d 93       	st	X+, r24
    4c3e:	9c 93       	st	X, r25
    4c40:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4c42:	1e 96       	adiw	r26, 0x0e	; 14
    4c44:	ed 91       	ld	r30, X+
    4c46:	fc 91       	ld	r31, X
    4c48:	1f 97       	sbiw	r26, 0x0f	; 15
    4c4a:	8f 2d       	mov	r24, r15
    4c4c:	9e 2d       	mov	r25, r14
    4c4e:	9c 01       	movw	r18, r24
    4c50:	b3 e0       	ldi	r27, 0x03	; 3
    4c52:	22 0f       	add	r18, r18
    4c54:	33 1f       	adc	r19, r19
    4c56:	ba 95       	dec	r27
    4c58:	e1 f7       	brne	.-8      	; 0x4c52 <st_execute_move+0x1ae>
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	28 0f       	add	r18, r24
    4c60:	39 1f       	adc	r19, r25
    4c62:	42 0f       	add	r20, r18
    4c64:	53 1f       	adc	r21, r19
    4c66:	da 01       	movw	r26, r20
    4c68:	14 96       	adiw	r26, 0x04	; 4
    4c6a:	8d 91       	ld	r24, X+
    4c6c:	9c 91       	ld	r25, X
    4c6e:	15 97       	sbiw	r26, 0x05	; 5
    4c70:	86 a3       	std	Z+38, r24	; 0x26
    4c72:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c74:	db 01       	movw	r26, r22
    4c76:	1c 96       	adiw	r26, 0x0c	; 12
    4c78:	ed 91       	ld	r30, X+
    4c7a:	fc 91       	ld	r31, X
    4c7c:	1d 97       	sbiw	r26, 0x0d	; 13
    4c7e:	c6 82       	std	Z+6, r12	; 0x06
    4c80:	0f 5f       	subi	r16, 0xFF	; 255
    4c82:	1f 4f       	sbci	r17, 0xFF	; 255
    4c84:	60 5f       	subi	r22, 0xF0	; 240
    4c86:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c88:	03 30       	cpi	r16, 0x03	; 3
    4c8a:	11 05       	cpc	r17, r1
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <st_execute_move+0x1ec>
    4c8e:	30 cf       	rjmp	.-416    	; 0x4af0 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c90:	10 92 3a 22 	sts	0x223A, r1
	if (ax.a[X].step_counter) { 
    4c94:	80 91 3d 22 	lds	r24, 0x223D
    4c98:	90 91 3e 22 	lds	r25, 0x223E
    4c9c:	a0 91 3f 22 	lds	r26, 0x223F
    4ca0:	b0 91 40 22 	lds	r27, 0x2240
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	a1 05       	cpc	r26, r1
    4ca8:	b1 05       	cpc	r27, r1
    4caa:	59 f0       	breq	.+22     	; 0x4cc2 <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4cac:	e0 91 4b 22 	lds	r30, 0x224B
    4cb0:	f0 91 4c 22 	lds	r31, 0x224C
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4cb8:	80 91 3a 22 	lds	r24, 0x223A
    4cbc:	88 60       	ori	r24, 0x08	; 8
    4cbe:	80 93 3a 22 	sts	0x223A, r24
	}
	if (ax.a[Y].step_counter) {
    4cc2:	80 91 4d 22 	lds	r24, 0x224D
    4cc6:	90 91 4e 22 	lds	r25, 0x224E
    4cca:	a0 91 4f 22 	lds	r26, 0x224F
    4cce:	b0 91 50 22 	lds	r27, 0x2250
    4cd2:	00 97       	sbiw	r24, 0x00	; 0
    4cd4:	a1 05       	cpc	r26, r1
    4cd6:	b1 05       	cpc	r27, r1
    4cd8:	59 f0       	breq	.+22     	; 0x4cf0 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4cda:	e0 91 5b 22 	lds	r30, 0x225B
    4cde:	f0 91 5c 22 	lds	r31, 0x225C
    4ce2:	81 e0       	ldi	r24, 0x01	; 1
    4ce4:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4ce6:	80 91 3a 22 	lds	r24, 0x223A
    4cea:	84 60       	ori	r24, 0x04	; 4
    4cec:	80 93 3a 22 	sts	0x223A, r24
	}
	if (ax.a[Z].step_counter) {
    4cf0:	80 91 5d 22 	lds	r24, 0x225D
    4cf4:	90 91 5e 22 	lds	r25, 0x225E
    4cf8:	a0 91 5f 22 	lds	r26, 0x225F
    4cfc:	b0 91 60 22 	lds	r27, 0x2260
    4d00:	00 97       	sbiw	r24, 0x00	; 0
    4d02:	a1 05       	cpc	r26, r1
    4d04:	b1 05       	cpc	r27, r1
    4d06:	59 f0       	breq	.+22     	; 0x4d1e <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4d08:	e0 91 6b 22 	lds	r30, 0x226B
    4d0c:	f0 91 6c 22 	lds	r31, 0x226C
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4d14:	80 91 3a 22 	lds	r24, 0x223A
    4d18:	82 60       	ori	r24, 0x02	; 2
    4d1a:	80 93 3a 22 	sts	0x223A, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4d1e:	10 92 39 22 	sts	0x2239, r1
}
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	1f 91       	pop	r17
    4d28:	0f 91       	pop	r16
    4d2a:	ff 90       	pop	r15
    4d2c:	ef 90       	pop	r14
    4d2e:	df 90       	pop	r13
    4d30:	cf 90       	pop	r12
    4d32:	08 95       	ret

00004d34 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4d34:	10 92 39 22 	sts	0x2239, r1
	st_execute_move();		// recursively empty the move queue
    4d38:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>
	return;
}
    4d3c:	08 95       	ret

00004d3e <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4d3e:	1f 92       	push	r1
    4d40:	0f 92       	push	r0
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	0f 92       	push	r0
    4d46:	0b b6       	in	r0, 0x3b	; 59
    4d48:	0f 92       	push	r0
    4d4a:	11 24       	eor	r1, r1
    4d4c:	2f 93       	push	r18
    4d4e:	3f 93       	push	r19
    4d50:	4f 93       	push	r20
    4d52:	5f 93       	push	r21
    4d54:	6f 93       	push	r22
    4d56:	7f 93       	push	r23
    4d58:	8f 93       	push	r24
    4d5a:	9f 93       	push	r25
    4d5c:	af 93       	push	r26
    4d5e:	bf 93       	push	r27
    4d60:	ef 93       	push	r30
    4d62:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d64:	80 91 75 22 	lds	r24, 0x2275
    4d68:	90 91 76 22 	lds	r25, 0x2276
    4d6c:	01 97       	sbiw	r24, 0x01	; 1
    4d6e:	80 93 75 22 	sts	0x2275, r24
    4d72:	90 93 76 22 	sts	0x2276, r25
    4d76:	89 2b       	or	r24, r25
    4d78:	a1 f5       	brne	.+104    	; 0x4de2 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d7a:	e0 e6       	ldi	r30, 0x60	; 96
    4d7c:	f6 e0       	ldi	r31, 0x06	; 6
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d82:	80 91 6d 22 	lds	r24, 0x226D
    4d86:	90 91 6e 22 	lds	r25, 0x226E
    4d8a:	a0 91 6f 22 	lds	r26, 0x226F
    4d8e:	b0 91 70 22 	lds	r27, 0x2270
    4d92:	01 97       	sbiw	r24, 0x01	; 1
    4d94:	a1 09       	sbc	r26, r1
    4d96:	b1 09       	sbc	r27, r1
    4d98:	80 93 6d 22 	sts	0x226D, r24
    4d9c:	90 93 6e 22 	sts	0x226E, r25
    4da0:	a0 93 6f 22 	sts	0x226F, r26
    4da4:	b0 93 70 22 	sts	0x2270, r27
    4da8:	00 97       	sbiw	r24, 0x00	; 0
    4daa:	a1 05       	cpc	r26, r1
    4dac:	b1 05       	cpc	r27, r1
    4dae:	69 f4       	brne	.+26     	; 0x4dca <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4db0:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4db4:	84 e0       	ldi	r24, 0x04	; 4
    4db6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4db8:	80 91 3a 22 	lds	r24, 0x223A
    4dbc:	8e 7f       	andi	r24, 0xFE	; 254
    4dbe:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {
    4dc2:	88 23       	and	r24, r24
    4dc4:	11 f4       	brne	.+4      	; 0x4dca <__vector_108+0x8c>
			st_execute_move();
    4dc6:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4dca:	80 91 73 22 	lds	r24, 0x2273
    4dce:	90 91 74 22 	lds	r25, 0x2274
    4dd2:	80 93 75 22 	sts	0x2275, r24
    4dd6:	90 93 76 22 	sts	0x2276, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	e0 e6       	ldi	r30, 0x60	; 96
    4dde:	f6 e0       	ldi	r31, 0x06	; 6
    4de0:	86 83       	std	Z+6, r24	; 0x06
}
    4de2:	ff 91       	pop	r31
    4de4:	ef 91       	pop	r30
    4de6:	bf 91       	pop	r27
    4de8:	af 91       	pop	r26
    4dea:	9f 91       	pop	r25
    4dec:	8f 91       	pop	r24
    4dee:	7f 91       	pop	r23
    4df0:	6f 91       	pop	r22
    4df2:	5f 91       	pop	r21
    4df4:	4f 91       	pop	r20
    4df6:	3f 91       	pop	r19
    4df8:	2f 91       	pop	r18
    4dfa:	0f 90       	pop	r0
    4dfc:	0b be       	out	0x3b, r0	; 59
    4dfe:	0f 90       	pop	r0
    4e00:	0f be       	out	0x3f, r0	; 63
    4e02:	0f 90       	pop	r0
    4e04:	1f 90       	pop	r1
    4e06:	18 95       	reti

00004e08 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4e08:	1f 92       	push	r1
    4e0a:	0f 92       	push	r0
    4e0c:	0f b6       	in	r0, 0x3f	; 63
    4e0e:	0f 92       	push	r0
    4e10:	0b b6       	in	r0, 0x3b	; 59
    4e12:	0f 92       	push	r0
    4e14:	11 24       	eor	r1, r1
    4e16:	2f 93       	push	r18
    4e18:	3f 93       	push	r19
    4e1a:	4f 93       	push	r20
    4e1c:	5f 93       	push	r21
    4e1e:	6f 93       	push	r22
    4e20:	7f 93       	push	r23
    4e22:	8f 93       	push	r24
    4e24:	9f 93       	push	r25
    4e26:	af 93       	push	r26
    4e28:	bf 93       	push	r27
    4e2a:	ef 93       	push	r30
    4e2c:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4e2e:	80 91 65 22 	lds	r24, 0x2265
    4e32:	90 91 66 22 	lds	r25, 0x2266
    4e36:	01 97       	sbiw	r24, 0x01	; 1
    4e38:	80 93 65 22 	sts	0x2265, r24
    4e3c:	90 93 66 22 	sts	0x2266, r25
    4e40:	89 2b       	or	r24, r25
    4e42:	a1 f5       	brne	.+104    	; 0x4eac <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4e44:	e0 e8       	ldi	r30, 0x80	; 128
    4e46:	f6 e0       	ldi	r31, 0x06	; 6
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4e4c:	80 91 5d 22 	lds	r24, 0x225D
    4e50:	90 91 5e 22 	lds	r25, 0x225E
    4e54:	a0 91 5f 22 	lds	r26, 0x225F
    4e58:	b0 91 60 22 	lds	r27, 0x2260
    4e5c:	01 97       	sbiw	r24, 0x01	; 1
    4e5e:	a1 09       	sbc	r26, r1
    4e60:	b1 09       	sbc	r27, r1
    4e62:	80 93 5d 22 	sts	0x225D, r24
    4e66:	90 93 5e 22 	sts	0x225E, r25
    4e6a:	a0 93 5f 22 	sts	0x225F, r26
    4e6e:	b0 93 60 22 	sts	0x2260, r27
    4e72:	00 97       	sbiw	r24, 0x00	; 0
    4e74:	a1 05       	cpc	r26, r1
    4e76:	b1 05       	cpc	r27, r1
    4e78:	69 f4       	brne	.+26     	; 0x4e94 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e7a:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e7e:	84 e0       	ldi	r24, 0x04	; 4
    4e80:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e82:	80 91 3a 22 	lds	r24, 0x223A
    4e86:	8d 7f       	andi	r24, 0xFD	; 253
    4e88:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {
    4e8c:	88 23       	and	r24, r24
    4e8e:	11 f4       	brne	.+4      	; 0x4e94 <__vector_47+0x8c>
			st_execute_move();
    4e90:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e94:	80 91 63 22 	lds	r24, 0x2263
    4e98:	90 91 64 22 	lds	r25, 0x2264
    4e9c:	80 93 65 22 	sts	0x2265, r24
    4ea0:	90 93 66 22 	sts	0x2266, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	e0 e8       	ldi	r30, 0x80	; 128
    4ea8:	f6 e0       	ldi	r31, 0x06	; 6
    4eaa:	86 83       	std	Z+6, r24	; 0x06
}
    4eac:	ff 91       	pop	r31
    4eae:	ef 91       	pop	r30
    4eb0:	bf 91       	pop	r27
    4eb2:	af 91       	pop	r26
    4eb4:	9f 91       	pop	r25
    4eb6:	8f 91       	pop	r24
    4eb8:	7f 91       	pop	r23
    4eba:	6f 91       	pop	r22
    4ebc:	5f 91       	pop	r21
    4ebe:	4f 91       	pop	r20
    4ec0:	3f 91       	pop	r19
    4ec2:	2f 91       	pop	r18
    4ec4:	0f 90       	pop	r0
    4ec6:	0b be       	out	0x3b, r0	; 59
    4ec8:	0f 90       	pop	r0
    4eca:	0f be       	out	0x3f, r0	; 63
    4ecc:	0f 90       	pop	r0
    4ece:	1f 90       	pop	r1
    4ed0:	18 95       	reti

00004ed2 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4ed2:	1f 92       	push	r1
    4ed4:	0f 92       	push	r0
    4ed6:	0f b6       	in	r0, 0x3f	; 63
    4ed8:	0f 92       	push	r0
    4eda:	0b b6       	in	r0, 0x3b	; 59
    4edc:	0f 92       	push	r0
    4ede:	11 24       	eor	r1, r1
    4ee0:	2f 93       	push	r18
    4ee2:	3f 93       	push	r19
    4ee4:	4f 93       	push	r20
    4ee6:	5f 93       	push	r21
    4ee8:	6f 93       	push	r22
    4eea:	7f 93       	push	r23
    4eec:	8f 93       	push	r24
    4eee:	9f 93       	push	r25
    4ef0:	af 93       	push	r26
    4ef2:	bf 93       	push	r27
    4ef4:	ef 93       	push	r30
    4ef6:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4ef8:	80 91 55 22 	lds	r24, 0x2255
    4efc:	90 91 56 22 	lds	r25, 0x2256
    4f00:	01 97       	sbiw	r24, 0x01	; 1
    4f02:	80 93 55 22 	sts	0x2255, r24
    4f06:	90 93 56 22 	sts	0x2256, r25
    4f0a:	89 2b       	or	r24, r25
    4f0c:	a1 f5       	brne	.+104    	; 0x4f76 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4f0e:	e0 ea       	ldi	r30, 0xA0	; 160
    4f10:	f6 e0       	ldi	r31, 0x06	; 6
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4f16:	80 91 4d 22 	lds	r24, 0x224D
    4f1a:	90 91 4e 22 	lds	r25, 0x224E
    4f1e:	a0 91 4f 22 	lds	r26, 0x224F
    4f22:	b0 91 50 22 	lds	r27, 0x2250
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	a1 09       	sbc	r26, r1
    4f2a:	b1 09       	sbc	r27, r1
    4f2c:	80 93 4d 22 	sts	0x224D, r24
    4f30:	90 93 4e 22 	sts	0x224E, r25
    4f34:	a0 93 4f 22 	sts	0x224F, r26
    4f38:	b0 93 50 22 	sts	0x2250, r27
    4f3c:	00 97       	sbiw	r24, 0x00	; 0
    4f3e:	a1 05       	cpc	r26, r1
    4f40:	b1 05       	cpc	r27, r1
    4f42:	69 f4       	brne	.+26     	; 0x4f5e <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4f44:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4f48:	84 e0       	ldi	r24, 0x04	; 4
    4f4a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4f4c:	80 91 3a 22 	lds	r24, 0x223A
    4f50:	8b 7f       	andi	r24, 0xFB	; 251
    4f52:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {
    4f56:	88 23       	and	r24, r24
    4f58:	11 f4       	brne	.+4      	; 0x4f5e <__vector_77+0x8c>
			st_execute_move();
    4f5a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f5e:	80 91 53 22 	lds	r24, 0x2253
    4f62:	90 91 54 22 	lds	r25, 0x2254
    4f66:	80 93 55 22 	sts	0x2255, r24
    4f6a:	90 93 56 22 	sts	0x2256, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	e0 ea       	ldi	r30, 0xA0	; 160
    4f72:	f6 e0       	ldi	r31, 0x06	; 6
    4f74:	86 83       	std	Z+6, r24	; 0x06
}
    4f76:	ff 91       	pop	r31
    4f78:	ef 91       	pop	r30
    4f7a:	bf 91       	pop	r27
    4f7c:	af 91       	pop	r26
    4f7e:	9f 91       	pop	r25
    4f80:	8f 91       	pop	r24
    4f82:	7f 91       	pop	r23
    4f84:	6f 91       	pop	r22
    4f86:	5f 91       	pop	r21
    4f88:	4f 91       	pop	r20
    4f8a:	3f 91       	pop	r19
    4f8c:	2f 91       	pop	r18
    4f8e:	0f 90       	pop	r0
    4f90:	0b be       	out	0x3b, r0	; 59
    4f92:	0f 90       	pop	r0
    4f94:	0f be       	out	0x3f, r0	; 63
    4f96:	0f 90       	pop	r0
    4f98:	1f 90       	pop	r1
    4f9a:	18 95       	reti

00004f9c <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f9c:	1f 92       	push	r1
    4f9e:	0f 92       	push	r0
    4fa0:	0f b6       	in	r0, 0x3f	; 63
    4fa2:	0f 92       	push	r0
    4fa4:	0b b6       	in	r0, 0x3b	; 59
    4fa6:	0f 92       	push	r0
    4fa8:	11 24       	eor	r1, r1
    4faa:	2f 93       	push	r18
    4fac:	3f 93       	push	r19
    4fae:	4f 93       	push	r20
    4fb0:	5f 93       	push	r21
    4fb2:	6f 93       	push	r22
    4fb4:	7f 93       	push	r23
    4fb6:	8f 93       	push	r24
    4fb8:	9f 93       	push	r25
    4fba:	af 93       	push	r26
    4fbc:	bf 93       	push	r27
    4fbe:	ef 93       	push	r30
    4fc0:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4fc2:	80 91 45 22 	lds	r24, 0x2245
    4fc6:	90 91 46 22 	lds	r25, 0x2246
    4fca:	01 97       	sbiw	r24, 0x01	; 1
    4fcc:	80 93 45 22 	sts	0x2245, r24
    4fd0:	90 93 46 22 	sts	0x2246, r25
    4fd4:	89 2b       	or	r24, r25
    4fd6:	d1 f5       	brne	.+116    	; 0x504c <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4fd8:	80 91 48 22 	lds	r24, 0x2248
    4fdc:	88 23       	and	r24, r24
    4fde:	21 f4       	brne	.+8      	; 0x4fe8 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	e0 e0       	ldi	r30, 0x00	; 0
    4fe4:	f6 e0       	ldi	r31, 0x06	; 6
    4fe6:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4fe8:	80 91 3d 22 	lds	r24, 0x223D
    4fec:	90 91 3e 22 	lds	r25, 0x223E
    4ff0:	a0 91 3f 22 	lds	r26, 0x223F
    4ff4:	b0 91 40 22 	lds	r27, 0x2240
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	a1 09       	sbc	r26, r1
    4ffc:	b1 09       	sbc	r27, r1
    4ffe:	80 93 3d 22 	sts	0x223D, r24
    5002:	90 93 3e 22 	sts	0x223E, r25
    5006:	a0 93 3f 22 	sts	0x223F, r26
    500a:	b0 93 40 22 	sts	0x2240, r27
    500e:	00 97       	sbiw	r24, 0x00	; 0
    5010:	a1 05       	cpc	r26, r1
    5012:	b1 05       	cpc	r27, r1
    5014:	79 f4       	brne	.+30     	; 0x5034 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    5016:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    501a:	84 e0       	ldi	r24, 0x04	; 4
    501c:	e0 e0       	ldi	r30, 0x00	; 0
    501e:	f6 e0       	ldi	r31, 0x06	; 6
    5020:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    5022:	80 91 3a 22 	lds	r24, 0x223A
    5026:	87 7f       	andi	r24, 0xF7	; 247
    5028:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {				// if all axes are done
    502c:	88 23       	and	r24, r24
    502e:	11 f4       	brne	.+4      	; 0x5034 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    5030:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    5034:	80 91 43 22 	lds	r24, 0x2243
    5038:	90 91 44 22 	lds	r25, 0x2244
    503c:	80 93 45 22 	sts	0x2245, r24
    5040:	90 93 46 22 	sts	0x2246, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    5044:	81 e0       	ldi	r24, 0x01	; 1
    5046:	e0 e0       	ldi	r30, 0x00	; 0
    5048:	f6 e0       	ldi	r31, 0x06	; 6
    504a:	86 83       	std	Z+6, r24	; 0x06
}
    504c:	ff 91       	pop	r31
    504e:	ef 91       	pop	r30
    5050:	bf 91       	pop	r27
    5052:	af 91       	pop	r26
    5054:	9f 91       	pop	r25
    5056:	8f 91       	pop	r24
    5058:	7f 91       	pop	r23
    505a:	6f 91       	pop	r22
    505c:	5f 91       	pop	r21
    505e:	4f 91       	pop	r20
    5060:	3f 91       	pop	r19
    5062:	2f 91       	pop	r18
    5064:	0f 90       	pop	r0
    5066:	0b be       	out	0x3b, r0	; 59
    5068:	0f 90       	pop	r0
    506a:	0f be       	out	0x3f, r0	; 63
    506c:	0f 90       	pop	r0
    506e:	1f 90       	pop	r1
    5070:	18 95       	reti

00005072 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    5072:	e0 ea       	ldi	r30, 0xA0	; 160
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	82 81       	ldd	r24, Z+2	; 0x02
    5078:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    507a:	98 ed       	ldi	r25, 0xD8	; 216
    507c:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    507e:	82 83       	std	Z+2, r24	; 0x02
}
    5080:	08 95       	ret

00005082 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    5082:	e0 ea       	ldi	r30, 0xA0	; 160
    5084:	f0 e0       	ldi	r31, 0x00	; 0
    5086:	82 81       	ldd	r24, Z+2	; 0x02
    5088:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    508a:	98 ed       	ldi	r25, 0xD8	; 216
    508c:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    508e:	82 83       	std	Z+2, r24	; 0x02
}
    5090:	08 95       	ret

00005092 <xio_setflags>:
 * xio_set_control_flags()
 */

void xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    5092:	97 e1       	ldi	r25, 0x17	; 23
    5094:	89 9f       	mul	r24, r25
    5096:	f0 01       	movw	r30, r0
    5098:	11 24       	eor	r1, r1
    509a:	e5 53       	subi	r30, 0x35	; 53
    509c:	fc 4d       	sbci	r31, 0xDC	; 220

	if (control & XIO_RD) {
    509e:	64 ff       	sbrs	r22, 4
    50a0:	05 c0       	rjmp	.+10     	; 0x50ac <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    50a2:	80 81       	ld	r24, Z
    50a4:	91 81       	ldd	r25, Z+1	; 0x01
    50a6:	81 60       	ori	r24, 0x01	; 1
    50a8:	80 83       	st	Z, r24
    50aa:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    50ac:	65 ff       	sbrs	r22, 5
    50ae:	05 c0       	rjmp	.+10     	; 0x50ba <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    50b0:	80 81       	ld	r24, Z
    50b2:	91 81       	ldd	r25, Z+1	; 0x01
    50b4:	82 60       	ori	r24, 0x02	; 2
    50b6:	80 83       	st	Z, r24
    50b8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    50ba:	66 ff       	sbrs	r22, 6
    50bc:	05 c0       	rjmp	.+10     	; 0x50c8 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    50be:	80 81       	ld	r24, Z
    50c0:	91 81       	ldd	r25, Z+1	; 0x01
    50c2:	84 60       	ori	r24, 0x04	; 4
    50c4:	80 83       	st	Z, r24
    50c6:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    50c8:	67 ff       	sbrs	r22, 7
    50ca:	05 c0       	rjmp	.+10     	; 0x50d6 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    50cc:	80 81       	ld	r24, Z
    50ce:	91 81       	ldd	r25, Z+1	; 0x01
    50d0:	8b 7f       	andi	r24, 0xFB	; 251
    50d2:	80 83       	st	Z, r24
    50d4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    50d6:	70 ff       	sbrs	r23, 0
    50d8:	05 c0       	rjmp	.+10     	; 0x50e4 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    50da:	80 81       	ld	r24, Z
    50dc:	91 81       	ldd	r25, Z+1	; 0x01
    50de:	80 61       	ori	r24, 0x10	; 16
    50e0:	80 83       	st	Z, r24
    50e2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    50e4:	71 ff       	sbrs	r23, 1
    50e6:	05 c0       	rjmp	.+10     	; 0x50f2 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	8f 7e       	andi	r24, 0xEF	; 239
    50ee:	80 83       	st	Z, r24
    50f0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    50f2:	72 ff       	sbrs	r23, 2
    50f4:	05 c0       	rjmp	.+10     	; 0x5100 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    50f6:	80 81       	ld	r24, Z
    50f8:	91 81       	ldd	r25, Z+1	; 0x01
    50fa:	80 62       	ori	r24, 0x20	; 32
    50fc:	80 83       	st	Z, r24
    50fe:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    5100:	73 ff       	sbrs	r23, 3
    5102:	05 c0       	rjmp	.+10     	; 0x510e <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    5104:	80 81       	ld	r24, Z
    5106:	91 81       	ldd	r25, Z+1	; 0x01
    5108:	8f 7d       	andi	r24, 0xDF	; 223
    510a:	80 83       	st	Z, r24
    510c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    510e:	74 ff       	sbrs	r23, 4
    5110:	05 c0       	rjmp	.+10     	; 0x511c <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    5112:	80 81       	ld	r24, Z
    5114:	91 81       	ldd	r25, Z+1	; 0x01
    5116:	80 64       	ori	r24, 0x40	; 64
    5118:	80 83       	st	Z, r24
    511a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    511c:	75 ff       	sbrs	r23, 5
    511e:	05 c0       	rjmp	.+10     	; 0x512a <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    5120:	80 81       	ld	r24, Z
    5122:	91 81       	ldd	r25, Z+1	; 0x01
    5124:	8f 7b       	andi	r24, 0xBF	; 191
    5126:	80 83       	st	Z, r24
    5128:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    512a:	76 ff       	sbrs	r23, 6
    512c:	05 c0       	rjmp	.+10     	; 0x5138 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    512e:	80 81       	ld	r24, Z
    5130:	91 81       	ldd	r25, Z+1	; 0x01
    5132:	80 68       	ori	r24, 0x80	; 128
    5134:	80 83       	st	Z, r24
    5136:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    5138:	77 ff       	sbrs	r23, 7
    513a:	05 c0       	rjmp	.+10     	; 0x5146 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    513c:	80 81       	ld	r24, Z
    513e:	91 81       	ldd	r25, Z+1	; 0x01
    5140:	8f 77       	andi	r24, 0x7F	; 127
    5142:	80 83       	st	Z, r24
    5144:	91 83       	std	Z+1, r25	; 0x01
    5146:	08 95       	ret

00005148 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	27 e1       	ldi	r18, 0x17	; 23
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	82 9f       	mul	r24, r18
    5150:	f0 01       	movw	r30, r0
    5152:	83 9f       	mul	r24, r19
    5154:	f0 0d       	add	r31, r0
    5156:	92 9f       	mul	r25, r18
    5158:	f0 0d       	add	r31, r0
    515a:	11 24       	eor	r1, r1
    515c:	e5 53       	subi	r30, 0x35	; 53
    515e:	fc 4d       	sbci	r31, 0xDC	; 220
    5160:	83 89       	ldd	r24, Z+19	; 0x13
    5162:	94 89       	ldd	r25, Z+20	; 0x14
    5164:	80 93 0a 25 	sts	0x250A, r24
    5168:	90 93 0b 25 	sts	0x250B, r25
}
    516c:	08 95       	ret

0000516e <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	27 e1       	ldi	r18, 0x17	; 23
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	82 9f       	mul	r24, r18
    5176:	f0 01       	movw	r30, r0
    5178:	83 9f       	mul	r24, r19
    517a:	f0 0d       	add	r31, r0
    517c:	92 9f       	mul	r25, r18
    517e:	f0 0d       	add	r31, r0
    5180:	11 24       	eor	r1, r1
    5182:	e5 53       	subi	r30, 0x35	; 53
    5184:	fc 4d       	sbci	r31, 0xDC	; 220
    5186:	83 89       	ldd	r24, Z+19	; 0x13
    5188:	94 89       	ldd	r25, Z+20	; 0x14
    518a:	80 93 0c 25 	sts	0x250C, r24
    518e:	90 93 0d 25 	sts	0x250D, r25
}
    5192:	08 95       	ret

00005194 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	27 e1       	ldi	r18, 0x17	; 23
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	82 9f       	mul	r24, r18
    519c:	f0 01       	movw	r30, r0
    519e:	83 9f       	mul	r24, r19
    51a0:	f0 0d       	add	r31, r0
    51a2:	92 9f       	mul	r25, r18
    51a4:	f0 0d       	add	r31, r0
    51a6:	11 24       	eor	r1, r1
    51a8:	e5 53       	subi	r30, 0x35	; 53
    51aa:	fc 4d       	sbci	r31, 0xDC	; 220
    51ac:	83 89       	ldd	r24, Z+19	; 0x13
    51ae:	94 89       	ldd	r25, Z+20	; 0x14
    51b0:	80 93 0e 25 	sts	0x250E, r24
    51b4:	90 93 0f 25 	sts	0x250F, r25
}
    51b8:	08 95       	ret

000051ba <xio_readln>:
 */

int xio_readln(uint8_t dev, char *buf, uint8_t len)
{

	switch (dev) {
    51ba:	81 30       	cpi	r24, 0x01	; 1
    51bc:	61 f0       	breq	.+24     	; 0x51d6 <xio_readln+0x1c>
    51be:	81 30       	cpi	r24, 0x01	; 1
    51c0:	28 f0       	brcs	.+10     	; 0x51cc <xio_readln+0x12>
    51c2:	83 30       	cpi	r24, 0x03	; 3
    51c4:	69 f0       	breq	.+26     	; 0x51e0 <xio_readln+0x26>
    51c6:	27 e0       	ldi	r18, 0x07	; 7
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	0f c0       	rjmp	.+30     	; 0x51ea <xio_readln+0x30>
		case (XIO_DEV_RS485): return (xio_readln_rs485(buf, len));
    51cc:	cb 01       	movw	r24, r22
    51ce:	64 2f       	mov	r22, r20
    51d0:	0e 94 13 34 	call	0x6826	; 0x6826 <xio_readln_rs485>
    51d4:	09 c0       	rjmp	.+18     	; 0x51e8 <xio_readln+0x2e>
		case (XIO_DEV_USB): return (xio_readln_usb(buf, len));
    51d6:	cb 01       	movw	r24, r22
    51d8:	64 2f       	mov	r22, r20
    51da:	0e 94 81 31 	call	0x6302	; 0x6302 <xio_readln_usb>
    51de:	04 c0       	rjmp	.+8      	; 0x51e8 <xio_readln+0x2e>
//		case (XIO_DEV_TTL): return (xio_readln_aux(buf, len));
		case (XIO_DEV_PGM): return (xio_readln_pgm(buf, len));
    51e0:	cb 01       	movw	r24, r22
    51e2:	64 2f       	mov	r22, r20
    51e4:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <xio_readln_pgm>
    51e8:	9c 01       	movw	r18, r24
		default: return (XIO_NO_SUCH_DEVICE);
	}
	return (XIO_ERR);		// never should hit this
}
    51ea:	c9 01       	movw	r24, r18
    51ec:	08 95       	ret

000051ee <xio_init_dev>:
	int (*dev_setflags)(const uint16_t control),// set device control flags
	int (*dev_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*dev_getc)(struct __file *),			// read char (stdio compatible)
	int (*dev_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    51ee:	df 92       	push	r13
    51f0:	ef 92       	push	r14
    51f2:	ff 92       	push	r15
    51f4:	0f 93       	push	r16
    51f6:	1f 93       	push	r17
    51f8:	cf 93       	push	r28
    51fa:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	e7 e1       	ldi	r30, 0x17	; 23
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	8e 9f       	mul	r24, r30
    5204:	d0 01       	movw	r26, r0
    5206:	8f 9f       	mul	r24, r31
    5208:	b0 0d       	add	r27, r0
    520a:	9e 9f       	mul	r25, r30
    520c:	b0 0d       	add	r27, r0
    520e:	11 24       	eor	r1, r1
    5210:	a5 53       	subi	r26, 0x35	; 53
    5212:	bc 4d       	sbci	r27, 0xDC	; 220
    5214:	0f 2e       	mov	r0, r31
    5216:	f7 e1       	ldi	r31, 0x17	; 23
    5218:	df 2e       	mov	r13, r31
    521a:	f0 2d       	mov	r31, r0
    521c:	ed 01       	movw	r28, r26
    521e:	19 92       	st	Y+, r1
    5220:	da 94       	dec	r13
    5222:	e9 f7       	brne	.-6      	; 0x521e <xio_init_dev+0x30>

	// bind functions
	ds[dev].dev_open = dev_open;						
    5224:	17 96       	adiw	r26, 0x07	; 7
    5226:	6d 93       	st	X+, r22
    5228:	7c 93       	st	X, r23
    522a:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].dev_setflags = dev_setflags;
    522c:	19 96       	adiw	r26, 0x09	; 9
    522e:	4d 93       	st	X+, r20
    5230:	5c 93       	st	X, r21
    5232:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].dev_putc = dev_putc;
    5234:	1b 96       	adiw	r26, 0x0b	; 11
    5236:	2d 93       	st	X+, r18
    5238:	3c 93       	st	X, r19
    523a:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].dev_getc = dev_getc;
    523c:	1d 96       	adiw	r26, 0x0d	; 13
    523e:	0d 93       	st	X+, r16
    5240:	1c 93       	st	X, r17
    5242:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].dev_readln = dev_readln;
    5244:	1f 96       	adiw	r26, 0x0f	; 15
    5246:	ed 92       	st	X+, r14
    5248:	fc 92       	st	X, r15
    524a:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    524c:	88 0f       	add	r24, r24
    524e:	99 1f       	adc	r25, r25
    5250:	fc 01       	movw	r30, r24
    5252:	43 e0       	ldi	r20, 0x03	; 3
    5254:	ee 0f       	add	r30, r30
    5256:	ff 1f       	adc	r31, r31
    5258:	4a 95       	dec	r20
    525a:	e1 f7       	brne	.-8      	; 0x5254 <xio_init_dev+0x66>
    525c:	e8 1b       	sub	r30, r24
    525e:	f9 0b       	sbc	r31, r25
    5260:	ed 57       	subi	r30, 0x7D	; 125
    5262:	fb 4d       	sbci	r31, 0xDB	; 219
    5264:	53 96       	adiw	r26, 0x13	; 19
    5266:	ed 93       	st	X+, r30
    5268:	fc 93       	st	X, r31
    526a:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, dev_putc, dev_getc, _FDEV_SETUP_RW);
    526c:	20 87       	std	Z+8, r18	; 0x08
    526e:	31 87       	std	Z+9, r19	; 0x09
    5270:	02 87       	std	Z+10, r16	; 0x0a
    5272:	13 87       	std	Z+11, r17	; 0x0b
    5274:	83 e0       	ldi	r24, 0x03	; 3
    5276:	83 83       	std	Z+3, r24	; 0x03
    5278:	14 86       	std	Z+12, r1	; 0x0c
    527a:	15 86       	std	Z+13, r1	; 0x0d
}
    527c:	df 91       	pop	r29
    527e:	cf 91       	pop	r28
    5280:	1f 91       	pop	r17
    5282:	0f 91       	pop	r16
    5284:	ff 90       	pop	r15
    5286:	ef 90       	pop	r14
    5288:	df 90       	pop	r13
    528a:	08 95       	ret

0000528c <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    528c:	8f 92       	push	r8
    528e:	af 92       	push	r10
    5290:	cf 92       	push	r12
    5292:	ef 92       	push	r14
    5294:	ff 92       	push	r15
    5296:	0f 93       	push	r16
    5298:	1f 93       	push	r17
	// RS485 device setup (brute force!)
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	66 e1       	ldi	r22, 0x16	; 22
    529e:	73 e3       	ldi	r23, 0x33	; 51
    52a0:	42 ed       	ldi	r20, 0xD2	; 210
    52a2:	54 e3       	ldi	r21, 0x34	; 52
    52a4:	2b e1       	ldi	r18, 0x1B	; 27
    52a6:	33 e3       	ldi	r19, 0x33	; 51
    52a8:	08 e9       	ldi	r16, 0x98	; 152
    52aa:	13 e3       	ldi	r17, 0x33	; 51
    52ac:	f3 e1       	ldi	r31, 0x13	; 19
    52ae:	ef 2e       	mov	r14, r31
    52b0:	f4 e3       	ldi	r31, 0x34	; 52
    52b2:	ff 2e       	mov	r15, r31
    52b4:	0e 94 f7 28 	call	0x51ee	; 0x51ee <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm,RS485_DIRSET_bm,RS485_OUTCLR_bm,RS485_OUTSET_bm);
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	60 e0       	ldi	r22, 0x00	; 0
    52bc:	45 e7       	ldi	r20, 0x75	; 117
    52be:	55 e1       	ldi	r21, 0x15	; 21
    52c0:	20 eb       	ldi	r18, 0xB0	; 176
    52c2:	38 e0       	ldi	r19, 0x08	; 8
    52c4:	00 e4       	ldi	r16, 0x40	; 64
    52c6:	16 e0       	ldi	r17, 0x06	; 6
    52c8:	e0 e4       	ldi	r30, 0x40	; 64
    52ca:	ee 2e       	mov	r14, r30
    52cc:	70 eb       	ldi	r23, 0xB0	; 176
    52ce:	c7 2e       	mov	r12, r23
    52d0:	90 e3       	ldi	r25, 0x30	; 48
    52d2:	a9 2e       	mov	r10, r25
    52d4:	b0 e8       	ldi	r27, 0x80	; 128
    52d6:	8b 2e       	mov	r8, r27
    52d8:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <xio_init_usart>

	// USB device setup
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	69 e5       	ldi	r22, 0x59	; 89
    52e0:	70 e3       	ldi	r23, 0x30	; 48
    52e2:	40 e3       	ldi	r20, 0x30	; 48
    52e4:	52 e3       	ldi	r21, 0x32	; 50
    52e6:	2e e5       	ldi	r18, 0x5E	; 94
    52e8:	30 e3       	ldi	r19, 0x30	; 48
    52ea:	0b ed       	ldi	r16, 0xDB	; 219
    52ec:	10 e3       	ldi	r17, 0x30	; 48
    52ee:	a1 e8       	ldi	r26, 0x81	; 129
    52f0:	ea 2e       	mov	r14, r26
    52f2:	a1 e3       	ldi	r26, 0x31	; 49
    52f4:	fa 2e       	mov	r15, r26
    52f6:	0e 94 f7 28 	call	0x51ee	; 0x51ee <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	61 e0       	ldi	r22, 0x01	; 1
    52fe:	45 e7       	ldi	r20, 0x75	; 117
    5300:	55 e5       	ldi	r21, 0x55	; 85
    5302:	20 ea       	ldi	r18, 0xA0	; 160
    5304:	38 e0       	ldi	r19, 0x08	; 8
    5306:	00 e4       	ldi	r16, 0x40	; 64
    5308:	16 e0       	ldi	r17, 0x06	; 6
    530a:	f5 e0       	ldi	r31, 0x05	; 5
    530c:	ef 2e       	mov	r14, r31
    530e:	ea e0       	ldi	r30, 0x0A	; 10
    5310:	ce 2e       	mov	r12, r30
    5312:	aa 24       	eor	r10, r10
    5314:	7a e0       	ldi	r23, 0x0A	; 10
    5316:	87 2e       	mov	r8, r23
    5318:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <xio_init_usart>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    531c:	83 e0       	ldi	r24, 0x03	; 3
    531e:	63 e7       	ldi	r22, 0x73	; 115
    5320:	75 e3       	ldi	r23, 0x35	; 53
    5322:	41 e0       	ldi	r20, 0x01	; 1
    5324:	56 e3       	ldi	r21, 0x36	; 54
    5326:	2b e8       	ldi	r18, 0x8B	; 139
    5328:	35 e3       	ldi	r19, 0x35	; 53
    532a:	05 eb       	ldi	r16, 0xB5	; 181
    532c:	15 e3       	ldi	r17, 0x35	; 53
    532e:	9e e8       	ldi	r25, 0x8E	; 142
    5330:	e9 2e       	mov	r14, r25
    5332:	95 e3       	ldi	r25, 0x35	; 53
    5334:	f9 2e       	mov	r15, r25
    5336:	0e 94 f7 28 	call	0x51ee	; 0x51ee <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    533a:	83 e0       	ldi	r24, 0x03	; 3
    533c:	60 e0       	ldi	r22, 0x00	; 0
    533e:	40 e5       	ldi	r20, 0x50	; 80
    5340:	55 e1       	ldi	r21, 0x15	; 21
    5342:	0e 94 08 36 	call	0x6c10	; 0x6c10 <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5346:	80 91 f5 23 	lds	r24, 0x23F5
    534a:	90 91 f6 23 	lds	r25, 0x23F6
    534e:	80 93 0a 25 	sts	0x250A, r24
    5352:	90 93 0b 25 	sts	0x250B, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5356:	80 93 0c 25 	sts	0x250C, r24
    535a:	90 93 0d 25 	sts	0x250D, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    535e:	80 93 0e 25 	sts	0x250E, r24
    5362:	90 93 0f 25 	sts	0x250F, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5366:	0f 92       	push	r0
    5368:	0f 92       	push	r0
    536a:	84 e2       	ldi	r24, 0x24	; 36
    536c:	97 e0       	ldi	r25, 0x07	; 7
    536e:	ed b7       	in	r30, 0x3d	; 61
    5370:	fe b7       	in	r31, 0x3e	; 62
    5372:	81 83       	std	Z+1, r24	; 0x01
    5374:	92 83       	std	Z+2, r25	; 0x02
    5376:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
}
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	ff 90       	pop	r15
    5384:	ef 90       	pop	r14
    5386:	cf 90       	pop	r12
    5388:	af 90       	pop	r10
    538a:	8f 90       	pop	r8
    538c:	08 95       	ret

0000538e <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    538e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5390:	e0 ec       	ldi	r30, 0xC0	; 192
    5392:	f1 e0       	ldi	r31, 0x01	; 1
    5394:	80 91 cf 01 	lds	r24, 0x01CF
    5398:	87 fd       	sbrc	r24, 7
    539a:	fa cf       	rjmp	.-12     	; 0x5390 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    539c:	26 2f       	mov	r18, r22
    539e:	30 e0       	ldi	r19, 0x00	; 0
    53a0:	2f 71       	andi	r18, 0x1F	; 31
    53a2:	30 70       	andi	r19, 0x00	; 0
    53a4:	89 2f       	mov	r24, r25
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	45 e0       	ldi	r20, 0x05	; 5
    53aa:	88 0f       	add	r24, r24
    53ac:	99 1f       	adc	r25, r25
    53ae:	4a 95       	dec	r20
    53b0:	e1 f7       	brne	.-8      	; 0x53aa <EEPROM_ReadByte+0x1c>
    53b2:	28 2b       	or	r18, r24
    53b4:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    53b6:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53ba:	83 2f       	mov	r24, r19
    53bc:	8f 71       	andi	r24, 0x1F	; 31
    53be:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53c0:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    53c2:	86 e0       	ldi	r24, 0x06	; 6
    53c4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53c6:	ef 93       	push	r30
    53c8:	ff 93       	push	r31
    53ca:	0f 93       	push	r16
    53cc:	2f 93       	push	r18
    53ce:	eb ec       	ldi	r30, 0xCB	; 203
    53d0:	f1 e0       	ldi	r31, 0x01	; 1
    53d2:	08 ed       	ldi	r16, 0xD8	; 216
    53d4:	21 e0       	ldi	r18, 0x01	; 1
    53d6:	04 bf       	out	0x34, r16	; 52
    53d8:	20 83       	st	Z, r18
    53da:	2f 91       	pop	r18
    53dc:	0f 91       	pop	r16
    53de:	ff 91       	pop	r31
    53e0:	ef 91       	pop	r30

	return NVM.DATA0;
    53e2:	80 91 c4 01 	lds	r24, 0x01C4
}
    53e6:	08 95       	ret

000053e8 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    53e8:	68 2f       	mov	r22, r24
    53ea:	6f 71       	andi	r22, 0x1F	; 31
    53ec:	55 e0       	ldi	r21, 0x05	; 5
    53ee:	96 95       	lsr	r25
    53f0:	87 95       	ror	r24
    53f2:	5a 95       	dec	r21
    53f4:	e1 f7       	brne	.-8      	; 0x53ee <eeprom_get_char+0x6>
    53f6:	0e 94 c7 29 	call	0x538e	; 0x538e <EEPROM_ReadByte>
}
    53fa:	08 95       	ret

000053fc <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    53fc:	8f 92       	push	r8
    53fe:	9f 92       	push	r9
    5400:	af 92       	push	r10
    5402:	bf 92       	push	r11
    5404:	cf 92       	push	r12
    5406:	df 92       	push	r13
    5408:	ff 92       	push	r15
    540a:	0f 93       	push	r16
    540c:	1f 93       	push	r17
    540e:	cf 93       	push	r28
    5410:	df 93       	push	r29
    5412:	4c 01       	movw	r8, r24
    5414:	5b 01       	movw	r10, r22
    5416:	6a 01       	movw	r12, r20
    5418:	8b 01       	movw	r16, r22
    541a:	ea 01       	movw	r28, r20
    541c:	ff 24       	eor	r15, r15
    541e:	18 c0       	rjmp	.+48     	; 0x5450 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5420:	c8 01       	movw	r24, r16
    5422:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5426:	ff 20       	and	r15, r15
    5428:	19 f0       	breq	.+6      	; 0x5430 <memcpy_from_eeprom_with_checksum+0x34>
    542a:	21 e0       	ldi	r18, 0x01	; 1
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	08 c0       	rjmp	.+16     	; 0x5440 <memcpy_from_eeprom_with_checksum+0x44>
    5430:	2f 2d       	mov	r18, r15
    5432:	33 27       	eor	r19, r19
    5434:	27 fd       	sbrc	r18, 7
    5436:	30 95       	com	r19
    5438:	22 27       	eor	r18, r18
    543a:	33 0f       	add	r19, r19
    543c:	22 1f       	adc	r18, r18
    543e:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5440:	0f 5f       	subi	r16, 0xFF	; 255
    5442:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5444:	f8 2e       	mov	r15, r24
    5446:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5448:	f4 01       	movw	r30, r8
    544a:	81 93       	st	Z+, r24
    544c:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    544e:	21 97       	sbiw	r28, 0x01	; 1
    5450:	20 97       	sbiw	r28, 0x00	; 0
    5452:	31 f7       	brne	.-52     	; 0x5420 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5454:	c6 01       	movw	r24, r12
    5456:	8a 0d       	add	r24, r10
    5458:	9b 1d       	adc	r25, r11
    545a:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_get_char>
    545e:	20 e0       	ldi	r18, 0x00	; 0
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	f8 16       	cp	r15, r24
    5464:	11 f4       	brne	.+4      	; 0x546a <memcpy_from_eeprom_with_checksum+0x6e>
    5466:	21 e0       	ldi	r18, 0x01	; 1
    5468:	30 e0       	ldi	r19, 0x00	; 0
}
    546a:	c9 01       	movw	r24, r18
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	1f 91       	pop	r17
    5472:	0f 91       	pop	r16
    5474:	ff 90       	pop	r15
    5476:	df 90       	pop	r13
    5478:	cf 90       	pop	r12
    547a:	bf 90       	pop	r11
    547c:	af 90       	pop	r10
    547e:	9f 90       	pop	r9
    5480:	8f 90       	pop	r8
    5482:	08 95       	ret

00005484 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5484:	80 91 cf 01 	lds	r24, 0x01CF
    5488:	87 fd       	sbrc	r24, 7
    548a:	fc cf       	rjmp	.-8      	; 0x5484 <EEPROM_WaitForNVM>
}
    548c:	08 95       	ret

0000548e <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    548e:	80 91 cf 01 	lds	r24, 0x01CF
    5492:	87 fd       	sbrc	r24, 7
    5494:	fc cf       	rjmp	.-8      	; 0x548e <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5496:	80 91 cf 01 	lds	r24, 0x01CF
    549a:	81 ff       	sbrs	r24, 1
    549c:	12 c0       	rjmp	.+36     	; 0x54c2 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    549e:	86 e3       	ldi	r24, 0x36	; 54
    54a0:	e0 ec       	ldi	r30, 0xC0	; 192
    54a2:	f1 e0       	ldi	r31, 0x01	; 1
    54a4:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    54a6:	ef 93       	push	r30
    54a8:	ff 93       	push	r31
    54aa:	0f 93       	push	r16
    54ac:	2f 93       	push	r18
    54ae:	eb ec       	ldi	r30, 0xCB	; 203
    54b0:	f1 e0       	ldi	r31, 0x01	; 1
    54b2:	08 ed       	ldi	r16, 0xD8	; 216
    54b4:	21 e0       	ldi	r18, 0x01	; 1
    54b6:	04 bf       	out	0x34, r16	; 52
    54b8:	20 83       	st	Z, r18
    54ba:	2f 91       	pop	r18
    54bc:	0f 91       	pop	r16
    54be:	ff 91       	pop	r31
    54c0:	ef 91       	pop	r30
    54c2:	08 95       	ret

000054c4 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    54c4:	df 92       	push	r13
    54c6:	ef 92       	push	r14
    54c8:	ff 92       	push	r15
    54ca:	0f 93       	push	r16
    54cc:	1f 93       	push	r17
    54ce:	e8 2e       	mov	r14, r24
    54d0:	06 2f       	mov	r16, r22
    54d2:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    54d4:	0e 94 47 2a 	call	0x548e	; 0x548e <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54d8:	e0 ec       	ldi	r30, 0xC0	; 192
    54da:	f1 e0       	ldi	r31, 0x01	; 1
    54dc:	83 e3       	ldi	r24, 0x33	; 51
    54de:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    54e0:	10 e0       	ldi	r17, 0x00	; 0
    54e2:	0f 71       	andi	r16, 0x1F	; 31
    54e4:	10 70       	andi	r17, 0x00	; 0
    54e6:	ff 24       	eor	r15, r15
    54e8:	75 e0       	ldi	r23, 0x05	; 5
    54ea:	ee 0c       	add	r14, r14
    54ec:	ff 1c       	adc	r15, r15
    54ee:	7a 95       	dec	r23
    54f0:	e1 f7       	brne	.-8      	; 0x54ea <EEPROM_WriteByte+0x26>
    54f2:	0e 29       	or	r16, r14
    54f4:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    54f6:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54f8:	81 2f       	mov	r24, r17
    54fa:	8f 71       	andi	r24, 0x1F	; 31
    54fc:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54fe:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5500:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5502:	85 e3       	ldi	r24, 0x35	; 53
    5504:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5506:	ef 93       	push	r30
    5508:	ff 93       	push	r31
    550a:	0f 93       	push	r16
    550c:	2f 93       	push	r18
    550e:	eb ec       	ldi	r30, 0xCB	; 203
    5510:	f1 e0       	ldi	r31, 0x01	; 1
    5512:	08 ed       	ldi	r16, 0xD8	; 216
    5514:	21 e0       	ldi	r18, 0x01	; 1
    5516:	04 bf       	out	0x34, r16	; 52
    5518:	20 83       	st	Z, r18
    551a:	2f 91       	pop	r18
    551c:	0f 91       	pop	r16
    551e:	ff 91       	pop	r31
    5520:	ef 91       	pop	r30
}
    5522:	1f 91       	pop	r17
    5524:	0f 91       	pop	r16
    5526:	ff 90       	pop	r15
    5528:	ef 90       	pop	r14
    552a:	df 90       	pop	r13
    552c:	08 95       	ret

0000552e <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    552e:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5530:	68 2f       	mov	r22, r24
    5532:	6f 71       	andi	r22, 0x1F	; 31
    5534:	e5 e0       	ldi	r30, 0x05	; 5
    5536:	96 95       	lsr	r25
    5538:	87 95       	ror	r24
    553a:	ea 95       	dec	r30
    553c:	e1 f7       	brne	.-8      	; 0x5536 <eeprom_put_char+0x8>
    553e:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <EEPROM_WriteByte>
}
    5542:	08 95       	ret

00005544 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5544:	8f 92       	push	r8
    5546:	9f 92       	push	r9
    5548:	af 92       	push	r10
    554a:	bf 92       	push	r11
    554c:	cf 92       	push	r12
    554e:	df 92       	push	r13
    5550:	ef 92       	push	r14
    5552:	ff 92       	push	r15
    5554:	0f 93       	push	r16
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	0f 92       	push	r0
    555c:	0f 92       	push	r0
    555e:	cd b7       	in	r28, 0x3d	; 61
    5560:	de b7       	in	r29, 0x3e	; 62
    5562:	5c 01       	movw	r10, r24
    5564:	6b 01       	movw	r12, r22
    5566:	7a 01       	movw	r14, r20
    5568:	4a 01       	movw	r8, r20
    556a:	00 e0       	ldi	r16, 0x00	; 0
    556c:	1e c0       	rjmp	.+60     	; 0x55aa <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    556e:	00 23       	and	r16, r16
    5570:	19 f0       	breq	.+6      	; 0x5578 <memcpy_to_eeprom_with_checksum+0x34>
    5572:	21 e0       	ldi	r18, 0x01	; 1
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	08 c0       	rjmp	.+16     	; 0x5588 <memcpy_to_eeprom_with_checksum+0x44>
    5578:	20 2f       	mov	r18, r16
    557a:	33 27       	eor	r19, r19
    557c:	27 fd       	sbrc	r18, 7
    557e:	30 95       	com	r19
    5580:	22 27       	eor	r18, r18
    5582:	33 0f       	add	r19, r19
    5584:	22 1f       	adc	r18, r18
    5586:	33 27       	eor	r19, r19
    checksum += *source;
    5588:	f6 01       	movw	r30, r12
    558a:	61 91       	ld	r22, Z+
    558c:	6f 01       	movw	r12, r30
    558e:	06 2f       	mov	r16, r22
    5590:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5592:	9c 01       	movw	r18, r24
    5594:	2f 5f       	subi	r18, 0xFF	; 255
    5596:	3f 4f       	sbci	r19, 0xFF	; 255
    5598:	29 83       	std	Y+1, r18	; 0x01
    559a:	3a 83       	std	Y+2, r19	; 0x02
    559c:	0e 94 97 2a 	call	0x552e	; 0x552e <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    55a0:	08 94       	sec
    55a2:	81 08       	sbc	r8, r1
    55a4:	91 08       	sbc	r9, r1
    55a6:	89 81       	ldd	r24, Y+1	; 0x01
    55a8:	9a 81       	ldd	r25, Y+2	; 0x02
    55aa:	81 14       	cp	r8, r1
    55ac:	91 04       	cpc	r9, r1
    55ae:	f9 f6       	brne	.-66     	; 0x556e <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    55b0:	c7 01       	movw	r24, r14
    55b2:	8a 0d       	add	r24, r10
    55b4:	9b 1d       	adc	r25, r11
    55b6:	60 2f       	mov	r22, r16
    55b8:	0e 94 97 2a 	call	0x552e	; 0x552e <eeprom_put_char>
}
    55bc:	0f 90       	pop	r0
    55be:	0f 90       	pop	r0
    55c0:	cf 91       	pop	r28
    55c2:	df 91       	pop	r29
    55c4:	0f 91       	pop	r16
    55c6:	ff 90       	pop	r15
    55c8:	ef 90       	pop	r14
    55ca:	df 90       	pop	r13
    55cc:	cf 90       	pop	r12
    55ce:	bf 90       	pop	r11
    55d0:	af 90       	pop	r10
    55d2:	9f 90       	pop	r9
    55d4:	8f 90       	pop	r8
    55d6:	08 95       	ret

000055d8 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    55d8:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55da:	e0 ec       	ldi	r30, 0xC0	; 192
    55dc:	f1 e0       	ldi	r31, 0x01	; 1
    55de:	80 91 cf 01 	lds	r24, 0x01CF
    55e2:	87 fd       	sbrc	r24, 7
    55e4:	fa cf       	rjmp	.-12     	; 0x55da <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55e6:	83 e3       	ldi	r24, 0x33	; 51
    55e8:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    55ea:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    55ee:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    55f0:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    55f2:	64 83       	std	Z+4, r22	; 0x04
}
    55f4:	08 95       	ret

000055f6 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    55f6:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55f8:	e0 ec       	ldi	r30, 0xC0	; 192
    55fa:	f1 e0       	ldi	r31, 0x01	; 1
    55fc:	80 91 cf 01 	lds	r24, 0x01CF
    5600:	87 fd       	sbrc	r24, 7
    5602:	fa cf       	rjmp	.-12     	; 0x55f8 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5604:	83 e3       	ldi	r24, 0x33	; 51
    5606:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5608:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    560a:	12 82       	std	Z+2, r1	; 0x02
    560c:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    560e:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5612:	8d 91       	ld	r24, X+
    5614:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5616:	9f 5f       	subi	r25, 0xFF	; 255
    5618:	90 32       	cpi	r25, 0x20	; 32
    561a:	c9 f7       	brne	.-14     	; 0x560e <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    561c:	08 95       	ret

0000561e <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    561e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5620:	e0 ec       	ldi	r30, 0xC0	; 192
    5622:	f1 e0       	ldi	r31, 0x01	; 1
    5624:	80 91 cf 01 	lds	r24, 0x01CF
    5628:	87 fd       	sbrc	r24, 7
    562a:	fa cf       	rjmp	.-12     	; 0x5620 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    562c:	89 2f       	mov	r24, r25
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	a5 e0       	ldi	r26, 0x05	; 5
    5632:	88 0f       	add	r24, r24
    5634:	99 1f       	adc	r25, r25
    5636:	aa 95       	dec	r26
    5638:	e1 f7       	brne	.-8      	; 0x5632 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    563a:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    563e:	89 2f       	mov	r24, r25
    5640:	8f 71       	andi	r24, 0x1F	; 31
    5642:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5644:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5646:	85 e3       	ldi	r24, 0x35	; 53
    5648:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    564a:	ef 93       	push	r30
    564c:	ff 93       	push	r31
    564e:	0f 93       	push	r16
    5650:	2f 93       	push	r18
    5652:	eb ec       	ldi	r30, 0xCB	; 203
    5654:	f1 e0       	ldi	r31, 0x01	; 1
    5656:	08 ed       	ldi	r16, 0xD8	; 216
    5658:	21 e0       	ldi	r18, 0x01	; 1
    565a:	04 bf       	out	0x34, r16	; 52
    565c:	20 83       	st	Z, r18
    565e:	2f 91       	pop	r18
    5660:	0f 91       	pop	r16
    5662:	ff 91       	pop	r31
    5664:	ef 91       	pop	r30
}
    5666:	08 95       	ret

00005668 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5668:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    566a:	e0 ec       	ldi	r30, 0xC0	; 192
    566c:	f1 e0       	ldi	r31, 0x01	; 1
    566e:	80 91 cf 01 	lds	r24, 0x01CF
    5672:	87 fd       	sbrc	r24, 7
    5674:	fa cf       	rjmp	.-12     	; 0x566a <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5676:	89 2f       	mov	r24, r25
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	b5 e0       	ldi	r27, 0x05	; 5
    567c:	88 0f       	add	r24, r24
    567e:	99 1f       	adc	r25, r25
    5680:	ba 95       	dec	r27
    5682:	e1 f7       	brne	.-8      	; 0x567c <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5684:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5688:	89 2f       	mov	r24, r25
    568a:	8f 71       	andi	r24, 0x1F	; 31
    568c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    568e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5690:	82 e3       	ldi	r24, 0x32	; 50
    5692:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5694:	ef 93       	push	r30
    5696:	ff 93       	push	r31
    5698:	0f 93       	push	r16
    569a:	2f 93       	push	r18
    569c:	eb ec       	ldi	r30, 0xCB	; 203
    569e:	f1 e0       	ldi	r31, 0x01	; 1
    56a0:	08 ed       	ldi	r16, 0xD8	; 216
    56a2:	21 e0       	ldi	r18, 0x01	; 1
    56a4:	04 bf       	out	0x34, r16	; 52
    56a6:	20 83       	st	Z, r18
    56a8:	2f 91       	pop	r18
    56aa:	0f 91       	pop	r16
    56ac:	ff 91       	pop	r31
    56ae:	ef 91       	pop	r30
}
    56b0:	08 95       	ret

000056b2 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    56b2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56b4:	e0 ec       	ldi	r30, 0xC0	; 192
    56b6:	f1 e0       	ldi	r31, 0x01	; 1
    56b8:	80 91 cf 01 	lds	r24, 0x01CF
    56bc:	87 fd       	sbrc	r24, 7
    56be:	fa cf       	rjmp	.-12     	; 0x56b4 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    56c0:	89 2f       	mov	r24, r25
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	25 e0       	ldi	r18, 0x05	; 5
    56c6:	88 0f       	add	r24, r24
    56c8:	99 1f       	adc	r25, r25
    56ca:	2a 95       	dec	r18
    56cc:	e1 f7       	brne	.-8      	; 0x56c6 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    56ce:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    56d2:	89 2f       	mov	r24, r25
    56d4:	8f 71       	andi	r24, 0x1F	; 31
    56d6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    56d8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    56da:	84 e3       	ldi	r24, 0x34	; 52
    56dc:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    56de:	ef 93       	push	r30
    56e0:	ff 93       	push	r31
    56e2:	0f 93       	push	r16
    56e4:	2f 93       	push	r18
    56e6:	eb ec       	ldi	r30, 0xCB	; 203
    56e8:	f1 e0       	ldi	r31, 0x01	; 1
    56ea:	08 ed       	ldi	r16, 0xD8	; 216
    56ec:	21 e0       	ldi	r18, 0x01	; 1
    56ee:	04 bf       	out	0x34, r16	; 52
    56f0:	20 83       	st	Z, r18
    56f2:	2f 91       	pop	r18
    56f4:	0f 91       	pop	r16
    56f6:	ff 91       	pop	r31
    56f8:	ef 91       	pop	r30
}
    56fa:	08 95       	ret

000056fc <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56fc:	80 91 cf 01 	lds	r24, 0x01CF
    5700:	87 fd       	sbrc	r24, 7
    5702:	fc cf       	rjmp	.-8      	; 0x56fc <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5704:	80 e3       	ldi	r24, 0x30	; 48
    5706:	e0 ec       	ldi	r30, 0xC0	; 192
    5708:	f1 e0       	ldi	r31, 0x01	; 1
    570a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    570c:	ef 93       	push	r30
    570e:	ff 93       	push	r31
    5710:	0f 93       	push	r16
    5712:	2f 93       	push	r18
    5714:	eb ec       	ldi	r30, 0xCB	; 203
    5716:	f1 e0       	ldi	r31, 0x01	; 1
    5718:	08 ed       	ldi	r16, 0xD8	; 216
    571a:	21 e0       	ldi	r18, 0x01	; 1
    571c:	04 bf       	out	0x34, r16	; 52
    571e:	20 83       	st	Z, r18
    5720:	2f 91       	pop	r18
    5722:	0f 91       	pop	r16
    5724:	ff 91       	pop	r31
    5726:	ef 91       	pop	r30
}
    5728:	08 95       	ret

0000572a <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    572a:	80 91 88 21 	lds	r24, 0x2188
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    572e:	80 93 87 21 	sts	0x2187, r24
	if (tg.src == XIO_DEV_PGM) {
    5732:	83 30       	cpi	r24, 0x03	; 3
    5734:	21 f4       	brne	.+8      	; 0x573e <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5736:	80 91 84 21 	lds	r24, 0x2184
    573a:	8e 7f       	andi	r24, 0xFE	; 254
    573c:	03 c0       	rjmp	.+6      	; 0x5744 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    573e:	80 91 84 21 	lds	r24, 0x2184
    5742:	81 60       	ori	r24, 0x01	; 1
    5744:	80 93 84 21 	sts	0x2184, r24
    5748:	08 95       	ret

0000574a <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    574a:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    574c:	80 91 86 21 	lds	r24, 0x2186
    5750:	88 23       	and	r24, r24
    5752:	a1 f5       	brne	.+104    	; 0x57bc <tg_parser+0x72>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5754:	90 81       	ld	r25, Z
    5756:	89 2f       	mov	r24, r25
    5758:	81 56       	subi	r24, 0x61	; 97
    575a:	8a 31       	cpi	r24, 0x1A	; 26
    575c:	10 f4       	brcc	.+4      	; 0x5762 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    575e:	90 52       	subi	r25, 0x20	; 32
    5760:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5762:	80 81       	ld	r24, Z
    5764:	86 34       	cpi	r24, 0x46	; 70
    5766:	b1 f0       	breq	.+44     	; 0x5794 <tg_parser+0x4a>
    5768:	87 34       	cpi	r24, 0x47	; 71
    576a:	38 f4       	brcc	.+14     	; 0x577a <tg_parser+0x30>
    576c:	83 34       	cpi	r24, 0x43	; 67
    576e:	61 f0       	breq	.+24     	; 0x5788 <tg_parser+0x3e>
    5770:	84 34       	cpi	r24, 0x44	; 68
    5772:	71 f0       	breq	.+28     	; 0x5790 <tg_parser+0x46>
    5774:	8f 33       	cpi	r24, 0x3F	; 63
    5776:	01 f5       	brne	.+64     	; 0x57b8 <tg_parser+0x6e>
    5778:	07 c0       	rjmp	.+14     	; 0x5788 <tg_parser+0x3e>
    577a:	87 34       	cpi	r24, 0x47	; 71
    577c:	19 f0       	breq	.+6      	; 0x5784 <tg_parser+0x3a>
    577e:	8d 54       	subi	r24, 0x4D	; 77
    5780:	82 30       	cpi	r24, 0x02	; 2
    5782:	d0 f4       	brcc	.+52     	; 0x57b8 <tg_parser+0x6e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5784:	82 e0       	ldi	r24, 0x02	; 2
    5786:	01 c0       	rjmp	.+2      	; 0x578a <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	80 93 86 21 	sts	0x2186, r24
    578e:	16 c0       	rjmp	.+44     	; 0x57bc <tg_parser+0x72>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5790:	83 e0       	ldi	r24, 0x03	; 3
    5792:	fb cf       	rjmp	.-10     	; 0x578a <tg_parser+0x40>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5794:	88 e8       	ldi	r24, 0x88	; 136
    5796:	95 e1       	ldi	r25, 0x15	; 21
    5798:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    579c:	83 e0       	ldi	r24, 0x03	; 3
    579e:	80 93 87 21 	sts	0x2187, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    57a2:	80 91 84 21 	lds	r24, 0x2184
    57a6:	8e 7f       	andi	r24, 0xFE	; 254
    57a8:	80 93 84 21 	sts	0x2184, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    57ac:	82 e0       	ldi	r24, 0x02	; 2
    57ae:	80 93 86 21 	sts	0x2186, r24
    57b2:	20 e0       	ldi	r18, 0x00	; 0
    57b4:	30 e0       	ldi	r19, 0x00	; 0
    57b6:	1d c0       	rjmp	.+58     	; 0x57f2 <tg_parser+0xa8>
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    57b8:	10 92 86 21 	sts	0x2186, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    57bc:	10 92 85 21 	sts	0x2185, r1
	switch (tg.mode) {
    57c0:	80 91 86 21 	lds	r24, 0x2186
    57c4:	82 30       	cpi	r24, 0x02	; 2
    57c6:	41 f0       	breq	.+16     	; 0x57d8 <tg_parser+0x8e>
    57c8:	83 30       	cpi	r24, 0x03	; 3
    57ca:	51 f0       	breq	.+20     	; 0x57e0 <tg_parser+0x96>
    57cc:	81 30       	cpi	r24, 0x01	; 1
    57ce:	69 f4       	brne	.+26     	; 0x57ea <tg_parser+0xa0>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    57d0:	cf 01       	movw	r24, r30
    57d2:	0e 94 80 19 	call	0x3300	; 0x3300 <cfg_parse>
    57d6:	07 c0       	rjmp	.+14     	; 0x57e6 <tg_parser+0x9c>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    57d8:	cf 01       	movw	r24, r30
    57da:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <gc_gcode_parser>
    57de:	03 c0       	rjmp	.+6      	; 0x57e6 <tg_parser+0x9c>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    57e0:	cf 01       	movw	r24, r30
    57e2:	0e 94 90 2c 	call	0x5920	; 0x5920 <dd_parser>
    57e6:	80 93 85 21 	sts	0x2185, r24
	}
	return (tg.status);
    57ea:	80 91 85 21 	lds	r24, 0x2185
    57ee:	28 2f       	mov	r18, r24
    57f0:	30 e0       	ldi	r19, 0x00	; 0
}
    57f2:	c9 01       	movw	r24, r18
    57f4:	08 95       	ret

000057f6 <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    57f6:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    57fa:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_line_continue>
    57fe:	80 93 85 21 	sts	0x2185, r24
    5802:	82 30       	cpi	r24, 0x02	; 2
    5804:	09 f4       	brne	.+2      	; 0x5808 <tg_controller+0x12>
    5806:	65 c0       	rjmp	.+202    	; 0x58d2 <tg_controller+0xdc>
		return;
	} else if (tg.status == TG_OK) {
    5808:	88 23       	and	r24, r24
    580a:	49 f0       	breq	.+18     	; 0x581e <tg_controller+0x28>
		tg.state = TG_READY_UNPROMPTED; 		// ready for next input line
		return;
	}

	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    580c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <mc_arc_continue>
    5810:	80 93 85 21 	sts	0x2185, r24
    5814:	82 30       	cpi	r24, 0x02	; 2
    5816:	09 f4       	brne	.+2      	; 0x581a <tg_controller+0x24>
    5818:	5c c0       	rjmp	.+184    	; 0x58d2 <tg_controller+0xdc>
		return;
	} else if (tg.status == TG_OK) {
    581a:	88 23       	and	r24, r24
    581c:	19 f4       	brne	.+6      	; 0x5824 <tg_controller+0x2e>
		tg.state = TG_READY_UNPROMPTED; 		// ready for next input line
    581e:	10 92 83 21 	sts	0x2183, r1
    5822:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, tg.len)) == TG_OK) {
    5824:	80 91 87 21 	lds	r24, 0x2187
    5828:	6b e8       	ldi	r22, 0x8B	; 139
    582a:	71 e2       	ldi	r23, 0x21	; 33
    582c:	40 91 8a 21 	lds	r20, 0x218A
    5830:	0e 94 dd 28 	call	0x51ba	; 0x51ba <xio_readln>
    5834:	80 93 85 21 	sts	0x2185, r24
    5838:	88 23       	and	r24, r24
    583a:	31 f4       	brne	.+12     	; 0x5848 <tg_controller+0x52>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    583c:	8b e8       	ldi	r24, 0x8B	; 139
    583e:	91 e2       	ldi	r25, 0x21	; 33
    5840:	0e 94 a5 2b 	call	0x574a	; 0x574a <tg_parser>
    5844:	80 93 85 21 	sts	0x2185, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    5848:	80 91 85 21 	lds	r24, 0x2185
    584c:	84 30       	cpi	r24, 0x04	; 4
    584e:	18 f4       	brcc	.+6      	; 0x5856 <tg_controller+0x60>
    5850:	82 30       	cpi	r24, 0x02	; 2
    5852:	c0 f4       	brcc	.+48     	; 0x5884 <tg_controller+0x8e>
    5854:	15 c0       	rjmp	.+42     	; 0x5880 <tg_controller+0x8a>
    5856:	85 30       	cpi	r24, 0x05	; 5
    5858:	29 f0       	breq	.+10     	; 0x5864 <tg_controller+0x6e>
    585a:	8b 30       	cpi	r24, 0x0B	; 11
    585c:	89 f4       	brne	.+34     	; 0x5880 <tg_controller+0x8a>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    585e:	10 92 86 21 	sts	0x2186, r1
    5862:	0e c0       	rjmp	.+28     	; 0x5880 <tg_controller+0x8a>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    5864:	0f 92       	push	r0
    5866:	0f 92       	push	r0
    5868:	82 ea       	ldi	r24, 0xA2	; 162
    586a:	99 e1       	ldi	r25, 0x19	; 25
    586c:	ed b7       	in	r30, 0x3d	; 61
    586e:	fe b7       	in	r31, 0x3e	; 62
    5870:	81 83       	std	Z+1, r24	; 0x01
    5872:	92 83       	std	Z+2, r25	; 0x02
    5874:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
			tg_reset_source();						// reset to default src
    5878:	0f 90       	pop	r0
    587a:	0f 90       	pop	r0
    587c:	0e 94 95 2b 	call	0x572a	; 0x572a <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    5880:	10 92 83 21 	sts	0x2183, r1
		tg.state = TG_READY_UNPROMPTED; 		// ready for next input line
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    5884:	10 92 85 21 	sts	0x2185, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5888:	80 91 83 21 	lds	r24, 0x2183
    588c:	88 23       	and	r24, r24
    588e:	09 f5       	brne	.+66     	; 0x58d2 <tg_controller+0xdc>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    5890:	80 91 84 21 	lds	r24, 0x2184
    5894:	88 23       	and	r24, r24
    5896:	d1 f0       	breq	.+52     	; 0x58cc <tg_controller+0xd6>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5898:	80 91 86 21 	lds	r24, 0x2186
    589c:	e8 2f       	mov	r30, r24
    589e:	f0 e0       	ldi	r31, 0x00	; 0
    58a0:	ee 0f       	add	r30, r30
    58a2:	ff 1f       	adc	r31, r31
    58a4:	e6 56       	subi	r30, 0x66	; 102
    58a6:	f6 4e       	sbci	r31, 0xE6	; 230
    58a8:	25 91       	lpm	r18, Z+
    58aa:	34 91       	lpm	r19, Z+
    58ac:	00 d0       	rcall	.+0      	; 0x58ae <tg_controller+0xb8>
    58ae:	0f 92       	push	r0
    58b0:	87 eb       	ldi	r24, 0xB7	; 183
    58b2:	99 e1       	ldi	r25, 0x19	; 25
    58b4:	ed b7       	in	r30, 0x3d	; 61
    58b6:	fe b7       	in	r31, 0x3e	; 62
    58b8:	81 83       	std	Z+1, r24	; 0x01
    58ba:	92 83       	std	Z+2, r25	; 0x02
    58bc:	23 83       	std	Z+3, r18	; 0x03
    58be:	34 83       	std	Z+4, r19	; 0x04
    58c0:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    58c4:	0f 90       	pop	r0
    58c6:	0f 90       	pop	r0
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	80 93 83 21 	sts	0x2183, r24
    58d2:	08 95       	ret

000058d4 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	80 93 88 21 	sts	0x2188, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    58da:	e8 e8       	ldi	r30, 0x88	; 136
    58dc:	f1 e2       	ldi	r31, 0x21	; 33
    58de:	80 93 87 21 	sts	0x2187, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    58e2:	34 97       	sbiw	r30, 0x04	; 4
    58e4:	80 81       	ld	r24, Z
    58e6:	81 60       	ori	r24, 0x01	; 1
    58e8:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    58ea:	10 92 86 21 	sts	0x2186, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    58ee:	10 92 83 21 	sts	0x2183, r1
	tg.len = sizeof(tg.buf);
    58f2:	80 e5       	ldi	r24, 0x50	; 80
    58f4:	80 93 8a 21 	sts	0x218A, r24

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    58f8:	00 d0       	rcall	.+0      	; 0x58fa <tg_init+0x26>
    58fa:	0f 92       	push	r0
    58fc:	8f ec       	ldi	r24, 0xCF	; 207
    58fe:	99 e1       	ldi	r25, 0x19	; 25
    5900:	ed b7       	in	r30, 0x3d	; 61
    5902:	fe b7       	in	r31, 0x3e	; 62
    5904:	81 83       	std	Z+1, r24	; 0x01
    5906:	92 83       	std	Z+2, r25	; 0x02
    5908:	85 ec       	ldi	r24, 0xC5	; 197
    590a:	99 e1       	ldi	r25, 0x19	; 25
    590c:	83 83       	std	Z+3, r24	; 0x03
    590e:	94 83       	std	Z+4, r25	; 0x04
    5910:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <printf_P>
    5914:	0f 90       	pop	r0
    5916:	0f 90       	pop	r0
    5918:	0f 90       	pop	r0
    591a:	0f 90       	pop	r0
}
    591c:	08 95       	ret

0000591e <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    591e:	08 95       	ret

00005920 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5920:	80 e0       	ldi	r24, 0x00	; 0
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	08 95       	ret

00005926 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    5926:	10 92 db 21 	sts	0x21DB, r1
	mv.move_buffer_tail = 0;
    592a:	10 92 dc 21 	sts	0x21DC, r1
}
    592e:	08 95       	ret

00005930 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5930:	90 91 db 21 	lds	r25, 0x21DB
    5934:	80 91 dc 21 	lds	r24, 0x21DC
    5938:	98 17       	cp	r25, r24
    593a:	19 f4       	brne	.+6      	; 0x5942 <mv_dequeue_move_buffer+0x12>
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	30 e0       	ldi	r19, 0x00	; 0
    5940:	17 c0       	rjmp	.+46     	; 0x5970 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    5942:	90 91 dc 21 	lds	r25, 0x21DC
    5946:	8e e1       	ldi	r24, 0x1E	; 30
    5948:	98 9f       	mul	r25, r24
    594a:	90 01       	movw	r18, r0
    594c:	11 24       	eor	r1, r1
    594e:	21 52       	subi	r18, 0x21	; 33
    5950:	3e 4d       	sbci	r19, 0xDE	; 222
    5952:	20 93 dd 21 	sts	0x21DD, r18
    5956:	30 93 de 21 	sts	0x21DE, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    595a:	80 91 dc 21 	lds	r24, 0x21DC
    595e:	8f 5f       	subi	r24, 0xFF	; 255
    5960:	80 93 dc 21 	sts	0x21DC, r24
    5964:	80 91 dc 21 	lds	r24, 0x21DC
    5968:	83 30       	cpi	r24, 0x03	; 3
    596a:	10 f0       	brcs	.+4      	; 0x5970 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    596c:	10 92 dc 21 	sts	0x21DC, r1
	}
	return (mv.p); 
}
    5970:	c9 01       	movw	r24, r18
    5972:	08 95       	ret

00005974 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5974:	90 91 db 21 	lds	r25, 0x21DB
    5978:	9f 5f       	subi	r25, 0xFF	; 255
    597a:	93 30       	cpi	r25, 0x03	; 3
    597c:	08 f0       	brcs	.+2      	; 0x5980 <mv_test_move_buffer_full+0xc>
    597e:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    5980:	80 91 dc 21 	lds	r24, 0x21DC
    5984:	20 e0       	ldi	r18, 0x00	; 0
    5986:	89 17       	cp	r24, r25
    5988:	09 f4       	brne	.+2      	; 0x598c <mv_test_move_buffer_full+0x18>
    598a:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    598c:	82 2f       	mov	r24, r18
    598e:	08 95       	ret

00005990 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5990:	0b c0       	rjmp	.+22     	; 0x59a8 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    5992:	80 91 48 00 	lds	r24, 0x0048
    5996:	81 60       	ori	r24, 0x01	; 1
    5998:	80 93 48 00 	sts	0x0048, r24
    599c:	88 95       	sleep
    599e:	80 91 48 00 	lds	r24, 0x0048
    59a2:	8e 7f       	andi	r24, 0xFE	; 254
    59a4:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    59a8:	90 91 dc 21 	lds	r25, 0x21DC
    59ac:	80 91 db 21 	lds	r24, 0x21DB
    59b0:	98 17       	cp	r25, r24
    59b2:	79 f7       	brne	.-34     	; 0x5992 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    59b4:	08 95       	ret

000059b6 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    59b6:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    59b8:	80 91 db 21 	lds	r24, 0x21DB
    59bc:	80 93 dc 21 	sts	0x21DC, r24
	mv.p = NULL;
    59c0:	10 92 dd 21 	sts	0x21DD, r1
    59c4:	10 92 de 21 	sts	0x21DE, r1
	sei();
    59c8:	78 94       	sei
}
    59ca:	08 95       	ret

000059cc <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    59cc:	2f 92       	push	r2
    59ce:	3f 92       	push	r3
    59d0:	4f 92       	push	r4
    59d2:	5f 92       	push	r5
    59d4:	6f 92       	push	r6
    59d6:	7f 92       	push	r7
    59d8:	8f 92       	push	r8
    59da:	9f 92       	push	r9
    59dc:	af 92       	push	r10
    59de:	bf 92       	push	r11
    59e0:	cf 92       	push	r12
    59e2:	df 92       	push	r13
    59e4:	ef 92       	push	r14
    59e6:	ff 92       	push	r15
    59e8:	0f 93       	push	r16
    59ea:	1f 93       	push	r17
    59ec:	df 93       	push	r29
    59ee:	cf 93       	push	r28
    59f0:	cd b7       	in	r28, 0x3d	; 61
    59f2:	de b7       	in	r29, 0x3e	; 62
    59f4:	2b 97       	sbiw	r28, 0x0b	; 11
    59f6:	cd bf       	out	0x3d, r28	; 61
    59f8:	de bf       	out	0x3e, r29	; 62
    59fa:	3b 01       	movw	r6, r22
    59fc:	4c 01       	movw	r8, r24
    59fe:	19 01       	movw	r2, r18
    5a00:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5a02:	20 91 db 21 	lds	r18, 0x21DB
    5a06:	2f 5f       	subi	r18, 0xFF	; 255
    5a08:	29 87       	std	Y+9, r18	; 0x09
    5a0a:	23 30       	cpi	r18, 0x03	; 3
    5a0c:	08 f0       	brcs	.+2      	; 0x5a10 <mv_queue_move_buffer+0x44>
    5a0e:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    5a10:	80 91 dc 21 	lds	r24, 0x21DC
    5a14:	39 85       	ldd	r19, Y+9	; 0x09
    5a16:	83 17       	cp	r24, r19
    5a18:	11 f4       	brne	.+4      	; 0x5a1e <mv_queue_move_buffer+0x52>
    5a1a:	8a e0       	ldi	r24, 0x0A	; 10
    5a1c:	92 c1       	rjmp	.+804    	; 0x5d42 <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    5a1e:	e0 91 db 21 	lds	r30, 0x21DB
    5a22:	8e e1       	ldi	r24, 0x1E	; 30
    5a24:	e8 9f       	mul	r30, r24
    5a26:	f0 01       	movw	r30, r0
    5a28:	11 24       	eor	r1, r1
    5a2a:	e1 52       	subi	r30, 0x21	; 33
    5a2c:	fe 4d       	sbci	r31, 0xDE	; 222
    5a2e:	e0 93 dd 21 	sts	0x21DD, r30
    5a32:	f0 93 de 21 	sts	0x21DE, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5a36:	df 01       	movw	r26, r30
    5a38:	1d 92       	st	X+, r1
    5a3a:	8a 95       	dec	r24
    5a3c:	e9 f7       	brne	.-6      	; 0x5a38 <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    5a3e:	e0 91 dd 21 	lds	r30, 0x21DD
    5a42:	f0 91 de 21 	lds	r31, 0x21DE
    5a46:	ea 87       	std	Y+10, r30	; 0x0a
    5a48:	fb 87       	std	Y+11, r31	; 0x0b
    5a4a:	60 82       	st	Z, r6
    5a4c:	71 82       	std	Z+1, r7	; 0x01
    5a4e:	82 82       	std	Z+2, r8	; 0x02
    5a50:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    5a52:	22 86       	std	Z+10, r2	; 0x0a
    5a54:	33 86       	std	Z+11, r3	; 0x0b
    5a56:	44 86       	std	Z+12, r4	; 0x0c
    5a58:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    5a5a:	e4 8a       	std	Z+20, r14	; 0x14
    5a5c:	f5 8a       	std	Z+21, r15	; 0x15
    5a5e:	06 8b       	std	Z+22, r16	; 0x16
    5a60:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    5a62:	a5 e0       	ldi	r26, 0x05	; 5
    5a64:	aa 0c       	add	r10, r10
    5a66:	bb 1c       	adc	r11, r11
    5a68:	cc 1c       	adc	r12, r12
    5a6a:	dd 1c       	adc	r13, r13
    5a6c:	aa 95       	dec	r26
    5a6e:	d1 f7       	brne	.-12     	; 0x5a64 <mv_queue_move_buffer+0x98>
    5a70:	a6 01       	movw	r20, r12
    5a72:	95 01       	movw	r18, r10
    5a74:	60 e0       	ldi	r22, 0x00	; 0
    5a76:	70 e0       	ldi	r23, 0x00	; 0
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	a9 82       	std	Y+1, r10	; 0x01
    5a7e:	3a 83       	std	Y+2, r19	; 0x02
    5a80:	4b 83       	std	Y+3, r20	; 0x03
    5a82:	5c 83       	std	Y+4, r21	; 0x04
    5a84:	6d 83       	std	Y+5, r22	; 0x05
    5a86:	7e 83       	std	Y+6, r23	; 0x06
    5a88:	8f 83       	std	Y+7, r24	; 0x07
    5a8a:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5a8c:	61 14       	cp	r6, r1
    5a8e:	71 04       	cpc	r7, r1
    5a90:	81 04       	cpc	r8, r1
    5a92:	91 04       	cpc	r9, r1
    5a94:	09 f0       	breq	.+2      	; 0x5a98 <mv_queue_move_buffer+0xcc>
    5a96:	4b c0       	rjmp	.+150    	; 0x5b2e <mv_queue_move_buffer+0x162>
    5a98:	21 14       	cp	r2, r1
    5a9a:	31 04       	cpc	r3, r1
    5a9c:	41 04       	cpc	r4, r1
    5a9e:	51 04       	cpc	r5, r1
    5aa0:	09 f0       	breq	.+2      	; 0x5aa4 <mv_queue_move_buffer+0xd8>
    5aa2:	45 c0       	rjmp	.+138    	; 0x5b2e <mv_queue_move_buffer+0x162>
    5aa4:	e1 14       	cp	r14, r1
    5aa6:	f1 04       	cpc	r15, r1
    5aa8:	01 05       	cpc	r16, r1
    5aaa:	11 05       	cpc	r17, r1
    5aac:	09 f0       	breq	.+2      	; 0x5ab0 <mv_queue_move_buffer+0xe4>
    5aae:	3f c0       	rjmp	.+126    	; 0x5b2e <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	a0 e0       	ldi	r26, 0x00	; 0
    5ab6:	b0 e0       	ldi	r27, 0x00	; 0
    5ab8:	80 83       	st	Z, r24
    5aba:	91 83       	std	Z+1, r25	; 0x01
    5abc:	a2 83       	std	Z+2, r26	; 0x02
    5abe:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    5ac0:	81 e0       	ldi	r24, 0x01	; 1
    5ac2:	90 e0       	ldi	r25, 0x00	; 0
    5ac4:	86 83       	std	Z+6, r24	; 0x06
    5ac6:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    5ac8:	60 e0       	ldi	r22, 0x00	; 0
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	aa 24       	eor	r10, r10
    5ad2:	a3 94       	inc	r10
    5ad4:	bb 24       	eor	r11, r11
    5ad6:	cc 24       	eor	r12, r12
    5ad8:	dd 24       	eor	r13, r13
    5ada:	ee 24       	eor	r14, r14
    5adc:	ff 24       	eor	r15, r15
    5ade:	00 e0       	ldi	r16, 0x00	; 0
    5ae0:	10 e0       	ldi	r17, 0x00	; 0
    5ae2:	0e 94 21 36 	call	0x6c42	; 0x6c42 <__udivdi3>
    5ae6:	c9 01       	movw	r24, r18
    5ae8:	da 01       	movw	r26, r20
    5aea:	9c 01       	movw	r18, r24
    5aec:	ad 01       	movw	r20, r26
    5aee:	10 c0       	rjmp	.+32     	; 0x5b10 <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    5af0:	56 95       	lsr	r21
    5af2:	47 95       	ror	r20
    5af4:	37 95       	ror	r19
    5af6:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    5af8:	aa 85       	ldd	r26, Y+10	; 0x0a
    5afa:	bb 85       	ldd	r27, Y+11	; 0x0b
    5afc:	16 96       	adiw	r26, 0x06	; 6
    5afe:	8d 91       	ld	r24, X+
    5b00:	9c 91       	ld	r25, X
    5b02:	17 97       	sbiw	r26, 0x07	; 7
    5b04:	88 0f       	add	r24, r24
    5b06:	99 1f       	adc	r25, r25
    5b08:	16 96       	adiw	r26, 0x06	; 6
    5b0a:	8d 93       	st	X+, r24
    5b0c:	9c 93       	st	X, r25
    5b0e:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    5b10:	da 01       	movw	r26, r20
    5b12:	c9 01       	movw	r24, r18
    5b14:	80 70       	andi	r24, 0x00	; 0
    5b16:	90 70       	andi	r25, 0x00	; 0
    5b18:	00 97       	sbiw	r24, 0x00	; 0
    5b1a:	a1 05       	cpc	r26, r1
    5b1c:	b1 05       	cpc	r27, r1
    5b1e:	41 f7       	brne	.-48     	; 0x5af0 <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    5b20:	ea 85       	ldd	r30, Y+10	; 0x0a
    5b22:	fb 85       	ldd	r31, Y+11	; 0x0b
    5b24:	24 83       	std	Z+4, r18	; 0x04
    5b26:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5b28:	81 e0       	ldi	r24, 0x01	; 1
    5b2a:	81 87       	std	Z+9, r24	; 0x09
    5b2c:	04 c1       	rjmp	.+520    	; 0x5d36 <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b2e:	44 24       	eor	r4, r4
    5b30:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5b32:	40 91 dd 21 	lds	r20, 0x21DD
    5b36:	50 91 de 21 	lds	r21, 0x21DE
    5b3a:	34 2c       	mov	r3, r4
    5b3c:	25 2c       	mov	r2, r5
    5b3e:	c2 01       	movw	r24, r4
    5b40:	fc 01       	movw	r30, r24
    5b42:	73 e0       	ldi	r23, 0x03	; 3
    5b44:	ee 0f       	add	r30, r30
    5b46:	ff 1f       	adc	r31, r31
    5b48:	7a 95       	dec	r23
    5b4a:	e1 f7       	brne	.-8      	; 0x5b44 <mv_queue_move_buffer+0x178>
    5b4c:	88 0f       	add	r24, r24
    5b4e:	99 1f       	adc	r25, r25
    5b50:	e8 0f       	add	r30, r24
    5b52:	f9 1f       	adc	r31, r25
    5b54:	e4 0f       	add	r30, r20
    5b56:	f5 1f       	adc	r31, r21
    5b58:	80 81       	ld	r24, Z
    5b5a:	91 81       	ldd	r25, Z+1	; 0x01
    5b5c:	a2 81       	ldd	r26, Z+2	; 0x02
    5b5e:	b3 81       	ldd	r27, Z+3	; 0x03
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	a1 05       	cpc	r26, r1
    5b64:	b1 05       	cpc	r27, r1
    5b66:	09 f4       	brne	.+2      	; 0x5b6a <mv_queue_move_buffer+0x19e>
    5b68:	de c0       	rjmp	.+444    	; 0x5d26 <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5b6a:	b7 ff       	sbrs	r27, 7
    5b6c:	10 c0       	rjmp	.+32     	; 0x5b8e <mv_queue_move_buffer+0x1c2>
    5b6e:	c2 01       	movw	r24, r4
    5b70:	fc 01       	movw	r30, r24
    5b72:	33 e0       	ldi	r19, 0x03	; 3
    5b74:	ee 0f       	add	r30, r30
    5b76:	ff 1f       	adc	r31, r31
    5b78:	3a 95       	dec	r19
    5b7a:	e1 f7       	brne	.-8      	; 0x5b74 <mv_queue_move_buffer+0x1a8>
    5b7c:	88 0f       	add	r24, r24
    5b7e:	99 1f       	adc	r25, r25
    5b80:	e8 0f       	add	r30, r24
    5b82:	f9 1f       	adc	r31, r25
    5b84:	e4 0f       	add	r30, r20
    5b86:	f5 1f       	adc	r31, r21
    5b88:	21 e0       	ldi	r18, 0x01	; 1
    5b8a:	20 87       	std	Z+8, r18	; 0x08
    5b8c:	0e c0       	rjmp	.+28     	; 0x5baa <mv_queue_move_buffer+0x1de>
    5b8e:	c2 01       	movw	r24, r4
    5b90:	fc 01       	movw	r30, r24
    5b92:	03 e0       	ldi	r16, 0x03	; 3
    5b94:	ee 0f       	add	r30, r30
    5b96:	ff 1f       	adc	r31, r31
    5b98:	0a 95       	dec	r16
    5b9a:	e1 f7       	brne	.-8      	; 0x5b94 <mv_queue_move_buffer+0x1c8>
    5b9c:	88 0f       	add	r24, r24
    5b9e:	99 1f       	adc	r25, r25
    5ba0:	e8 0f       	add	r30, r24
    5ba2:	f9 1f       	adc	r31, r25
    5ba4:	e4 0f       	add	r30, r20
    5ba6:	f5 1f       	adc	r31, r21
    5ba8:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5baa:	83 2d       	mov	r24, r3
    5bac:	92 2d       	mov	r25, r2
    5bae:	fc 01       	movw	r30, r24
    5bb0:	b3 e0       	ldi	r27, 0x03	; 3
    5bb2:	ee 0f       	add	r30, r30
    5bb4:	ff 1f       	adc	r31, r31
    5bb6:	ba 95       	dec	r27
    5bb8:	e1 f7       	brne	.-8      	; 0x5bb2 <mv_queue_move_buffer+0x1e6>
    5bba:	88 0f       	add	r24, r24
    5bbc:	99 1f       	adc	r25, r25
    5bbe:	e8 0f       	add	r30, r24
    5bc0:	f9 1f       	adc	r31, r25
    5bc2:	e4 0f       	add	r30, r20
    5bc4:	f5 1f       	adc	r31, r21
    5bc6:	83 2d       	mov	r24, r3
    5bc8:	92 2d       	mov	r25, r2
    5bca:	9c 01       	movw	r18, r24
    5bcc:	73 e0       	ldi	r23, 0x03	; 3
    5bce:	22 0f       	add	r18, r18
    5bd0:	33 1f       	adc	r19, r19
    5bd2:	7a 95       	dec	r23
    5bd4:	e1 f7       	brne	.-8      	; 0x5bce <mv_queue_move_buffer+0x202>
    5bd6:	88 0f       	add	r24, r24
    5bd8:	99 1f       	adc	r25, r25
    5bda:	28 0f       	add	r18, r24
    5bdc:	39 1f       	adc	r19, r25
    5bde:	42 0f       	add	r20, r18
    5be0:	53 1f       	adc	r21, r19
    5be2:	da 01       	movw	r26, r20
    5be4:	2d 91       	ld	r18, X+
    5be6:	3d 91       	ld	r19, X+
    5be8:	4d 91       	ld	r20, X+
    5bea:	5c 91       	ld	r21, X
    5bec:	57 ff       	sbrs	r21, 7
    5bee:	07 c0       	rjmp	.+14     	; 0x5bfe <mv_queue_move_buffer+0x232>
    5bf0:	50 95       	com	r21
    5bf2:	40 95       	com	r20
    5bf4:	30 95       	com	r19
    5bf6:	21 95       	neg	r18
    5bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bfa:	4f 4f       	sbci	r20, 0xFF	; 255
    5bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    5bfe:	20 83       	st	Z, r18
    5c00:	31 83       	std	Z+1, r19	; 0x01
    5c02:	42 83       	std	Z+2, r20	; 0x02
    5c04:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5c06:	e0 91 dd 21 	lds	r30, 0x21DD
    5c0a:	f0 91 de 21 	lds	r31, 0x21DE
    5c0e:	ea 87       	std	Y+10, r30	; 0x0a
    5c10:	fb 87       	std	Y+11, r31	; 0x0b
    5c12:	83 2d       	mov	r24, r3
    5c14:	92 2d       	mov	r25, r2
    5c16:	fc 01       	movw	r30, r24
    5c18:	03 e0       	ldi	r16, 0x03	; 3
    5c1a:	ee 0f       	add	r30, r30
    5c1c:	ff 1f       	adc	r31, r31
    5c1e:	0a 95       	dec	r16
    5c20:	e1 f7       	brne	.-8      	; 0x5c1a <mv_queue_move_buffer+0x24e>
    5c22:	88 0f       	add	r24, r24
    5c24:	99 1f       	adc	r25, r25
    5c26:	e8 0f       	add	r30, r24
    5c28:	f9 1f       	adc	r31, r25
    5c2a:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c2c:	3b 85       	ldd	r19, Y+11	; 0x0b
    5c2e:	e2 0f       	add	r30, r18
    5c30:	f3 1f       	adc	r31, r19
    5c32:	41 e0       	ldi	r20, 0x01	; 1
    5c34:	50 e0       	ldi	r21, 0x00	; 0
    5c36:	46 83       	std	Z+6, r20	; 0x06
    5c38:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    5c3a:	83 2d       	mov	r24, r3
    5c3c:	92 2d       	mov	r25, r2
    5c3e:	fc 01       	movw	r30, r24
    5c40:	b3 e0       	ldi	r27, 0x03	; 3
    5c42:	ee 0f       	add	r30, r30
    5c44:	ff 1f       	adc	r31, r31
    5c46:	ba 95       	dec	r27
    5c48:	e1 f7       	brne	.-8      	; 0x5c42 <mv_queue_move_buffer+0x276>
    5c4a:	88 0f       	add	r24, r24
    5c4c:	99 1f       	adc	r25, r25
    5c4e:	e8 0f       	add	r30, r24
    5c50:	f9 1f       	adc	r31, r25
    5c52:	e2 0f       	add	r30, r18
    5c54:	f3 1f       	adc	r31, r19
    5c56:	e0 80       	ld	r14, Z
    5c58:	f1 80       	ldd	r15, Z+1	; 0x01
    5c5a:	02 81       	ldd	r16, Z+2	; 0x02
    5c5c:	13 81       	ldd	r17, Z+3	; 0x03
    5c5e:	37 01       	movw	r6, r14
    5c60:	48 01       	movw	r8, r16
    5c62:	99 0c       	add	r9, r9
    5c64:	66 08       	sbc	r6, r6
    5c66:	76 2c       	mov	r7, r6
    5c68:	43 01       	movw	r8, r6
    5c6a:	29 81       	ldd	r18, Y+1	; 0x01
    5c6c:	3a 81       	ldd	r19, Y+2	; 0x02
    5c6e:	4b 81       	ldd	r20, Y+3	; 0x03
    5c70:	5c 81       	ldd	r21, Y+4	; 0x04
    5c72:	6d 81       	ldd	r22, Y+5	; 0x05
    5c74:	7e 81       	ldd	r23, Y+6	; 0x06
    5c76:	8f 81       	ldd	r24, Y+7	; 0x07
    5c78:	98 85       	ldd	r25, Y+8	; 0x08
    5c7a:	57 01       	movw	r10, r14
    5c7c:	68 01       	movw	r12, r16
    5c7e:	e6 2c       	mov	r14, r6
    5c80:	f6 2c       	mov	r15, r6
    5c82:	06 2d       	mov	r16, r6
    5c84:	16 2d       	mov	r17, r6
    5c86:	0e 94 21 36 	call	0x6c42	; 0x6c42 <__udivdi3>
    5c8a:	c9 01       	movw	r24, r18
    5c8c:	da 01       	movw	r26, r20
    5c8e:	ac 01       	movw	r20, r24
    5c90:	bd 01       	movw	r22, r26
    5c92:	2c c0       	rjmp	.+88     	; 0x5cec <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    5c94:	76 95       	lsr	r23
    5c96:	67 95       	ror	r22
    5c98:	57 95       	ror	r21
    5c9a:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    5c9c:	83 2d       	mov	r24, r3
    5c9e:	92 2d       	mov	r25, r2
    5ca0:	dc 01       	movw	r26, r24
    5ca2:	33 e0       	ldi	r19, 0x03	; 3
    5ca4:	aa 0f       	add	r26, r26
    5ca6:	bb 1f       	adc	r27, r27
    5ca8:	3a 95       	dec	r19
    5caa:	e1 f7       	brne	.-8      	; 0x5ca4 <mv_queue_move_buffer+0x2d8>
    5cac:	88 0f       	add	r24, r24
    5cae:	99 1f       	adc	r25, r25
    5cb0:	a8 0f       	add	r26, r24
    5cb2:	b9 1f       	adc	r27, r25
    5cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cb8:	a8 0f       	add	r26, r24
    5cba:	b9 1f       	adc	r27, r25
    5cbc:	83 2d       	mov	r24, r3
    5cbe:	92 2d       	mov	r25, r2
    5cc0:	fc 01       	movw	r30, r24
    5cc2:	03 e0       	ldi	r16, 0x03	; 3
    5cc4:	ee 0f       	add	r30, r30
    5cc6:	ff 1f       	adc	r31, r31
    5cc8:	0a 95       	dec	r16
    5cca:	e1 f7       	brne	.-8      	; 0x5cc4 <mv_queue_move_buffer+0x2f8>
    5ccc:	88 0f       	add	r24, r24
    5cce:	99 1f       	adc	r25, r25
    5cd0:	e8 0f       	add	r30, r24
    5cd2:	f9 1f       	adc	r31, r25
    5cd4:	2a 85       	ldd	r18, Y+10	; 0x0a
    5cd6:	3b 85       	ldd	r19, Y+11	; 0x0b
    5cd8:	e2 0f       	add	r30, r18
    5cda:	f3 1f       	adc	r31, r19
    5cdc:	86 81       	ldd	r24, Z+6	; 0x06
    5cde:	97 81       	ldd	r25, Z+7	; 0x07
    5ce0:	88 0f       	add	r24, r24
    5ce2:	99 1f       	adc	r25, r25
    5ce4:	16 96       	adiw	r26, 0x06	; 6
    5ce6:	8d 93       	st	X+, r24
    5ce8:	9c 93       	st	X, r25
    5cea:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    5cec:	db 01       	movw	r26, r22
    5cee:	ca 01       	movw	r24, r20
    5cf0:	80 70       	andi	r24, 0x00	; 0
    5cf2:	90 70       	andi	r25, 0x00	; 0
    5cf4:	00 97       	sbiw	r24, 0x00	; 0
    5cf6:	a1 05       	cpc	r26, r1
    5cf8:	b1 05       	cpc	r27, r1
    5cfa:	61 f6       	brne	.-104    	; 0x5c94 <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    5cfc:	83 2d       	mov	r24, r3
    5cfe:	92 2d       	mov	r25, r2
    5d00:	9c 01       	movw	r18, r24
    5d02:	73 e0       	ldi	r23, 0x03	; 3
    5d04:	22 0f       	add	r18, r18
    5d06:	33 1f       	adc	r19, r19
    5d08:	7a 95       	dec	r23
    5d0a:	e1 f7       	brne	.-8      	; 0x5d04 <mv_queue_move_buffer+0x338>
    5d0c:	88 0f       	add	r24, r24
    5d0e:	99 1f       	adc	r25, r25
    5d10:	28 0f       	add	r18, r24
    5d12:	39 1f       	adc	r19, r25
    5d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d18:	82 0f       	add	r24, r18
    5d1a:	93 1f       	adc	r25, r19
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	14 96       	adiw	r26, 0x04	; 4
    5d20:	4d 93       	st	X+, r20
    5d22:	5c 93       	st	X, r21
    5d24:	15 97       	sbiw	r26, 0x05	; 5
    5d26:	08 94       	sec
    5d28:	41 1c       	adc	r4, r1
    5d2a:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5d2c:	b3 e0       	ldi	r27, 0x03	; 3
    5d2e:	4b 16       	cp	r4, r27
    5d30:	51 04       	cpc	r5, r1
    5d32:	09 f0       	breq	.+2      	; 0x5d36 <mv_queue_move_buffer+0x36a>
    5d34:	fe ce       	rjmp	.-516    	; 0x5b32 <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5d36:	e9 85       	ldd	r30, Y+9	; 0x09
    5d38:	e0 93 db 21 	sts	0x21DB, r30
	st_execute_move();
    5d3c:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <st_execute_move>
    5d40:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5d42:	2b 96       	adiw	r28, 0x0b	; 11
    5d44:	cd bf       	out	0x3d, r28	; 61
    5d46:	de bf       	out	0x3e, r29	; 62
    5d48:	cf 91       	pop	r28
    5d4a:	df 91       	pop	r29
    5d4c:	1f 91       	pop	r17
    5d4e:	0f 91       	pop	r16
    5d50:	ff 90       	pop	r15
    5d52:	ef 90       	pop	r14
    5d54:	df 90       	pop	r13
    5d56:	cf 90       	pop	r12
    5d58:	bf 90       	pop	r11
    5d5a:	af 90       	pop	r10
    5d5c:	9f 90       	pop	r9
    5d5e:	8f 90       	pop	r8
    5d60:	7f 90       	pop	r7
    5d62:	6f 90       	pop	r6
    5d64:	5f 90       	pop	r5
    5d66:	4f 90       	pop	r4
    5d68:	3f 90       	pop	r3
    5d6a:	2f 90       	pop	r2
    5d6c:	08 95       	ret

00005d6e <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5d6e:	a9 e4       	ldi	r26, 0x49	; 73
    5d70:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5d72:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5d74:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5d76:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5d78:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5d7a:	ed 91       	ld	r30, X+
    5d7c:	fc 91       	ld	r31, X
    5d7e:	11 97       	sbiw	r26, 0x01	; 1
    5d80:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5d82:	ed 91       	ld	r30, X+
    5d84:	fc 91       	ld	r31, X
    5d86:	11 97       	sbiw	r26, 0x01	; 1
    5d88:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5d8a:	ed 91       	ld	r30, X+
    5d8c:	fc 91       	ld	r31, X
    5d8e:	11 97       	sbiw	r26, 0x01	; 1
    5d90:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5d92:	ed 91       	ld	r30, X+
    5d94:	fc 91       	ld	r31, X
    5d96:	11 97       	sbiw	r26, 0x01	; 1
    5d98:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5d9a:	ed 91       	ld	r30, X+
    5d9c:	fc 91       	ld	r31, X
    5d9e:	11 97       	sbiw	r26, 0x01	; 1
    5da0:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5da2:	ed 91       	ld	r30, X+
    5da4:	fc 91       	ld	r31, X
    5da6:	11 97       	sbiw	r26, 0x01	; 1
    5da8:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5daa:	ed 91       	ld	r30, X+
    5dac:	fc 91       	ld	r31, X
    5dae:	11 97       	sbiw	r26, 0x01	; 1
    5db0:	31 87       	std	Z+9, r19	; 0x09
    5db2:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5db4:	42 e2       	ldi	r20, 0x22	; 34
    5db6:	a9 38       	cpi	r26, 0x89	; 137
    5db8:	b4 07       	cpc	r27, r20
    5dba:	f9 f6       	brne	.-66     	; 0x5d7a <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5dbc:	08 95       	ret

00005dbe <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5dbe:	1f 92       	push	r1
    5dc0:	0f 92       	push	r0
    5dc2:	0f b6       	in	r0, 0x3f	; 63
    5dc4:	0f 92       	push	r0
    5dc6:	11 24       	eor	r1, r1
    5dc8:	0f 90       	pop	r0
    5dca:	0f be       	out	0x3f, r0	; 63
    5dcc:	0f 90       	pop	r0
    5dce:	1f 90       	pop	r1
    5dd0:	18 95       	reti

00005dd2 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5dd2:	1f 92       	push	r1
    5dd4:	0f 92       	push	r0
    5dd6:	0f b6       	in	r0, 0x3f	; 63
    5dd8:	0f 92       	push	r0
    5dda:	11 24       	eor	r1, r1
    5ddc:	0f 90       	pop	r0
    5dde:	0f be       	out	0x3f, r0	; 63
    5de0:	0f 90       	pop	r0
    5de2:	1f 90       	pop	r1
    5de4:	18 95       	reti

00005de6 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5de6:	1f 92       	push	r1
    5de8:	0f 92       	push	r0
    5dea:	0f b6       	in	r0, 0x3f	; 63
    5dec:	0f 92       	push	r0
    5dee:	11 24       	eor	r1, r1
    5df0:	0f 90       	pop	r0
    5df2:	0f be       	out	0x3f, r0	; 63
    5df4:	0f 90       	pop	r0
    5df6:	1f 90       	pop	r1
    5df8:	18 95       	reti

00005dfa <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5dfa:	1f 92       	push	r1
    5dfc:	0f 92       	push	r0
    5dfe:	0f b6       	in	r0, 0x3f	; 63
    5e00:	0f 92       	push	r0
    5e02:	11 24       	eor	r1, r1
    5e04:	0f 90       	pop	r0
    5e06:	0f be       	out	0x3f, r0	; 63
    5e08:	0f 90       	pop	r0
    5e0a:	1f 90       	pop	r1
    5e0c:	18 95       	reti

00005e0e <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5e0e:	1f 92       	push	r1
    5e10:	0f 92       	push	r0
    5e12:	0f b6       	in	r0, 0x3f	; 63
    5e14:	0f 92       	push	r0
    5e16:	11 24       	eor	r1, r1
    5e18:	0f 90       	pop	r0
    5e1a:	0f be       	out	0x3f, r0	; 63
    5e1c:	0f 90       	pop	r0
    5e1e:	1f 90       	pop	r1
    5e20:	18 95       	reti

00005e22 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5e22:	1f 92       	push	r1
    5e24:	0f 92       	push	r0
    5e26:	0f b6       	in	r0, 0x3f	; 63
    5e28:	0f 92       	push	r0
    5e2a:	11 24       	eor	r1, r1
    5e2c:	0f 90       	pop	r0
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	0f 90       	pop	r0
    5e32:	1f 90       	pop	r1
    5e34:	18 95       	reti

00005e36 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5e36:	1f 92       	push	r1
    5e38:	0f 92       	push	r0
    5e3a:	0f b6       	in	r0, 0x3f	; 63
    5e3c:	0f 92       	push	r0
    5e3e:	11 24       	eor	r1, r1
    5e40:	0f 90       	pop	r0
    5e42:	0f be       	out	0x3f, r0	; 63
    5e44:	0f 90       	pop	r0
    5e46:	1f 90       	pop	r1
    5e48:	18 95       	reti

00005e4a <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5e4a:	1f 92       	push	r1
    5e4c:	0f 92       	push	r0
    5e4e:	0f b6       	in	r0, 0x3f	; 63
    5e50:	0f 92       	push	r0
    5e52:	11 24       	eor	r1, r1
    5e54:	0f 90       	pop	r0
    5e56:	0f be       	out	0x3f, r0	; 63
    5e58:	0f 90       	pop	r0
    5e5a:	1f 90       	pop	r1
    5e5c:	18 95       	reti

00005e5e <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5e5e:	0e 94 95 2b 	call	0x572a	; 0x572a <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5e62:	0e 94 cb 1b 	call	0x3796	; 0x3796 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5e66:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5e6a:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5e6e:	08 95       	ret

00005e70 <xio_set_baud_usart>:
	USX->port->OUTCLR = outclr;
	USX->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5e70:	cf 93       	push	r28
    5e72:	df 93       	push	r29
	USX->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	27 e1       	ldi	r18, 0x17	; 23
    5e78:	30 e0       	ldi	r19, 0x00	; 0
    5e7a:	82 9f       	mul	r24, r18
    5e7c:	d0 01       	movw	r26, r0
    5e7e:	83 9f       	mul	r24, r19
    5e80:	b0 0d       	add	r27, r0
    5e82:	92 9f       	mul	r25, r18
    5e84:	b0 0d       	add	r27, r0
    5e86:	11 24       	eor	r1, r1
    5e88:	a5 53       	subi	r26, 0x35	; 53
    5e8a:	bc 4d       	sbci	r27, 0xDC	; 220
    5e8c:	51 96       	adiw	r26, 0x11	; 17
    5e8e:	ed 91       	ld	r30, X+
    5e90:	fc 91       	ld	r31, X
    5e92:	52 97       	sbiw	r26, 0x12	; 18
    5e94:	87 81       	ldd	r24, Z+7	; 0x07
    5e96:	90 85       	ldd	r25, Z+8	; 0x08
    5e98:	26 2f       	mov	r18, r22
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	f9 01       	movw	r30, r18
    5e9e:	ed 51       	subi	r30, 0x1D	; 29
    5ea0:	f6 4e       	sbci	r31, 0xE6	; 230
    5ea2:	e4 91       	lpm	r30, Z+
    5ea4:	ec 01       	movw	r28, r24
    5ea6:	ee 83       	std	Y+6, r30	; 0x06
	USX->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5ea8:	51 96       	adiw	r26, 0x11	; 17
    5eaa:	ed 91       	ld	r30, X+
    5eac:	fc 91       	ld	r31, X
    5eae:	52 97       	sbiw	r26, 0x12	; 18
    5eb0:	a7 81       	ldd	r26, Z+7	; 0x07
    5eb2:	b0 85       	ldd	r27, Z+8	; 0x08
    5eb4:	22 51       	subi	r18, 0x12	; 18
    5eb6:	36 4e       	sbci	r19, 0xE6	; 230
    5eb8:	f9 01       	movw	r30, r18
    5eba:	64 91       	lpm	r22, Z+
    5ebc:	17 96       	adiw	r26, 0x07	; 7
    5ebe:	6c 93       	st	X, r22
}
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	08 95       	ret

00005ec6 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    5ec6:	7f 92       	push	r7
    5ec8:	8f 92       	push	r8
    5eca:	9f 92       	push	r9
    5ecc:	af 92       	push	r10
    5ece:	bf 92       	push	r11
    5ed0:	cf 92       	push	r12
    5ed2:	df 92       	push	r13
    5ed4:	ef 92       	push	r14
    5ed6:	ff 92       	push	r15
    5ed8:	0f 93       	push	r16
    5eda:	1f 93       	push	r17
    5edc:	df 93       	push	r29
    5ede:	cf 93       	push	r28
    5ee0:	cd b7       	in	r28, 0x3d	; 61
    5ee2:	de b7       	in	r29, 0x3e	; 62
    5ee4:	d4 2e       	mov	r13, r20
    5ee6:	9e 2c       	mov	r9, r14
    5ee8:	7a 2c       	mov	r7, r10
//	struct xioUSART *u = (struct xioUSART *)ds[dev].x; // example of a cast for FILEs
//	struct xioUSART *u = ds[dev].x;

	// bind USARt extended struct to device struct
	ds[dev].x = &us[offset];
    5eea:	a8 2e       	mov	r10, r24
    5eec:	bb 24       	eor	r11, r11
    5eee:	9f e2       	ldi	r25, 0x2F	; 47
    5ef0:	69 9f       	mul	r22, r25
    5ef2:	f0 01       	movw	r30, r0
    5ef4:	11 24       	eor	r1, r1
    5ef6:	e4 5d       	subi	r30, 0xD4	; 212
    5ef8:	fc 4d       	sbci	r31, 0xDC	; 220
    5efa:	67 e1       	ldi	r22, 0x17	; 23
    5efc:	70 e0       	ldi	r23, 0x00	; 0
    5efe:	a6 9e       	mul	r10, r22
    5f00:	70 01       	movw	r14, r0
    5f02:	a7 9e       	mul	r10, r23
    5f04:	f0 0c       	add	r15, r0
    5f06:	b6 9e       	mul	r11, r22
    5f08:	f0 0c       	add	r15, r0
    5f0a:	11 24       	eor	r1, r1
    5f0c:	6b ec       	ldi	r22, 0xCB	; 203
    5f0e:	73 e2       	ldi	r23, 0x23	; 35
    5f10:	e6 0e       	add	r14, r22
    5f12:	f7 1e       	adc	r15, r23
    5f14:	d7 01       	movw	r26, r14
    5f16:	51 96       	adiw	r26, 0x11	; 17
    5f18:	ed 93       	st	X+, r30
    5f1a:	fc 93       	st	X, r31
    5f1c:	52 97       	sbiw	r26, 0x12	; 18

	// bind USART and PORT structures - do this first
	USX->usart = (struct USART_struct *)usart_addr;
    5f1e:	27 83       	std	Z+7, r18	; 0x07
    5f20:	30 87       	std	Z+8, r19	; 0x08
	USX->port = (struct PORT_struct *)port_addr;
    5f22:	01 87       	std	Z+9, r16	; 0x09
    5f24:	12 87       	std	Z+10, r17	; 0x0a

	// set flags
	xio_setflags(dev, control);			// generic version. does not validate flags
    5f26:	64 2f       	mov	r22, r20
    5f28:	75 2f       	mov	r23, r21
    5f2a:	0e 94 49 28 	call	0x5092	; 0x5092 <xio_setflags>

	// setup internal RX/TX buffers
	USX->rx_buf_head = 1;					// can't use location 0
    5f2e:	d7 01       	movw	r26, r14
    5f30:	51 96       	adiw	r26, 0x11	; 17
    5f32:	ed 91       	ld	r30, X+
    5f34:	fc 91       	ld	r31, X
    5f36:	52 97       	sbiw	r26, 0x12	; 18
    5f38:	81 e0       	ldi	r24, 0x01	; 1
    5f3a:	83 83       	std	Z+3, r24	; 0x03
	USX->rx_buf_tail = 1;
    5f3c:	51 96       	adiw	r26, 0x11	; 17
    5f3e:	ed 91       	ld	r30, X+
    5f40:	fc 91       	ld	r31, X
    5f42:	52 97       	sbiw	r26, 0x12	; 18
    5f44:	82 83       	std	Z+2, r24	; 0x02
	USX->tx_buf_head = 1;
    5f46:	51 96       	adiw	r26, 0x11	; 17
    5f48:	ed 91       	ld	r30, X+
    5f4a:	fc 91       	ld	r31, X
    5f4c:	52 97       	sbiw	r26, 0x12	; 18
    5f4e:	85 83       	std	Z+5, r24	; 0x05
	USX->tx_buf_tail = 1;
    5f50:	51 96       	adiw	r26, 0x11	; 17
    5f52:	ed 91       	ld	r30, X+
    5f54:	fc 91       	ld	r31, X
    5f56:	52 97       	sbiw	r26, 0x12	; 18
    5f58:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    5f5a:	2d 2d       	mov	r18, r13
    5f5c:	2f 70       	andi	r18, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    5f5e:	09 f4       	brne	.+2      	; 0x5f62 <xio_init_usart+0x9c>
    5f60:	25 e0       	ldi	r18, 0x05	; 5
	USX->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	USX->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5f62:	87 e1       	ldi	r24, 0x17	; 23
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	a8 9e       	mul	r10, r24
    5f68:	d0 01       	movw	r26, r0
    5f6a:	a9 9e       	mul	r10, r25
    5f6c:	b0 0d       	add	r27, r0
    5f6e:	b8 9e       	mul	r11, r24
    5f70:	b0 0d       	add	r27, r0
    5f72:	11 24       	eor	r1, r1
    5f74:	a5 53       	subi	r26, 0x35	; 53
    5f76:	bc 4d       	sbci	r27, 0xDC	; 220
    5f78:	51 96       	adiw	r26, 0x11	; 17
    5f7a:	ed 91       	ld	r30, X+
    5f7c:	fc 91       	ld	r31, X
    5f7e:	52 97       	sbiw	r26, 0x12	; 18
    5f80:	87 81       	ldd	r24, Z+7	; 0x07
    5f82:	90 85       	ldd	r25, Z+8	; 0x08
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	f9 01       	movw	r30, r18
    5f88:	ed 51       	subi	r30, 0x1D	; 29
    5f8a:	f6 4e       	sbci	r31, 0xE6	; 230
    5f8c:	44 91       	lpm	r20, Z+
    5f8e:	fc 01       	movw	r30, r24
    5f90:	46 83       	std	Z+6, r20	; 0x06
	USX->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5f92:	51 96       	adiw	r26, 0x11	; 17
    5f94:	ed 91       	ld	r30, X+
    5f96:	fc 91       	ld	r31, X
    5f98:	52 97       	sbiw	r26, 0x12	; 18
    5f9a:	87 81       	ldd	r24, Z+7	; 0x07
    5f9c:	90 85       	ldd	r25, Z+8	; 0x08
    5f9e:	22 51       	subi	r18, 0x12	; 18
    5fa0:	36 4e       	sbci	r19, 0xE6	; 230
    5fa2:	f9 01       	movw	r30, r18
    5fa4:	d4 90       	lpm	r13, Z+
    5fa6:	fc 01       	movw	r30, r24
    5fa8:	d7 82       	std	Z+7, r13	; 0x07
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	USX->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    5faa:	51 96       	adiw	r26, 0x11	; 17
    5fac:	ed 91       	ld	r30, X+
    5fae:	fc 91       	ld	r31, X
    5fb0:	52 97       	sbiw	r26, 0x12	; 18
    5fb2:	07 80       	ldd	r0, Z+7	; 0x07
    5fb4:	f0 85       	ldd	r31, Z+8	; 0x08
    5fb6:	e0 2d       	mov	r30, r0
    5fb8:	88 e1       	ldi	r24, 0x18	; 24
    5fba:	84 83       	std	Z+4, r24	; 0x04
	USX->usart->CTRLA = CTRLA_RXON_TXON;				// enable tx and rx interrupts
    5fbc:	51 96       	adiw	r26, 0x11	; 17
    5fbe:	ed 91       	ld	r30, X+
    5fc0:	fc 91       	ld	r31, X
    5fc2:	52 97       	sbiw	r26, 0x12	; 18
    5fc4:	07 80       	ldd	r0, Z+7	; 0x07
    5fc6:	f0 85       	ldd	r31, Z+8	; 0x08
    5fc8:	e0 2d       	mov	r30, r0
    5fca:	81 e2       	ldi	r24, 0x21	; 33
    5fcc:	83 83       	std	Z+3, r24	; 0x03

	USX->port->DIRCLR = dirclr;
    5fce:	51 96       	adiw	r26, 0x11	; 17
    5fd0:	ed 91       	ld	r30, X+
    5fd2:	fc 91       	ld	r31, X
    5fd4:	52 97       	sbiw	r26, 0x12	; 18
    5fd6:	01 84       	ldd	r0, Z+9	; 0x09
    5fd8:	f2 85       	ldd	r31, Z+10	; 0x0a
    5fda:	e0 2d       	mov	r30, r0
    5fdc:	92 82       	std	Z+2, r9	; 0x02
	USX->port->DIRSET = dirset;
    5fde:	51 96       	adiw	r26, 0x11	; 17
    5fe0:	ed 91       	ld	r30, X+
    5fe2:	fc 91       	ld	r31, X
    5fe4:	52 97       	sbiw	r26, 0x12	; 18
    5fe6:	01 84       	ldd	r0, Z+9	; 0x09
    5fe8:	f2 85       	ldd	r31, Z+10	; 0x0a
    5fea:	e0 2d       	mov	r30, r0
    5fec:	c1 82       	std	Z+1, r12	; 0x01
	USX->port->OUTCLR = outclr;
    5fee:	51 96       	adiw	r26, 0x11	; 17
    5ff0:	ed 91       	ld	r30, X+
    5ff2:	fc 91       	ld	r31, X
    5ff4:	52 97       	sbiw	r26, 0x12	; 18
    5ff6:	01 84       	ldd	r0, Z+9	; 0x09
    5ff8:	f2 85       	ldd	r31, Z+10	; 0x0a
    5ffa:	e0 2d       	mov	r30, r0
    5ffc:	76 82       	std	Z+6, r7	; 0x06
	USX->port->OUTSET = outset;
    5ffe:	51 96       	adiw	r26, 0x11	; 17
    6000:	ed 91       	ld	r30, X+
    6002:	fc 91       	ld	r31, X
    6004:	52 97       	sbiw	r26, 0x12	; 18
    6006:	01 84       	ldd	r0, Z+9	; 0x09
    6008:	f2 85       	ldd	r31, Z+10	; 0x0a
    600a:	e0 2d       	mov	r30, r0
    600c:	85 82       	std	Z+5, r8	; 0x05
}
    600e:	cf 91       	pop	r28
    6010:	df 91       	pop	r29
    6012:	1f 91       	pop	r17
    6014:	0f 91       	pop	r16
    6016:	ff 90       	pop	r15
    6018:	ef 90       	pop	r14
    601a:	df 90       	pop	r13
    601c:	cf 90       	pop	r12
    601e:	bf 90       	pop	r11
    6020:	af 90       	pop	r10
    6022:	9f 90       	pop	r9
    6024:	8f 90       	pop	r8
    6026:	7f 90       	pop	r7
    6028:	08 95       	ret

0000602a <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    602a:	1f 92       	push	r1
    602c:	0f 92       	push	r0
    602e:	0f b6       	in	r0, 0x3f	; 63
    6030:	0f 92       	push	r0
    6032:	0b b6       	in	r0, 0x3b	; 59
    6034:	0f 92       	push	r0
    6036:	11 24       	eor	r1, r1
    6038:	8f 93       	push	r24
    603a:	9f 93       	push	r25
    603c:	af 93       	push	r26
    603e:	bf 93       	push	r27
    6040:	ef 93       	push	r30
    6042:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    6044:	90 91 60 23 	lds	r25, 0x2360
    6048:	80 91 5f 23 	lds	r24, 0x235F
    604c:	98 17       	cp	r25, r24
    604e:	39 f4       	brne	.+14     	; 0x605e <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    6050:	e0 91 62 23 	lds	r30, 0x2362
    6054:	f0 91 63 23 	lds	r31, 0x2363
    6058:	80 e2       	ldi	r24, 0x20	; 32
    605a:	83 83       	std	Z+3, r24	; 0x03
    605c:	1d c0       	rjmp	.+58     	; 0x6098 <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    605e:	80 91 e2 23 	lds	r24, 0x23E2
    6062:	90 91 e3 23 	lds	r25, 0x23E3
    6066:	93 fd       	sbrc	r25, 3
    6068:	17 c0       	rjmp	.+46     	; 0x6098 <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    606a:	80 91 5f 23 	lds	r24, 0x235F
    606e:	81 50       	subi	r24, 0x01	; 1
    6070:	80 93 5f 23 	sts	0x235F, r24
    6074:	80 91 5f 23 	lds	r24, 0x235F
    6078:	88 23       	and	r24, r24
    607a:	19 f4       	brne	.+6      	; 0x6082 <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    607c:	81 e1       	ldi	r24, 0x11	; 17
    607e:	80 93 5f 23 	sts	0x235F, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    6082:	e0 91 62 23 	lds	r30, 0x2362
    6086:	f0 91 63 23 	lds	r31, 0x2363
    608a:	a0 91 5f 23 	lds	r26, 0x235F
    608e:	b0 e0       	ldi	r27, 0x00	; 0
    6090:	a8 58       	subi	r26, 0x88	; 136
    6092:	bc 4d       	sbci	r27, 0xDC	; 220
    6094:	8c 91       	ld	r24, X
    6096:	80 83       	st	Z, r24
	}
}
    6098:	ff 91       	pop	r31
    609a:	ef 91       	pop	r30
    609c:	bf 91       	pop	r27
    609e:	af 91       	pop	r26
    60a0:	9f 91       	pop	r25
    60a2:	8f 91       	pop	r24
    60a4:	0f 90       	pop	r0
    60a6:	0b be       	out	0x3b, r0	; 59
    60a8:	0f 90       	pop	r0
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	0f 90       	pop	r0
    60ae:	1f 90       	pop	r1
    60b0:	18 95       	reti

000060b2 <xio_open_usb>:
 */

struct __file * xio_open_usb()
{
	return(USB.fdev);
}
    60b2:	80 91 f5 23 	lds	r24, 0x23F5
    60b6:	90 91 f6 23 	lds	r25, 0x23F6
    60ba:	08 95       	ret

000060bc <xio_putc_usb>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
    60bc:	48 2f       	mov	r20, r24
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    60be:	20 91 e2 23 	lds	r18, 0x23E2
    60c2:	30 91 e3 23 	lds	r19, 0x23E3
    60c6:	d9 01       	movw	r26, r18
    60c8:	a4 70       	andi	r26, 0x04	; 4
    60ca:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	USBu.tx_buf_head = USBu.next_tx_buf_head;	// accept the next buffer head value
	USBu.tx_buf[USBu.tx_buf_head] = c;			// ...and write char to buffer

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    60cc:	b9 01       	movw	r22, r18
    60ce:	60 72       	andi	r22, 0x20	; 32
    60d0:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
    60d2:	90 91 60 23 	lds	r25, 0x2360
    60d6:	91 50       	subi	r25, 0x01	; 1
    60d8:	c1 f4       	brne	.+48     	; 0x610a <xio_putc_usb+0x4e>
    60da:	91 e1       	ldi	r25, 0x11	; 17
    60dc:	16 c0       	rjmp	.+44     	; 0x610a <xio_putc_usb+0x4e>
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    60de:	10 97       	sbiw	r26, 0x00	; 0
    60e0:	61 f0       	breq	.+24     	; 0x60fa <xio_putc_usb+0x3e>
			sleep_mode();
    60e2:	80 91 48 00 	lds	r24, 0x0048
    60e6:	81 60       	ori	r24, 0x01	; 1
    60e8:	80 93 48 00 	sts	0x0048, r24
    60ec:	88 95       	sleep
    60ee:	80 91 48 00 	lds	r24, 0x0048
    60f2:	8e 7f       	andi	r24, 0xFE	; 254
    60f4:	80 93 48 00 	sts	0x0048, r24
    60f8:	08 c0       	rjmp	.+16     	; 0x610a <xio_putc_usb+0x4e>
    60fa:	90 93 61 23 	sts	0x2361, r25
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	80 93 e5 23 	sts	0x23E5, r24
    6104:	2f ef       	ldi	r18, 0xFF	; 255
    6106:	3f ef       	ldi	r19, 0xFF	; 255
    6108:	54 c0       	rjmp	.+168    	; 0x61b2 <xio_putc_usb+0xf6>
int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
    610a:	80 91 5f 23 	lds	r24, 0x235F
    610e:	98 17       	cp	r25, r24
    6110:	31 f3       	breq	.-52     	; 0x60de <xio_putc_usb+0x22>
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	USBu.tx_buf_head = USBu.next_tx_buf_head;	// accept the next buffer head value
    6112:	90 93 60 23 	sts	0x2360, r25
	USBu.tx_buf[USBu.tx_buf_head] = c;			// ...and write char to buffer
    6116:	e0 91 60 23 	lds	r30, 0x2360
    611a:	f0 e0       	ldi	r31, 0x00	; 0
    611c:	e8 58       	subi	r30, 0x88	; 136
    611e:	fc 4d       	sbci	r31, 0xDC	; 220
    6120:	40 83       	st	Z, r20

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    6122:	61 15       	cp	r22, r1
    6124:	71 05       	cpc	r23, r1
    6126:	21 f0       	breq	.+8      	; 0x6130 <xio_putc_usb+0x74>
    6128:	4a 30       	cpi	r20, 0x0A	; 10
    612a:	11 f4       	brne	.+4      	; 0x6130 <xio_putc_usb+0x74>
    612c:	4d e0       	ldi	r20, 0x0D	; 13
    612e:	d1 cf       	rjmp	.-94     	; 0x60d2 <xio_putc_usb+0x16>
    6130:	90 93 61 23 	sts	0x2361, r25
		return xio_putc_usb('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (USBu.usart->STATUS & 0x20) {
    6134:	a0 91 62 23 	lds	r26, 0x2362
    6138:	b0 91 63 23 	lds	r27, 0x2363
    613c:	11 96       	adiw	r26, 0x01	; 1
    613e:	8c 91       	ld	r24, X
    6140:	11 97       	sbiw	r26, 0x01	; 1
    6142:	85 ff       	sbrs	r24, 5
    6144:	27 c0       	rjmp	.+78     	; 0x6194 <xio_putc_usb+0xd8>
		if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buf might be empty if IRQ got it
    6146:	90 91 60 23 	lds	r25, 0x2360
    614a:	80 91 5f 23 	lds	r24, 0x235F
    614e:	98 17       	cp	r25, r24
    6150:	71 f1       	breq	.+92     	; 0x61ae <xio_putc_usb+0xf2>
			return (0);
		}
		USB.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6152:	38 60       	ori	r19, 0x08	; 8
    6154:	20 93 e2 23 	sts	0x23E2, r18
    6158:	30 93 e3 23 	sts	0x23E3, r19
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap if needed
    615c:	80 91 5f 23 	lds	r24, 0x235F
    6160:	81 50       	subi	r24, 0x01	; 1
    6162:	80 93 5f 23 	sts	0x235F, r24
    6166:	80 91 5f 23 	lds	r24, 0x235F
    616a:	88 23       	and	r24, r24
    616c:	19 f4       	brne	.+6      	; 0x6174 <xio_putc_usb+0xb8>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one error (OBOE)
    616e:	81 e1       	ldi	r24, 0x11	; 17
    6170:	80 93 5f 23 	sts	0x235F, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail];// write char to TX DATA reg
    6174:	e0 91 5f 23 	lds	r30, 0x235F
    6178:	f0 e0       	ldi	r31, 0x00	; 0
    617a:	e8 58       	subi	r30, 0x88	; 136
    617c:	fc 4d       	sbci	r31, 0xDC	; 220
    617e:	80 81       	ld	r24, Z
    6180:	8c 93       	st	X, r24
		USB.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6182:	80 91 e2 23 	lds	r24, 0x23E2
    6186:	90 91 e3 23 	lds	r25, 0x23E3
    618a:	97 7f       	andi	r25, 0xF7	; 247
    618c:	80 93 e2 23 	sts	0x23E2, r24
    6190:	90 93 e3 23 	sts	0x23E3, r25
	}
	// enable interrupts regardless
	USBu.usart->CTRLA = CTRLA_RXON_TXON;		// doesn't work if you just |= it
    6194:	e0 91 62 23 	lds	r30, 0x2362
    6198:	f0 91 63 23 	lds	r31, 0x2363
    619c:	81 e2       	ldi	r24, 0x21	; 33
    619e:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    61a0:	80 91 a2 00 	lds	r24, 0x00A2
    61a4:	81 60       	ori	r24, 0x01	; 1
    61a6:	e0 ea       	ldi	r30, 0xA0	; 160
    61a8:	f0 e0       	ldi	r31, 0x00	; 0
    61aa:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    61ac:	78 94       	sei
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    61b2:	c9 01       	movw	r24, r18
    61b4:	08 95       	ret

000061b6 <xio_getc_usb>:
 */

int xio_getc_usb(FILE *stream)
{
	while (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(USB.flags)) {
    61b6:	20 91 e2 23 	lds	r18, 0x23E2
    61ba:	30 91 e3 23 	lds	r19, 0x23E3
    61be:	24 70       	andi	r18, 0x04	; 4
    61c0:	30 70       	andi	r19, 0x00	; 0
    61c2:	15 c0       	rjmp	.+42     	; 0x61ee <xio_getc_usb+0x38>
    61c4:	21 15       	cp	r18, r1
    61c6:	31 05       	cpc	r19, r1
    61c8:	61 f0       	breq	.+24     	; 0x61e2 <xio_getc_usb+0x2c>
			sleep_mode();
    61ca:	80 91 48 00 	lds	r24, 0x0048
    61ce:	81 60       	ori	r24, 0x01	; 1
    61d0:	80 93 48 00 	sts	0x0048, r24
    61d4:	88 95       	sleep
    61d6:	80 91 48 00 	lds	r24, 0x0048
    61da:	8e 7f       	andi	r24, 0xFE	; 254
    61dc:	80 93 48 00 	sts	0x0048, r24
    61e0:	06 c0       	rjmp	.+12     	; 0x61ee <xio_getc_usb+0x38>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	80 93 e5 23 	sts	0x23E5, r24
    61e8:	2f ef       	ldi	r18, 0xFF	; 255
    61ea:	3f ef       	ldi	r19, 0xFF	; 255
    61ec:	26 c0       	rjmp	.+76     	; 0x623a <xio_getc_usb+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usb(FILE *stream)
{
	while (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
    61ee:	90 91 5e 23 	lds	r25, 0x235E
    61f2:	80 91 5d 23 	lds	r24, 0x235D
    61f6:	98 17       	cp	r25, r24
    61f8:	29 f3       	breq	.-54     	; 0x61c4 <xio_getc_usb+0xe>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(USBu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    61fa:	80 91 5d 23 	lds	r24, 0x235D
    61fe:	81 50       	subi	r24, 0x01	; 1
    6200:	80 93 5d 23 	sts	0x235D, r24
    6204:	80 91 5d 23 	lds	r24, 0x235D
    6208:	88 23       	and	r24, r24
    620a:	19 f4       	brne	.+6      	; 0x6212 <xio_getc_usb+0x5c>
		USBu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    620c:	81 e1       	ldi	r24, 0x11	; 17
    620e:	80 93 5d 23 	sts	0x235D, r24
	}
	USB.c = (USBu.rx_buf[USBu.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6212:	e0 91 5d 23 	lds	r30, 0x235D
    6216:	f0 e0       	ldi	r31, 0x00	; 0
    6218:	e4 5d       	subi	r30, 0xD4	; 212
    621a:	fc 4d       	sbci	r31, 0xDC	; 220
    621c:	82 ad       	ldd	r24, Z+58	; 0x3a
    621e:	8f 77       	andi	r24, 0x7F	; 127
    6220:	80 93 e6 23 	sts	0x23E6, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[USB.c])))());
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	88 0f       	add	r24, r24
    6228:	99 1f       	adc	r25, r25
    622a:	87 50       	subi	r24, 0x07	; 7
    622c:	95 4e       	sbci	r25, 0xE5	; 229
    622e:	fc 01       	movw	r30, r24
    6230:	25 91       	lpm	r18, Z+
    6232:	34 91       	lpm	r19, Z+
    6234:	f9 01       	movw	r30, r18
    6236:	19 95       	eicall
    6238:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    623a:	c9 01       	movw	r24, r18
    623c:	08 95       	ret

0000623e <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    623e:	80 91 e2 23 	lds	r24, 0x23E2
    6242:	84 ff       	sbrs	r24, 4
    6244:	08 c0       	rjmp	.+16     	; 0x6256 <_getc_char+0x18>
    6246:	60 91 0c 25 	lds	r22, 0x250C
    624a:	70 91 0d 25 	lds	r23, 0x250D
    624e:	80 91 e6 23 	lds	r24, 0x23E6
    6252:	0e 94 5e 30 	call	0x60bc	; 0x60bc <xio_putc_usb>
	return(USB.c);
}
    6256:	80 91 e6 23 	lds	r24, 0x23E6
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	08 95       	ret

0000625e <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(USB.flags)) USB.c = '\n';
    625e:	80 91 e2 23 	lds	r24, 0x23E2
    6262:	86 ff       	sbrs	r24, 6
    6264:	03 c0       	rjmp	.+6      	; 0x626c <_getc_NEWLINE+0xe>
    6266:	8a e0       	ldi	r24, 0x0A	; 10
    6268:	80 93 e6 23 	sts	0x23E6, r24
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    626c:	80 91 e2 23 	lds	r24, 0x23E2
    6270:	84 ff       	sbrs	r24, 4
    6272:	08 c0       	rjmp	.+16     	; 0x6284 <_getc_NEWLINE+0x26>
    6274:	60 91 0c 25 	lds	r22, 0x250C
    6278:	70 91 0d 25 	lds	r23, 0x250D
    627c:	80 91 e6 23 	lds	r24, 0x23E6
    6280:	0e 94 5e 30 	call	0x60bc	; 0x60bc <xio_putc_usb>
	return(USB.c);
}
    6284:	80 91 e6 23 	lds	r24, 0x23E6
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	08 95       	ret

0000628c <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(USB.flags)) {
    628c:	80 91 e2 23 	lds	r24, 0x23E2
    6290:	87 ff       	sbrs	r24, 7
    6292:	03 c0       	rjmp	.+6      	; 0x629a <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6294:	0e 94 2f 31 	call	0x625e	; 0x625e <_getc_NEWLINE>
    6298:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    629a:	0e 94 1f 31 	call	0x623e	; 0x623e <_getc_char>
}
    629e:	08 95       	ret

000062a0 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	USB.sig = XIO_SIG_DELETE;
    62a0:	89 e0       	ldi	r24, 0x09	; 9
    62a2:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    62a6:	8f ef       	ldi	r24, 0xFF	; 255
    62a8:	9f ef       	ldi	r25, 0xFF	; 255
    62aa:	08 95       	ret

000062ac <_xio_usb_readchar>:
	}
}

int _xio_usb_readchar(char *buf, uint8_t len)
{
	if (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
    62ac:	90 91 5e 23 	lds	r25, 0x235E
    62b0:	80 91 5d 23 	lds	r24, 0x235D
    62b4:	98 17       	cp	r25, r24
    62b6:	19 f4       	brne	.+6      	; 0x62be <_xio_usb_readchar+0x12>
    62b8:	28 e0       	ldi	r18, 0x08	; 8
    62ba:	30 e0       	ldi	r19, 0x00	; 0
    62bc:	20 c0       	rjmp	.+64     	; 0x62fe <_xio_usb_readchar+0x52>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(USBu.rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    62be:	80 91 5d 23 	lds	r24, 0x235D
    62c2:	81 50       	subi	r24, 0x01	; 1
    62c4:	80 93 5d 23 	sts	0x235D, r24
    62c8:	80 91 5d 23 	lds	r24, 0x235D
    62cc:	88 23       	and	r24, r24
    62ce:	19 f4       	brne	.+6      	; 0x62d6 <_xio_usb_readchar+0x2a>
		USBu.rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    62d0:	81 e1       	ldi	r24, 0x11	; 17
    62d2:	80 93 5d 23 	sts	0x235D, r24
	}
	USB.c = (USBu.rx_buf[USBu.rx_buf_tail] & 0x007F); // get char from RX Q & mask MSB
    62d6:	e0 91 5d 23 	lds	r30, 0x235D
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	e4 5d       	subi	r30, 0xD4	; 212
    62de:	fc 4d       	sbci	r31, 0xDC	; 220
    62e0:	82 ad       	ldd	r24, Z+58	; 0x3a
    62e2:	8f 77       	andi	r24, 0x7F	; 127
    62e4:	80 93 e6 23 	sts	0x23E6, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[USB.c])))()); // dispatch char
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	88 0f       	add	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	87 50       	subi	r24, 0x07	; 7
    62f0:	96 4e       	sbci	r25, 0xE6	; 230
    62f2:	fc 01       	movw	r30, r24
    62f4:	25 91       	lpm	r18, Z+
    62f6:	34 91       	lpm	r19, Z+
    62f8:	f9 01       	movw	r30, r18
    62fa:	19 95       	eicall
    62fc:	9c 01       	movw	r18, r24
}
    62fe:	c9 01       	movw	r24, r18
    6300:	08 95       	ret

00006302 <xio_readln_usb>:

int xio_readln_usb(char *buf, uint8_t size)
{
//	uint8_t status = 0;

	if (!IN_LINE(USB.flags)) {					// first time thru initializations
    6302:	20 91 e2 23 	lds	r18, 0x23E2
    6306:	30 91 e3 23 	lds	r19, 0x23E3
    630a:	36 fd       	sbrc	r19, 6
    630c:	11 c0       	rjmp	.+34     	; 0x6330 <xio_readln_usb+0x2e>
		USB.len = 0;							// zero buffer
    630e:	10 92 e7 23 	sts	0x23E7, r1
		USB.status = 0;
    6312:	10 92 e4 23 	sts	0x23E4, r1
		USB.size = size;
    6316:	60 93 e8 23 	sts	0x23E8, r22
		USB.buf = buf;
    631a:	80 93 f7 23 	sts	0x23F7, r24
    631e:	90 93 f8 23 	sts	0x23F8, r25
		USB.sig = XIO_SIG_OK;					// reset signal register
    6322:	10 92 e5 23 	sts	0x23E5, r1
		USB.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6326:	30 64       	ori	r19, 0x40	; 64
    6328:	20 93 e2 23 	sts	0x23E2, r18
    632c:	30 93 e3 23 	sts	0x23E3, r19
	}
	while (TRUE) { 
		switch (USB.status = _xio_usb_readchar(USB.buf, USB.size)) {
    6330:	80 91 f7 23 	lds	r24, 0x23F7
    6334:	90 91 f8 23 	lds	r25, 0x23F8
    6338:	60 91 e8 23 	lds	r22, 0x23E8
    633c:	0e 94 56 31 	call	0x62ac	; 0x62ac <_xio_usb_readchar>
    6340:	80 93 e4 23 	sts	0x23E4, r24
    6344:	88 30       	cpi	r24, 0x08	; 8
    6346:	41 f0       	breq	.+16     	; 0x6358 <xio_readln_usb+0x56>
    6348:	8a 30       	cpi	r24, 0x0A	; 10
    634a:	19 f0       	breq	.+6      	; 0x6352 <xio_readln_usb+0x50>
    634c:	84 30       	cpi	r24, 0x04	; 4
    634e:	81 f7       	brne	.-32     	; 0x6330 <xio_readln_usb+0x2e>
    6350:	06 c0       	rjmp	.+12     	; 0x635e <xio_readln_usb+0x5c>
    6352:	2a e0       	ldi	r18, 0x0A	; 10
    6354:	30 e0       	ldi	r19, 0x00	; 0
    6356:	05 c0       	rjmp	.+10     	; 0x6362 <xio_readln_usb+0x60>
    6358:	22 e0       	ldi	r18, 0x02	; 2
    635a:	30 e0       	ldi	r19, 0x00	; 0
    635c:	02 c0       	rjmp	.+4      	; 0x6362 <xio_readln_usb+0x60>
    635e:	20 e0       	ldi	r18, 0x00	; 0
    6360:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_BUFFER_FULL_NON_FATAL): return (USB.status); break;	// overrun error
			case (XIO_EOL): return (XIO_OK); break;				// got completed line
			case (XIO_EAGAIN): break;							// loop
		}
	}
}
    6362:	c9 01       	movw	r24, r18
    6364:	08 95       	ret

00006366 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (USB.len > USB.size) {						// trap buffer overflow
    6366:	90 91 e7 23 	lds	r25, 0x23E7
    636a:	20 91 e8 23 	lds	r18, 0x23E8
    636e:	e0 91 f7 23 	lds	r30, 0x23F7
    6372:	f0 91 f8 23 	lds	r31, 0x23F8
    6376:	29 17       	cp	r18, r25
    6378:	48 f4       	brcc	.+18     	; 0x638c <_readln_char+0x26>
		USB.sig = XIO_SIG_EOL;
    637a:	82 e0       	ldi	r24, 0x02	; 2
    637c:	80 93 e5 23 	sts	0x23E5, r24
		USB.buf[USB.size] = NUL;					// size is zero based
    6380:	e2 0f       	add	r30, r18
    6382:	f1 1d       	adc	r31, r1
    6384:	10 82       	st	Z, r1
    6386:	2a e0       	ldi	r18, 0x0A	; 10
    6388:	30 e0       	ldi	r19, 0x00	; 0
    638a:	16 c0       	rjmp	.+44     	; 0x63b8 <_readln_char+0x52>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	USB.buf[USB.len++] = USB.c;
    638c:	e9 0f       	add	r30, r25
    638e:	f1 1d       	adc	r31, r1
    6390:	80 91 e6 23 	lds	r24, 0x23E6
    6394:	80 83       	st	Z, r24
    6396:	9f 5f       	subi	r25, 0xFF	; 255
    6398:	90 93 e7 23 	sts	0x23E7, r25
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);// conditional echo
    639c:	80 91 e2 23 	lds	r24, 0x23E2
    63a0:	84 ff       	sbrs	r24, 4
    63a2:	08 c0       	rjmp	.+16     	; 0x63b4 <_readln_char+0x4e>
    63a4:	60 91 0c 25 	lds	r22, 0x250C
    63a8:	70 91 0d 25 	lds	r23, 0x250D
    63ac:	80 91 e6 23 	lds	r24, 0x23E6
    63b0:	0e 94 5e 30 	call	0x60bc	; 0x60bc <xio_putc_usb>
    63b4:	22 e0       	ldi	r18, 0x02	; 2
    63b6:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);							// line is still in process
}
    63b8:	c9 01       	movw	r24, r18
    63ba:	08 95       	ret

000063bc <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	USB.sig = XIO_SIG_EOL;
    63bc:	82 e0       	ldi	r24, 0x02	; 2
    63be:	80 93 e5 23 	sts	0x23E5, r24
	USB.buf[USB.len] = NUL;
    63c2:	80 91 e7 23 	lds	r24, 0x23E7
    63c6:	e0 91 f7 23 	lds	r30, 0x23F7
    63ca:	f0 91 f8 23 	lds	r31, 0x23F8
    63ce:	e8 0f       	add	r30, r24
    63d0:	f1 1d       	adc	r31, r1
    63d2:	10 82       	st	Z, r1
	USB.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    63d4:	20 91 e2 23 	lds	r18, 0x23E2
    63d8:	30 91 e3 23 	lds	r19, 0x23E3
    63dc:	c9 01       	movw	r24, r18
    63de:	9f 7b       	andi	r25, 0xBF	; 191
    63e0:	80 93 e2 23 	sts	0x23E2, r24
    63e4:	90 93 e3 23 	sts	0x23E3, r25
	if (ECHO(USB.flags)) xio_putc_usb('\n',stdout);// echo a newline
    63e8:	24 ff       	sbrs	r18, 4
    63ea:	07 c0       	rjmp	.+14     	; 0x63fa <_readln_NEWLINE+0x3e>
    63ec:	60 91 0c 25 	lds	r22, 0x250C
    63f0:	70 91 0d 25 	lds	r23, 0x250D
    63f4:	8a e0       	ldi	r24, 0x0A	; 10
    63f6:	0e 94 5e 30 	call	0x60bc	; 0x60bc <xio_putc_usb>
	return (XIO_EOL);							// return for end-of-line
}
    63fa:	84 e0       	ldi	r24, 0x04	; 4
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	08 95       	ret

00006400 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(USB.flags)) {
    6400:	80 91 e2 23 	lds	r24, 0x23E2
    6404:	87 ff       	sbrs	r24, 7
    6406:	03 c0       	rjmp	.+6      	; 0x640e <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6408:	0e 94 de 31 	call	0x63bc	; 0x63bc <_readln_NEWLINE>
    640c:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    640e:	0e 94 b3 31 	call	0x6366	; 0x6366 <_readln_char>
	}
}
    6412:	08 95       	ret

00006414 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--USB.len >= 0) {
    6414:	80 91 e7 23 	lds	r24, 0x23E7
    6418:	81 50       	subi	r24, 0x01	; 1
    641a:	80 93 e7 23 	sts	0x23E7, r24
		if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    641e:	80 91 e2 23 	lds	r24, 0x23E2
    6422:	84 ff       	sbrs	r24, 4
    6424:	08 c0       	rjmp	.+16     	; 0x6436 <_readln_DELETE+0x22>
    6426:	60 91 0c 25 	lds	r22, 0x250C
    642a:	70 91 0d 25 	lds	r23, 0x250D
    642e:	80 91 e6 23 	lds	r24, 0x23E6
    6432:	0e 94 5e 30 	call	0x60bc	; 0x60bc <xio_putc_usb>
	} else {
		USB.len = 0;
	}
	return (XIO_EAGAIN);							// line is still in process
}
    6436:	82 e0       	ldi	r24, 0x02	; 2
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	08 95       	ret

0000643c <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	USB.sig = XIO_SIG_KILL;
    643c:	84 e0       	ldi	r24, 0x04	; 4
    643e:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    6442:	8f ef       	ldi	r24, 0xFF	; 255
    6444:	9f ef       	ldi	r25, 0xFF	; 255
    6446:	08 95       	ret

00006448 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	USB.sig = XIO_SIG_PAUSE;
    6448:	86 e0       	ldi	r24, 0x06	; 6
    644a:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    644e:	8f ef       	ldi	r24, 0xFF	; 255
    6450:	9f ef       	ldi	r25, 0xFF	; 255
    6452:	08 95       	ret

00006454 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	USB.sig = XIO_SIG_RESUME;
    6454:	87 e0       	ldi	r24, 0x07	; 7
    6456:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    645a:	8f ef       	ldi	r24, 0xFF	; 255
    645c:	9f ef       	ldi	r25, 0xFF	; 255
    645e:	08 95       	ret

00006460 <xio_setflags_usb>:
/*
 *	xio_setflags_usb() - check and set control flags for device
 */

int xio_setflags_usb(const uint16_t control)
{
    6460:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_USB, control);
    6462:	81 e0       	ldi	r24, 0x01	; 1
    6464:	0e 94 49 28 	call	0x5092	; 0x5092 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6468:	80 e0       	ldi	r24, 0x00	; 0
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	08 95       	ret

0000646e <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    646e:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6470:	83 30       	cpi	r24, 0x03	; 3
    6472:	31 f4       	brne	.+12     	; 0x6480 <xio_usb_queue_RX_char+0x12>
		USB.sig = XIO_SIG_KILL;					// set signal value
    6474:	84 e0       	ldi	r24, 0x04	; 4
    6476:	80 93 e5 23 	sts	0x23E5, r24
		signal_etx();							// call app-specific signal handler
    647a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <signal_etx>
    647e:	08 95       	ret
		return;
	}

	// normal path
	if ((--USBu.rx_buf_head) == 0) { 			// wrap condition
    6480:	80 91 5e 23 	lds	r24, 0x235E
    6484:	81 50       	subi	r24, 0x01	; 1
    6486:	80 93 5e 23 	sts	0x235E, r24
    648a:	80 91 5e 23 	lds	r24, 0x235E
    648e:	88 23       	and	r24, r24
    6490:	19 f4       	brne	.+6      	; 0x6498 <xio_usb_queue_RX_char+0x2a>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6492:	81 e1       	ldi	r24, 0x11	; 17
    6494:	80 93 5e 23 	sts	0x235E, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6498:	90 91 5e 23 	lds	r25, 0x235E
    649c:	80 91 5d 23 	lds	r24, 0x235D
    64a0:	98 17       	cp	r25, r24
    64a2:	39 f0       	breq	.+14     	; 0x64b2 <xio_usb_queue_RX_char+0x44>
		USBu.rx_buf[USBu.rx_buf_head] = c;		// FAKE INPUT DATA
    64a4:	e0 91 5e 23 	lds	r30, 0x235E
    64a8:	f0 e0       	ldi	r31, 0x00	; 0
    64aa:	e4 5d       	subi	r30, 0xD4	; 212
    64ac:	fc 4d       	sbci	r31, 0xDC	; 220
    64ae:	22 af       	std	Z+58, r18	; 0x3a
    64b0:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    64b2:	80 91 5e 23 	lds	r24, 0x235E
    64b6:	8f 5f       	subi	r24, 0xFF	; 255
    64b8:	80 93 5e 23 	sts	0x235E, r24
    64bc:	80 91 5e 23 	lds	r24, 0x235E
    64c0:	82 31       	cpi	r24, 0x12	; 18
    64c2:	18 f0       	brcs	.+6      	; 0x64ca <xio_usb_queue_RX_char+0x5c>
		USBu.rx_buf_head = 1;
    64c4:	81 e0       	ldi	r24, 0x01	; 1
    64c6:	80 93 5e 23 	sts	0x235E, r24
    64ca:	08 95       	ret

000064cc <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    64cc:	1f 93       	push	r17
    64ce:	cf 93       	push	r28
    64d0:	df 93       	push	r29
    64d2:	ec 01       	movw	r28, r24
    64d4:	10 e0       	ldi	r17, 0x00	; 0
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    64d8:	0e 94 37 32 	call	0x646e	; 0x646e <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    64dc:	fe 01       	movw	r30, r28
    64de:	e1 0f       	add	r30, r17
    64e0:	f1 1d       	adc	r31, r1
    64e2:	80 81       	ld	r24, Z
    64e4:	1f 5f       	subi	r17, 0xFF	; 255
    64e6:	88 23       	and	r24, r24
    64e8:	b9 f7       	brne	.-18     	; 0x64d8 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    64ea:	df 91       	pop	r29
    64ec:	cf 91       	pop	r28
    64ee:	1f 91       	pop	r17
    64f0:	08 95       	ret

000064f2 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    64f2:	1f 92       	push	r1
    64f4:	0f 92       	push	r0
    64f6:	0f b6       	in	r0, 0x3f	; 63
    64f8:	0f 92       	push	r0
    64fa:	0b b6       	in	r0, 0x3b	; 59
    64fc:	0f 92       	push	r0
    64fe:	11 24       	eor	r1, r1
    6500:	2f 93       	push	r18
    6502:	3f 93       	push	r19
    6504:	4f 93       	push	r20
    6506:	5f 93       	push	r21
    6508:	6f 93       	push	r22
    650a:	7f 93       	push	r23
    650c:	8f 93       	push	r24
    650e:	9f 93       	push	r25
    6510:	af 93       	push	r26
    6512:	bf 93       	push	r27
    6514:	ef 93       	push	r30
    6516:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    6518:	e0 91 62 23 	lds	r30, 0x2362
    651c:	f0 91 63 23 	lds	r31, 0x2363
    6520:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    6522:	23 30       	cpi	r18, 0x03	; 3
    6524:	31 f4       	brne	.+12     	; 0x6532 <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    6526:	84 e0       	ldi	r24, 0x04	; 4
    6528:	80 93 e5 23 	sts	0x23E5, r24
		signal_etx();							// call app-specific signal handler
    652c:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <signal_etx>
    6530:	25 c0       	rjmp	.+74     	; 0x657c <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6532:	80 91 5e 23 	lds	r24, 0x235E
    6536:	81 50       	subi	r24, 0x01	; 1
    6538:	80 93 5e 23 	sts	0x235E, r24
    653c:	80 91 5e 23 	lds	r24, 0x235E
    6540:	88 23       	and	r24, r24
    6542:	19 f4       	brne	.+6      	; 0x654a <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6544:	81 e1       	ldi	r24, 0x11	; 17
    6546:	80 93 5e 23 	sts	0x235E, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    654a:	90 91 5e 23 	lds	r25, 0x235E
    654e:	80 91 5d 23 	lds	r24, 0x235D
    6552:	98 17       	cp	r25, r24
    6554:	39 f0       	breq	.+14     	; 0x6564 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    6556:	e0 91 5e 23 	lds	r30, 0x235E
    655a:	f0 e0       	ldi	r31, 0x00	; 0
    655c:	e4 5d       	subi	r30, 0xD4	; 212
    655e:	fc 4d       	sbci	r31, 0xDC	; 220
    6560:	22 af       	std	Z+58, r18	; 0x3a
    6562:	0c c0       	rjmp	.+24     	; 0x657c <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6564:	80 91 5e 23 	lds	r24, 0x235E
    6568:	8f 5f       	subi	r24, 0xFF	; 255
    656a:	80 93 5e 23 	sts	0x235E, r24
    656e:	80 91 5e 23 	lds	r24, 0x235E
    6572:	82 31       	cpi	r24, 0x12	; 18
    6574:	18 f0       	brcs	.+6      	; 0x657c <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	80 93 5e 23 	sts	0x235E, r24
	}
	// activate flow control here or before it gets to this level
}
    657c:	ff 91       	pop	r31
    657e:	ef 91       	pop	r30
    6580:	bf 91       	pop	r27
    6582:	af 91       	pop	r26
    6584:	9f 91       	pop	r25
    6586:	8f 91       	pop	r24
    6588:	7f 91       	pop	r23
    658a:	6f 91       	pop	r22
    658c:	5f 91       	pop	r21
    658e:	4f 91       	pop	r20
    6590:	3f 91       	pop	r19
    6592:	2f 91       	pop	r18
    6594:	0f 90       	pop	r0
    6596:	0b be       	out	0x3b, r0	; 59
    6598:	0f 90       	pop	r0
    659a:	0f be       	out	0x3f, r0	; 63
    659c:	0f 90       	pop	r0
    659e:	1f 90       	pop	r1
    65a0:	18 95       	reti

000065a2 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    65a2:	1f 92       	push	r1
    65a4:	0f 92       	push	r0
    65a6:	0f b6       	in	r0, 0x3f	; 63
    65a8:	0f 92       	push	r0
    65aa:	0b b6       	in	r0, 0x3b	; 59
    65ac:	0f 92       	push	r0
    65ae:	11 24       	eor	r1, r1
    65b0:	8f 93       	push	r24
    65b2:	9f 93       	push	r25
    65b4:	af 93       	push	r26
    65b6:	bf 93       	push	r27
    65b8:	ef 93       	push	r30
    65ba:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints
    65bc:	90 91 31 23 	lds	r25, 0x2331
    65c0:	80 91 30 23 	lds	r24, 0x2330
    65c4:	98 17       	cp	r25, r24
    65c6:	39 f4       	brne	.+14     	; 0x65d6 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    65c8:	e0 91 33 23 	lds	r30, 0x2333
    65cc:	f0 91 34 23 	lds	r31, 0x2334
    65d0:	80 e2       	ldi	r24, 0x20	; 32
    65d2:	83 83       	std	Z+3, r24	; 0x03
    65d4:	1e c0       	rjmp	.+60     	; 0x6612 <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    65d6:	80 91 cb 23 	lds	r24, 0x23CB
    65da:	90 91 cc 23 	lds	r25, 0x23CC
    65de:	93 fd       	sbrc	r25, 3
    65e0:	18 c0       	rjmp	.+48     	; 0x6612 <__vector_29+0x70>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    65e2:	80 91 30 23 	lds	r24, 0x2330
    65e6:	81 50       	subi	r24, 0x01	; 1
    65e8:	80 93 30 23 	sts	0x2330, r24
    65ec:	80 91 30 23 	lds	r24, 0x2330
    65f0:	88 23       	and	r24, r24
    65f2:	19 f4       	brne	.+6      	; 0x65fa <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    65f4:	81 e1       	ldi	r24, 0x11	; 17
    65f6:	80 93 30 23 	sts	0x2330, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    65fa:	e0 91 33 23 	lds	r30, 0x2333
    65fe:	f0 91 34 23 	lds	r31, 0x2334
    6602:	a0 91 30 23 	lds	r26, 0x2330
    6606:	b0 e0       	ldi	r27, 0x00	; 0
    6608:	a4 5d       	subi	r26, 0xD4	; 212
    660a:	bc 4d       	sbci	r27, 0xDC	; 220
    660c:	5d 96       	adiw	r26, 0x1d	; 29
    660e:	8c 91       	ld	r24, X
    6610:	80 83       	st	Z, r24
	}
}
    6612:	ff 91       	pop	r31
    6614:	ef 91       	pop	r30
    6616:	bf 91       	pop	r27
    6618:	af 91       	pop	r26
    661a:	9f 91       	pop	r25
    661c:	8f 91       	pop	r24
    661e:	0f 90       	pop	r0
    6620:	0b be       	out	0x3b, r0	; 59
    6622:	0f 90       	pop	r0
    6624:	0f be       	out	0x3f, r0	; 63
    6626:	0f 90       	pop	r0
    6628:	1f 90       	pop	r1
    662a:	18 95       	reti

0000662c <xio_open_rs485>:
 */

struct __file * xio_open_rs485()
{
	return(RS.fdev);
}
    662c:	80 91 de 23 	lds	r24, 0x23DE
    6630:	90 91 df 23 	lds	r25, 0x23DF
    6634:	08 95       	ret

00006636 <xio_putc_rs485>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
    6636:	48 2f       	mov	r20, r24
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    6638:	20 91 cb 23 	lds	r18, 0x23CB
    663c:	30 91 cc 23 	lds	r19, 0x23CC
    6640:	d9 01       	movw	r26, r18
    6642:	a4 70       	andi	r26, 0x04	; 4
    6644:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	RSu.tx_buf_head = RSu.next_tx_buf_head;			// accept next buffer head value
	RSu.tx_buf[RSu.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    6646:	b9 01       	movw	r22, r18
    6648:	60 72       	andi	r22, 0x20	; 32
    664a:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
    664c:	90 91 31 23 	lds	r25, 0x2331
    6650:	91 50       	subi	r25, 0x01	; 1
    6652:	c1 f4       	brne	.+48     	; 0x6684 <xio_putc_rs485+0x4e>
    6654:	91 e1       	ldi	r25, 0x11	; 17
    6656:	16 c0       	rjmp	.+44     	; 0x6684 <xio_putc_rs485+0x4e>
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    6658:	10 97       	sbiw	r26, 0x00	; 0
    665a:	61 f0       	breq	.+24     	; 0x6674 <xio_putc_rs485+0x3e>
			sleep_mode();
    665c:	80 91 48 00 	lds	r24, 0x0048
    6660:	81 60       	ori	r24, 0x01	; 1
    6662:	80 93 48 00 	sts	0x0048, r24
    6666:	88 95       	sleep
    6668:	80 91 48 00 	lds	r24, 0x0048
    666c:	8e 7f       	andi	r24, 0xFE	; 254
    666e:	80 93 48 00 	sts	0x0048, r24
    6672:	08 c0       	rjmp	.+16     	; 0x6684 <xio_putc_rs485+0x4e>
    6674:	90 93 32 23 	sts	0x2332, r25
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	80 93 ce 23 	sts	0x23CE, r24
    667e:	2f ef       	ldi	r18, 0xFF	; 255
    6680:	3f ef       	ldi	r19, 0xFF	; 255
    6682:	54 c0       	rjmp	.+168    	; 0x672c <xio_putc_rs485+0xf6>
int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
    6684:	80 91 30 23 	lds	r24, 0x2330
    6688:	98 17       	cp	r25, r24
    668a:	31 f3       	breq	.-52     	; 0x6658 <xio_putc_rs485+0x22>
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	RSu.tx_buf_head = RSu.next_tx_buf_head;			// accept next buffer head value
    668c:	90 93 31 23 	sts	0x2331, r25
	RSu.tx_buf[RSu.tx_buf_head] = c;				// ...and write char to buffer
    6690:	e0 91 31 23 	lds	r30, 0x2331
    6694:	f0 e0       	ldi	r31, 0x00	; 0
    6696:	e4 5d       	subi	r30, 0xD4	; 212
    6698:	fc 4d       	sbci	r31, 0xDC	; 220
    669a:	45 8f       	std	Z+29, r20	; 0x1d

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    669c:	61 15       	cp	r22, r1
    669e:	71 05       	cpc	r23, r1
    66a0:	21 f0       	breq	.+8      	; 0x66aa <xio_putc_rs485+0x74>
    66a2:	4a 30       	cpi	r20, 0x0A	; 10
    66a4:	11 f4       	brne	.+4      	; 0x66aa <xio_putc_rs485+0x74>
    66a6:	4d e0       	ldi	r20, 0x0D	; 13
    66a8:	d1 cf       	rjmp	.-94     	; 0x664c <xio_putc_rs485+0x16>
    66aa:	90 93 32 23 	sts	0x2332, r25
		return xio_putc_rs485('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (RSu.usart->STATUS & 0x20) {
    66ae:	a0 91 33 23 	lds	r26, 0x2333
    66b2:	b0 91 34 23 	lds	r27, 0x2334
    66b6:	11 96       	adiw	r26, 0x01	; 1
    66b8:	8c 91       	ld	r24, X
    66ba:	11 97       	sbiw	r26, 0x01	; 1
    66bc:	85 ff       	sbrs	r24, 5
    66be:	27 c0       	rjmp	.+78     	; 0x670e <xio_putc_rs485+0xd8>
		if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buf may be empty if IRQ got it
    66c0:	90 91 31 23 	lds	r25, 0x2331
    66c4:	80 91 30 23 	lds	r24, 0x2330
    66c8:	98 17       	cp	r25, r24
    66ca:	71 f1       	breq	.+92     	; 0x6728 <xio_putc_rs485+0xf2>
			return (0);
		}
		RS.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    66cc:	38 60       	ori	r19, 0x08	; 8
    66ce:	20 93 cb 23 	sts	0x23CB, r18
    66d2:	30 93 cc 23 	sts	0x23CC, r19
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    66d6:	80 91 30 23 	lds	r24, 0x2330
    66da:	81 50       	subi	r24, 0x01	; 1
    66dc:	80 93 30 23 	sts	0x2330, r24
    66e0:	80 91 30 23 	lds	r24, 0x2330
    66e4:	88 23       	and	r24, r24
    66e6:	19 f4       	brne	.+6      	; 0x66ee <xio_putc_rs485+0xb8>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    66e8:	81 e1       	ldi	r24, 0x11	; 17
    66ea:	80 93 30 23 	sts	0x2330, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];// write char to TX DATA reg
    66ee:	e0 91 30 23 	lds	r30, 0x2330
    66f2:	f0 e0       	ldi	r31, 0x00	; 0
    66f4:	e4 5d       	subi	r30, 0xD4	; 212
    66f6:	fc 4d       	sbci	r31, 0xDC	; 220
    66f8:	85 8d       	ldd	r24, Z+29	; 0x1d
    66fa:	8c 93       	st	X, r24
		RS.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    66fc:	80 91 cb 23 	lds	r24, 0x23CB
    6700:	90 91 cc 23 	lds	r25, 0x23CC
    6704:	97 7f       	andi	r25, 0xF7	; 247
    6706:	80 93 cb 23 	sts	0x23CB, r24
    670a:	90 93 cc 23 	sts	0x23CC, r25
	}
	// enable interrupts regardless
	RSu.usart->CTRLA = CTRLA_RXON_TXON;			// won't work if you just |= it
    670e:	e0 91 33 23 	lds	r30, 0x2333
    6712:	f0 91 34 23 	lds	r31, 0x2334
    6716:	81 e2       	ldi	r24, 0x21	; 33
    6718:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    671a:	80 91 a2 00 	lds	r24, 0x00A2
    671e:	81 60       	ori	r24, 0x01	; 1
    6720:	e0 ea       	ldi	r30, 0xA0	; 160
    6722:	f0 e0       	ldi	r31, 0x00	; 0
    6724:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6726:	78 94       	sei
    6728:	20 e0       	ldi	r18, 0x00	; 0
    672a:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    672c:	c9 01       	movw	r24, r18
    672e:	08 95       	ret

00006730 <xio_getc_rs485>:
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSu.rx_buf_head == RSu.rx_buf_tail) {// RX ISR buffer empty
		if (BLOCKING(RS.flags)) {
    6730:	20 91 cb 23 	lds	r18, 0x23CB
    6734:	30 91 cc 23 	lds	r19, 0x23CC
    6738:	24 70       	andi	r18, 0x04	; 4
    673a:	30 70       	andi	r19, 0x00	; 0
    673c:	15 c0       	rjmp	.+42     	; 0x6768 <xio_getc_rs485+0x38>
    673e:	21 15       	cp	r18, r1
    6740:	31 05       	cpc	r19, r1
    6742:	61 f0       	breq	.+24     	; 0x675c <xio_getc_rs485+0x2c>
			sleep_mode();
    6744:	80 91 48 00 	lds	r24, 0x0048
    6748:	81 60       	ori	r24, 0x01	; 1
    674a:	80 93 48 00 	sts	0x0048, r24
    674e:	88 95       	sleep
    6750:	80 91 48 00 	lds	r24, 0x0048
    6754:	8e 7f       	andi	r24, 0xFE	; 254
    6756:	80 93 48 00 	sts	0x0048, r24
    675a:	06 c0       	rjmp	.+12     	; 0x6768 <xio_getc_rs485+0x38>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    675c:	81 e0       	ldi	r24, 0x01	; 1
    675e:	80 93 ce 23 	sts	0x23CE, r24
    6762:	2f ef       	ldi	r18, 0xFF	; 255
    6764:	3f ef       	ldi	r19, 0xFF	; 255
    6766:	26 c0       	rjmp	.+76     	; 0x67b4 <xio_getc_rs485+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSu.rx_buf_head == RSu.rx_buf_tail) {// RX ISR buffer empty
    6768:	90 91 2f 23 	lds	r25, 0x232F
    676c:	80 91 2e 23 	lds	r24, 0x232E
    6770:	98 17       	cp	r25, r24
    6772:	29 f3       	breq	.-54     	; 0x673e <xio_getc_rs485+0xe>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(RSu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6774:	80 91 2e 23 	lds	r24, 0x232E
    6778:	81 50       	subi	r24, 0x01	; 1
    677a:	80 93 2e 23 	sts	0x232E, r24
    677e:	80 91 2e 23 	lds	r24, 0x232E
    6782:	88 23       	and	r24, r24
    6784:	19 f4       	brne	.+6      	; 0x678c <xio_getc_rs485+0x5c>
		RSu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6786:	81 e1       	ldi	r24, 0x11	; 17
    6788:	80 93 2e 23 	sts	0x232E, r24
	}
	RS.c = (RSu.rx_buf[RSu.rx_buf_tail] & 0x007F);	// get char from RX & mask MSB
    678c:	e0 91 2e 23 	lds	r30, 0x232E
    6790:	f0 e0       	ldi	r31, 0x00	; 0
    6792:	e4 5d       	subi	r30, 0xD4	; 212
    6794:	fc 4d       	sbci	r31, 0xDC	; 220
    6796:	83 85       	ldd	r24, Z+11	; 0x0b
    6798:	8f 77       	andi	r24, 0x7F	; 127
    679a:	80 93 cf 23 	sts	0x23CF, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[RS.c])))());
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	88 0f       	add	r24, r24
    67a2:	99 1f       	adc	r25, r25
    67a4:	87 50       	subi	r24, 0x07	; 7
    67a6:	93 4e       	sbci	r25, 0xE3	; 227
    67a8:	fc 01       	movw	r30, r24
    67aa:	25 91       	lpm	r18, Z+
    67ac:	34 91       	lpm	r19, Z+
    67ae:	f9 01       	movw	r30, r18
    67b0:	19 95       	eicall
    67b2:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    67b4:	c9 01       	movw	r24, r18
    67b6:	08 95       	ret

000067b8 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    67b8:	80 91 cb 23 	lds	r24, 0x23CB
    67bc:	84 ff       	sbrs	r24, 4
    67be:	08 c0       	rjmp	.+16     	; 0x67d0 <_getc_char+0x18>
    67c0:	60 91 0c 25 	lds	r22, 0x250C
    67c4:	70 91 0d 25 	lds	r23, 0x250D
    67c8:	80 91 cf 23 	lds	r24, 0x23CF
    67cc:	0e 94 1b 33 	call	0x6636	; 0x6636 <xio_putc_rs485>
	return(RS.c);
}
    67d0:	80 91 cf 23 	lds	r24, 0x23CF
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	08 95       	ret

000067d8 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(RS.flags)) RS.c = '\n';
    67d8:	80 91 cb 23 	lds	r24, 0x23CB
    67dc:	86 ff       	sbrs	r24, 6
    67de:	03 c0       	rjmp	.+6      	; 0x67e6 <_getc_NEWLINE+0xe>
    67e0:	8a e0       	ldi	r24, 0x0A	; 10
    67e2:	80 93 cf 23 	sts	0x23CF, r24
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    67e6:	80 91 cb 23 	lds	r24, 0x23CB
    67ea:	84 ff       	sbrs	r24, 4
    67ec:	08 c0       	rjmp	.+16     	; 0x67fe <_getc_NEWLINE+0x26>
    67ee:	60 91 0c 25 	lds	r22, 0x250C
    67f2:	70 91 0d 25 	lds	r23, 0x250D
    67f6:	80 91 cf 23 	lds	r24, 0x23CF
    67fa:	0e 94 1b 33 	call	0x6636	; 0x6636 <xio_putc_rs485>
	return(RS.c);
}
    67fe:	80 91 cf 23 	lds	r24, 0x23CF
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	08 95       	ret

00006806 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(RS.flags)) {
    6806:	80 91 cb 23 	lds	r24, 0x23CB
    680a:	87 ff       	sbrs	r24, 7
    680c:	03 c0       	rjmp	.+6      	; 0x6814 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    680e:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <_getc_NEWLINE>
    6812:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6814:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <_getc_char>
}
    6818:	08 95       	ret

0000681a <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	RS.sig = XIO_SIG_DELETE;
    681a:	89 e0       	ldi	r24, 0x09	; 9
    681c:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    6820:	8f ef       	ldi	r24, 0xFF	; 255
    6822:	9f ef       	ldi	r25, 0xFF	; 255
    6824:	08 95       	ret

00006826 <xio_readln_rs485>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_rs485(char *buf, uint8_t size)
{
	if (!IN_LINE(RS.flags)) {					// first time thru initializations
    6826:	20 91 cb 23 	lds	r18, 0x23CB
    682a:	30 91 cc 23 	lds	r19, 0x23CC
    682e:	36 fd       	sbrc	r19, 6
    6830:	11 c0       	rjmp	.+34     	; 0x6854 <xio_readln_rs485+0x2e>
		RS.len = 0;								// zero buffer
    6832:	10 92 d0 23 	sts	0x23D0, r1
		RS.status = 0;
    6836:	10 92 cd 23 	sts	0x23CD, r1
		RS.size = size;
    683a:	60 93 d1 23 	sts	0x23D1, r22
		RS.buf = buf;
    683e:	80 93 e0 23 	sts	0x23E0, r24
    6842:	90 93 e1 23 	sts	0x23E1, r25
		RS.sig = XIO_SIG_OK;					// no signal action
    6846:	10 92 ce 23 	sts	0x23CE, r1
		RS.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    684a:	30 64       	ori	r19, 0x40	; 64
    684c:	20 93 cb 23 	sts	0x23CB, r18
    6850:	30 93 cc 23 	sts	0x23CC, r19
	}
	if (RSu.rx_buf_head == RSu.rx_buf_tail) {	// RX ISR buffer empty
    6854:	90 91 2f 23 	lds	r25, 0x232F
    6858:	80 91 2e 23 	lds	r24, 0x232E
    685c:	98 17       	cp	r25, r24
    685e:	19 f4       	brne	.+6      	; 0x6866 <xio_readln_rs485+0x40>
    6860:	22 e0       	ldi	r18, 0x02	; 2
    6862:	30 e0       	ldi	r19, 0x00	; 0
    6864:	20 c0       	rjmp	.+64     	; 0x68a6 <xio_readln_rs485+0x80>
//		RS.sig = XIO_SIG_EAGAIN;
		return(XIO_EAGAIN);
	}
	if (--(RSu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6866:	80 91 2e 23 	lds	r24, 0x232E
    686a:	81 50       	subi	r24, 0x01	; 1
    686c:	80 93 2e 23 	sts	0x232E, r24
    6870:	80 91 2e 23 	lds	r24, 0x232E
    6874:	88 23       	and	r24, r24
    6876:	19 f4       	brne	.+6      	; 0x687e <xio_readln_rs485+0x58>
		RSu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6878:	81 e1       	ldi	r24, 0x11	; 17
    687a:	80 93 2e 23 	sts	0x232E, r24
	}
	RS.c = (RSu.rx_buf[RSu.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    687e:	e0 91 2e 23 	lds	r30, 0x232E
    6882:	f0 e0       	ldi	r31, 0x00	; 0
    6884:	e4 5d       	subi	r30, 0xD4	; 212
    6886:	fc 4d       	sbci	r31, 0xDC	; 220
    6888:	83 85       	ldd	r24, Z+11	; 0x0b
    688a:	8f 77       	andi	r24, 0x7F	; 127
    688c:	80 93 cf 23 	sts	0x23CF, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[RS.c])))()); // dispatch char
    6890:	90 e0       	ldi	r25, 0x00	; 0
    6892:	88 0f       	add	r24, r24
    6894:	99 1f       	adc	r25, r25
    6896:	87 50       	subi	r24, 0x07	; 7
    6898:	94 4e       	sbci	r25, 0xE4	; 228
    689a:	fc 01       	movw	r30, r24
    689c:	25 91       	lpm	r18, Z+
    689e:	34 91       	lpm	r19, Z+
    68a0:	f9 01       	movw	r30, r18
    68a2:	19 95       	eicall
    68a4:	9c 01       	movw	r18, r24
}
    68a6:	c9 01       	movw	r24, r18
    68a8:	08 95       	ret

000068aa <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (RS.len > RS.size) {						// trap buffer overflow
    68aa:	90 91 d0 23 	lds	r25, 0x23D0
    68ae:	20 91 d1 23 	lds	r18, 0x23D1
    68b2:	e0 91 e0 23 	lds	r30, 0x23E0
    68b6:	f0 91 e1 23 	lds	r31, 0x23E1
    68ba:	29 17       	cp	r18, r25
    68bc:	48 f4       	brcc	.+18     	; 0x68d0 <_readln_char+0x26>
		RS.sig = XIO_SIG_EOL;
    68be:	82 e0       	ldi	r24, 0x02	; 2
    68c0:	80 93 ce 23 	sts	0x23CE, r24
		RS.buf[RS.size] = NUL;					// RS.len is zero based
    68c4:	e2 0f       	add	r30, r18
    68c6:	f1 1d       	adc	r31, r1
    68c8:	10 82       	st	Z, r1
    68ca:	2a e0       	ldi	r18, 0x0A	; 10
    68cc:	30 e0       	ldi	r19, 0x00	; 0
    68ce:	16 c0       	rjmp	.+44     	; 0x68fc <_readln_char+0x52>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	RS.buf[RS.len++] = RS.c;
    68d0:	e9 0f       	add	r30, r25
    68d2:	f1 1d       	adc	r31, r1
    68d4:	80 91 cf 23 	lds	r24, 0x23CF
    68d8:	80 83       	st	Z, r24
    68da:	9f 5f       	subi	r25, 0xFF	; 255
    68dc:	90 93 d0 23 	sts	0x23D0, r25
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);// conditional echo
    68e0:	80 91 cb 23 	lds	r24, 0x23CB
    68e4:	84 ff       	sbrs	r24, 4
    68e6:	08 c0       	rjmp	.+16     	; 0x68f8 <_readln_char+0x4e>
    68e8:	60 91 0c 25 	lds	r22, 0x250C
    68ec:	70 91 0d 25 	lds	r23, 0x250D
    68f0:	80 91 cf 23 	lds	r24, 0x23CF
    68f4:	0e 94 1b 33 	call	0x6636	; 0x6636 <xio_putc_rs485>
    68f8:	22 e0       	ldi	r18, 0x02	; 2
    68fa:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);							// line is still in process
}
    68fc:	c9 01       	movw	r24, r18
    68fe:	08 95       	ret

00006900 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handle valid newline char
{
	RS.sig = XIO_SIG_EOL;
    6900:	82 e0       	ldi	r24, 0x02	; 2
    6902:	80 93 ce 23 	sts	0x23CE, r24
	RS.buf[RS.len] = NUL;
    6906:	80 91 d0 23 	lds	r24, 0x23D0
    690a:	e0 91 e0 23 	lds	r30, 0x23E0
    690e:	f0 91 e1 23 	lds	r31, 0x23E1
    6912:	e8 0f       	add	r30, r24
    6914:	f1 1d       	adc	r31, r1
    6916:	10 82       	st	Z, r1
	RS.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6918:	20 91 cb 23 	lds	r18, 0x23CB
    691c:	30 91 cc 23 	lds	r19, 0x23CC
    6920:	c9 01       	movw	r24, r18
    6922:	9f 7b       	andi	r25, 0xBF	; 191
    6924:	80 93 cb 23 	sts	0x23CB, r24
    6928:	90 93 cc 23 	sts	0x23CC, r25
	if (ECHO(RS.flags)) xio_putc_rs485('\n',stdout);// echo a newline
    692c:	24 ff       	sbrs	r18, 4
    692e:	07 c0       	rjmp	.+14     	; 0x693e <_readln_NEWLINE+0x3e>
    6930:	60 91 0c 25 	lds	r22, 0x250C
    6934:	70 91 0d 25 	lds	r23, 0x250D
    6938:	8a e0       	ldi	r24, 0x0A	; 10
    693a:	0e 94 1b 33 	call	0x6636	; 0x6636 <xio_putc_rs485>
	return 0;
}
    693e:	80 e0       	ldi	r24, 0x00	; 0
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	08 95       	ret

00006944 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(RS.flags)) {
    6944:	80 91 cb 23 	lds	r24, 0x23CB
    6948:	87 ff       	sbrs	r24, 7
    694a:	03 c0       	rjmp	.+6      	; 0x6952 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi-mode treat as an EOL
    694c:	0e 94 80 34 	call	0x6900	; 0x6900 <_readln_NEWLINE>
    6950:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6952:	0e 94 55 34 	call	0x68aa	; 0x68aa <_readln_char>
	}
}
    6956:	08 95       	ret

00006958 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--RS.len >= 0) {
    6958:	80 91 d0 23 	lds	r24, 0x23D0
    695c:	81 50       	subi	r24, 0x01	; 1
    695e:	80 93 d0 23 	sts	0x23D0, r24
		if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    6962:	80 91 cb 23 	lds	r24, 0x23CB
    6966:	84 ff       	sbrs	r24, 4
    6968:	08 c0       	rjmp	.+16     	; 0x697a <_readln_DELETE+0x22>
    696a:	60 91 0c 25 	lds	r22, 0x250C
    696e:	70 91 0d 25 	lds	r23, 0x250D
    6972:	80 91 cf 23 	lds	r24, 0x23CF
    6976:	0e 94 1b 33 	call	0x6636	; 0x6636 <xio_putc_rs485>
	} else {
		RS.len = 0;
	}
	return (XIO_EAGAIN);							// line is still in process
}
    697a:	82 e0       	ldi	r24, 0x02	; 2
    697c:	90 e0       	ldi	r25, 0x00	; 0
    697e:	08 95       	ret

00006980 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	RS.sig = XIO_SIG_KILL;
    6980:	84 e0       	ldi	r24, 0x04	; 4
    6982:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    6986:	8f ef       	ldi	r24, 0xFF	; 255
    6988:	9f ef       	ldi	r25, 0xFF	; 255
    698a:	08 95       	ret

0000698c <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	RS.sig = XIO_SIG_PAUSE;
    698c:	86 e0       	ldi	r24, 0x06	; 6
    698e:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    6992:	8f ef       	ldi	r24, 0xFF	; 255
    6994:	9f ef       	ldi	r25, 0xFF	; 255
    6996:	08 95       	ret

00006998 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	RS.sig = XIO_SIG_RESUME;
    6998:	87 e0       	ldi	r24, 0x07	; 7
    699a:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    699e:	8f ef       	ldi	r24, 0xFF	; 255
    69a0:	9f ef       	ldi	r25, 0xFF	; 255
    69a2:	08 95       	ret

000069a4 <xio_setflags_rs485>:
/*
 *	xio_setflags_rs485() - check and set control flags for device
 */

int xio_setflags_rs485(const uint16_t control)
{
    69a4:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_RS485, control);
    69a6:	80 e0       	ldi	r24, 0x00	; 0
    69a8:	0e 94 49 28 	call	0x5092	; 0x5092 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	08 95       	ret

000069b2 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    69b2:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    69b4:	83 30       	cpi	r24, 0x03	; 3
    69b6:	31 f4       	brne	.+12     	; 0x69c4 <xio_rs485_queue_RX_char+0x12>
		RS.sig = XIO_SIG_KILL;					// set signal value
    69b8:	84 e0       	ldi	r24, 0x04	; 4
    69ba:	80 93 ce 23 	sts	0x23CE, r24
		signal_etx();							// call app-specific signal handler
    69be:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <signal_etx>
    69c2:	08 95       	ret
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// wrap condition
    69c4:	80 91 2f 23 	lds	r24, 0x232F
    69c8:	81 50       	subi	r24, 0x01	; 1
    69ca:	80 93 2f 23 	sts	0x232F, r24
    69ce:	80 91 2f 23 	lds	r24, 0x232F
    69d2:	88 23       	and	r24, r24
    69d4:	19 f4       	brne	.+6      	; 0x69dc <xio_rs485_queue_RX_char+0x2a>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    69d6:	81 e1       	ldi	r24, 0x11	; 17
    69d8:	80 93 2f 23 	sts	0x232F, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    69dc:	90 91 2f 23 	lds	r25, 0x232F
    69e0:	80 91 2e 23 	lds	r24, 0x232E
    69e4:	98 17       	cp	r25, r24
    69e6:	39 f0       	breq	.+14     	; 0x69f6 <xio_rs485_queue_RX_char+0x44>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// FAKE INPUT DATA
    69e8:	e0 91 2f 23 	lds	r30, 0x232F
    69ec:	f0 e0       	ldi	r31, 0x00	; 0
    69ee:	e4 5d       	subi	r30, 0xD4	; 212
    69f0:	fc 4d       	sbci	r31, 0xDC	; 220
    69f2:	23 87       	std	Z+11, r18	; 0x0b
    69f4:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    69f6:	80 91 2f 23 	lds	r24, 0x232F
    69fa:	8f 5f       	subi	r24, 0xFF	; 255
    69fc:	80 93 2f 23 	sts	0x232F, r24
    6a00:	80 91 2f 23 	lds	r24, 0x232F
    6a04:	82 31       	cpi	r24, 0x12	; 18
    6a06:	18 f0       	brcs	.+6      	; 0x6a0e <xio_rs485_queue_RX_char+0x5c>
		RSu.rx_buf_head = 1;
    6a08:	81 e0       	ldi	r24, 0x01	; 1
    6a0a:	80 93 2f 23 	sts	0x232F, r24
    6a0e:	08 95       	ret

00006a10 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6a10:	1f 93       	push	r17
    6a12:	cf 93       	push	r28
    6a14:	df 93       	push	r29
    6a16:	ec 01       	movw	r28, r24
    6a18:	10 e0       	ldi	r17, 0x00	; 0
    6a1a:	02 c0       	rjmp	.+4      	; 0x6a20 <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6a1c:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6a20:	fe 01       	movw	r30, r28
    6a22:	e1 0f       	add	r30, r17
    6a24:	f1 1d       	adc	r31, r1
    6a26:	80 81       	ld	r24, Z
    6a28:	1f 5f       	subi	r17, 0xFF	; 255
    6a2a:	88 23       	and	r24, r24
    6a2c:	b9 f7       	brne	.-18     	; 0x6a1c <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6a2e:	df 91       	pop	r29
    6a30:	cf 91       	pop	r28
    6a32:	1f 91       	pop	r17
    6a34:	08 95       	ret

00006a36 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6a36:	1f 92       	push	r1
    6a38:	0f 92       	push	r0
    6a3a:	0f b6       	in	r0, 0x3f	; 63
    6a3c:	0f 92       	push	r0
    6a3e:	0b b6       	in	r0, 0x3b	; 59
    6a40:	0f 92       	push	r0
    6a42:	11 24       	eor	r1, r1
    6a44:	2f 93       	push	r18
    6a46:	3f 93       	push	r19
    6a48:	4f 93       	push	r20
    6a4a:	5f 93       	push	r21
    6a4c:	6f 93       	push	r22
    6a4e:	7f 93       	push	r23
    6a50:	8f 93       	push	r24
    6a52:	9f 93       	push	r25
    6a54:	af 93       	push	r26
    6a56:	bf 93       	push	r27
    6a58:	ef 93       	push	r30
    6a5a:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    6a5c:	e0 91 33 23 	lds	r30, 0x2333
    6a60:	f0 91 34 23 	lds	r31, 0x2334
    6a64:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6a66:	23 30       	cpi	r18, 0x03	; 3
    6a68:	31 f4       	brne	.+12     	; 0x6a76 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6a6a:	84 e0       	ldi	r24, 0x04	; 4
    6a6c:	80 93 ce 23 	sts	0x23CE, r24
		signal_etx();							// call app-specific signal handler
    6a70:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <signal_etx>
    6a74:	25 c0       	rjmp	.+74     	; 0x6ac0 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6a76:	80 91 2f 23 	lds	r24, 0x232F
    6a7a:	81 50       	subi	r24, 0x01	; 1
    6a7c:	80 93 2f 23 	sts	0x232F, r24
    6a80:	80 91 2f 23 	lds	r24, 0x232F
    6a84:	88 23       	and	r24, r24
    6a86:	19 f4       	brne	.+6      	; 0x6a8e <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6a88:	81 e1       	ldi	r24, 0x11	; 17
    6a8a:	80 93 2f 23 	sts	0x232F, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6a8e:	90 91 2f 23 	lds	r25, 0x232F
    6a92:	80 91 2e 23 	lds	r24, 0x232E
    6a96:	98 17       	cp	r25, r24
    6a98:	39 f0       	breq	.+14     	; 0x6aa8 <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    6a9a:	e0 91 2f 23 	lds	r30, 0x232F
    6a9e:	f0 e0       	ldi	r31, 0x00	; 0
    6aa0:	e4 5d       	subi	r30, 0xD4	; 212
    6aa2:	fc 4d       	sbci	r31, 0xDC	; 220
    6aa4:	23 87       	std	Z+11, r18	; 0x0b
    6aa6:	0c c0       	rjmp	.+24     	; 0x6ac0 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6aa8:	80 91 2f 23 	lds	r24, 0x232F
    6aac:	8f 5f       	subi	r24, 0xFF	; 255
    6aae:	80 93 2f 23 	sts	0x232F, r24
    6ab2:	80 91 2f 23 	lds	r24, 0x232F
    6ab6:	82 31       	cpi	r24, 0x12	; 18
    6ab8:	18 f0       	brcs	.+6      	; 0x6ac0 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    6aba:	81 e0       	ldi	r24, 0x01	; 1
    6abc:	80 93 2f 23 	sts	0x232F, r24
	}
	// activate flow control here or before it gets to this level
}
    6ac0:	ff 91       	pop	r31
    6ac2:	ef 91       	pop	r30
    6ac4:	bf 91       	pop	r27
    6ac6:	af 91       	pop	r26
    6ac8:	9f 91       	pop	r25
    6aca:	8f 91       	pop	r24
    6acc:	7f 91       	pop	r23
    6ace:	6f 91       	pop	r22
    6ad0:	5f 91       	pop	r21
    6ad2:	4f 91       	pop	r20
    6ad4:	3f 91       	pop	r19
    6ad6:	2f 91       	pop	r18
    6ad8:	0f 90       	pop	r0
    6ada:	0b be       	out	0x3b, r0	; 59
    6adc:	0f 90       	pop	r0
    6ade:	0f be       	out	0x3f, r0	; 63
    6ae0:	0f 90       	pop	r0
    6ae2:	1f 90       	pop	r1
    6ae4:	18 95       	reti

00006ae6 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    6ae6:	20 91 10 24 	lds	r18, 0x2410
    6aea:	30 91 11 24 	lds	r19, 0x2411
    6aee:	3f 70       	andi	r19, 0x0F	; 15
    6af0:	20 93 10 24 	sts	0x2410, r18
    6af4:	30 93 11 24 	sts	0x2411, r19
	PGM.sig = 0;							// reset signal
    6af8:	10 92 13 24 	sts	0x2413, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6afc:	80 93 bd 23 	sts	0x23BD, r24
    6b00:	90 93 be 23 	sts	0x23BE, r25
	PGMf.len = 0;							// initialize buffer pointer
    6b04:	10 92 bb 23 	sts	0x23BB, r1
    6b08:	10 92 bc 23 	sts	0x23BC, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6b0c:	80 91 23 24 	lds	r24, 0x2423
    6b10:	90 91 24 24 	lds	r25, 0x2424
    6b14:	08 95       	ret

00006b16 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6b16:	8f ef       	ldi	r24, 0xFF	; 255
    6b18:	9f ef       	ldi	r25, 0xFF	; 255
    6b1a:	08 95       	ret

00006b1c <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6b1c:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6b1e:	80 91 bd 23 	lds	r24, 0x23BD
    6b22:	90 91 be 23 	lds	r25, 0x23BE
    6b26:	89 2b       	or	r24, r25
    6b28:	19 f4       	brne	.+6      	; 0x6b30 <xio_readln_pgm+0x14>
    6b2a:	26 e0       	ldi	r18, 0x06	; 6
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	1b c0       	rjmp	.+54     	; 0x6b66 <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6b30:	10 92 13 24 	sts	0x2413, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6b34:	40 91 23 24 	lds	r20, 0x2423
    6b38:	50 91 24 24 	lds	r21, 0x2424
    6b3c:	c9 01       	movw	r24, r18
    6b3e:	70 e0       	ldi	r23, 0x00	; 0
    6b40:	0e 94 92 47 	call	0x8f24	; 0x8f24 <fgets>
    6b44:	89 2b       	or	r24, r25
    6b46:	19 f0       	breq	.+6      	; 0x6b4e <xio_readln_pgm+0x32>
    6b48:	20 e0       	ldi	r18, 0x00	; 0
    6b4a:	30 e0       	ldi	r19, 0x00	; 0
    6b4c:	0c c0       	rjmp	.+24     	; 0x6b66 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6b4e:	10 92 bd 23 	sts	0x23BD, r1
    6b52:	10 92 be 23 	sts	0x23BE, r1
		clearerr(PGM.fdev);
    6b56:	80 91 23 24 	lds	r24, 0x2423
    6b5a:	90 91 24 24 	lds	r25, 0x2424
    6b5e:	0e 94 8d 47 	call	0x8f1a	; 0x8f1a <clearerr>
    6b62:	25 e0       	ldi	r18, 0x05	; 5
    6b64:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6b66:	c9 01       	movw	r24, r18
    6b68:	08 95       	ret

00006b6a <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6b6a:	20 91 10 24 	lds	r18, 0x2410
    6b6e:	30 91 11 24 	lds	r19, 0x2411
    6b72:	35 ff       	sbrs	r19, 5
    6b74:	06 c0       	rjmp	.+12     	; 0x6b82 <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6b76:	83 e0       	ldi	r24, 0x03	; 3
    6b78:	80 93 13 24 	sts	0x2413, r24
    6b7c:	2e ef       	ldi	r18, 0xFE	; 254
    6b7e:	3f ef       	ldi	r19, 0xFF	; 255
    6b80:	3e c0       	rjmp	.+124    	; 0x6bfe <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6b82:	80 91 bb 23 	lds	r24, 0x23BB
    6b86:	90 91 bc 23 	lds	r25, 0x23BC
    6b8a:	e0 91 bd 23 	lds	r30, 0x23BD
    6b8e:	f0 91 be 23 	lds	r31, 0x23BE
    6b92:	e8 0f       	add	r30, r24
    6b94:	f9 1f       	adc	r31, r25
    6b96:	e4 91       	lpm	r30, Z+
    6b98:	e0 93 14 24 	sts	0x2414, r30
    6b9c:	ee 23       	and	r30, r30
    6b9e:	29 f4       	brne	.+10     	; 0x6baa <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6ba0:	30 62       	ori	r19, 0x20	; 32
    6ba2:	20 93 10 24 	sts	0x2410, r18
    6ba6:	30 93 11 24 	sts	0x2411, r19
	}
	++PGMf.len;
    6baa:	01 96       	adiw	r24, 0x01	; 1
    6bac:	80 93 bb 23 	sts	0x23BB, r24
    6bb0:	90 93 bc 23 	sts	0x23BC, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6bb4:	90 91 10 24 	lds	r25, 0x2410
    6bb8:	96 fd       	sbrc	r25, 6
    6bba:	03 c0       	rjmp	.+6      	; 0x6bc2 <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6bbc:	94 ff       	sbrs	r25, 4
    6bbe:	1b c0       	rjmp	.+54     	; 0x6bf6 <xio_getc_pgm+0x8c>
    6bc0:	11 c0       	rjmp	.+34     	; 0x6be4 <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6bc2:	80 91 14 24 	lds	r24, 0x2414
    6bc6:	88 23       	and	r24, r24
    6bc8:	31 f0       	breq	.+12     	; 0x6bd6 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6bca:	8d 30       	cpi	r24, 0x0D	; 13
    6bcc:	21 f0       	breq	.+8      	; 0x6bd6 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6bce:	97 ff       	sbrs	r25, 7
    6bd0:	05 c0       	rjmp	.+10     	; 0x6bdc <xio_getc_pgm+0x72>
    6bd2:	8b 33       	cpi	r24, 0x3B	; 59
    6bd4:	19 f4       	brne	.+6      	; 0x6bdc <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6bd6:	8a e0       	ldi	r24, 0x0A	; 10
    6bd8:	80 93 14 24 	sts	0x2414, r24
	}
	if (ECHO(PGM.flags)) {
    6bdc:	80 91 10 24 	lds	r24, 0x2410
    6be0:	84 ff       	sbrs	r24, 4
    6be2:	09 c0       	rjmp	.+18     	; 0x6bf6 <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6be4:	60 91 0c 25 	lds	r22, 0x250C
    6be8:	70 91 0d 25 	lds	r23, 0x250D
    6bec:	80 91 14 24 	lds	r24, 0x2414
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
	}
	return (PGM.c);
    6bf6:	80 91 14 24 	lds	r24, 0x2414
    6bfa:	28 2f       	mov	r18, r24
    6bfc:	30 e0       	ldi	r19, 0x00	; 0
}
    6bfe:	c9 01       	movw	r24, r18
    6c00:	08 95       	ret

00006c02 <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6c02:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6c04:	83 e0       	ldi	r24, 0x03	; 3
    6c06:	0e 94 49 28 	call	0x5092	; 0x5092 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6c0a:	80 e0       	ldi	r24, 0x00	; 0
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	08 95       	ret

00006c10 <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6c10:	90 e0       	ldi	r25, 0x00	; 0
    6c12:	27 e1       	ldi	r18, 0x17	; 23
    6c14:	30 e0       	ldi	r19, 0x00	; 0
    6c16:	82 9f       	mul	r24, r18
    6c18:	f0 01       	movw	r30, r0
    6c1a:	83 9f       	mul	r24, r19
    6c1c:	f0 0d       	add	r31, r0
    6c1e:	92 9f       	mul	r25, r18
    6c20:	f0 0d       	add	r31, r0
    6c22:	11 24       	eor	r1, r1
    6c24:	e5 53       	subi	r30, 0x35	; 53
    6c26:	fc 4d       	sbci	r31, 0xDC	; 220
    6c28:	86 e0       	ldi	r24, 0x06	; 6
    6c2a:	68 9f       	mul	r22, r24
    6c2c:	b0 01       	movw	r22, r0
    6c2e:	11 24       	eor	r1, r1
    6c30:	67 54       	subi	r22, 0x47	; 71
    6c32:	7c 4d       	sbci	r23, 0xDC	; 220
    6c34:	61 8b       	std	Z+17, r22	; 0x11
    6c36:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6c38:	83 e0       	ldi	r24, 0x03	; 3
    6c3a:	ba 01       	movw	r22, r20
    6c3c:	0e 94 49 28 	call	0x5092	; 0x5092 <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6c40:	08 95       	ret

00006c42 <__udivdi3>:
    6c42:	ae e5       	ldi	r26, 0x5E	; 94
    6c44:	b0 e0       	ldi	r27, 0x00	; 0
    6c46:	e7 e2       	ldi	r30, 0x27	; 39
    6c48:	f6 e3       	ldi	r31, 0x36	; 54
    6c4a:	0c 94 b4 44 	jmp	0x8968	; 0x8968 <__prologue_saves__>
    6c4e:	a8 e0       	ldi	r26, 0x08	; 8
    6c50:	4e 01       	movw	r8, r28
    6c52:	08 94       	sec
    6c54:	81 1c       	adc	r8, r1
    6c56:	91 1c       	adc	r9, r1
    6c58:	f4 01       	movw	r30, r8
    6c5a:	6a 2e       	mov	r6, r26
    6c5c:	11 92       	st	Z+, r1
    6c5e:	6a 94       	dec	r6
    6c60:	e9 f7       	brne	.-6      	; 0x6c5c <__udivdi3+0x1a>
    6c62:	29 83       	std	Y+1, r18	; 0x01
    6c64:	3a 83       	std	Y+2, r19	; 0x02
    6c66:	4b 83       	std	Y+3, r20	; 0x03
    6c68:	5c 83       	std	Y+4, r21	; 0x04
    6c6a:	6d 83       	std	Y+5, r22	; 0x05
    6c6c:	7e 83       	std	Y+6, r23	; 0x06
    6c6e:	8f 83       	std	Y+7, r24	; 0x07
    6c70:	98 87       	std	Y+8, r25	; 0x08
    6c72:	ce 01       	movw	r24, r28
    6c74:	09 96       	adiw	r24, 0x09	; 9
    6c76:	fc 01       	movw	r30, r24
    6c78:	11 92       	st	Z+, r1
    6c7a:	aa 95       	dec	r26
    6c7c:	e9 f7       	brne	.-6      	; 0x6c78 <__udivdi3+0x36>
    6c7e:	a9 86       	std	Y+9, r10	; 0x09
    6c80:	ba 86       	std	Y+10, r11	; 0x0a
    6c82:	cb 86       	std	Y+11, r12	; 0x0b
    6c84:	dc 86       	std	Y+12, r13	; 0x0c
    6c86:	ed 86       	std	Y+13, r14	; 0x0d
    6c88:	fe 86       	std	Y+14, r15	; 0x0e
    6c8a:	0f 87       	std	Y+15, r16	; 0x0f
    6c8c:	18 8b       	std	Y+16, r17	; 0x10
    6c8e:	29 84       	ldd	r2, Y+9	; 0x09
    6c90:	3a 84       	ldd	r3, Y+10	; 0x0a
    6c92:	4b 84       	ldd	r4, Y+11	; 0x0b
    6c94:	5c 84       	ldd	r5, Y+12	; 0x0c
    6c96:	ed 84       	ldd	r14, Y+13	; 0x0d
    6c98:	fe 84       	ldd	r15, Y+14	; 0x0e
    6c9a:	0f 85       	ldd	r16, Y+15	; 0x0f
    6c9c:	18 89       	ldd	r17, Y+16	; 0x10
    6c9e:	69 80       	ldd	r6, Y+1	; 0x01
    6ca0:	7a 80       	ldd	r7, Y+2	; 0x02
    6ca2:	8b 80       	ldd	r8, Y+3	; 0x03
    6ca4:	9c 80       	ldd	r9, Y+4	; 0x04
    6ca6:	6d a6       	std	Y+45, r6	; 0x2d
    6ca8:	7e a6       	std	Y+46, r7	; 0x2e
    6caa:	8f a6       	std	Y+47, r8	; 0x2f
    6cac:	98 aa       	std	Y+48, r9	; 0x30
    6cae:	6d 80       	ldd	r6, Y+5	; 0x05
    6cb0:	7e 80       	ldd	r7, Y+6	; 0x06
    6cb2:	8f 80       	ldd	r8, Y+7	; 0x07
    6cb4:	98 84       	ldd	r9, Y+8	; 0x08
    6cb6:	e1 14       	cp	r14, r1
    6cb8:	f1 04       	cpc	r15, r1
    6cba:	01 05       	cpc	r16, r1
    6cbc:	11 05       	cpc	r17, r1
    6cbe:	09 f0       	breq	.+2      	; 0x6cc2 <__udivdi3+0x80>
    6cc0:	b3 c3       	rjmp	.+1894   	; 0x7428 <__udivdi3+0x7e6>
    6cc2:	62 14       	cp	r6, r2
    6cc4:	73 04       	cpc	r7, r3
    6cc6:	84 04       	cpc	r8, r4
    6cc8:	95 04       	cpc	r9, r5
    6cca:	08 f0       	brcs	.+2      	; 0x6cce <__udivdi3+0x8c>
    6ccc:	3d c1       	rjmp	.+634    	; 0x6f48 <__udivdi3+0x306>
    6cce:	00 e0       	ldi	r16, 0x00	; 0
    6cd0:	20 16       	cp	r2, r16
    6cd2:	00 e0       	ldi	r16, 0x00	; 0
    6cd4:	30 06       	cpc	r3, r16
    6cd6:	01 e0       	ldi	r16, 0x01	; 1
    6cd8:	40 06       	cpc	r4, r16
    6cda:	00 e0       	ldi	r16, 0x00	; 0
    6cdc:	50 06       	cpc	r5, r16
    6cde:	88 f4       	brcc	.+34     	; 0x6d02 <__udivdi3+0xc0>
    6ce0:	1f ef       	ldi	r17, 0xFF	; 255
    6ce2:	21 16       	cp	r2, r17
    6ce4:	31 04       	cpc	r3, r1
    6ce6:	41 04       	cpc	r4, r1
    6ce8:	51 04       	cpc	r5, r1
    6cea:	39 f0       	breq	.+14     	; 0x6cfa <__udivdi3+0xb8>
    6cec:	30 f0       	brcs	.+12     	; 0x6cfa <__udivdi3+0xb8>
    6cee:	48 e0       	ldi	r20, 0x08	; 8
    6cf0:	e4 2e       	mov	r14, r20
    6cf2:	f1 2c       	mov	r15, r1
    6cf4:	01 2d       	mov	r16, r1
    6cf6:	11 2d       	mov	r17, r1
    6cf8:	18 c0       	rjmp	.+48     	; 0x6d2a <__udivdi3+0xe8>
    6cfa:	ee 24       	eor	r14, r14
    6cfc:	ff 24       	eor	r15, r15
    6cfe:	87 01       	movw	r16, r14
    6d00:	14 c0       	rjmp	.+40     	; 0x6d2a <__udivdi3+0xe8>
    6d02:	20 e0       	ldi	r18, 0x00	; 0
    6d04:	22 16       	cp	r2, r18
    6d06:	20 e0       	ldi	r18, 0x00	; 0
    6d08:	32 06       	cpc	r3, r18
    6d0a:	20 e0       	ldi	r18, 0x00	; 0
    6d0c:	42 06       	cpc	r4, r18
    6d0e:	21 e0       	ldi	r18, 0x01	; 1
    6d10:	52 06       	cpc	r5, r18
    6d12:	30 f0       	brcs	.+12     	; 0x6d20 <__udivdi3+0xde>
    6d14:	38 e1       	ldi	r19, 0x18	; 24
    6d16:	e3 2e       	mov	r14, r19
    6d18:	f1 2c       	mov	r15, r1
    6d1a:	01 2d       	mov	r16, r1
    6d1c:	11 2d       	mov	r17, r1
    6d1e:	05 c0       	rjmp	.+10     	; 0x6d2a <__udivdi3+0xe8>
    6d20:	20 e1       	ldi	r18, 0x10	; 16
    6d22:	e2 2e       	mov	r14, r18
    6d24:	f1 2c       	mov	r15, r1
    6d26:	01 2d       	mov	r16, r1
    6d28:	11 2d       	mov	r17, r1
    6d2a:	d2 01       	movw	r26, r4
    6d2c:	c1 01       	movw	r24, r2
    6d2e:	0e 2c       	mov	r0, r14
    6d30:	04 c0       	rjmp	.+8      	; 0x6d3a <__udivdi3+0xf8>
    6d32:	b6 95       	lsr	r27
    6d34:	a7 95       	ror	r26
    6d36:	97 95       	ror	r25
    6d38:	87 95       	ror	r24
    6d3a:	0a 94       	dec	r0
    6d3c:	d2 f7       	brpl	.-12     	; 0x6d32 <__udivdi3+0xf0>
    6d3e:	80 50       	subi	r24, 0x00	; 0
    6d40:	90 4e       	sbci	r25, 0xE0	; 224
    6d42:	dc 01       	movw	r26, r24
    6d44:	2c 91       	ld	r18, X
    6d46:	80 e2       	ldi	r24, 0x20	; 32
    6d48:	90 e0       	ldi	r25, 0x00	; 0
    6d4a:	a0 e0       	ldi	r26, 0x00	; 0
    6d4c:	b0 e0       	ldi	r27, 0x00	; 0
    6d4e:	8e 19       	sub	r24, r14
    6d50:	9f 09       	sbc	r25, r15
    6d52:	a0 0b       	sbc	r26, r16
    6d54:	b1 0b       	sbc	r27, r17
    6d56:	7c 01       	movw	r14, r24
    6d58:	8d 01       	movw	r16, r26
    6d5a:	e2 1a       	sub	r14, r18
    6d5c:	f1 08       	sbc	r15, r1
    6d5e:	01 09       	sbc	r16, r1
    6d60:	11 09       	sbc	r17, r1
    6d62:	e1 14       	cp	r14, r1
    6d64:	f1 04       	cpc	r15, r1
    6d66:	01 05       	cpc	r16, r1
    6d68:	11 05       	cpc	r17, r1
    6d6a:	a1 f1       	breq	.+104    	; 0x6dd4 <__udivdi3+0x192>
    6d6c:	0e 2c       	mov	r0, r14
    6d6e:	04 c0       	rjmp	.+8      	; 0x6d78 <__udivdi3+0x136>
    6d70:	22 0c       	add	r2, r2
    6d72:	33 1c       	adc	r3, r3
    6d74:	44 1c       	adc	r4, r4
    6d76:	55 1c       	adc	r5, r5
    6d78:	0a 94       	dec	r0
    6d7a:	d2 f7       	brpl	.-12     	; 0x6d70 <__udivdi3+0x12e>
    6d7c:	a4 01       	movw	r20, r8
    6d7e:	93 01       	movw	r18, r6
    6d80:	0e 2c       	mov	r0, r14
    6d82:	04 c0       	rjmp	.+8      	; 0x6d8c <__udivdi3+0x14a>
    6d84:	22 0f       	add	r18, r18
    6d86:	33 1f       	adc	r19, r19
    6d88:	44 1f       	adc	r20, r20
    6d8a:	55 1f       	adc	r21, r21
    6d8c:	0a 94       	dec	r0
    6d8e:	d2 f7       	brpl	.-12     	; 0x6d84 <__udivdi3+0x142>
    6d90:	80 e2       	ldi	r24, 0x20	; 32
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	8e 19       	sub	r24, r14
    6d96:	9f 09       	sbc	r25, r15
    6d98:	6d a4       	ldd	r6, Y+45	; 0x2d
    6d9a:	7e a4       	ldd	r7, Y+46	; 0x2e
    6d9c:	8f a4       	ldd	r8, Y+47	; 0x2f
    6d9e:	98 a8       	ldd	r9, Y+48	; 0x30
    6da0:	04 c0       	rjmp	.+8      	; 0x6daa <__udivdi3+0x168>
    6da2:	96 94       	lsr	r9
    6da4:	87 94       	ror	r8
    6da6:	77 94       	ror	r7
    6da8:	67 94       	ror	r6
    6daa:	8a 95       	dec	r24
    6dac:	d2 f7       	brpl	.-12     	; 0x6da2 <__udivdi3+0x160>
    6dae:	62 2a       	or	r6, r18
    6db0:	73 2a       	or	r7, r19
    6db2:	84 2a       	or	r8, r20
    6db4:	95 2a       	or	r9, r21
    6db6:	ad a4       	ldd	r10, Y+45	; 0x2d
    6db8:	be a4       	ldd	r11, Y+46	; 0x2e
    6dba:	cf a4       	ldd	r12, Y+47	; 0x2f
    6dbc:	d8 a8       	ldd	r13, Y+48	; 0x30
    6dbe:	04 c0       	rjmp	.+8      	; 0x6dc8 <__udivdi3+0x186>
    6dc0:	aa 0c       	add	r10, r10
    6dc2:	bb 1c       	adc	r11, r11
    6dc4:	cc 1c       	adc	r12, r12
    6dc6:	dd 1c       	adc	r13, r13
    6dc8:	ea 94       	dec	r14
    6dca:	d2 f7       	brpl	.-12     	; 0x6dc0 <__udivdi3+0x17e>
    6dcc:	ad a6       	std	Y+45, r10	; 0x2d
    6dce:	be a6       	std	Y+46, r11	; 0x2e
    6dd0:	cf a6       	std	Y+47, r12	; 0x2f
    6dd2:	d8 aa       	std	Y+48, r13	; 0x30
    6dd4:	62 01       	movw	r12, r4
    6dd6:	ee 24       	eor	r14, r14
    6dd8:	ff 24       	eor	r15, r15
    6dda:	cd aa       	std	Y+53, r12	; 0x35
    6ddc:	de aa       	std	Y+54, r13	; 0x36
    6dde:	ef aa       	std	Y+55, r14	; 0x37
    6de0:	f8 ae       	std	Y+56, r15	; 0x38
    6de2:	92 01       	movw	r18, r4
    6de4:	81 01       	movw	r16, r2
    6de6:	20 70       	andi	r18, 0x00	; 0
    6de8:	30 70       	andi	r19, 0x00	; 0
    6dea:	09 af       	std	Y+57, r16	; 0x39
    6dec:	1a af       	std	Y+58, r17	; 0x3a
    6dee:	2b af       	std	Y+59, r18	; 0x3b
    6df0:	3c af       	std	Y+60, r19	; 0x3c
    6df2:	c4 01       	movw	r24, r8
    6df4:	b3 01       	movw	r22, r6
    6df6:	a7 01       	movw	r20, r14
    6df8:	96 01       	movw	r18, r12
    6dfa:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    6dfe:	7b 01       	movw	r14, r22
    6e00:	8c 01       	movw	r16, r24
    6e02:	c4 01       	movw	r24, r8
    6e04:	b3 01       	movw	r22, r6
    6e06:	2d a9       	ldd	r18, Y+53	; 0x35
    6e08:	3e a9       	ldd	r19, Y+54	; 0x36
    6e0a:	4f a9       	ldd	r20, Y+55	; 0x37
    6e0c:	58 ad       	ldd	r21, Y+56	; 0x38
    6e0e:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    6e12:	c9 01       	movw	r24, r18
    6e14:	da 01       	movw	r26, r20
    6e16:	3c 01       	movw	r6, r24
    6e18:	4d 01       	movw	r8, r26
    6e1a:	c4 01       	movw	r24, r8
    6e1c:	b3 01       	movw	r22, r6
    6e1e:	29 ad       	ldd	r18, Y+57	; 0x39
    6e20:	3a ad       	ldd	r19, Y+58	; 0x3a
    6e22:	4b ad       	ldd	r20, Y+59	; 0x3b
    6e24:	5c ad       	ldd	r21, Y+60	; 0x3c
    6e26:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    6e2a:	9b 01       	movw	r18, r22
    6e2c:	ac 01       	movw	r20, r24
    6e2e:	87 01       	movw	r16, r14
    6e30:	ff 24       	eor	r15, r15
    6e32:	ee 24       	eor	r14, r14
    6e34:	ad a4       	ldd	r10, Y+45	; 0x2d
    6e36:	be a4       	ldd	r11, Y+46	; 0x2e
    6e38:	cf a4       	ldd	r12, Y+47	; 0x2f
    6e3a:	d8 a8       	ldd	r13, Y+48	; 0x30
    6e3c:	c6 01       	movw	r24, r12
    6e3e:	aa 27       	eor	r26, r26
    6e40:	bb 27       	eor	r27, r27
    6e42:	57 01       	movw	r10, r14
    6e44:	68 01       	movw	r12, r16
    6e46:	a8 2a       	or	r10, r24
    6e48:	b9 2a       	or	r11, r25
    6e4a:	ca 2a       	or	r12, r26
    6e4c:	db 2a       	or	r13, r27
    6e4e:	a2 16       	cp	r10, r18
    6e50:	b3 06       	cpc	r11, r19
    6e52:	c4 06       	cpc	r12, r20
    6e54:	d5 06       	cpc	r13, r21
    6e56:	e0 f4       	brcc	.+56     	; 0x6e90 <__udivdi3+0x24e>
    6e58:	08 94       	sec
    6e5a:	61 08       	sbc	r6, r1
    6e5c:	71 08       	sbc	r7, r1
    6e5e:	81 08       	sbc	r8, r1
    6e60:	91 08       	sbc	r9, r1
    6e62:	a2 0c       	add	r10, r2
    6e64:	b3 1c       	adc	r11, r3
    6e66:	c4 1c       	adc	r12, r4
    6e68:	d5 1c       	adc	r13, r5
    6e6a:	a2 14       	cp	r10, r2
    6e6c:	b3 04       	cpc	r11, r3
    6e6e:	c4 04       	cpc	r12, r4
    6e70:	d5 04       	cpc	r13, r5
    6e72:	70 f0       	brcs	.+28     	; 0x6e90 <__udivdi3+0x24e>
    6e74:	a2 16       	cp	r10, r18
    6e76:	b3 06       	cpc	r11, r19
    6e78:	c4 06       	cpc	r12, r20
    6e7a:	d5 06       	cpc	r13, r21
    6e7c:	48 f4       	brcc	.+18     	; 0x6e90 <__udivdi3+0x24e>
    6e7e:	08 94       	sec
    6e80:	61 08       	sbc	r6, r1
    6e82:	71 08       	sbc	r7, r1
    6e84:	81 08       	sbc	r8, r1
    6e86:	91 08       	sbc	r9, r1
    6e88:	a2 0c       	add	r10, r2
    6e8a:	b3 1c       	adc	r11, r3
    6e8c:	c4 1c       	adc	r12, r4
    6e8e:	d5 1c       	adc	r13, r5
    6e90:	a2 1a       	sub	r10, r18
    6e92:	b3 0a       	sbc	r11, r19
    6e94:	c4 0a       	sbc	r12, r20
    6e96:	d5 0a       	sbc	r13, r21
    6e98:	c6 01       	movw	r24, r12
    6e9a:	b5 01       	movw	r22, r10
    6e9c:	2d a9       	ldd	r18, Y+53	; 0x35
    6e9e:	3e a9       	ldd	r19, Y+54	; 0x36
    6ea0:	4f a9       	ldd	r20, Y+55	; 0x37
    6ea2:	58 ad       	ldd	r21, Y+56	; 0x38
    6ea4:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    6ea8:	7b 01       	movw	r14, r22
    6eaa:	8c 01       	movw	r16, r24
    6eac:	c6 01       	movw	r24, r12
    6eae:	b5 01       	movw	r22, r10
    6eb0:	2d a9       	ldd	r18, Y+53	; 0x35
    6eb2:	3e a9       	ldd	r19, Y+54	; 0x36
    6eb4:	4f a9       	ldd	r20, Y+55	; 0x37
    6eb6:	58 ad       	ldd	r21, Y+56	; 0x38
    6eb8:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    6ebc:	c9 01       	movw	r24, r18
    6ebe:	da 01       	movw	r26, r20
    6ec0:	5c 01       	movw	r10, r24
    6ec2:	6d 01       	movw	r12, r26
    6ec4:	c6 01       	movw	r24, r12
    6ec6:	b5 01       	movw	r22, r10
    6ec8:	29 ad       	ldd	r18, Y+57	; 0x39
    6eca:	3a ad       	ldd	r19, Y+58	; 0x3a
    6ecc:	4b ad       	ldd	r20, Y+59	; 0x3b
    6ece:	5c ad       	ldd	r21, Y+60	; 0x3c
    6ed0:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    6ed4:	9b 01       	movw	r18, r22
    6ed6:	ac 01       	movw	r20, r24
    6ed8:	87 01       	movw	r16, r14
    6eda:	ff 24       	eor	r15, r15
    6edc:	ee 24       	eor	r14, r14
    6ede:	8d a5       	ldd	r24, Y+45	; 0x2d
    6ee0:	9e a5       	ldd	r25, Y+46	; 0x2e
    6ee2:	af a5       	ldd	r26, Y+47	; 0x2f
    6ee4:	b8 a9       	ldd	r27, Y+48	; 0x30
    6ee6:	a0 70       	andi	r26, 0x00	; 0
    6ee8:	b0 70       	andi	r27, 0x00	; 0
    6eea:	e8 2a       	or	r14, r24
    6eec:	f9 2a       	or	r15, r25
    6eee:	0a 2b       	or	r16, r26
    6ef0:	1b 2b       	or	r17, r27
    6ef2:	e2 16       	cp	r14, r18
    6ef4:	f3 06       	cpc	r15, r19
    6ef6:	04 07       	cpc	r16, r20
    6ef8:	15 07       	cpc	r17, r21
    6efa:	c0 f4       	brcc	.+48     	; 0x6f2c <__udivdi3+0x2ea>
    6efc:	08 94       	sec
    6efe:	a1 08       	sbc	r10, r1
    6f00:	b1 08       	sbc	r11, r1
    6f02:	c1 08       	sbc	r12, r1
    6f04:	d1 08       	sbc	r13, r1
    6f06:	e2 0c       	add	r14, r2
    6f08:	f3 1c       	adc	r15, r3
    6f0a:	04 1d       	adc	r16, r4
    6f0c:	15 1d       	adc	r17, r5
    6f0e:	e2 14       	cp	r14, r2
    6f10:	f3 04       	cpc	r15, r3
    6f12:	04 05       	cpc	r16, r4
    6f14:	15 05       	cpc	r17, r5
    6f16:	50 f0       	brcs	.+20     	; 0x6f2c <__udivdi3+0x2ea>
    6f18:	e2 16       	cp	r14, r18
    6f1a:	f3 06       	cpc	r15, r19
    6f1c:	04 07       	cpc	r16, r20
    6f1e:	15 07       	cpc	r17, r21
    6f20:	28 f4       	brcc	.+10     	; 0x6f2c <__udivdi3+0x2ea>
    6f22:	08 94       	sec
    6f24:	a1 08       	sbc	r10, r1
    6f26:	b1 08       	sbc	r11, r1
    6f28:	c1 08       	sbc	r12, r1
    6f2a:	d1 08       	sbc	r13, r1
    6f2c:	d3 01       	movw	r26, r6
    6f2e:	99 27       	eor	r25, r25
    6f30:	88 27       	eor	r24, r24
    6f32:	86 01       	movw	r16, r12
    6f34:	75 01       	movw	r14, r10
    6f36:	e8 2a       	or	r14, r24
    6f38:	f9 2a       	or	r15, r25
    6f3a:	0a 2b       	or	r16, r26
    6f3c:	1b 2b       	or	r17, r27
    6f3e:	e9 aa       	std	Y+49, r14	; 0x31
    6f40:	fa aa       	std	Y+50, r15	; 0x32
    6f42:	0b ab       	std	Y+51, r16	; 0x33
    6f44:	1c ab       	std	Y+52, r17	; 0x34
    6f46:	cf c4       	rjmp	.+2462   	; 0x78e6 <__udivdi3+0xca4>
    6f48:	21 14       	cp	r2, r1
    6f4a:	31 04       	cpc	r3, r1
    6f4c:	41 04       	cpc	r4, r1
    6f4e:	51 04       	cpc	r5, r1
    6f50:	71 f4       	brne	.+28     	; 0x6f6e <__udivdi3+0x32c>
    6f52:	61 e0       	ldi	r22, 0x01	; 1
    6f54:	70 e0       	ldi	r23, 0x00	; 0
    6f56:	80 e0       	ldi	r24, 0x00	; 0
    6f58:	90 e0       	ldi	r25, 0x00	; 0
    6f5a:	20 e0       	ldi	r18, 0x00	; 0
    6f5c:	30 e0       	ldi	r19, 0x00	; 0
    6f5e:	40 e0       	ldi	r20, 0x00	; 0
    6f60:	50 e0       	ldi	r21, 0x00	; 0
    6f62:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    6f66:	c9 01       	movw	r24, r18
    6f68:	da 01       	movw	r26, r20
    6f6a:	1c 01       	movw	r2, r24
    6f6c:	2d 01       	movw	r4, r26
    6f6e:	00 e0       	ldi	r16, 0x00	; 0
    6f70:	20 16       	cp	r2, r16
    6f72:	00 e0       	ldi	r16, 0x00	; 0
    6f74:	30 06       	cpc	r3, r16
    6f76:	01 e0       	ldi	r16, 0x01	; 1
    6f78:	40 06       	cpc	r4, r16
    6f7a:	00 e0       	ldi	r16, 0x00	; 0
    6f7c:	50 06       	cpc	r5, r16
    6f7e:	88 f4       	brcc	.+34     	; 0x6fa2 <__udivdi3+0x360>
    6f80:	1f ef       	ldi	r17, 0xFF	; 255
    6f82:	21 16       	cp	r2, r17
    6f84:	31 04       	cpc	r3, r1
    6f86:	41 04       	cpc	r4, r1
    6f88:	51 04       	cpc	r5, r1
    6f8a:	31 f0       	breq	.+12     	; 0x6f98 <__udivdi3+0x356>
    6f8c:	28 f0       	brcs	.+10     	; 0x6f98 <__udivdi3+0x356>
    6f8e:	48 e0       	ldi	r20, 0x08	; 8
    6f90:	50 e0       	ldi	r21, 0x00	; 0
    6f92:	60 e0       	ldi	r22, 0x00	; 0
    6f94:	70 e0       	ldi	r23, 0x00	; 0
    6f96:	17 c0       	rjmp	.+46     	; 0x6fc6 <__udivdi3+0x384>
    6f98:	40 e0       	ldi	r20, 0x00	; 0
    6f9a:	50 e0       	ldi	r21, 0x00	; 0
    6f9c:	60 e0       	ldi	r22, 0x00	; 0
    6f9e:	70 e0       	ldi	r23, 0x00	; 0
    6fa0:	12 c0       	rjmp	.+36     	; 0x6fc6 <__udivdi3+0x384>
    6fa2:	20 e0       	ldi	r18, 0x00	; 0
    6fa4:	22 16       	cp	r2, r18
    6fa6:	20 e0       	ldi	r18, 0x00	; 0
    6fa8:	32 06       	cpc	r3, r18
    6faa:	20 e0       	ldi	r18, 0x00	; 0
    6fac:	42 06       	cpc	r4, r18
    6fae:	21 e0       	ldi	r18, 0x01	; 1
    6fb0:	52 06       	cpc	r5, r18
    6fb2:	28 f0       	brcs	.+10     	; 0x6fbe <__udivdi3+0x37c>
    6fb4:	48 e1       	ldi	r20, 0x18	; 24
    6fb6:	50 e0       	ldi	r21, 0x00	; 0
    6fb8:	60 e0       	ldi	r22, 0x00	; 0
    6fba:	70 e0       	ldi	r23, 0x00	; 0
    6fbc:	04 c0       	rjmp	.+8      	; 0x6fc6 <__udivdi3+0x384>
    6fbe:	40 e1       	ldi	r20, 0x10	; 16
    6fc0:	50 e0       	ldi	r21, 0x00	; 0
    6fc2:	60 e0       	ldi	r22, 0x00	; 0
    6fc4:	70 e0       	ldi	r23, 0x00	; 0
    6fc6:	d2 01       	movw	r26, r4
    6fc8:	c1 01       	movw	r24, r2
    6fca:	04 2e       	mov	r0, r20
    6fcc:	04 c0       	rjmp	.+8      	; 0x6fd6 <__udivdi3+0x394>
    6fce:	b6 95       	lsr	r27
    6fd0:	a7 95       	ror	r26
    6fd2:	97 95       	ror	r25
    6fd4:	87 95       	ror	r24
    6fd6:	0a 94       	dec	r0
    6fd8:	d2 f7       	brpl	.-12     	; 0x6fce <__udivdi3+0x38c>
    6fda:	80 50       	subi	r24, 0x00	; 0
    6fdc:	90 4e       	sbci	r25, 0xE0	; 224
    6fde:	dc 01       	movw	r26, r24
    6fe0:	2c 91       	ld	r18, X
    6fe2:	e0 e2       	ldi	r30, 0x20	; 32
    6fe4:	ee 2e       	mov	r14, r30
    6fe6:	f1 2c       	mov	r15, r1
    6fe8:	01 2d       	mov	r16, r1
    6fea:	11 2d       	mov	r17, r1
    6fec:	d8 01       	movw	r26, r16
    6fee:	c7 01       	movw	r24, r14
    6ff0:	84 1b       	sub	r24, r20
    6ff2:	95 0b       	sbc	r25, r21
    6ff4:	a6 0b       	sbc	r26, r22
    6ff6:	b7 0b       	sbc	r27, r23
    6ff8:	82 1b       	sub	r24, r18
    6ffa:	91 09       	sbc	r25, r1
    6ffc:	a1 09       	sbc	r26, r1
    6ffe:	b1 09       	sbc	r27, r1
    7000:	00 97       	sbiw	r24, 0x00	; 0
    7002:	a1 05       	cpc	r26, r1
    7004:	b1 05       	cpc	r27, r1
    7006:	61 f4       	brne	.+24     	; 0x7020 <__udivdi3+0x3de>
    7008:	64 01       	movw	r12, r8
    700a:	53 01       	movw	r10, r6
    700c:	a2 18       	sub	r10, r2
    700e:	b3 08       	sbc	r11, r3
    7010:	c4 08       	sbc	r12, r4
    7012:	d5 08       	sbc	r13, r5
    7014:	31 e0       	ldi	r19, 0x01	; 1
    7016:	63 2e       	mov	r6, r19
    7018:	71 2c       	mov	r7, r1
    701a:	81 2c       	mov	r8, r1
    701c:	91 2c       	mov	r9, r1
    701e:	1e c1       	rjmp	.+572    	; 0x725c <__udivdi3+0x61a>
    7020:	6f 96       	adiw	r28, 0x1f	; 31
    7022:	8f af       	std	Y+63, r24	; 0x3f
    7024:	6f 97       	sbiw	r28, 0x1f	; 31
    7026:	08 2e       	mov	r0, r24
    7028:	04 c0       	rjmp	.+8      	; 0x7032 <__udivdi3+0x3f0>
    702a:	22 0c       	add	r2, r2
    702c:	33 1c       	adc	r3, r3
    702e:	44 1c       	adc	r4, r4
    7030:	55 1c       	adc	r5, r5
    7032:	0a 94       	dec	r0
    7034:	d2 f7       	brpl	.-12     	; 0x702a <__udivdi3+0x3e8>
    7036:	ee 2d       	mov	r30, r14
    7038:	e8 1b       	sub	r30, r24
    703a:	64 01       	movw	r12, r8
    703c:	53 01       	movw	r10, r6
    703e:	0e 2e       	mov	r0, r30
    7040:	04 c0       	rjmp	.+8      	; 0x704a <__udivdi3+0x408>
    7042:	d6 94       	lsr	r13
    7044:	c7 94       	ror	r12
    7046:	b7 94       	ror	r11
    7048:	a7 94       	ror	r10
    704a:	0a 94       	dec	r0
    704c:	d2 f7       	brpl	.-12     	; 0x7042 <__udivdi3+0x400>
    704e:	a4 01       	movw	r20, r8
    7050:	93 01       	movw	r18, r6
    7052:	6f 96       	adiw	r28, 0x1f	; 31
    7054:	0f ac       	ldd	r0, Y+63	; 0x3f
    7056:	6f 97       	sbiw	r28, 0x1f	; 31
    7058:	04 c0       	rjmp	.+8      	; 0x7062 <__udivdi3+0x420>
    705a:	22 0f       	add	r18, r18
    705c:	33 1f       	adc	r19, r19
    705e:	44 1f       	adc	r20, r20
    7060:	55 1f       	adc	r21, r21
    7062:	0a 94       	dec	r0
    7064:	d2 f7       	brpl	.-12     	; 0x705a <__udivdi3+0x418>
    7066:	6d a4       	ldd	r6, Y+45	; 0x2d
    7068:	7e a4       	ldd	r7, Y+46	; 0x2e
    706a:	8f a4       	ldd	r8, Y+47	; 0x2f
    706c:	98 a8       	ldd	r9, Y+48	; 0x30
    706e:	0e 2e       	mov	r0, r30
    7070:	04 c0       	rjmp	.+8      	; 0x707a <__udivdi3+0x438>
    7072:	96 94       	lsr	r9
    7074:	87 94       	ror	r8
    7076:	77 94       	ror	r7
    7078:	67 94       	ror	r6
    707a:	0a 94       	dec	r0
    707c:	d2 f7       	brpl	.-12     	; 0x7072 <__udivdi3+0x430>
    707e:	84 01       	movw	r16, r8
    7080:	73 01       	movw	r14, r6
    7082:	e2 2a       	or	r14, r18
    7084:	f3 2a       	or	r15, r19
    7086:	04 2b       	or	r16, r20
    7088:	15 2b       	or	r17, r21
    708a:	e9 a6       	std	Y+41, r14	; 0x29
    708c:	fa a6       	std	Y+42, r15	; 0x2a
    708e:	0b a7       	std	Y+43, r16	; 0x2b
    7090:	1c a7       	std	Y+44, r17	; 0x2c
    7092:	32 01       	movw	r6, r4
    7094:	88 24       	eor	r8, r8
    7096:	99 24       	eor	r9, r9
    7098:	92 01       	movw	r18, r4
    709a:	81 01       	movw	r16, r2
    709c:	20 70       	andi	r18, 0x00	; 0
    709e:	30 70       	andi	r19, 0x00	; 0
    70a0:	21 96       	adiw	r28, 0x01	; 1
    70a2:	0c af       	std	Y+60, r16	; 0x3c
    70a4:	1d af       	std	Y+61, r17	; 0x3d
    70a6:	2e af       	std	Y+62, r18	; 0x3e
    70a8:	3f af       	std	Y+63, r19	; 0x3f
    70aa:	21 97       	sbiw	r28, 0x01	; 1
    70ac:	c6 01       	movw	r24, r12
    70ae:	b5 01       	movw	r22, r10
    70b0:	a4 01       	movw	r20, r8
    70b2:	93 01       	movw	r18, r6
    70b4:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    70b8:	7b 01       	movw	r14, r22
    70ba:	8c 01       	movw	r16, r24
    70bc:	c6 01       	movw	r24, r12
    70be:	b5 01       	movw	r22, r10
    70c0:	a4 01       	movw	r20, r8
    70c2:	93 01       	movw	r18, r6
    70c4:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    70c8:	c9 01       	movw	r24, r18
    70ca:	da 01       	movw	r26, r20
    70cc:	25 96       	adiw	r28, 0x05	; 5
    70ce:	8c af       	std	Y+60, r24	; 0x3c
    70d0:	9d af       	std	Y+61, r25	; 0x3d
    70d2:	ae af       	std	Y+62, r26	; 0x3e
    70d4:	bf af       	std	Y+63, r27	; 0x3f
    70d6:	25 97       	sbiw	r28, 0x05	; 5
    70d8:	bc 01       	movw	r22, r24
    70da:	cd 01       	movw	r24, r26
    70dc:	21 96       	adiw	r28, 0x01	; 1
    70de:	2c ad       	ldd	r18, Y+60	; 0x3c
    70e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    70e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    70e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    70e6:	21 97       	sbiw	r28, 0x01	; 1
    70e8:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    70ec:	9b 01       	movw	r18, r22
    70ee:	ac 01       	movw	r20, r24
    70f0:	87 01       	movw	r16, r14
    70f2:	ff 24       	eor	r15, r15
    70f4:	ee 24       	eor	r14, r14
    70f6:	a9 a4       	ldd	r10, Y+41	; 0x29
    70f8:	ba a4       	ldd	r11, Y+42	; 0x2a
    70fa:	cb a4       	ldd	r12, Y+43	; 0x2b
    70fc:	dc a4       	ldd	r13, Y+44	; 0x2c
    70fe:	c6 01       	movw	r24, r12
    7100:	aa 27       	eor	r26, r26
    7102:	bb 27       	eor	r27, r27
    7104:	5c 01       	movw	r10, r24
    7106:	6d 01       	movw	r12, r26
    7108:	ae 28       	or	r10, r14
    710a:	bf 28       	or	r11, r15
    710c:	c0 2a       	or	r12, r16
    710e:	d1 2a       	or	r13, r17
    7110:	a2 16       	cp	r10, r18
    7112:	b3 06       	cpc	r11, r19
    7114:	c4 06       	cpc	r12, r20
    7116:	d5 06       	cpc	r13, r21
    7118:	60 f5       	brcc	.+88     	; 0x7172 <__udivdi3+0x530>
    711a:	25 96       	adiw	r28, 0x05	; 5
    711c:	6c ad       	ldd	r22, Y+60	; 0x3c
    711e:	7d ad       	ldd	r23, Y+61	; 0x3d
    7120:	8e ad       	ldd	r24, Y+62	; 0x3e
    7122:	9f ad       	ldd	r25, Y+63	; 0x3f
    7124:	25 97       	sbiw	r28, 0x05	; 5
    7126:	61 50       	subi	r22, 0x01	; 1
    7128:	70 40       	sbci	r23, 0x00	; 0
    712a:	80 40       	sbci	r24, 0x00	; 0
    712c:	90 40       	sbci	r25, 0x00	; 0
    712e:	25 96       	adiw	r28, 0x05	; 5
    7130:	6c af       	std	Y+60, r22	; 0x3c
    7132:	7d af       	std	Y+61, r23	; 0x3d
    7134:	8e af       	std	Y+62, r24	; 0x3e
    7136:	9f af       	std	Y+63, r25	; 0x3f
    7138:	25 97       	sbiw	r28, 0x05	; 5
    713a:	a2 0c       	add	r10, r2
    713c:	b3 1c       	adc	r11, r3
    713e:	c4 1c       	adc	r12, r4
    7140:	d5 1c       	adc	r13, r5
    7142:	a2 14       	cp	r10, r2
    7144:	b3 04       	cpc	r11, r3
    7146:	c4 04       	cpc	r12, r4
    7148:	d5 04       	cpc	r13, r5
    714a:	98 f0       	brcs	.+38     	; 0x7172 <__udivdi3+0x530>
    714c:	a2 16       	cp	r10, r18
    714e:	b3 06       	cpc	r11, r19
    7150:	c4 06       	cpc	r12, r20
    7152:	d5 06       	cpc	r13, r21
    7154:	70 f4       	brcc	.+28     	; 0x7172 <__udivdi3+0x530>
    7156:	61 50       	subi	r22, 0x01	; 1
    7158:	70 40       	sbci	r23, 0x00	; 0
    715a:	80 40       	sbci	r24, 0x00	; 0
    715c:	90 40       	sbci	r25, 0x00	; 0
    715e:	25 96       	adiw	r28, 0x05	; 5
    7160:	6c af       	std	Y+60, r22	; 0x3c
    7162:	7d af       	std	Y+61, r23	; 0x3d
    7164:	8e af       	std	Y+62, r24	; 0x3e
    7166:	9f af       	std	Y+63, r25	; 0x3f
    7168:	25 97       	sbiw	r28, 0x05	; 5
    716a:	a2 0c       	add	r10, r2
    716c:	b3 1c       	adc	r11, r3
    716e:	c4 1c       	adc	r12, r4
    7170:	d5 1c       	adc	r13, r5
    7172:	a2 1a       	sub	r10, r18
    7174:	b3 0a       	sbc	r11, r19
    7176:	c4 0a       	sbc	r12, r20
    7178:	d5 0a       	sbc	r13, r21
    717a:	c6 01       	movw	r24, r12
    717c:	b5 01       	movw	r22, r10
    717e:	a4 01       	movw	r20, r8
    7180:	93 01       	movw	r18, r6
    7182:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    7186:	7b 01       	movw	r14, r22
    7188:	8c 01       	movw	r16, r24
    718a:	c6 01       	movw	r24, r12
    718c:	b5 01       	movw	r22, r10
    718e:	a4 01       	movw	r20, r8
    7190:	93 01       	movw	r18, r6
    7192:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    7196:	c9 01       	movw	r24, r18
    7198:	da 01       	movw	r26, r20
    719a:	3c 01       	movw	r6, r24
    719c:	4d 01       	movw	r8, r26
    719e:	c4 01       	movw	r24, r8
    71a0:	b3 01       	movw	r22, r6
    71a2:	21 96       	adiw	r28, 0x01	; 1
    71a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    71a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    71a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    71aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    71ac:	21 97       	sbiw	r28, 0x01	; 1
    71ae:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    71b2:	9b 01       	movw	r18, r22
    71b4:	ac 01       	movw	r20, r24
    71b6:	87 01       	movw	r16, r14
    71b8:	ff 24       	eor	r15, r15
    71ba:	ee 24       	eor	r14, r14
    71bc:	89 a5       	ldd	r24, Y+41	; 0x29
    71be:	9a a5       	ldd	r25, Y+42	; 0x2a
    71c0:	ab a5       	ldd	r26, Y+43	; 0x2b
    71c2:	bc a5       	ldd	r27, Y+44	; 0x2c
    71c4:	a0 70       	andi	r26, 0x00	; 0
    71c6:	b0 70       	andi	r27, 0x00	; 0
    71c8:	57 01       	movw	r10, r14
    71ca:	68 01       	movw	r12, r16
    71cc:	a8 2a       	or	r10, r24
    71ce:	b9 2a       	or	r11, r25
    71d0:	ca 2a       	or	r12, r26
    71d2:	db 2a       	or	r13, r27
    71d4:	a2 16       	cp	r10, r18
    71d6:	b3 06       	cpc	r11, r19
    71d8:	c4 06       	cpc	r12, r20
    71da:	d5 06       	cpc	r13, r21
    71dc:	e0 f4       	brcc	.+56     	; 0x7216 <__udivdi3+0x5d4>
    71de:	08 94       	sec
    71e0:	61 08       	sbc	r6, r1
    71e2:	71 08       	sbc	r7, r1
    71e4:	81 08       	sbc	r8, r1
    71e6:	91 08       	sbc	r9, r1
    71e8:	a2 0c       	add	r10, r2
    71ea:	b3 1c       	adc	r11, r3
    71ec:	c4 1c       	adc	r12, r4
    71ee:	d5 1c       	adc	r13, r5
    71f0:	a2 14       	cp	r10, r2
    71f2:	b3 04       	cpc	r11, r3
    71f4:	c4 04       	cpc	r12, r4
    71f6:	d5 04       	cpc	r13, r5
    71f8:	70 f0       	brcs	.+28     	; 0x7216 <__udivdi3+0x5d4>
    71fa:	a2 16       	cp	r10, r18
    71fc:	b3 06       	cpc	r11, r19
    71fe:	c4 06       	cpc	r12, r20
    7200:	d5 06       	cpc	r13, r21
    7202:	48 f4       	brcc	.+18     	; 0x7216 <__udivdi3+0x5d4>
    7204:	08 94       	sec
    7206:	61 08       	sbc	r6, r1
    7208:	71 08       	sbc	r7, r1
    720a:	81 08       	sbc	r8, r1
    720c:	91 08       	sbc	r9, r1
    720e:	a2 0c       	add	r10, r2
    7210:	b3 1c       	adc	r11, r3
    7212:	c4 1c       	adc	r12, r4
    7214:	d5 1c       	adc	r13, r5
    7216:	8d a5       	ldd	r24, Y+45	; 0x2d
    7218:	9e a5       	ldd	r25, Y+46	; 0x2e
    721a:	af a5       	ldd	r26, Y+47	; 0x2f
    721c:	b8 a9       	ldd	r27, Y+48	; 0x30
    721e:	6f 96       	adiw	r28, 0x1f	; 31
    7220:	0f ac       	ldd	r0, Y+63	; 0x3f
    7222:	6f 97       	sbiw	r28, 0x1f	; 31
    7224:	04 c0       	rjmp	.+8      	; 0x722e <__udivdi3+0x5ec>
    7226:	88 0f       	add	r24, r24
    7228:	99 1f       	adc	r25, r25
    722a:	aa 1f       	adc	r26, r26
    722c:	bb 1f       	adc	r27, r27
    722e:	0a 94       	dec	r0
    7230:	d2 f7       	brpl	.-12     	; 0x7226 <__udivdi3+0x5e4>
    7232:	8d a7       	std	Y+45, r24	; 0x2d
    7234:	9e a7       	std	Y+46, r25	; 0x2e
    7236:	af a7       	std	Y+47, r26	; 0x2f
    7238:	b8 ab       	std	Y+48, r27	; 0x30
    723a:	a2 1a       	sub	r10, r18
    723c:	b3 0a       	sbc	r11, r19
    723e:	c4 0a       	sbc	r12, r20
    7240:	d5 0a       	sbc	r13, r21
    7242:	25 96       	adiw	r28, 0x05	; 5
    7244:	ec ac       	ldd	r14, Y+60	; 0x3c
    7246:	fd ac       	ldd	r15, Y+61	; 0x3d
    7248:	0e ad       	ldd	r16, Y+62	; 0x3e
    724a:	1f ad       	ldd	r17, Y+63	; 0x3f
    724c:	25 97       	sbiw	r28, 0x05	; 5
    724e:	d7 01       	movw	r26, r14
    7250:	99 27       	eor	r25, r25
    7252:	88 27       	eor	r24, r24
    7254:	68 2a       	or	r6, r24
    7256:	79 2a       	or	r7, r25
    7258:	8a 2a       	or	r8, r26
    725a:	9b 2a       	or	r9, r27
    725c:	82 01       	movw	r16, r4
    725e:	22 27       	eor	r18, r18
    7260:	33 27       	eor	r19, r19
    7262:	29 96       	adiw	r28, 0x09	; 9
    7264:	0c af       	std	Y+60, r16	; 0x3c
    7266:	1d af       	std	Y+61, r17	; 0x3d
    7268:	2e af       	std	Y+62, r18	; 0x3e
    726a:	3f af       	std	Y+63, r19	; 0x3f
    726c:	29 97       	sbiw	r28, 0x09	; 9
    726e:	a2 01       	movw	r20, r4
    7270:	91 01       	movw	r18, r2
    7272:	40 70       	andi	r20, 0x00	; 0
    7274:	50 70       	andi	r21, 0x00	; 0
    7276:	2d 96       	adiw	r28, 0x0d	; 13
    7278:	2c af       	std	Y+60, r18	; 0x3c
    727a:	3d af       	std	Y+61, r19	; 0x3d
    727c:	4e af       	std	Y+62, r20	; 0x3e
    727e:	5f af       	std	Y+63, r21	; 0x3f
    7280:	2d 97       	sbiw	r28, 0x0d	; 13
    7282:	c6 01       	movw	r24, r12
    7284:	b5 01       	movw	r22, r10
    7286:	29 96       	adiw	r28, 0x09	; 9
    7288:	2c ad       	ldd	r18, Y+60	; 0x3c
    728a:	3d ad       	ldd	r19, Y+61	; 0x3d
    728c:	4e ad       	ldd	r20, Y+62	; 0x3e
    728e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7290:	29 97       	sbiw	r28, 0x09	; 9
    7292:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    7296:	7b 01       	movw	r14, r22
    7298:	8c 01       	movw	r16, r24
    729a:	c6 01       	movw	r24, r12
    729c:	b5 01       	movw	r22, r10
    729e:	29 96       	adiw	r28, 0x09	; 9
    72a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    72a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    72a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    72a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    72a8:	29 97       	sbiw	r28, 0x09	; 9
    72aa:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    72ae:	c9 01       	movw	r24, r18
    72b0:	da 01       	movw	r26, r20
    72b2:	61 96       	adiw	r28, 0x11	; 17
    72b4:	8c af       	std	Y+60, r24	; 0x3c
    72b6:	9d af       	std	Y+61, r25	; 0x3d
    72b8:	ae af       	std	Y+62, r26	; 0x3e
    72ba:	bf af       	std	Y+63, r27	; 0x3f
    72bc:	61 97       	sbiw	r28, 0x11	; 17
    72be:	bc 01       	movw	r22, r24
    72c0:	cd 01       	movw	r24, r26
    72c2:	2d 96       	adiw	r28, 0x0d	; 13
    72c4:	2c ad       	ldd	r18, Y+60	; 0x3c
    72c6:	3d ad       	ldd	r19, Y+61	; 0x3d
    72c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    72ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    72cc:	2d 97       	sbiw	r28, 0x0d	; 13
    72ce:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    72d2:	9b 01       	movw	r18, r22
    72d4:	ac 01       	movw	r20, r24
    72d6:	87 01       	movw	r16, r14
    72d8:	ff 24       	eor	r15, r15
    72da:	ee 24       	eor	r14, r14
    72dc:	ad a4       	ldd	r10, Y+45	; 0x2d
    72de:	be a4       	ldd	r11, Y+46	; 0x2e
    72e0:	cf a4       	ldd	r12, Y+47	; 0x2f
    72e2:	d8 a8       	ldd	r13, Y+48	; 0x30
    72e4:	c6 01       	movw	r24, r12
    72e6:	aa 27       	eor	r26, r26
    72e8:	bb 27       	eor	r27, r27
    72ea:	57 01       	movw	r10, r14
    72ec:	68 01       	movw	r12, r16
    72ee:	a8 2a       	or	r10, r24
    72f0:	b9 2a       	or	r11, r25
    72f2:	ca 2a       	or	r12, r26
    72f4:	db 2a       	or	r13, r27
    72f6:	a2 16       	cp	r10, r18
    72f8:	b3 06       	cpc	r11, r19
    72fa:	c4 06       	cpc	r12, r20
    72fc:	d5 06       	cpc	r13, r21
    72fe:	60 f5       	brcc	.+88     	; 0x7358 <__udivdi3+0x716>
    7300:	61 96       	adiw	r28, 0x11	; 17
    7302:	6c ad       	ldd	r22, Y+60	; 0x3c
    7304:	7d ad       	ldd	r23, Y+61	; 0x3d
    7306:	8e ad       	ldd	r24, Y+62	; 0x3e
    7308:	9f ad       	ldd	r25, Y+63	; 0x3f
    730a:	61 97       	sbiw	r28, 0x11	; 17
    730c:	61 50       	subi	r22, 0x01	; 1
    730e:	70 40       	sbci	r23, 0x00	; 0
    7310:	80 40       	sbci	r24, 0x00	; 0
    7312:	90 40       	sbci	r25, 0x00	; 0
    7314:	61 96       	adiw	r28, 0x11	; 17
    7316:	6c af       	std	Y+60, r22	; 0x3c
    7318:	7d af       	std	Y+61, r23	; 0x3d
    731a:	8e af       	std	Y+62, r24	; 0x3e
    731c:	9f af       	std	Y+63, r25	; 0x3f
    731e:	61 97       	sbiw	r28, 0x11	; 17
    7320:	a2 0c       	add	r10, r2
    7322:	b3 1c       	adc	r11, r3
    7324:	c4 1c       	adc	r12, r4
    7326:	d5 1c       	adc	r13, r5
    7328:	a2 14       	cp	r10, r2
    732a:	b3 04       	cpc	r11, r3
    732c:	c4 04       	cpc	r12, r4
    732e:	d5 04       	cpc	r13, r5
    7330:	98 f0       	brcs	.+38     	; 0x7358 <__udivdi3+0x716>
    7332:	a2 16       	cp	r10, r18
    7334:	b3 06       	cpc	r11, r19
    7336:	c4 06       	cpc	r12, r20
    7338:	d5 06       	cpc	r13, r21
    733a:	70 f4       	brcc	.+28     	; 0x7358 <__udivdi3+0x716>
    733c:	61 50       	subi	r22, 0x01	; 1
    733e:	70 40       	sbci	r23, 0x00	; 0
    7340:	80 40       	sbci	r24, 0x00	; 0
    7342:	90 40       	sbci	r25, 0x00	; 0
    7344:	61 96       	adiw	r28, 0x11	; 17
    7346:	6c af       	std	Y+60, r22	; 0x3c
    7348:	7d af       	std	Y+61, r23	; 0x3d
    734a:	8e af       	std	Y+62, r24	; 0x3e
    734c:	9f af       	std	Y+63, r25	; 0x3f
    734e:	61 97       	sbiw	r28, 0x11	; 17
    7350:	a2 0c       	add	r10, r2
    7352:	b3 1c       	adc	r11, r3
    7354:	c4 1c       	adc	r12, r4
    7356:	d5 1c       	adc	r13, r5
    7358:	a2 1a       	sub	r10, r18
    735a:	b3 0a       	sbc	r11, r19
    735c:	c4 0a       	sbc	r12, r20
    735e:	d5 0a       	sbc	r13, r21
    7360:	c6 01       	movw	r24, r12
    7362:	b5 01       	movw	r22, r10
    7364:	29 96       	adiw	r28, 0x09	; 9
    7366:	2c ad       	ldd	r18, Y+60	; 0x3c
    7368:	3d ad       	ldd	r19, Y+61	; 0x3d
    736a:	4e ad       	ldd	r20, Y+62	; 0x3e
    736c:	5f ad       	ldd	r21, Y+63	; 0x3f
    736e:	29 97       	sbiw	r28, 0x09	; 9
    7370:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    7374:	7b 01       	movw	r14, r22
    7376:	8c 01       	movw	r16, r24
    7378:	c6 01       	movw	r24, r12
    737a:	b5 01       	movw	r22, r10
    737c:	29 96       	adiw	r28, 0x09	; 9
    737e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7380:	3d ad       	ldd	r19, Y+61	; 0x3d
    7382:	4e ad       	ldd	r20, Y+62	; 0x3e
    7384:	5f ad       	ldd	r21, Y+63	; 0x3f
    7386:	29 97       	sbiw	r28, 0x09	; 9
    7388:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    738c:	c9 01       	movw	r24, r18
    738e:	da 01       	movw	r26, r20
    7390:	5c 01       	movw	r10, r24
    7392:	6d 01       	movw	r12, r26
    7394:	c6 01       	movw	r24, r12
    7396:	b5 01       	movw	r22, r10
    7398:	2d 96       	adiw	r28, 0x0d	; 13
    739a:	2c ad       	ldd	r18, Y+60	; 0x3c
    739c:	3d ad       	ldd	r19, Y+61	; 0x3d
    739e:	4e ad       	ldd	r20, Y+62	; 0x3e
    73a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    73a2:	2d 97       	sbiw	r28, 0x0d	; 13
    73a4:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    73a8:	9b 01       	movw	r18, r22
    73aa:	ac 01       	movw	r20, r24
    73ac:	87 01       	movw	r16, r14
    73ae:	ff 24       	eor	r15, r15
    73b0:	ee 24       	eor	r14, r14
    73b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    73b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    73b6:	af a5       	ldd	r26, Y+47	; 0x2f
    73b8:	b8 a9       	ldd	r27, Y+48	; 0x30
    73ba:	a0 70       	andi	r26, 0x00	; 0
    73bc:	b0 70       	andi	r27, 0x00	; 0
    73be:	e8 2a       	or	r14, r24
    73c0:	f9 2a       	or	r15, r25
    73c2:	0a 2b       	or	r16, r26
    73c4:	1b 2b       	or	r17, r27
    73c6:	e2 16       	cp	r14, r18
    73c8:	f3 06       	cpc	r15, r19
    73ca:	04 07       	cpc	r16, r20
    73cc:	15 07       	cpc	r17, r21
    73ce:	c0 f4       	brcc	.+48     	; 0x7400 <__udivdi3+0x7be>
    73d0:	08 94       	sec
    73d2:	a1 08       	sbc	r10, r1
    73d4:	b1 08       	sbc	r11, r1
    73d6:	c1 08       	sbc	r12, r1
    73d8:	d1 08       	sbc	r13, r1
    73da:	e2 0c       	add	r14, r2
    73dc:	f3 1c       	adc	r15, r3
    73de:	04 1d       	adc	r16, r4
    73e0:	15 1d       	adc	r17, r5
    73e2:	e2 14       	cp	r14, r2
    73e4:	f3 04       	cpc	r15, r3
    73e6:	04 05       	cpc	r16, r4
    73e8:	15 05       	cpc	r17, r5
    73ea:	50 f0       	brcs	.+20     	; 0x7400 <__udivdi3+0x7be>
    73ec:	e2 16       	cp	r14, r18
    73ee:	f3 06       	cpc	r15, r19
    73f0:	04 07       	cpc	r16, r20
    73f2:	15 07       	cpc	r17, r21
    73f4:	28 f4       	brcc	.+10     	; 0x7400 <__udivdi3+0x7be>
    73f6:	08 94       	sec
    73f8:	a1 08       	sbc	r10, r1
    73fa:	b1 08       	sbc	r11, r1
    73fc:	c1 08       	sbc	r12, r1
    73fe:	d1 08       	sbc	r13, r1
    7400:	61 96       	adiw	r28, 0x11	; 17
    7402:	ec ac       	ldd	r14, Y+60	; 0x3c
    7404:	fd ac       	ldd	r15, Y+61	; 0x3d
    7406:	0e ad       	ldd	r16, Y+62	; 0x3e
    7408:	1f ad       	ldd	r17, Y+63	; 0x3f
    740a:	61 97       	sbiw	r28, 0x11	; 17
    740c:	d7 01       	movw	r26, r14
    740e:	99 27       	eor	r25, r25
    7410:	88 27       	eor	r24, r24
    7412:	96 01       	movw	r18, r12
    7414:	85 01       	movw	r16, r10
    7416:	08 2b       	or	r16, r24
    7418:	19 2b       	or	r17, r25
    741a:	2a 2b       	or	r18, r26
    741c:	3b 2b       	or	r19, r27
    741e:	09 ab       	std	Y+49, r16	; 0x31
    7420:	1a ab       	std	Y+50, r17	; 0x32
    7422:	2b ab       	std	Y+51, r18	; 0x33
    7424:	3c ab       	std	Y+52, r19	; 0x34
    7426:	62 c2       	rjmp	.+1220   	; 0x78ec <__udivdi3+0xcaa>
    7428:	6e 14       	cp	r6, r14
    742a:	7f 04       	cpc	r7, r15
    742c:	80 06       	cpc	r8, r16
    742e:	91 06       	cpc	r9, r17
    7430:	08 f4       	brcc	.+2      	; 0x7434 <__udivdi3+0x7f2>
    7432:	51 c2       	rjmp	.+1186   	; 0x78d6 <__udivdi3+0xc94>
    7434:	20 e0       	ldi	r18, 0x00	; 0
    7436:	e2 16       	cp	r14, r18
    7438:	20 e0       	ldi	r18, 0x00	; 0
    743a:	f2 06       	cpc	r15, r18
    743c:	21 e0       	ldi	r18, 0x01	; 1
    743e:	02 07       	cpc	r16, r18
    7440:	20 e0       	ldi	r18, 0x00	; 0
    7442:	12 07       	cpc	r17, r18
    7444:	88 f4       	brcc	.+34     	; 0x7468 <__udivdi3+0x826>
    7446:	3f ef       	ldi	r19, 0xFF	; 255
    7448:	e3 16       	cp	r14, r19
    744a:	f1 04       	cpc	r15, r1
    744c:	01 05       	cpc	r16, r1
    744e:	11 05       	cpc	r17, r1
    7450:	31 f0       	breq	.+12     	; 0x745e <__udivdi3+0x81c>
    7452:	28 f0       	brcs	.+10     	; 0x745e <__udivdi3+0x81c>
    7454:	48 e0       	ldi	r20, 0x08	; 8
    7456:	50 e0       	ldi	r21, 0x00	; 0
    7458:	60 e0       	ldi	r22, 0x00	; 0
    745a:	70 e0       	ldi	r23, 0x00	; 0
    745c:	17 c0       	rjmp	.+46     	; 0x748c <__udivdi3+0x84a>
    745e:	40 e0       	ldi	r20, 0x00	; 0
    7460:	50 e0       	ldi	r21, 0x00	; 0
    7462:	60 e0       	ldi	r22, 0x00	; 0
    7464:	70 e0       	ldi	r23, 0x00	; 0
    7466:	12 c0       	rjmp	.+36     	; 0x748c <__udivdi3+0x84a>
    7468:	40 e0       	ldi	r20, 0x00	; 0
    746a:	e4 16       	cp	r14, r20
    746c:	40 e0       	ldi	r20, 0x00	; 0
    746e:	f4 06       	cpc	r15, r20
    7470:	40 e0       	ldi	r20, 0x00	; 0
    7472:	04 07       	cpc	r16, r20
    7474:	41 e0       	ldi	r20, 0x01	; 1
    7476:	14 07       	cpc	r17, r20
    7478:	28 f0       	brcs	.+10     	; 0x7484 <__udivdi3+0x842>
    747a:	48 e1       	ldi	r20, 0x18	; 24
    747c:	50 e0       	ldi	r21, 0x00	; 0
    747e:	60 e0       	ldi	r22, 0x00	; 0
    7480:	70 e0       	ldi	r23, 0x00	; 0
    7482:	04 c0       	rjmp	.+8      	; 0x748c <__udivdi3+0x84a>
    7484:	40 e1       	ldi	r20, 0x10	; 16
    7486:	50 e0       	ldi	r21, 0x00	; 0
    7488:	60 e0       	ldi	r22, 0x00	; 0
    748a:	70 e0       	ldi	r23, 0x00	; 0
    748c:	d8 01       	movw	r26, r16
    748e:	c7 01       	movw	r24, r14
    7490:	04 2e       	mov	r0, r20
    7492:	04 c0       	rjmp	.+8      	; 0x749c <__udivdi3+0x85a>
    7494:	b6 95       	lsr	r27
    7496:	a7 95       	ror	r26
    7498:	97 95       	ror	r25
    749a:	87 95       	ror	r24
    749c:	0a 94       	dec	r0
    749e:	d2 f7       	brpl	.-12     	; 0x7494 <__udivdi3+0x852>
    74a0:	80 50       	subi	r24, 0x00	; 0
    74a2:	90 4e       	sbci	r25, 0xE0	; 224
    74a4:	dc 01       	movw	r26, r24
    74a6:	2c 91       	ld	r18, X
    74a8:	30 e2       	ldi	r19, 0x20	; 32
    74aa:	a3 2e       	mov	r10, r19
    74ac:	b1 2c       	mov	r11, r1
    74ae:	c1 2c       	mov	r12, r1
    74b0:	d1 2c       	mov	r13, r1
    74b2:	d6 01       	movw	r26, r12
    74b4:	c5 01       	movw	r24, r10
    74b6:	84 1b       	sub	r24, r20
    74b8:	95 0b       	sbc	r25, r21
    74ba:	a6 0b       	sbc	r26, r22
    74bc:	b7 0b       	sbc	r27, r23
    74be:	82 1b       	sub	r24, r18
    74c0:	91 09       	sbc	r25, r1
    74c2:	a1 09       	sbc	r26, r1
    74c4:	b1 09       	sbc	r27, r1
    74c6:	00 97       	sbiw	r24, 0x00	; 0
    74c8:	a1 05       	cpc	r26, r1
    74ca:	b1 05       	cpc	r27, r1
    74cc:	89 f4       	brne	.+34     	; 0x74f0 <__udivdi3+0x8ae>
    74ce:	e6 14       	cp	r14, r6
    74d0:	f7 04       	cpc	r15, r7
    74d2:	08 05       	cpc	r16, r8
    74d4:	19 05       	cpc	r17, r9
    74d6:	08 f4       	brcc	.+2      	; 0x74da <__udivdi3+0x898>
    74d8:	f2 c1       	rjmp	.+996    	; 0x78be <__udivdi3+0xc7c>
    74da:	6d a4       	ldd	r6, Y+45	; 0x2d
    74dc:	7e a4       	ldd	r7, Y+46	; 0x2e
    74de:	8f a4       	ldd	r8, Y+47	; 0x2f
    74e0:	98 a8       	ldd	r9, Y+48	; 0x30
    74e2:	62 14       	cp	r6, r2
    74e4:	73 04       	cpc	r7, r3
    74e6:	84 04       	cpc	r8, r4
    74e8:	95 04       	cpc	r9, r5
    74ea:	08 f0       	brcs	.+2      	; 0x74ee <__udivdi3+0x8ac>
    74ec:	e8 c1       	rjmp	.+976    	; 0x78be <__udivdi3+0xc7c>
    74ee:	f3 c1       	rjmp	.+998    	; 0x78d6 <__udivdi3+0xc94>
    74f0:	6e 96       	adiw	r28, 0x1e	; 30
    74f2:	8f af       	std	Y+63, r24	; 0x3f
    74f4:	6e 97       	sbiw	r28, 0x1e	; 30
    74f6:	08 2e       	mov	r0, r24
    74f8:	04 c0       	rjmp	.+8      	; 0x7502 <__udivdi3+0x8c0>
    74fa:	ee 0c       	add	r14, r14
    74fc:	ff 1c       	adc	r15, r15
    74fe:	00 1f       	adc	r16, r16
    7500:	11 1f       	adc	r17, r17
    7502:	0a 94       	dec	r0
    7504:	d2 f7       	brpl	.-12     	; 0x74fa <__udivdi3+0x8b8>
    7506:	6a 2d       	mov	r22, r10
    7508:	68 1b       	sub	r22, r24
    750a:	d2 01       	movw	r26, r4
    750c:	c1 01       	movw	r24, r2
    750e:	06 2e       	mov	r0, r22
    7510:	04 c0       	rjmp	.+8      	; 0x751a <__udivdi3+0x8d8>
    7512:	b6 95       	lsr	r27
    7514:	a7 95       	ror	r26
    7516:	97 95       	ror	r25
    7518:	87 95       	ror	r24
    751a:	0a 94       	dec	r0
    751c:	d2 f7       	brpl	.-12     	; 0x7512 <__udivdi3+0x8d0>
    751e:	5c 01       	movw	r10, r24
    7520:	6d 01       	movw	r12, r26
    7522:	ae 28       	or	r10, r14
    7524:	bf 28       	or	r11, r15
    7526:	c0 2a       	or	r12, r16
    7528:	d1 2a       	or	r13, r17
    752a:	ad a2       	std	Y+37, r10	; 0x25
    752c:	be a2       	std	Y+38, r11	; 0x26
    752e:	cf a2       	std	Y+39, r12	; 0x27
    7530:	d8 a6       	std	Y+40, r13	; 0x28
    7532:	72 01       	movw	r14, r4
    7534:	61 01       	movw	r12, r2
    7536:	6e 96       	adiw	r28, 0x1e	; 30
    7538:	0f ac       	ldd	r0, Y+63	; 0x3f
    753a:	6e 97       	sbiw	r28, 0x1e	; 30
    753c:	04 c0       	rjmp	.+8      	; 0x7546 <__udivdi3+0x904>
    753e:	cc 0c       	add	r12, r12
    7540:	dd 1c       	adc	r13, r13
    7542:	ee 1c       	adc	r14, r14
    7544:	ff 1c       	adc	r15, r15
    7546:	0a 94       	dec	r0
    7548:	d2 f7       	brpl	.-12     	; 0x753e <__udivdi3+0x8fc>
    754a:	c9 a2       	std	Y+33, r12	; 0x21
    754c:	da a2       	std	Y+34, r13	; 0x22
    754e:	eb a2       	std	Y+35, r14	; 0x23
    7550:	fc a2       	std	Y+36, r15	; 0x24
    7552:	64 01       	movw	r12, r8
    7554:	53 01       	movw	r10, r6
    7556:	06 2e       	mov	r0, r22
    7558:	04 c0       	rjmp	.+8      	; 0x7562 <__udivdi3+0x920>
    755a:	d6 94       	lsr	r13
    755c:	c7 94       	ror	r12
    755e:	b7 94       	ror	r11
    7560:	a7 94       	ror	r10
    7562:	0a 94       	dec	r0
    7564:	d2 f7       	brpl	.-12     	; 0x755a <__udivdi3+0x918>
    7566:	d4 01       	movw	r26, r8
    7568:	c3 01       	movw	r24, r6
    756a:	6e 96       	adiw	r28, 0x1e	; 30
    756c:	0f ac       	ldd	r0, Y+63	; 0x3f
    756e:	6e 97       	sbiw	r28, 0x1e	; 30
    7570:	04 c0       	rjmp	.+8      	; 0x757a <__udivdi3+0x938>
    7572:	88 0f       	add	r24, r24
    7574:	99 1f       	adc	r25, r25
    7576:	aa 1f       	adc	r26, r26
    7578:	bb 1f       	adc	r27, r27
    757a:	0a 94       	dec	r0
    757c:	d2 f7       	brpl	.-12     	; 0x7572 <__udivdi3+0x930>
    757e:	ed a4       	ldd	r14, Y+45	; 0x2d
    7580:	fe a4       	ldd	r15, Y+46	; 0x2e
    7582:	0f a5       	ldd	r16, Y+47	; 0x2f
    7584:	18 a9       	ldd	r17, Y+48	; 0x30
    7586:	04 c0       	rjmp	.+8      	; 0x7590 <__udivdi3+0x94e>
    7588:	16 95       	lsr	r17
    758a:	07 95       	ror	r16
    758c:	f7 94       	ror	r15
    758e:	e7 94       	ror	r14
    7590:	6a 95       	dec	r22
    7592:	d2 f7       	brpl	.-12     	; 0x7588 <__udivdi3+0x946>
    7594:	37 01       	movw	r6, r14
    7596:	48 01       	movw	r8, r16
    7598:	68 2a       	or	r6, r24
    759a:	79 2a       	or	r7, r25
    759c:	8a 2a       	or	r8, r26
    759e:	9b 2a       	or	r9, r27
    75a0:	6d 8e       	std	Y+29, r6	; 0x1d
    75a2:	7e 8e       	std	Y+30, r7	; 0x1e
    75a4:	8f 8e       	std	Y+31, r8	; 0x1f
    75a6:	98 a2       	std	Y+32, r9	; 0x20
    75a8:	ed a0       	ldd	r14, Y+37	; 0x25
    75aa:	fe a0       	ldd	r15, Y+38	; 0x26
    75ac:	0f a1       	ldd	r16, Y+39	; 0x27
    75ae:	18 a5       	ldd	r17, Y+40	; 0x28
    75b0:	38 01       	movw	r6, r16
    75b2:	88 24       	eor	r8, r8
    75b4:	99 24       	eor	r9, r9
    75b6:	98 01       	movw	r18, r16
    75b8:	87 01       	movw	r16, r14
    75ba:	20 70       	andi	r18, 0x00	; 0
    75bc:	30 70       	andi	r19, 0x00	; 0
    75be:	65 96       	adiw	r28, 0x15	; 21
    75c0:	0c af       	std	Y+60, r16	; 0x3c
    75c2:	1d af       	std	Y+61, r17	; 0x3d
    75c4:	2e af       	std	Y+62, r18	; 0x3e
    75c6:	3f af       	std	Y+63, r19	; 0x3f
    75c8:	65 97       	sbiw	r28, 0x15	; 21
    75ca:	c6 01       	movw	r24, r12
    75cc:	b5 01       	movw	r22, r10
    75ce:	a4 01       	movw	r20, r8
    75d0:	93 01       	movw	r18, r6
    75d2:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    75d6:	7b 01       	movw	r14, r22
    75d8:	8c 01       	movw	r16, r24
    75da:	c6 01       	movw	r24, r12
    75dc:	b5 01       	movw	r22, r10
    75de:	a4 01       	movw	r20, r8
    75e0:	93 01       	movw	r18, r6
    75e2:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    75e6:	c9 01       	movw	r24, r18
    75e8:	da 01       	movw	r26, r20
    75ea:	1c 01       	movw	r2, r24
    75ec:	2d 01       	movw	r4, r26
    75ee:	c2 01       	movw	r24, r4
    75f0:	b1 01       	movw	r22, r2
    75f2:	65 96       	adiw	r28, 0x15	; 21
    75f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    75f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    75f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    75fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    75fc:	65 97       	sbiw	r28, 0x15	; 21
    75fe:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    7602:	9b 01       	movw	r18, r22
    7604:	ac 01       	movw	r20, r24
    7606:	87 01       	movw	r16, r14
    7608:	ff 24       	eor	r15, r15
    760a:	ee 24       	eor	r14, r14
    760c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    760e:	be 8c       	ldd	r11, Y+30	; 0x1e
    7610:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7612:	d8 a0       	ldd	r13, Y+32	; 0x20
    7614:	c6 01       	movw	r24, r12
    7616:	aa 27       	eor	r26, r26
    7618:	bb 27       	eor	r27, r27
    761a:	57 01       	movw	r10, r14
    761c:	68 01       	movw	r12, r16
    761e:	a8 2a       	or	r10, r24
    7620:	b9 2a       	or	r11, r25
    7622:	ca 2a       	or	r12, r26
    7624:	db 2a       	or	r13, r27
    7626:	a2 16       	cp	r10, r18
    7628:	b3 06       	cpc	r11, r19
    762a:	c4 06       	cpc	r12, r20
    762c:	d5 06       	cpc	r13, r21
    762e:	00 f5       	brcc	.+64     	; 0x7670 <__udivdi3+0xa2e>
    7630:	08 94       	sec
    7632:	21 08       	sbc	r2, r1
    7634:	31 08       	sbc	r3, r1
    7636:	41 08       	sbc	r4, r1
    7638:	51 08       	sbc	r5, r1
    763a:	ed a0       	ldd	r14, Y+37	; 0x25
    763c:	fe a0       	ldd	r15, Y+38	; 0x26
    763e:	0f a1       	ldd	r16, Y+39	; 0x27
    7640:	18 a5       	ldd	r17, Y+40	; 0x28
    7642:	ae 0c       	add	r10, r14
    7644:	bf 1c       	adc	r11, r15
    7646:	c0 1e       	adc	r12, r16
    7648:	d1 1e       	adc	r13, r17
    764a:	ae 14       	cp	r10, r14
    764c:	bf 04       	cpc	r11, r15
    764e:	c0 06       	cpc	r12, r16
    7650:	d1 06       	cpc	r13, r17
    7652:	70 f0       	brcs	.+28     	; 0x7670 <__udivdi3+0xa2e>
    7654:	a2 16       	cp	r10, r18
    7656:	b3 06       	cpc	r11, r19
    7658:	c4 06       	cpc	r12, r20
    765a:	d5 06       	cpc	r13, r21
    765c:	48 f4       	brcc	.+18     	; 0x7670 <__udivdi3+0xa2e>
    765e:	08 94       	sec
    7660:	21 08       	sbc	r2, r1
    7662:	31 08       	sbc	r3, r1
    7664:	41 08       	sbc	r4, r1
    7666:	51 08       	sbc	r5, r1
    7668:	ae 0c       	add	r10, r14
    766a:	bf 1c       	adc	r11, r15
    766c:	c0 1e       	adc	r12, r16
    766e:	d1 1e       	adc	r13, r17
    7670:	a2 1a       	sub	r10, r18
    7672:	b3 0a       	sbc	r11, r19
    7674:	c4 0a       	sbc	r12, r20
    7676:	d5 0a       	sbc	r13, r21
    7678:	c6 01       	movw	r24, r12
    767a:	b5 01       	movw	r22, r10
    767c:	a4 01       	movw	r20, r8
    767e:	93 01       	movw	r18, r6
    7680:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    7684:	7b 01       	movw	r14, r22
    7686:	8c 01       	movw	r16, r24
    7688:	c6 01       	movw	r24, r12
    768a:	b5 01       	movw	r22, r10
    768c:	a4 01       	movw	r20, r8
    768e:	93 01       	movw	r18, r6
    7690:	0e 94 92 44 	call	0x8924	; 0x8924 <__udivmodsi4>
    7694:	c9 01       	movw	r24, r18
    7696:	da 01       	movw	r26, r20
    7698:	3c 01       	movw	r6, r24
    769a:	4d 01       	movw	r8, r26
    769c:	c4 01       	movw	r24, r8
    769e:	b3 01       	movw	r22, r6
    76a0:	65 96       	adiw	r28, 0x15	; 21
    76a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    76a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    76a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    76a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    76aa:	65 97       	sbiw	r28, 0x15	; 21
    76ac:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    76b0:	9b 01       	movw	r18, r22
    76b2:	ac 01       	movw	r20, r24
    76b4:	87 01       	movw	r16, r14
    76b6:	ff 24       	eor	r15, r15
    76b8:	ee 24       	eor	r14, r14
    76ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    76bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    76be:	af 8d       	ldd	r26, Y+31	; 0x1f
    76c0:	b8 a1       	ldd	r27, Y+32	; 0x20
    76c2:	a0 70       	andi	r26, 0x00	; 0
    76c4:	b0 70       	andi	r27, 0x00	; 0
    76c6:	57 01       	movw	r10, r14
    76c8:	68 01       	movw	r12, r16
    76ca:	a8 2a       	or	r10, r24
    76cc:	b9 2a       	or	r11, r25
    76ce:	ca 2a       	or	r12, r26
    76d0:	db 2a       	or	r13, r27
    76d2:	a2 16       	cp	r10, r18
    76d4:	b3 06       	cpc	r11, r19
    76d6:	c4 06       	cpc	r12, r20
    76d8:	d5 06       	cpc	r13, r21
    76da:	00 f5       	brcc	.+64     	; 0x771c <__udivdi3+0xada>
    76dc:	08 94       	sec
    76de:	61 08       	sbc	r6, r1
    76e0:	71 08       	sbc	r7, r1
    76e2:	81 08       	sbc	r8, r1
    76e4:	91 08       	sbc	r9, r1
    76e6:	6d a1       	ldd	r22, Y+37	; 0x25
    76e8:	7e a1       	ldd	r23, Y+38	; 0x26
    76ea:	8f a1       	ldd	r24, Y+39	; 0x27
    76ec:	98 a5       	ldd	r25, Y+40	; 0x28
    76ee:	a6 0e       	add	r10, r22
    76f0:	b7 1e       	adc	r11, r23
    76f2:	c8 1e       	adc	r12, r24
    76f4:	d9 1e       	adc	r13, r25
    76f6:	a6 16       	cp	r10, r22
    76f8:	b7 06       	cpc	r11, r23
    76fa:	c8 06       	cpc	r12, r24
    76fc:	d9 06       	cpc	r13, r25
    76fe:	70 f0       	brcs	.+28     	; 0x771c <__udivdi3+0xada>
    7700:	a2 16       	cp	r10, r18
    7702:	b3 06       	cpc	r11, r19
    7704:	c4 06       	cpc	r12, r20
    7706:	d5 06       	cpc	r13, r21
    7708:	48 f4       	brcc	.+18     	; 0x771c <__udivdi3+0xada>
    770a:	08 94       	sec
    770c:	61 08       	sbc	r6, r1
    770e:	71 08       	sbc	r7, r1
    7710:	81 08       	sbc	r8, r1
    7712:	91 08       	sbc	r9, r1
    7714:	a6 0e       	add	r10, r22
    7716:	b7 1e       	adc	r11, r23
    7718:	c8 1e       	adc	r12, r24
    771a:	d9 1e       	adc	r13, r25
    771c:	d6 01       	movw	r26, r12
    771e:	c5 01       	movw	r24, r10
    7720:	82 1b       	sub	r24, r18
    7722:	93 0b       	sbc	r25, r19
    7724:	a4 0b       	sbc	r26, r20
    7726:	b5 0b       	sbc	r27, r21
    7728:	89 8f       	std	Y+25, r24	; 0x19
    772a:	9a 8f       	std	Y+26, r25	; 0x1a
    772c:	ab 8f       	std	Y+27, r26	; 0x1b
    772e:	bc 8f       	std	Y+28, r27	; 0x1c
    7730:	d1 01       	movw	r26, r2
    7732:	99 27       	eor	r25, r25
    7734:	88 27       	eor	r24, r24
    7736:	64 01       	movw	r12, r8
    7738:	53 01       	movw	r10, r6
    773a:	a8 2a       	or	r10, r24
    773c:	b9 2a       	or	r11, r25
    773e:	ca 2a       	or	r12, r26
    7740:	db 2a       	or	r13, r27
    7742:	a9 aa       	std	Y+49, r10	; 0x31
    7744:	ba aa       	std	Y+50, r11	; 0x32
    7746:	cb aa       	std	Y+51, r12	; 0x33
    7748:	dc aa       	std	Y+52, r13	; 0x34
    774a:	86 01       	movw	r16, r12
    774c:	75 01       	movw	r14, r10
    774e:	2f ef       	ldi	r18, 0xFF	; 255
    7750:	3f ef       	ldi	r19, 0xFF	; 255
    7752:	40 e0       	ldi	r20, 0x00	; 0
    7754:	50 e0       	ldi	r21, 0x00	; 0
    7756:	e2 22       	and	r14, r18
    7758:	f3 22       	and	r15, r19
    775a:	04 23       	and	r16, r20
    775c:	15 23       	and	r17, r21
    775e:	a6 01       	movw	r20, r12
    7760:	66 27       	eor	r22, r22
    7762:	77 27       	eor	r23, r23
    7764:	6d 96       	adiw	r28, 0x1d	; 29
    7766:	4c af       	std	Y+60, r20	; 0x3c
    7768:	5d af       	std	Y+61, r21	; 0x3d
    776a:	6e af       	std	Y+62, r22	; 0x3e
    776c:	7f af       	std	Y+63, r23	; 0x3f
    776e:	6d 97       	sbiw	r28, 0x1d	; 29
    7770:	a9 a0       	ldd	r10, Y+33	; 0x21
    7772:	ba a0       	ldd	r11, Y+34	; 0x22
    7774:	cb a0       	ldd	r12, Y+35	; 0x23
    7776:	dc a0       	ldd	r13, Y+36	; 0x24
    7778:	6f ef       	ldi	r22, 0xFF	; 255
    777a:	7f ef       	ldi	r23, 0xFF	; 255
    777c:	80 e0       	ldi	r24, 0x00	; 0
    777e:	90 e0       	ldi	r25, 0x00	; 0
    7780:	a6 22       	and	r10, r22
    7782:	b7 22       	and	r11, r23
    7784:	c8 22       	and	r12, r24
    7786:	d9 22       	and	r13, r25
    7788:	89 a1       	ldd	r24, Y+33	; 0x21
    778a:	9a a1       	ldd	r25, Y+34	; 0x22
    778c:	ab a1       	ldd	r26, Y+35	; 0x23
    778e:	bc a1       	ldd	r27, Y+36	; 0x24
    7790:	1d 01       	movw	r2, r26
    7792:	44 24       	eor	r4, r4
    7794:	55 24       	eor	r5, r5
    7796:	c8 01       	movw	r24, r16
    7798:	b7 01       	movw	r22, r14
    779a:	a6 01       	movw	r20, r12
    779c:	95 01       	movw	r18, r10
    779e:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    77a2:	69 96       	adiw	r28, 0x19	; 25
    77a4:	6c af       	std	Y+60, r22	; 0x3c
    77a6:	7d af       	std	Y+61, r23	; 0x3d
    77a8:	8e af       	std	Y+62, r24	; 0x3e
    77aa:	9f af       	std	Y+63, r25	; 0x3f
    77ac:	69 97       	sbiw	r28, 0x19	; 25
    77ae:	c8 01       	movw	r24, r16
    77b0:	b7 01       	movw	r22, r14
    77b2:	a2 01       	movw	r20, r4
    77b4:	91 01       	movw	r18, r2
    77b6:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    77ba:	3b 01       	movw	r6, r22
    77bc:	4c 01       	movw	r8, r24
    77be:	6d 96       	adiw	r28, 0x1d	; 29
    77c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    77c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    77c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    77c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    77c8:	6d 97       	sbiw	r28, 0x1d	; 29
    77ca:	a6 01       	movw	r20, r12
    77cc:	95 01       	movw	r18, r10
    77ce:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    77d2:	7b 01       	movw	r14, r22
    77d4:	8c 01       	movw	r16, r24
    77d6:	6d 96       	adiw	r28, 0x1d	; 29
    77d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    77da:	7d ad       	ldd	r23, Y+61	; 0x3d
    77dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    77de:	9f ad       	ldd	r25, Y+63	; 0x3f
    77e0:	6d 97       	sbiw	r28, 0x1d	; 29
    77e2:	a2 01       	movw	r20, r4
    77e4:	91 01       	movw	r18, r2
    77e6:	0e 94 73 44 	call	0x88e6	; 0x88e6 <__mulsi3>
    77ea:	5b 01       	movw	r10, r22
    77ec:	6c 01       	movw	r12, r24
    77ee:	a8 01       	movw	r20, r16
    77f0:	97 01       	movw	r18, r14
    77f2:	26 0d       	add	r18, r6
    77f4:	37 1d       	adc	r19, r7
    77f6:	48 1d       	adc	r20, r8
    77f8:	59 1d       	adc	r21, r9
    77fa:	69 96       	adiw	r28, 0x19	; 25
    77fc:	6c ac       	ldd	r6, Y+60	; 0x3c
    77fe:	7d ac       	ldd	r7, Y+61	; 0x3d
    7800:	8e ac       	ldd	r8, Y+62	; 0x3e
    7802:	9f ac       	ldd	r9, Y+63	; 0x3f
    7804:	69 97       	sbiw	r28, 0x19	; 25
    7806:	c4 01       	movw	r24, r8
    7808:	aa 27       	eor	r26, r26
    780a:	bb 27       	eor	r27, r27
    780c:	28 0f       	add	r18, r24
    780e:	39 1f       	adc	r19, r25
    7810:	4a 1f       	adc	r20, r26
    7812:	5b 1f       	adc	r21, r27
    7814:	2e 15       	cp	r18, r14
    7816:	3f 05       	cpc	r19, r15
    7818:	40 07       	cpc	r20, r16
    781a:	51 07       	cpc	r21, r17
    781c:	48 f4       	brcc	.+18     	; 0x7830 <__udivdi3+0xbee>
    781e:	e1 2c       	mov	r14, r1
    7820:	f1 2c       	mov	r15, r1
    7822:	61 e0       	ldi	r22, 0x01	; 1
    7824:	06 2f       	mov	r16, r22
    7826:	11 2d       	mov	r17, r1
    7828:	ae 0c       	add	r10, r14
    782a:	bf 1c       	adc	r11, r15
    782c:	c0 1e       	adc	r12, r16
    782e:	d1 1e       	adc	r13, r17
    7830:	ca 01       	movw	r24, r20
    7832:	aa 27       	eor	r26, r26
    7834:	bb 27       	eor	r27, r27
    7836:	bc 01       	movw	r22, r24
    7838:	cd 01       	movw	r24, r26
    783a:	6a 0d       	add	r22, r10
    783c:	7b 1d       	adc	r23, r11
    783e:	8c 1d       	adc	r24, r12
    7840:	9d 1d       	adc	r25, r13
    7842:	69 8c       	ldd	r6, Y+25	; 0x19
    7844:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7846:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7848:	9c 8c       	ldd	r9, Y+28	; 0x1c
    784a:	66 16       	cp	r6, r22
    784c:	77 06       	cpc	r7, r23
    784e:	88 06       	cpc	r8, r24
    7850:	99 06       	cpc	r9, r25
    7852:	40 f1       	brcs	.+80     	; 0x78a4 <__udivdi3+0xc62>
    7854:	66 15       	cp	r22, r6
    7856:	77 05       	cpc	r23, r7
    7858:	88 05       	cpc	r24, r8
    785a:	99 05       	cpc	r25, r9
    785c:	09 f0       	breq	.+2      	; 0x7860 <__udivdi3+0xc1e>
    785e:	43 c0       	rjmp	.+134    	; 0x78e6 <__udivdi3+0xca4>
    7860:	d9 01       	movw	r26, r18
    7862:	99 27       	eor	r25, r25
    7864:	88 27       	eor	r24, r24
    7866:	69 96       	adiw	r28, 0x19	; 25
    7868:	2c ad       	ldd	r18, Y+60	; 0x3c
    786a:	3d ad       	ldd	r19, Y+61	; 0x3d
    786c:	4e ad       	ldd	r20, Y+62	; 0x3e
    786e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7870:	69 97       	sbiw	r28, 0x19	; 25
    7872:	40 70       	andi	r20, 0x00	; 0
    7874:	50 70       	andi	r21, 0x00	; 0
    7876:	82 0f       	add	r24, r18
    7878:	93 1f       	adc	r25, r19
    787a:	a4 1f       	adc	r26, r20
    787c:	b5 1f       	adc	r27, r21
    787e:	2d a5       	ldd	r18, Y+45	; 0x2d
    7880:	3e a5       	ldd	r19, Y+46	; 0x2e
    7882:	4f a5       	ldd	r20, Y+47	; 0x2f
    7884:	58 a9       	ldd	r21, Y+48	; 0x30
    7886:	6e 96       	adiw	r28, 0x1e	; 30
    7888:	0f ac       	ldd	r0, Y+63	; 0x3f
    788a:	6e 97       	sbiw	r28, 0x1e	; 30
    788c:	04 c0       	rjmp	.+8      	; 0x7896 <__udivdi3+0xc54>
    788e:	22 0f       	add	r18, r18
    7890:	33 1f       	adc	r19, r19
    7892:	44 1f       	adc	r20, r20
    7894:	55 1f       	adc	r21, r21
    7896:	0a 94       	dec	r0
    7898:	d2 f7       	brpl	.-12     	; 0x788e <__udivdi3+0xc4c>
    789a:	28 17       	cp	r18, r24
    789c:	39 07       	cpc	r19, r25
    789e:	4a 07       	cpc	r20, r26
    78a0:	5b 07       	cpc	r21, r27
    78a2:	08 f5       	brcc	.+66     	; 0x78e6 <__udivdi3+0xca4>
    78a4:	09 a9       	ldd	r16, Y+49	; 0x31
    78a6:	1a a9       	ldd	r17, Y+50	; 0x32
    78a8:	2b a9       	ldd	r18, Y+51	; 0x33
    78aa:	3c a9       	ldd	r19, Y+52	; 0x34
    78ac:	01 50       	subi	r16, 0x01	; 1
    78ae:	10 40       	sbci	r17, 0x00	; 0
    78b0:	20 40       	sbci	r18, 0x00	; 0
    78b2:	30 40       	sbci	r19, 0x00	; 0
    78b4:	09 ab       	std	Y+49, r16	; 0x31
    78b6:	1a ab       	std	Y+50, r17	; 0x32
    78b8:	2b ab       	std	Y+51, r18	; 0x33
    78ba:	3c ab       	std	Y+52, r19	; 0x34
    78bc:	14 c0       	rjmp	.+40     	; 0x78e6 <__udivdi3+0xca4>
    78be:	66 24       	eor	r6, r6
    78c0:	77 24       	eor	r7, r7
    78c2:	43 01       	movw	r8, r6
    78c4:	21 e0       	ldi	r18, 0x01	; 1
    78c6:	30 e0       	ldi	r19, 0x00	; 0
    78c8:	40 e0       	ldi	r20, 0x00	; 0
    78ca:	50 e0       	ldi	r21, 0x00	; 0
    78cc:	29 ab       	std	Y+49, r18	; 0x31
    78ce:	3a ab       	std	Y+50, r19	; 0x32
    78d0:	4b ab       	std	Y+51, r20	; 0x33
    78d2:	5c ab       	std	Y+52, r21	; 0x34
    78d4:	0b c0       	rjmp	.+22     	; 0x78ec <__udivdi3+0xcaa>
    78d6:	66 24       	eor	r6, r6
    78d8:	77 24       	eor	r7, r7
    78da:	43 01       	movw	r8, r6
    78dc:	19 aa       	std	Y+49, r1	; 0x31
    78de:	1a aa       	std	Y+50, r1	; 0x32
    78e0:	1b aa       	std	Y+51, r1	; 0x33
    78e2:	1c aa       	std	Y+52, r1	; 0x34
    78e4:	03 c0       	rjmp	.+6      	; 0x78ec <__udivdi3+0xcaa>
    78e6:	66 24       	eor	r6, r6
    78e8:	77 24       	eor	r7, r7
    78ea:	43 01       	movw	r8, r6
    78ec:	fe 01       	movw	r30, r28
    78ee:	71 96       	adiw	r30, 0x11	; 17
    78f0:	88 e0       	ldi	r24, 0x08	; 8
    78f2:	df 01       	movw	r26, r30
    78f4:	1d 92       	st	X+, r1
    78f6:	8a 95       	dec	r24
    78f8:	e9 f7       	brne	.-6      	; 0x78f4 <__udivdi3+0xcb2>
    78fa:	a9 a8       	ldd	r10, Y+49	; 0x31
    78fc:	ba a8       	ldd	r11, Y+50	; 0x32
    78fe:	cb a8       	ldd	r12, Y+51	; 0x33
    7900:	dc a8       	ldd	r13, Y+52	; 0x34
    7902:	a9 8a       	std	Y+17, r10	; 0x11
    7904:	ba 8a       	std	Y+18, r11	; 0x12
    7906:	cb 8a       	std	Y+19, r12	; 0x13
    7908:	dc 8a       	std	Y+20, r13	; 0x14
    790a:	6d 8a       	std	Y+21, r6	; 0x15
    790c:	7e 8a       	std	Y+22, r7	; 0x16
    790e:	8f 8a       	std	Y+23, r8	; 0x17
    7910:	98 8e       	std	Y+24, r9	; 0x18
    7912:	29 a9       	ldd	r18, Y+49	; 0x31
    7914:	3a 89       	ldd	r19, Y+18	; 0x12
    7916:	4b 89       	ldd	r20, Y+19	; 0x13
    7918:	5c 89       	ldd	r21, Y+20	; 0x14
    791a:	66 2d       	mov	r22, r6
    791c:	7e 89       	ldd	r23, Y+22	; 0x16
    791e:	8f 89       	ldd	r24, Y+23	; 0x17
    7920:	98 8d       	ldd	r25, Y+24	; 0x18
    7922:	c2 5a       	subi	r28, 0xA2	; 162
    7924:	df 4f       	sbci	r29, 0xFF	; 255
    7926:	e2 e1       	ldi	r30, 0x12	; 18
    7928:	0c 94 d0 44 	jmp	0x89a0	; 0x89a0 <__epilogue_restores__>

0000792c <vfprintf>:
    792c:	2f 92       	push	r2
    792e:	3f 92       	push	r3
    7930:	4f 92       	push	r4
    7932:	5f 92       	push	r5
    7934:	6f 92       	push	r6
    7936:	7f 92       	push	r7
    7938:	8f 92       	push	r8
    793a:	9f 92       	push	r9
    793c:	af 92       	push	r10
    793e:	bf 92       	push	r11
    7940:	cf 92       	push	r12
    7942:	df 92       	push	r13
    7944:	ef 92       	push	r14
    7946:	ff 92       	push	r15
    7948:	0f 93       	push	r16
    794a:	1f 93       	push	r17
    794c:	df 93       	push	r29
    794e:	cf 93       	push	r28
    7950:	cd b7       	in	r28, 0x3d	; 61
    7952:	de b7       	in	r29, 0x3e	; 62
    7954:	61 97       	sbiw	r28, 0x11	; 17
    7956:	cd bf       	out	0x3d, r28	; 61
    7958:	de bf       	out	0x3e, r29	; 62
    795a:	3c 01       	movw	r6, r24
    795c:	6e 87       	std	Y+14, r22	; 0x0e
    795e:	7f 87       	std	Y+15, r23	; 0x0f
    7960:	6a 01       	movw	r12, r20
    7962:	fc 01       	movw	r30, r24
    7964:	16 82       	std	Z+6, r1	; 0x06
    7966:	17 82       	std	Z+7, r1	; 0x07
    7968:	83 81       	ldd	r24, Z+3	; 0x03
    796a:	81 fd       	sbrc	r24, 1
    796c:	03 c0       	rjmp	.+6      	; 0x7974 <vfprintf+0x48>
    796e:	6f ef       	ldi	r22, 0xFF	; 255
    7970:	7f ef       	ldi	r23, 0xFF	; 255
    7972:	6f c3       	rjmp	.+1758   	; 0x8052 <vfprintf+0x726>
    7974:	9e 01       	movw	r18, r28
    7976:	2f 5f       	subi	r18, 0xFF	; 255
    7978:	3f 4f       	sbci	r19, 0xFF	; 255
    797a:	28 8b       	std	Y+16, r18	; 0x10
    797c:	39 8b       	std	Y+17, r19	; 0x11
    797e:	f3 01       	movw	r30, r6
    7980:	23 81       	ldd	r18, Z+3	; 0x03
    7982:	ee 85       	ldd	r30, Y+14	; 0x0e
    7984:	ff 85       	ldd	r31, Y+15	; 0x0f
    7986:	23 fd       	sbrc	r18, 3
    7988:	85 91       	lpm	r24, Z+
    798a:	23 ff       	sbrs	r18, 3
    798c:	81 91       	ld	r24, Z+
    798e:	ee 87       	std	Y+14, r30	; 0x0e
    7990:	ff 87       	std	Y+15, r31	; 0x0f
    7992:	88 23       	and	r24, r24
    7994:	09 f4       	brne	.+2      	; 0x7998 <vfprintf+0x6c>
    7996:	5a c3       	rjmp	.+1716   	; 0x804c <vfprintf+0x720>
    7998:	85 32       	cpi	r24, 0x25	; 37
    799a:	51 f4       	brne	.+20     	; 0x79b0 <vfprintf+0x84>
    799c:	ee 85       	ldd	r30, Y+14	; 0x0e
    799e:	ff 85       	ldd	r31, Y+15	; 0x0f
    79a0:	23 fd       	sbrc	r18, 3
    79a2:	85 91       	lpm	r24, Z+
    79a4:	23 ff       	sbrs	r18, 3
    79a6:	81 91       	ld	r24, Z+
    79a8:	ee 87       	std	Y+14, r30	; 0x0e
    79aa:	ff 87       	std	Y+15, r31	; 0x0f
    79ac:	85 32       	cpi	r24, 0x25	; 37
    79ae:	29 f4       	brne	.+10     	; 0x79ba <vfprintf+0x8e>
    79b0:	90 e0       	ldi	r25, 0x00	; 0
    79b2:	b3 01       	movw	r22, r6
    79b4:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    79b8:	e2 cf       	rjmp	.-60     	; 0x797e <vfprintf+0x52>
    79ba:	98 2f       	mov	r25, r24
    79bc:	10 e0       	ldi	r17, 0x00	; 0
    79be:	88 24       	eor	r8, r8
    79c0:	99 24       	eor	r9, r9
    79c2:	10 32       	cpi	r17, 0x20	; 32
    79c4:	b0 f4       	brcc	.+44     	; 0x79f2 <vfprintf+0xc6>
    79c6:	9b 32       	cpi	r25, 0x2B	; 43
    79c8:	69 f0       	breq	.+26     	; 0x79e4 <vfprintf+0xb8>
    79ca:	9c 32       	cpi	r25, 0x2C	; 44
    79cc:	28 f4       	brcc	.+10     	; 0x79d8 <vfprintf+0xac>
    79ce:	90 32       	cpi	r25, 0x20	; 32
    79d0:	51 f0       	breq	.+20     	; 0x79e6 <vfprintf+0xba>
    79d2:	93 32       	cpi	r25, 0x23	; 35
    79d4:	71 f4       	brne	.+28     	; 0x79f2 <vfprintf+0xc6>
    79d6:	0b c0       	rjmp	.+22     	; 0x79ee <vfprintf+0xc2>
    79d8:	9d 32       	cpi	r25, 0x2D	; 45
    79da:	39 f0       	breq	.+14     	; 0x79ea <vfprintf+0xbe>
    79dc:	90 33       	cpi	r25, 0x30	; 48
    79de:	49 f4       	brne	.+18     	; 0x79f2 <vfprintf+0xc6>
    79e0:	11 60       	ori	r17, 0x01	; 1
    79e2:	28 c0       	rjmp	.+80     	; 0x7a34 <vfprintf+0x108>
    79e4:	12 60       	ori	r17, 0x02	; 2
    79e6:	14 60       	ori	r17, 0x04	; 4
    79e8:	25 c0       	rjmp	.+74     	; 0x7a34 <vfprintf+0x108>
    79ea:	18 60       	ori	r17, 0x08	; 8
    79ec:	23 c0       	rjmp	.+70     	; 0x7a34 <vfprintf+0x108>
    79ee:	10 61       	ori	r17, 0x10	; 16
    79f0:	21 c0       	rjmp	.+66     	; 0x7a34 <vfprintf+0x108>
    79f2:	17 fd       	sbrc	r17, 7
    79f4:	2a c0       	rjmp	.+84     	; 0x7a4a <vfprintf+0x11e>
    79f6:	89 2f       	mov	r24, r25
    79f8:	80 53       	subi	r24, 0x30	; 48
    79fa:	8a 30       	cpi	r24, 0x0A	; 10
    79fc:	78 f4       	brcc	.+30     	; 0x7a1c <vfprintf+0xf0>
    79fe:	16 ff       	sbrs	r17, 6
    7a00:	06 c0       	rjmp	.+12     	; 0x7a0e <vfprintf+0xe2>
    7a02:	fa e0       	ldi	r31, 0x0A	; 10
    7a04:	9f 9e       	mul	r9, r31
    7a06:	90 2c       	mov	r9, r0
    7a08:	11 24       	eor	r1, r1
    7a0a:	98 0e       	add	r9, r24
    7a0c:	13 c0       	rjmp	.+38     	; 0x7a34 <vfprintf+0x108>
    7a0e:	3a e0       	ldi	r19, 0x0A	; 10
    7a10:	83 9e       	mul	r8, r19
    7a12:	80 2c       	mov	r8, r0
    7a14:	11 24       	eor	r1, r1
    7a16:	88 0e       	add	r8, r24
    7a18:	10 62       	ori	r17, 0x20	; 32
    7a1a:	0c c0       	rjmp	.+24     	; 0x7a34 <vfprintf+0x108>
    7a1c:	9e 32       	cpi	r25, 0x2E	; 46
    7a1e:	21 f4       	brne	.+8      	; 0x7a28 <vfprintf+0xfc>
    7a20:	16 fd       	sbrc	r17, 6
    7a22:	14 c3       	rjmp	.+1576   	; 0x804c <vfprintf+0x720>
    7a24:	10 64       	ori	r17, 0x40	; 64
    7a26:	06 c0       	rjmp	.+12     	; 0x7a34 <vfprintf+0x108>
    7a28:	9c 36       	cpi	r25, 0x6C	; 108
    7a2a:	11 f4       	brne	.+4      	; 0x7a30 <vfprintf+0x104>
    7a2c:	10 68       	ori	r17, 0x80	; 128
    7a2e:	02 c0       	rjmp	.+4      	; 0x7a34 <vfprintf+0x108>
    7a30:	98 36       	cpi	r25, 0x68	; 104
    7a32:	59 f4       	brne	.+22     	; 0x7a4a <vfprintf+0x11e>
    7a34:	ee 85       	ldd	r30, Y+14	; 0x0e
    7a36:	ff 85       	ldd	r31, Y+15	; 0x0f
    7a38:	23 fd       	sbrc	r18, 3
    7a3a:	95 91       	lpm	r25, Z+
    7a3c:	23 ff       	sbrs	r18, 3
    7a3e:	91 91       	ld	r25, Z+
    7a40:	ee 87       	std	Y+14, r30	; 0x0e
    7a42:	ff 87       	std	Y+15, r31	; 0x0f
    7a44:	99 23       	and	r25, r25
    7a46:	09 f0       	breq	.+2      	; 0x7a4a <vfprintf+0x11e>
    7a48:	bc cf       	rjmp	.-136    	; 0x79c2 <vfprintf+0x96>
    7a4a:	89 2f       	mov	r24, r25
    7a4c:	85 54       	subi	r24, 0x45	; 69
    7a4e:	83 30       	cpi	r24, 0x03	; 3
    7a50:	20 f4       	brcc	.+8      	; 0x7a5a <vfprintf+0x12e>
    7a52:	81 2f       	mov	r24, r17
    7a54:	80 61       	ori	r24, 0x10	; 16
    7a56:	90 5e       	subi	r25, 0xE0	; 224
    7a58:	07 c0       	rjmp	.+14     	; 0x7a68 <vfprintf+0x13c>
    7a5a:	89 2f       	mov	r24, r25
    7a5c:	85 56       	subi	r24, 0x65	; 101
    7a5e:	83 30       	cpi	r24, 0x03	; 3
    7a60:	08 f0       	brcs	.+2      	; 0x7a64 <vfprintf+0x138>
    7a62:	9f c1       	rjmp	.+830    	; 0x7da2 <vfprintf+0x476>
    7a64:	81 2f       	mov	r24, r17
    7a66:	8f 7e       	andi	r24, 0xEF	; 239
    7a68:	86 fd       	sbrc	r24, 6
    7a6a:	02 c0       	rjmp	.+4      	; 0x7a70 <vfprintf+0x144>
    7a6c:	76 e0       	ldi	r23, 0x06	; 6
    7a6e:	97 2e       	mov	r9, r23
    7a70:	6f e3       	ldi	r22, 0x3F	; 63
    7a72:	f6 2e       	mov	r15, r22
    7a74:	f8 22       	and	r15, r24
    7a76:	95 36       	cpi	r25, 0x65	; 101
    7a78:	19 f4       	brne	.+6      	; 0x7a80 <vfprintf+0x154>
    7a7a:	f0 e4       	ldi	r31, 0x40	; 64
    7a7c:	ff 2a       	or	r15, r31
    7a7e:	07 c0       	rjmp	.+14     	; 0x7a8e <vfprintf+0x162>
    7a80:	96 36       	cpi	r25, 0x66	; 102
    7a82:	19 f4       	brne	.+6      	; 0x7a8a <vfprintf+0x15e>
    7a84:	20 e8       	ldi	r18, 0x80	; 128
    7a86:	f2 2a       	or	r15, r18
    7a88:	02 c0       	rjmp	.+4      	; 0x7a8e <vfprintf+0x162>
    7a8a:	91 10       	cpse	r9, r1
    7a8c:	9a 94       	dec	r9
    7a8e:	f7 fe       	sbrs	r15, 7
    7a90:	0a c0       	rjmp	.+20     	; 0x7aa6 <vfprintf+0x17a>
    7a92:	3b e3       	ldi	r19, 0x3B	; 59
    7a94:	39 15       	cp	r19, r9
    7a96:	18 f4       	brcc	.+6      	; 0x7a9e <vfprintf+0x172>
    7a98:	5c e3       	ldi	r21, 0x3C	; 60
    7a9a:	b5 2e       	mov	r11, r21
    7a9c:	02 c0       	rjmp	.+4      	; 0x7aa2 <vfprintf+0x176>
    7a9e:	b9 2c       	mov	r11, r9
    7aa0:	b3 94       	inc	r11
    7aa2:	27 e0       	ldi	r18, 0x07	; 7
    7aa4:	09 c0       	rjmp	.+18     	; 0x7ab8 <vfprintf+0x18c>
    7aa6:	47 e0       	ldi	r20, 0x07	; 7
    7aa8:	49 15       	cp	r20, r9
    7aaa:	20 f4       	brcc	.+8      	; 0x7ab4 <vfprintf+0x188>
    7aac:	bb 24       	eor	r11, r11
    7aae:	47 e0       	ldi	r20, 0x07	; 7
    7ab0:	94 2e       	mov	r9, r20
    7ab2:	f7 cf       	rjmp	.-18     	; 0x7aa2 <vfprintf+0x176>
    7ab4:	29 2d       	mov	r18, r9
    7ab6:	bb 24       	eor	r11, r11
    7ab8:	c6 01       	movw	r24, r12
    7aba:	04 96       	adiw	r24, 0x04	; 4
    7abc:	8c 87       	std	Y+12, r24	; 0x0c
    7abe:	9d 87       	std	Y+13, r25	; 0x0d
    7ac0:	f6 01       	movw	r30, r12
    7ac2:	60 81       	ld	r22, Z
    7ac4:	71 81       	ldd	r23, Z+1	; 0x01
    7ac6:	82 81       	ldd	r24, Z+2	; 0x02
    7ac8:	93 81       	ldd	r25, Z+3	; 0x03
    7aca:	ae 01       	movw	r20, r28
    7acc:	4f 5f       	subi	r20, 0xFF	; 255
    7ace:	5f 4f       	sbci	r21, 0xFF	; 255
    7ad0:	0b 2d       	mov	r16, r11
    7ad2:	0e 94 77 46 	call	0x8cee	; 0x8cee <__ftoa_engine>
    7ad6:	6c 01       	movw	r12, r24
    7ad8:	09 81       	ldd	r16, Y+1	; 0x01
    7ada:	20 2e       	mov	r2, r16
    7adc:	33 24       	eor	r3, r3
    7ade:	00 ff       	sbrs	r16, 0
    7ae0:	04 c0       	rjmp	.+8      	; 0x7aea <vfprintf+0x1be>
    7ae2:	03 fd       	sbrc	r16, 3
    7ae4:	02 c0       	rjmp	.+4      	; 0x7aea <vfprintf+0x1be>
    7ae6:	1d e2       	ldi	r17, 0x2D	; 45
    7ae8:	09 c0       	rjmp	.+18     	; 0x7afc <vfprintf+0x1d0>
    7aea:	f1 fe       	sbrs	r15, 1
    7aec:	02 c0       	rjmp	.+4      	; 0x7af2 <vfprintf+0x1c6>
    7aee:	1b e2       	ldi	r17, 0x2B	; 43
    7af0:	05 c0       	rjmp	.+10     	; 0x7afc <vfprintf+0x1d0>
    7af2:	f2 fc       	sbrc	r15, 2
    7af4:	02 c0       	rjmp	.+4      	; 0x7afa <vfprintf+0x1ce>
    7af6:	10 e0       	ldi	r17, 0x00	; 0
    7af8:	01 c0       	rjmp	.+2      	; 0x7afc <vfprintf+0x1d0>
    7afa:	10 e2       	ldi	r17, 0x20	; 32
    7afc:	c1 01       	movw	r24, r2
    7afe:	8c 70       	andi	r24, 0x0C	; 12
    7b00:	90 70       	andi	r25, 0x00	; 0
    7b02:	89 2b       	or	r24, r25
    7b04:	b9 f1       	breq	.+110    	; 0x7b74 <vfprintf+0x248>
    7b06:	11 23       	and	r17, r17
    7b08:	11 f4       	brne	.+4      	; 0x7b0e <vfprintf+0x1e2>
    7b0a:	83 e0       	ldi	r24, 0x03	; 3
    7b0c:	01 c0       	rjmp	.+2      	; 0x7b10 <vfprintf+0x1e4>
    7b0e:	84 e0       	ldi	r24, 0x04	; 4
    7b10:	88 15       	cp	r24, r8
    7b12:	10 f0       	brcs	.+4      	; 0x7b18 <vfprintf+0x1ec>
    7b14:	88 24       	eor	r8, r8
    7b16:	0a c0       	rjmp	.+20     	; 0x7b2c <vfprintf+0x200>
    7b18:	88 1a       	sub	r8, r24
    7b1a:	f3 fc       	sbrc	r15, 3
    7b1c:	07 c0       	rjmp	.+14     	; 0x7b2c <vfprintf+0x200>
    7b1e:	80 e2       	ldi	r24, 0x20	; 32
    7b20:	90 e0       	ldi	r25, 0x00	; 0
    7b22:	b3 01       	movw	r22, r6
    7b24:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7b28:	8a 94       	dec	r8
    7b2a:	c9 f7       	brne	.-14     	; 0x7b1e <vfprintf+0x1f2>
    7b2c:	11 23       	and	r17, r17
    7b2e:	29 f0       	breq	.+10     	; 0x7b3a <vfprintf+0x20e>
    7b30:	81 2f       	mov	r24, r17
    7b32:	90 e0       	ldi	r25, 0x00	; 0
    7b34:	b3 01       	movw	r22, r6
    7b36:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7b3a:	23 fe       	sbrs	r2, 3
    7b3c:	03 c0       	rjmp	.+6      	; 0x7b44 <vfprintf+0x218>
    7b3e:	03 e3       	ldi	r16, 0x33	; 51
    7b40:	12 e0       	ldi	r17, 0x02	; 2
    7b42:	0e c0       	rjmp	.+28     	; 0x7b60 <vfprintf+0x234>
    7b44:	07 e3       	ldi	r16, 0x37	; 55
    7b46:	12 e0       	ldi	r17, 0x02	; 2
    7b48:	0b c0       	rjmp	.+22     	; 0x7b60 <vfprintf+0x234>
    7b4a:	e1 14       	cp	r14, r1
    7b4c:	f1 04       	cpc	r15, r1
    7b4e:	09 f0       	breq	.+2      	; 0x7b52 <vfprintf+0x226>
    7b50:	80 52       	subi	r24, 0x20	; 32
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	b3 01       	movw	r22, r6
    7b56:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7b5a:	0f 5f       	subi	r16, 0xFF	; 255
    7b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    7b5e:	05 c0       	rjmp	.+10     	; 0x7b6a <vfprintf+0x23e>
    7b60:	ef 2c       	mov	r14, r15
    7b62:	ff 24       	eor	r15, r15
    7b64:	f0 e1       	ldi	r31, 0x10	; 16
    7b66:	ef 22       	and	r14, r31
    7b68:	ff 24       	eor	r15, r15
    7b6a:	f8 01       	movw	r30, r16
    7b6c:	84 91       	lpm	r24, Z+
    7b6e:	88 23       	and	r24, r24
    7b70:	61 f7       	brne	.-40     	; 0x7b4a <vfprintf+0x21e>
    7b72:	14 c1       	rjmp	.+552    	; 0x7d9c <vfprintf+0x470>
    7b74:	f7 fe       	sbrs	r15, 7
    7b76:	12 c0       	rjmp	.+36     	; 0x7b9c <vfprintf+0x270>
    7b78:	bc 0c       	add	r11, r12
    7b7a:	24 fe       	sbrs	r2, 4
    7b7c:	04 c0       	rjmp	.+8      	; 0x7b86 <vfprintf+0x25a>
    7b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b80:	81 33       	cpi	r24, 0x31	; 49
    7b82:	09 f4       	brne	.+2      	; 0x7b86 <vfprintf+0x25a>
    7b84:	ba 94       	dec	r11
    7b86:	1b 14       	cp	r1, r11
    7b88:	1c f0       	brlt	.+6      	; 0x7b90 <vfprintf+0x264>
    7b8a:	bb 24       	eor	r11, r11
    7b8c:	b3 94       	inc	r11
    7b8e:	2d c0       	rjmp	.+90     	; 0x7bea <vfprintf+0x2be>
    7b90:	f8 e0       	ldi	r31, 0x08	; 8
    7b92:	fb 15       	cp	r31, r11
    7b94:	50 f5       	brcc	.+84     	; 0x7bea <vfprintf+0x2be>
    7b96:	38 e0       	ldi	r19, 0x08	; 8
    7b98:	b3 2e       	mov	r11, r19
    7b9a:	27 c0       	rjmp	.+78     	; 0x7bea <vfprintf+0x2be>
    7b9c:	f6 fc       	sbrc	r15, 6
    7b9e:	25 c0       	rjmp	.+74     	; 0x7bea <vfprintf+0x2be>
    7ba0:	89 2d       	mov	r24, r9
    7ba2:	90 e0       	ldi	r25, 0x00	; 0
    7ba4:	8c 15       	cp	r24, r12
    7ba6:	9d 05       	cpc	r25, r13
    7ba8:	4c f0       	brlt	.+18     	; 0x7bbc <vfprintf+0x290>
    7baa:	2c ef       	ldi	r18, 0xFC	; 252
    7bac:	c2 16       	cp	r12, r18
    7bae:	2f ef       	ldi	r18, 0xFF	; 255
    7bb0:	d2 06       	cpc	r13, r18
    7bb2:	24 f0       	brlt	.+8      	; 0x7bbc <vfprintf+0x290>
    7bb4:	30 e8       	ldi	r19, 0x80	; 128
    7bb6:	f3 2a       	or	r15, r19
    7bb8:	01 c0       	rjmp	.+2      	; 0x7bbc <vfprintf+0x290>
    7bba:	9a 94       	dec	r9
    7bbc:	99 20       	and	r9, r9
    7bbe:	49 f0       	breq	.+18     	; 0x7bd2 <vfprintf+0x2a6>
    7bc0:	e2 e0       	ldi	r30, 0x02	; 2
    7bc2:	f0 e0       	ldi	r31, 0x00	; 0
    7bc4:	ec 0f       	add	r30, r28
    7bc6:	fd 1f       	adc	r31, r29
    7bc8:	e9 0d       	add	r30, r9
    7bca:	f1 1d       	adc	r31, r1
    7bcc:	80 81       	ld	r24, Z
    7bce:	80 33       	cpi	r24, 0x30	; 48
    7bd0:	a1 f3       	breq	.-24     	; 0x7bba <vfprintf+0x28e>
    7bd2:	f7 fe       	sbrs	r15, 7
    7bd4:	0a c0       	rjmp	.+20     	; 0x7bea <vfprintf+0x2be>
    7bd6:	b9 2c       	mov	r11, r9
    7bd8:	b3 94       	inc	r11
    7bda:	89 2d       	mov	r24, r9
    7bdc:	90 e0       	ldi	r25, 0x00	; 0
    7bde:	c8 16       	cp	r12, r24
    7be0:	d9 06       	cpc	r13, r25
    7be2:	14 f0       	brlt	.+4      	; 0x7be8 <vfprintf+0x2bc>
    7be4:	99 24       	eor	r9, r9
    7be6:	01 c0       	rjmp	.+2      	; 0x7bea <vfprintf+0x2be>
    7be8:	9c 18       	sub	r9, r12
    7bea:	f7 fc       	sbrc	r15, 7
    7bec:	03 c0       	rjmp	.+6      	; 0x7bf4 <vfprintf+0x2c8>
    7bee:	25 e0       	ldi	r18, 0x05	; 5
    7bf0:	30 e0       	ldi	r19, 0x00	; 0
    7bf2:	09 c0       	rjmp	.+18     	; 0x7c06 <vfprintf+0x2da>
    7bf4:	1c 14       	cp	r1, r12
    7bf6:	1d 04       	cpc	r1, r13
    7bf8:	1c f0       	brlt	.+6      	; 0x7c00 <vfprintf+0x2d4>
    7bfa:	21 e0       	ldi	r18, 0x01	; 1
    7bfc:	30 e0       	ldi	r19, 0x00	; 0
    7bfe:	03 c0       	rjmp	.+6      	; 0x7c06 <vfprintf+0x2da>
    7c00:	96 01       	movw	r18, r12
    7c02:	2f 5f       	subi	r18, 0xFF	; 255
    7c04:	3f 4f       	sbci	r19, 0xFF	; 255
    7c06:	11 23       	and	r17, r17
    7c08:	11 f0       	breq	.+4      	; 0x7c0e <vfprintf+0x2e2>
    7c0a:	2f 5f       	subi	r18, 0xFF	; 255
    7c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    7c0e:	99 20       	and	r9, r9
    7c10:	29 f0       	breq	.+10     	; 0x7c1c <vfprintf+0x2f0>
    7c12:	89 2d       	mov	r24, r9
    7c14:	90 e0       	ldi	r25, 0x00	; 0
    7c16:	01 96       	adiw	r24, 0x01	; 1
    7c18:	28 0f       	add	r18, r24
    7c1a:	39 1f       	adc	r19, r25
    7c1c:	88 2d       	mov	r24, r8
    7c1e:	90 e0       	ldi	r25, 0x00	; 0
    7c20:	28 17       	cp	r18, r24
    7c22:	39 07       	cpc	r19, r25
    7c24:	14 f0       	brlt	.+4      	; 0x7c2a <vfprintf+0x2fe>
    7c26:	88 24       	eor	r8, r8
    7c28:	01 c0       	rjmp	.+2      	; 0x7c2c <vfprintf+0x300>
    7c2a:	82 1a       	sub	r8, r18
    7c2c:	4f 2c       	mov	r4, r15
    7c2e:	55 24       	eor	r5, r5
    7c30:	c2 01       	movw	r24, r4
    7c32:	89 70       	andi	r24, 0x09	; 9
    7c34:	90 70       	andi	r25, 0x00	; 0
    7c36:	89 2b       	or	r24, r25
    7c38:	39 f0       	breq	.+14     	; 0x7c48 <vfprintf+0x31c>
    7c3a:	08 c0       	rjmp	.+16     	; 0x7c4c <vfprintf+0x320>
    7c3c:	80 e2       	ldi	r24, 0x20	; 32
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	b3 01       	movw	r22, r6
    7c42:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7c46:	8a 94       	dec	r8
    7c48:	88 20       	and	r8, r8
    7c4a:	c1 f7       	brne	.-16     	; 0x7c3c <vfprintf+0x310>
    7c4c:	11 23       	and	r17, r17
    7c4e:	29 f0       	breq	.+10     	; 0x7c5a <vfprintf+0x32e>
    7c50:	81 2f       	mov	r24, r17
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	b3 01       	movw	r22, r6
    7c56:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7c5a:	43 fe       	sbrs	r4, 3
    7c5c:	07 c0       	rjmp	.+14     	; 0x7c6c <vfprintf+0x340>
    7c5e:	08 c0       	rjmp	.+16     	; 0x7c70 <vfprintf+0x344>
    7c60:	80 e3       	ldi	r24, 0x30	; 48
    7c62:	90 e0       	ldi	r25, 0x00	; 0
    7c64:	b3 01       	movw	r22, r6
    7c66:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7c6a:	8a 94       	dec	r8
    7c6c:	88 20       	and	r8, r8
    7c6e:	c1 f7       	brne	.-16     	; 0x7c60 <vfprintf+0x334>
    7c70:	f7 fe       	sbrs	r15, 7
    7c72:	46 c0       	rjmp	.+140    	; 0x7d00 <vfprintf+0x3d4>
    7c74:	86 01       	movw	r16, r12
    7c76:	d7 fe       	sbrs	r13, 7
    7c78:	02 c0       	rjmp	.+4      	; 0x7c7e <vfprintf+0x352>
    7c7a:	00 e0       	ldi	r16, 0x00	; 0
    7c7c:	10 e0       	ldi	r17, 0x00	; 0
    7c7e:	76 01       	movw	r14, r12
    7c80:	08 94       	sec
    7c82:	e1 1c       	adc	r14, r1
    7c84:	f1 1c       	adc	r15, r1
    7c86:	e0 1a       	sub	r14, r16
    7c88:	f1 0a       	sbc	r15, r17
    7c8a:	41 e0       	ldi	r20, 0x01	; 1
    7c8c:	50 e0       	ldi	r21, 0x00	; 0
    7c8e:	4c 0f       	add	r20, r28
    7c90:	5d 1f       	adc	r21, r29
    7c92:	e4 0e       	add	r14, r20
    7c94:	f5 1e       	adc	r15, r21
    7c96:	26 01       	movw	r4, r12
    7c98:	4b 18       	sub	r4, r11
    7c9a:	51 08       	sbc	r5, r1
    7c9c:	89 2d       	mov	r24, r9
    7c9e:	90 e0       	ldi	r25, 0x00	; 0
    7ca0:	aa 24       	eor	r10, r10
    7ca2:	bb 24       	eor	r11, r11
    7ca4:	a8 1a       	sub	r10, r24
    7ca6:	b9 0a       	sbc	r11, r25
    7ca8:	5f ef       	ldi	r21, 0xFF	; 255
    7caa:	0f 3f       	cpi	r16, 0xFF	; 255
    7cac:	15 07       	cpc	r17, r21
    7cae:	29 f4       	brne	.+10     	; 0x7cba <vfprintf+0x38e>
    7cb0:	8e e2       	ldi	r24, 0x2E	; 46
    7cb2:	90 e0       	ldi	r25, 0x00	; 0
    7cb4:	b3 01       	movw	r22, r6
    7cb6:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7cba:	c0 16       	cp	r12, r16
    7cbc:	d1 06       	cpc	r13, r17
    7cbe:	34 f0       	brlt	.+12     	; 0x7ccc <vfprintf+0x3a0>
    7cc0:	40 16       	cp	r4, r16
    7cc2:	51 06       	cpc	r5, r17
    7cc4:	1c f4       	brge	.+6      	; 0x7ccc <vfprintf+0x3a0>
    7cc6:	f7 01       	movw	r30, r14
    7cc8:	80 81       	ld	r24, Z
    7cca:	01 c0       	rjmp	.+2      	; 0x7cce <vfprintf+0x3a2>
    7ccc:	80 e3       	ldi	r24, 0x30	; 48
    7cce:	01 50       	subi	r16, 0x01	; 1
    7cd0:	10 40       	sbci	r17, 0x00	; 0
    7cd2:	08 94       	sec
    7cd4:	e1 1c       	adc	r14, r1
    7cd6:	f1 1c       	adc	r15, r1
    7cd8:	0a 15       	cp	r16, r10
    7cda:	1b 05       	cpc	r17, r11
    7cdc:	2c f0       	brlt	.+10     	; 0x7ce8 <vfprintf+0x3bc>
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	b3 01       	movw	r22, r6
    7ce2:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7ce6:	e0 cf       	rjmp	.-64     	; 0x7ca8 <vfprintf+0x37c>
    7ce8:	0c 15       	cp	r16, r12
    7cea:	1d 05       	cpc	r17, r13
    7cec:	39 f4       	brne	.+14     	; 0x7cfc <vfprintf+0x3d0>
    7cee:	9a 81       	ldd	r25, Y+2	; 0x02
    7cf0:	96 33       	cpi	r25, 0x36	; 54
    7cf2:	18 f4       	brcc	.+6      	; 0x7cfa <vfprintf+0x3ce>
    7cf4:	95 33       	cpi	r25, 0x35	; 53
    7cf6:	11 f4       	brne	.+4      	; 0x7cfc <vfprintf+0x3d0>
    7cf8:	24 fe       	sbrs	r2, 4
    7cfa:	81 e3       	ldi	r24, 0x31	; 49
    7cfc:	90 e0       	ldi	r25, 0x00	; 0
    7cfe:	4b c0       	rjmp	.+150    	; 0x7d96 <vfprintf+0x46a>
    7d00:	8a 81       	ldd	r24, Y+2	; 0x02
    7d02:	81 33       	cpi	r24, 0x31	; 49
    7d04:	09 f0       	breq	.+2      	; 0x7d08 <vfprintf+0x3dc>
    7d06:	0f 7e       	andi	r16, 0xEF	; 239
    7d08:	90 e0       	ldi	r25, 0x00	; 0
    7d0a:	b3 01       	movw	r22, r6
    7d0c:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d10:	99 20       	and	r9, r9
    7d12:	a1 f0       	breq	.+40     	; 0x7d3c <vfprintf+0x410>
    7d14:	8e e2       	ldi	r24, 0x2E	; 46
    7d16:	90 e0       	ldi	r25, 0x00	; 0
    7d18:	b3 01       	movw	r22, r6
    7d1a:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d1e:	12 e0       	ldi	r17, 0x02	; 2
    7d20:	e1 e0       	ldi	r30, 0x01	; 1
    7d22:	f0 e0       	ldi	r31, 0x00	; 0
    7d24:	ec 0f       	add	r30, r28
    7d26:	fd 1f       	adc	r31, r29
    7d28:	e1 0f       	add	r30, r17
    7d2a:	f1 1d       	adc	r31, r1
    7d2c:	1f 5f       	subi	r17, 0xFF	; 255
    7d2e:	80 81       	ld	r24, Z
    7d30:	90 e0       	ldi	r25, 0x00	; 0
    7d32:	b3 01       	movw	r22, r6
    7d34:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d38:	9a 94       	dec	r9
    7d3a:	91 f7       	brne	.-28     	; 0x7d20 <vfprintf+0x3f4>
    7d3c:	44 fc       	sbrc	r4, 4
    7d3e:	03 c0       	rjmp	.+6      	; 0x7d46 <vfprintf+0x41a>
    7d40:	85 e6       	ldi	r24, 0x65	; 101
    7d42:	90 e0       	ldi	r25, 0x00	; 0
    7d44:	02 c0       	rjmp	.+4      	; 0x7d4a <vfprintf+0x41e>
    7d46:	85 e4       	ldi	r24, 0x45	; 69
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	b3 01       	movw	r22, r6
    7d4c:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d50:	d7 fc       	sbrc	r13, 7
    7d52:	05 c0       	rjmp	.+10     	; 0x7d5e <vfprintf+0x432>
    7d54:	c1 14       	cp	r12, r1
    7d56:	d1 04       	cpc	r13, r1
    7d58:	41 f4       	brne	.+16     	; 0x7d6a <vfprintf+0x43e>
    7d5a:	04 ff       	sbrs	r16, 4
    7d5c:	06 c0       	rjmp	.+12     	; 0x7d6a <vfprintf+0x43e>
    7d5e:	d0 94       	com	r13
    7d60:	c1 94       	neg	r12
    7d62:	d1 08       	sbc	r13, r1
    7d64:	d3 94       	inc	r13
    7d66:	8d e2       	ldi	r24, 0x2D	; 45
    7d68:	01 c0       	rjmp	.+2      	; 0x7d6c <vfprintf+0x440>
    7d6a:	8b e2       	ldi	r24, 0x2B	; 43
    7d6c:	90 e0       	ldi	r25, 0x00	; 0
    7d6e:	b3 01       	movw	r22, r6
    7d70:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d74:	80 e3       	ldi	r24, 0x30	; 48
    7d76:	05 c0       	rjmp	.+10     	; 0x7d82 <vfprintf+0x456>
    7d78:	8f 5f       	subi	r24, 0xFF	; 255
    7d7a:	26 ef       	ldi	r18, 0xF6	; 246
    7d7c:	3f ef       	ldi	r19, 0xFF	; 255
    7d7e:	c2 0e       	add	r12, r18
    7d80:	d3 1e       	adc	r13, r19
    7d82:	3a e0       	ldi	r19, 0x0A	; 10
    7d84:	c3 16       	cp	r12, r19
    7d86:	d1 04       	cpc	r13, r1
    7d88:	bc f7       	brge	.-18     	; 0x7d78 <vfprintf+0x44c>
    7d8a:	90 e0       	ldi	r25, 0x00	; 0
    7d8c:	b3 01       	movw	r22, r6
    7d8e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d92:	c6 01       	movw	r24, r12
    7d94:	c0 96       	adiw	r24, 0x30	; 48
    7d96:	b3 01       	movw	r22, r6
    7d98:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7d9c:	cc 84       	ldd	r12, Y+12	; 0x0c
    7d9e:	dd 84       	ldd	r13, Y+13	; 0x0d
    7da0:	52 c1       	rjmp	.+676    	; 0x8046 <vfprintf+0x71a>
    7da2:	93 36       	cpi	r25, 0x63	; 99
    7da4:	31 f0       	breq	.+12     	; 0x7db2 <vfprintf+0x486>
    7da6:	93 37       	cpi	r25, 0x73	; 115
    7da8:	99 f0       	breq	.+38     	; 0x7dd0 <vfprintf+0x4a4>
    7daa:	93 35       	cpi	r25, 0x53	; 83
    7dac:	09 f0       	breq	.+2      	; 0x7db0 <vfprintf+0x484>
    7dae:	59 c0       	rjmp	.+178    	; 0x7e62 <vfprintf+0x536>
    7db0:	23 c0       	rjmp	.+70     	; 0x7df8 <vfprintf+0x4cc>
    7db2:	f6 01       	movw	r30, r12
    7db4:	80 81       	ld	r24, Z
    7db6:	89 83       	std	Y+1, r24	; 0x01
    7db8:	5e 01       	movw	r10, r28
    7dba:	08 94       	sec
    7dbc:	a1 1c       	adc	r10, r1
    7dbe:	b1 1c       	adc	r11, r1
    7dc0:	22 e0       	ldi	r18, 0x02	; 2
    7dc2:	30 e0       	ldi	r19, 0x00	; 0
    7dc4:	c2 0e       	add	r12, r18
    7dc6:	d3 1e       	adc	r13, r19
    7dc8:	21 e0       	ldi	r18, 0x01	; 1
    7dca:	e2 2e       	mov	r14, r18
    7dcc:	f1 2c       	mov	r15, r1
    7dce:	12 c0       	rjmp	.+36     	; 0x7df4 <vfprintf+0x4c8>
    7dd0:	f6 01       	movw	r30, r12
    7dd2:	a0 80       	ld	r10, Z
    7dd4:	b1 80       	ldd	r11, Z+1	; 0x01
    7dd6:	16 fd       	sbrc	r17, 6
    7dd8:	03 c0       	rjmp	.+6      	; 0x7de0 <vfprintf+0x4b4>
    7dda:	6f ef       	ldi	r22, 0xFF	; 255
    7ddc:	7f ef       	ldi	r23, 0xFF	; 255
    7dde:	02 c0       	rjmp	.+4      	; 0x7de4 <vfprintf+0x4b8>
    7de0:	69 2d       	mov	r22, r9
    7de2:	70 e0       	ldi	r23, 0x00	; 0
    7de4:	22 e0       	ldi	r18, 0x02	; 2
    7de6:	30 e0       	ldi	r19, 0x00	; 0
    7de8:	c2 0e       	add	r12, r18
    7dea:	d3 1e       	adc	r13, r19
    7dec:	c5 01       	movw	r24, r10
    7dee:	0e 94 7a 47 	call	0x8ef4	; 0x8ef4 <strnlen>
    7df2:	7c 01       	movw	r14, r24
    7df4:	1f 77       	andi	r17, 0x7F	; 127
    7df6:	13 c0       	rjmp	.+38     	; 0x7e1e <vfprintf+0x4f2>
    7df8:	f6 01       	movw	r30, r12
    7dfa:	a0 80       	ld	r10, Z
    7dfc:	b1 80       	ldd	r11, Z+1	; 0x01
    7dfe:	16 fd       	sbrc	r17, 6
    7e00:	03 c0       	rjmp	.+6      	; 0x7e08 <vfprintf+0x4dc>
    7e02:	6f ef       	ldi	r22, 0xFF	; 255
    7e04:	7f ef       	ldi	r23, 0xFF	; 255
    7e06:	02 c0       	rjmp	.+4      	; 0x7e0c <vfprintf+0x4e0>
    7e08:	69 2d       	mov	r22, r9
    7e0a:	70 e0       	ldi	r23, 0x00	; 0
    7e0c:	22 e0       	ldi	r18, 0x02	; 2
    7e0e:	30 e0       	ldi	r19, 0x00	; 0
    7e10:	c2 0e       	add	r12, r18
    7e12:	d3 1e       	adc	r13, r19
    7e14:	c5 01       	movw	r24, r10
    7e16:	0e 94 6f 47 	call	0x8ede	; 0x8ede <strnlen_P>
    7e1a:	7c 01       	movw	r14, r24
    7e1c:	10 68       	ori	r17, 0x80	; 128
    7e1e:	13 ff       	sbrs	r17, 3
    7e20:	07 c0       	rjmp	.+14     	; 0x7e30 <vfprintf+0x504>
    7e22:	1b c0       	rjmp	.+54     	; 0x7e5a <vfprintf+0x52e>
    7e24:	80 e2       	ldi	r24, 0x20	; 32
    7e26:	90 e0       	ldi	r25, 0x00	; 0
    7e28:	b3 01       	movw	r22, r6
    7e2a:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7e2e:	8a 94       	dec	r8
    7e30:	88 2d       	mov	r24, r8
    7e32:	90 e0       	ldi	r25, 0x00	; 0
    7e34:	e8 16       	cp	r14, r24
    7e36:	f9 06       	cpc	r15, r25
    7e38:	a8 f3       	brcs	.-22     	; 0x7e24 <vfprintf+0x4f8>
    7e3a:	0f c0       	rjmp	.+30     	; 0x7e5a <vfprintf+0x52e>
    7e3c:	f5 01       	movw	r30, r10
    7e3e:	17 fd       	sbrc	r17, 7
    7e40:	85 91       	lpm	r24, Z+
    7e42:	17 ff       	sbrs	r17, 7
    7e44:	81 91       	ld	r24, Z+
    7e46:	5f 01       	movw	r10, r30
    7e48:	90 e0       	ldi	r25, 0x00	; 0
    7e4a:	b3 01       	movw	r22, r6
    7e4c:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7e50:	81 10       	cpse	r8, r1
    7e52:	8a 94       	dec	r8
    7e54:	08 94       	sec
    7e56:	e1 08       	sbc	r14, r1
    7e58:	f1 08       	sbc	r15, r1
    7e5a:	e1 14       	cp	r14, r1
    7e5c:	f1 04       	cpc	r15, r1
    7e5e:	71 f7       	brne	.-36     	; 0x7e3c <vfprintf+0x510>
    7e60:	f2 c0       	rjmp	.+484    	; 0x8046 <vfprintf+0x71a>
    7e62:	94 36       	cpi	r25, 0x64	; 100
    7e64:	11 f0       	breq	.+4      	; 0x7e6a <vfprintf+0x53e>
    7e66:	99 36       	cpi	r25, 0x69	; 105
    7e68:	89 f5       	brne	.+98     	; 0x7ecc <vfprintf+0x5a0>
    7e6a:	17 ff       	sbrs	r17, 7
    7e6c:	08 c0       	rjmp	.+16     	; 0x7e7e <vfprintf+0x552>
    7e6e:	f6 01       	movw	r30, r12
    7e70:	20 81       	ld	r18, Z
    7e72:	31 81       	ldd	r19, Z+1	; 0x01
    7e74:	42 81       	ldd	r20, Z+2	; 0x02
    7e76:	53 81       	ldd	r21, Z+3	; 0x03
    7e78:	84 e0       	ldi	r24, 0x04	; 4
    7e7a:	90 e0       	ldi	r25, 0x00	; 0
    7e7c:	0a c0       	rjmp	.+20     	; 0x7e92 <vfprintf+0x566>
    7e7e:	f6 01       	movw	r30, r12
    7e80:	80 81       	ld	r24, Z
    7e82:	91 81       	ldd	r25, Z+1	; 0x01
    7e84:	9c 01       	movw	r18, r24
    7e86:	44 27       	eor	r20, r20
    7e88:	37 fd       	sbrc	r19, 7
    7e8a:	40 95       	com	r20
    7e8c:	54 2f       	mov	r21, r20
    7e8e:	82 e0       	ldi	r24, 0x02	; 2
    7e90:	90 e0       	ldi	r25, 0x00	; 0
    7e92:	c8 0e       	add	r12, r24
    7e94:	d9 1e       	adc	r13, r25
    7e96:	9f e6       	ldi	r25, 0x6F	; 111
    7e98:	f9 2e       	mov	r15, r25
    7e9a:	f1 22       	and	r15, r17
    7e9c:	57 ff       	sbrs	r21, 7
    7e9e:	09 c0       	rjmp	.+18     	; 0x7eb2 <vfprintf+0x586>
    7ea0:	50 95       	com	r21
    7ea2:	40 95       	com	r20
    7ea4:	30 95       	com	r19
    7ea6:	21 95       	neg	r18
    7ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    7eaa:	4f 4f       	sbci	r20, 0xFF	; 255
    7eac:	5f 4f       	sbci	r21, 0xFF	; 255
    7eae:	90 e8       	ldi	r25, 0x80	; 128
    7eb0:	f9 2a       	or	r15, r25
    7eb2:	ca 01       	movw	r24, r20
    7eb4:	b9 01       	movw	r22, r18
    7eb6:	ae 01       	movw	r20, r28
    7eb8:	4f 5f       	subi	r20, 0xFF	; 255
    7eba:	5f 4f       	sbci	r21, 0xFF	; 255
    7ebc:	2a e0       	ldi	r18, 0x0A	; 10
    7ebe:	30 e0       	ldi	r19, 0x00	; 0
    7ec0:	0e 94 14 48 	call	0x9028	; 0x9028 <__ultoa_invert>
    7ec4:	e8 2e       	mov	r14, r24
    7ec6:	e8 89       	ldd	r30, Y+16	; 0x10
    7ec8:	ee 1a       	sub	r14, r30
    7eca:	41 c0       	rjmp	.+130    	; 0x7f4e <vfprintf+0x622>
    7ecc:	95 37       	cpi	r25, 0x75	; 117
    7ece:	21 f4       	brne	.+8      	; 0x7ed8 <vfprintf+0x5ac>
    7ed0:	1f 7e       	andi	r17, 0xEF	; 239
    7ed2:	2a e0       	ldi	r18, 0x0A	; 10
    7ed4:	30 e0       	ldi	r19, 0x00	; 0
    7ed6:	1c c0       	rjmp	.+56     	; 0x7f10 <vfprintf+0x5e4>
    7ed8:	19 7f       	andi	r17, 0xF9	; 249
    7eda:	9f 36       	cpi	r25, 0x6F	; 111
    7edc:	61 f0       	breq	.+24     	; 0x7ef6 <vfprintf+0x5ca>
    7ede:	90 37       	cpi	r25, 0x70	; 112
    7ee0:	20 f4       	brcc	.+8      	; 0x7eea <vfprintf+0x5be>
    7ee2:	98 35       	cpi	r25, 0x58	; 88
    7ee4:	09 f0       	breq	.+2      	; 0x7ee8 <vfprintf+0x5bc>
    7ee6:	b2 c0       	rjmp	.+356    	; 0x804c <vfprintf+0x720>
    7ee8:	0f c0       	rjmp	.+30     	; 0x7f08 <vfprintf+0x5dc>
    7eea:	90 37       	cpi	r25, 0x70	; 112
    7eec:	39 f0       	breq	.+14     	; 0x7efc <vfprintf+0x5d0>
    7eee:	98 37       	cpi	r25, 0x78	; 120
    7ef0:	09 f0       	breq	.+2      	; 0x7ef4 <vfprintf+0x5c8>
    7ef2:	ac c0       	rjmp	.+344    	; 0x804c <vfprintf+0x720>
    7ef4:	04 c0       	rjmp	.+8      	; 0x7efe <vfprintf+0x5d2>
    7ef6:	28 e0       	ldi	r18, 0x08	; 8
    7ef8:	30 e0       	ldi	r19, 0x00	; 0
    7efa:	0a c0       	rjmp	.+20     	; 0x7f10 <vfprintf+0x5e4>
    7efc:	10 61       	ori	r17, 0x10	; 16
    7efe:	14 fd       	sbrc	r17, 4
    7f00:	14 60       	ori	r17, 0x04	; 4
    7f02:	20 e1       	ldi	r18, 0x10	; 16
    7f04:	30 e0       	ldi	r19, 0x00	; 0
    7f06:	04 c0       	rjmp	.+8      	; 0x7f10 <vfprintf+0x5e4>
    7f08:	14 fd       	sbrc	r17, 4
    7f0a:	16 60       	ori	r17, 0x06	; 6
    7f0c:	20 e1       	ldi	r18, 0x10	; 16
    7f0e:	32 e0       	ldi	r19, 0x02	; 2
    7f10:	17 ff       	sbrs	r17, 7
    7f12:	08 c0       	rjmp	.+16     	; 0x7f24 <vfprintf+0x5f8>
    7f14:	f6 01       	movw	r30, r12
    7f16:	60 81       	ld	r22, Z
    7f18:	71 81       	ldd	r23, Z+1	; 0x01
    7f1a:	82 81       	ldd	r24, Z+2	; 0x02
    7f1c:	93 81       	ldd	r25, Z+3	; 0x03
    7f1e:	44 e0       	ldi	r20, 0x04	; 4
    7f20:	50 e0       	ldi	r21, 0x00	; 0
    7f22:	08 c0       	rjmp	.+16     	; 0x7f34 <vfprintf+0x608>
    7f24:	f6 01       	movw	r30, r12
    7f26:	80 81       	ld	r24, Z
    7f28:	91 81       	ldd	r25, Z+1	; 0x01
    7f2a:	bc 01       	movw	r22, r24
    7f2c:	80 e0       	ldi	r24, 0x00	; 0
    7f2e:	90 e0       	ldi	r25, 0x00	; 0
    7f30:	42 e0       	ldi	r20, 0x02	; 2
    7f32:	50 e0       	ldi	r21, 0x00	; 0
    7f34:	c4 0e       	add	r12, r20
    7f36:	d5 1e       	adc	r13, r21
    7f38:	ae 01       	movw	r20, r28
    7f3a:	4f 5f       	subi	r20, 0xFF	; 255
    7f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f3e:	0e 94 14 48 	call	0x9028	; 0x9028 <__ultoa_invert>
    7f42:	e8 2e       	mov	r14, r24
    7f44:	58 89       	ldd	r21, Y+16	; 0x10
    7f46:	e5 1a       	sub	r14, r21
    7f48:	8f e7       	ldi	r24, 0x7F	; 127
    7f4a:	f8 2e       	mov	r15, r24
    7f4c:	f1 22       	and	r15, r17
    7f4e:	f6 fe       	sbrs	r15, 6
    7f50:	0b c0       	rjmp	.+22     	; 0x7f68 <vfprintf+0x63c>
    7f52:	8e ef       	ldi	r24, 0xFE	; 254
    7f54:	f8 22       	and	r15, r24
    7f56:	e9 14       	cp	r14, r9
    7f58:	38 f4       	brcc	.+14     	; 0x7f68 <vfprintf+0x63c>
    7f5a:	f4 fe       	sbrs	r15, 4
    7f5c:	07 c0       	rjmp	.+14     	; 0x7f6c <vfprintf+0x640>
    7f5e:	f2 fc       	sbrc	r15, 2
    7f60:	05 c0       	rjmp	.+10     	; 0x7f6c <vfprintf+0x640>
    7f62:	9f ee       	ldi	r25, 0xEF	; 239
    7f64:	f9 22       	and	r15, r25
    7f66:	02 c0       	rjmp	.+4      	; 0x7f6c <vfprintf+0x640>
    7f68:	1e 2d       	mov	r17, r14
    7f6a:	01 c0       	rjmp	.+2      	; 0x7f6e <vfprintf+0x642>
    7f6c:	19 2d       	mov	r17, r9
    7f6e:	f4 fe       	sbrs	r15, 4
    7f70:	0d c0       	rjmp	.+26     	; 0x7f8c <vfprintf+0x660>
    7f72:	fe 01       	movw	r30, r28
    7f74:	ee 0d       	add	r30, r14
    7f76:	f1 1d       	adc	r31, r1
    7f78:	80 81       	ld	r24, Z
    7f7a:	80 33       	cpi	r24, 0x30	; 48
    7f7c:	19 f4       	brne	.+6      	; 0x7f84 <vfprintf+0x658>
    7f7e:	e9 ee       	ldi	r30, 0xE9	; 233
    7f80:	fe 22       	and	r15, r30
    7f82:	08 c0       	rjmp	.+16     	; 0x7f94 <vfprintf+0x668>
    7f84:	1f 5f       	subi	r17, 0xFF	; 255
    7f86:	f2 fe       	sbrs	r15, 2
    7f88:	05 c0       	rjmp	.+10     	; 0x7f94 <vfprintf+0x668>
    7f8a:	03 c0       	rjmp	.+6      	; 0x7f92 <vfprintf+0x666>
    7f8c:	8f 2d       	mov	r24, r15
    7f8e:	86 78       	andi	r24, 0x86	; 134
    7f90:	09 f0       	breq	.+2      	; 0x7f94 <vfprintf+0x668>
    7f92:	1f 5f       	subi	r17, 0xFF	; 255
    7f94:	0f 2d       	mov	r16, r15
    7f96:	f3 fc       	sbrc	r15, 3
    7f98:	14 c0       	rjmp	.+40     	; 0x7fc2 <vfprintf+0x696>
    7f9a:	f0 fe       	sbrs	r15, 0
    7f9c:	0f c0       	rjmp	.+30     	; 0x7fbc <vfprintf+0x690>
    7f9e:	18 15       	cp	r17, r8
    7fa0:	10 f0       	brcs	.+4      	; 0x7fa6 <vfprintf+0x67a>
    7fa2:	9e 2c       	mov	r9, r14
    7fa4:	0b c0       	rjmp	.+22     	; 0x7fbc <vfprintf+0x690>
    7fa6:	9e 2c       	mov	r9, r14
    7fa8:	98 0c       	add	r9, r8
    7faa:	91 1a       	sub	r9, r17
    7fac:	18 2d       	mov	r17, r8
    7fae:	06 c0       	rjmp	.+12     	; 0x7fbc <vfprintf+0x690>
    7fb0:	80 e2       	ldi	r24, 0x20	; 32
    7fb2:	90 e0       	ldi	r25, 0x00	; 0
    7fb4:	b3 01       	movw	r22, r6
    7fb6:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7fba:	1f 5f       	subi	r17, 0xFF	; 255
    7fbc:	18 15       	cp	r17, r8
    7fbe:	c0 f3       	brcs	.-16     	; 0x7fb0 <vfprintf+0x684>
    7fc0:	04 c0       	rjmp	.+8      	; 0x7fca <vfprintf+0x69e>
    7fc2:	18 15       	cp	r17, r8
    7fc4:	10 f4       	brcc	.+4      	; 0x7fca <vfprintf+0x69e>
    7fc6:	81 1a       	sub	r8, r17
    7fc8:	01 c0       	rjmp	.+2      	; 0x7fcc <vfprintf+0x6a0>
    7fca:	88 24       	eor	r8, r8
    7fcc:	04 ff       	sbrs	r16, 4
    7fce:	0f c0       	rjmp	.+30     	; 0x7fee <vfprintf+0x6c2>
    7fd0:	80 e3       	ldi	r24, 0x30	; 48
    7fd2:	90 e0       	ldi	r25, 0x00	; 0
    7fd4:	b3 01       	movw	r22, r6
    7fd6:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    7fda:	02 ff       	sbrs	r16, 2
    7fdc:	1d c0       	rjmp	.+58     	; 0x8018 <vfprintf+0x6ec>
    7fde:	01 fd       	sbrc	r16, 1
    7fe0:	03 c0       	rjmp	.+6      	; 0x7fe8 <vfprintf+0x6bc>
    7fe2:	88 e7       	ldi	r24, 0x78	; 120
    7fe4:	90 e0       	ldi	r25, 0x00	; 0
    7fe6:	0e c0       	rjmp	.+28     	; 0x8004 <vfprintf+0x6d8>
    7fe8:	88 e5       	ldi	r24, 0x58	; 88
    7fea:	90 e0       	ldi	r25, 0x00	; 0
    7fec:	0b c0       	rjmp	.+22     	; 0x8004 <vfprintf+0x6d8>
    7fee:	80 2f       	mov	r24, r16
    7ff0:	86 78       	andi	r24, 0x86	; 134
    7ff2:	91 f0       	breq	.+36     	; 0x8018 <vfprintf+0x6ec>
    7ff4:	01 ff       	sbrs	r16, 1
    7ff6:	02 c0       	rjmp	.+4      	; 0x7ffc <vfprintf+0x6d0>
    7ff8:	8b e2       	ldi	r24, 0x2B	; 43
    7ffa:	01 c0       	rjmp	.+2      	; 0x7ffe <vfprintf+0x6d2>
    7ffc:	80 e2       	ldi	r24, 0x20	; 32
    7ffe:	f7 fc       	sbrc	r15, 7
    8000:	8d e2       	ldi	r24, 0x2D	; 45
    8002:	90 e0       	ldi	r25, 0x00	; 0
    8004:	b3 01       	movw	r22, r6
    8006:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    800a:	06 c0       	rjmp	.+12     	; 0x8018 <vfprintf+0x6ec>
    800c:	80 e3       	ldi	r24, 0x30	; 48
    800e:	90 e0       	ldi	r25, 0x00	; 0
    8010:	b3 01       	movw	r22, r6
    8012:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    8016:	9a 94       	dec	r9
    8018:	e9 14       	cp	r14, r9
    801a:	c0 f3       	brcs	.-16     	; 0x800c <vfprintf+0x6e0>
    801c:	ea 94       	dec	r14
    801e:	e1 e0       	ldi	r30, 0x01	; 1
    8020:	f0 e0       	ldi	r31, 0x00	; 0
    8022:	ec 0f       	add	r30, r28
    8024:	fd 1f       	adc	r31, r29
    8026:	ee 0d       	add	r30, r14
    8028:	f1 1d       	adc	r31, r1
    802a:	80 81       	ld	r24, Z
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	b3 01       	movw	r22, r6
    8030:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    8034:	ee 20       	and	r14, r14
    8036:	91 f7       	brne	.-28     	; 0x801c <vfprintf+0x6f0>
    8038:	06 c0       	rjmp	.+12     	; 0x8046 <vfprintf+0x71a>
    803a:	80 e2       	ldi	r24, 0x20	; 32
    803c:	90 e0       	ldi	r25, 0x00	; 0
    803e:	b3 01       	movw	r22, r6
    8040:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <fputc>
    8044:	8a 94       	dec	r8
    8046:	88 20       	and	r8, r8
    8048:	c1 f7       	brne	.-16     	; 0x803a <vfprintf+0x70e>
    804a:	99 cc       	rjmp	.-1742   	; 0x797e <vfprintf+0x52>
    804c:	f3 01       	movw	r30, r6
    804e:	66 81       	ldd	r22, Z+6	; 0x06
    8050:	77 81       	ldd	r23, Z+7	; 0x07
    8052:	cb 01       	movw	r24, r22
    8054:	61 96       	adiw	r28, 0x11	; 17
    8056:	cd bf       	out	0x3d, r28	; 61
    8058:	de bf       	out	0x3e, r29	; 62
    805a:	cf 91       	pop	r28
    805c:	df 91       	pop	r29
    805e:	1f 91       	pop	r17
    8060:	0f 91       	pop	r16
    8062:	ff 90       	pop	r15
    8064:	ef 90       	pop	r14
    8066:	df 90       	pop	r13
    8068:	cf 90       	pop	r12
    806a:	bf 90       	pop	r11
    806c:	af 90       	pop	r10
    806e:	9f 90       	pop	r9
    8070:	8f 90       	pop	r8
    8072:	7f 90       	pop	r7
    8074:	6f 90       	pop	r6
    8076:	5f 90       	pop	r5
    8078:	4f 90       	pop	r4
    807a:	3f 90       	pop	r3
    807c:	2f 90       	pop	r2
    807e:	08 95       	ret

00008080 <__subsf3>:
    8080:	50 58       	subi	r21, 0x80	; 128

00008082 <__addsf3>:
    8082:	bb 27       	eor	r27, r27
    8084:	aa 27       	eor	r26, r26
    8086:	0e d0       	rcall	.+28     	; 0x80a4 <__addsf3x>
    8088:	29 c2       	rjmp	.+1106   	; 0x84dc <__fp_round>
    808a:	f2 d1       	rcall	.+996    	; 0x8470 <__fp_pscA>
    808c:	30 f0       	brcs	.+12     	; 0x809a <__addsf3+0x18>
    808e:	f7 d1       	rcall	.+1006   	; 0x847e <__fp_pscB>
    8090:	20 f0       	brcs	.+8      	; 0x809a <__addsf3+0x18>
    8092:	31 f4       	brne	.+12     	; 0x80a0 <__addsf3+0x1e>
    8094:	9f 3f       	cpi	r25, 0xFF	; 255
    8096:	11 f4       	brne	.+4      	; 0x809c <__addsf3+0x1a>
    8098:	1e f4       	brtc	.+6      	; 0x80a0 <__addsf3+0x1e>
    809a:	c2 c1       	rjmp	.+900    	; 0x8420 <__fp_nan>
    809c:	0e f4       	brtc	.+2      	; 0x80a0 <__addsf3+0x1e>
    809e:	e0 95       	com	r30
    80a0:	e7 fb       	bst	r30, 7
    80a2:	8f c1       	rjmp	.+798    	; 0x83c2 <__fp_inf>

000080a4 <__addsf3x>:
    80a4:	e9 2f       	mov	r30, r25
    80a6:	3c d2       	rcall	.+1144   	; 0x8520 <__fp_split3>
    80a8:	80 f3       	brcs	.-32     	; 0x808a <__addsf3+0x8>
    80aa:	ba 17       	cp	r27, r26
    80ac:	62 07       	cpc	r22, r18
    80ae:	73 07       	cpc	r23, r19
    80b0:	84 07       	cpc	r24, r20
    80b2:	95 07       	cpc	r25, r21
    80b4:	18 f0       	brcs	.+6      	; 0x80bc <__addsf3x+0x18>
    80b6:	71 f4       	brne	.+28     	; 0x80d4 <__addsf3x+0x30>
    80b8:	9e f5       	brtc	.+102    	; 0x8120 <__addsf3x+0x7c>
    80ba:	6b c2       	rjmp	.+1238   	; 0x8592 <__fp_zero>
    80bc:	0e f4       	brtc	.+2      	; 0x80c0 <__addsf3x+0x1c>
    80be:	e0 95       	com	r30
    80c0:	0b 2e       	mov	r0, r27
    80c2:	ba 2f       	mov	r27, r26
    80c4:	a0 2d       	mov	r26, r0
    80c6:	0b 01       	movw	r0, r22
    80c8:	b9 01       	movw	r22, r18
    80ca:	90 01       	movw	r18, r0
    80cc:	0c 01       	movw	r0, r24
    80ce:	ca 01       	movw	r24, r20
    80d0:	a0 01       	movw	r20, r0
    80d2:	11 24       	eor	r1, r1
    80d4:	ff 27       	eor	r31, r31
    80d6:	59 1b       	sub	r21, r25
    80d8:	99 f0       	breq	.+38     	; 0x8100 <__addsf3x+0x5c>
    80da:	59 3f       	cpi	r21, 0xF9	; 249
    80dc:	50 f4       	brcc	.+20     	; 0x80f2 <__addsf3x+0x4e>
    80de:	50 3e       	cpi	r21, 0xE0	; 224
    80e0:	68 f1       	brcs	.+90     	; 0x813c <__addsf3x+0x98>
    80e2:	1a 16       	cp	r1, r26
    80e4:	f0 40       	sbci	r31, 0x00	; 0
    80e6:	a2 2f       	mov	r26, r18
    80e8:	23 2f       	mov	r18, r19
    80ea:	34 2f       	mov	r19, r20
    80ec:	44 27       	eor	r20, r20
    80ee:	58 5f       	subi	r21, 0xF8	; 248
    80f0:	f3 cf       	rjmp	.-26     	; 0x80d8 <__addsf3x+0x34>
    80f2:	46 95       	lsr	r20
    80f4:	37 95       	ror	r19
    80f6:	27 95       	ror	r18
    80f8:	a7 95       	ror	r26
    80fa:	f0 40       	sbci	r31, 0x00	; 0
    80fc:	53 95       	inc	r21
    80fe:	c9 f7       	brne	.-14     	; 0x80f2 <__addsf3x+0x4e>
    8100:	7e f4       	brtc	.+30     	; 0x8120 <__addsf3x+0x7c>
    8102:	1f 16       	cp	r1, r31
    8104:	ba 0b       	sbc	r27, r26
    8106:	62 0b       	sbc	r22, r18
    8108:	73 0b       	sbc	r23, r19
    810a:	84 0b       	sbc	r24, r20
    810c:	ba f0       	brmi	.+46     	; 0x813c <__addsf3x+0x98>
    810e:	91 50       	subi	r25, 0x01	; 1
    8110:	a1 f0       	breq	.+40     	; 0x813a <__addsf3x+0x96>
    8112:	ff 0f       	add	r31, r31
    8114:	bb 1f       	adc	r27, r27
    8116:	66 1f       	adc	r22, r22
    8118:	77 1f       	adc	r23, r23
    811a:	88 1f       	adc	r24, r24
    811c:	c2 f7       	brpl	.-16     	; 0x810e <__addsf3x+0x6a>
    811e:	0e c0       	rjmp	.+28     	; 0x813c <__addsf3x+0x98>
    8120:	ba 0f       	add	r27, r26
    8122:	62 1f       	adc	r22, r18
    8124:	73 1f       	adc	r23, r19
    8126:	84 1f       	adc	r24, r20
    8128:	48 f4       	brcc	.+18     	; 0x813c <__addsf3x+0x98>
    812a:	87 95       	ror	r24
    812c:	77 95       	ror	r23
    812e:	67 95       	ror	r22
    8130:	b7 95       	ror	r27
    8132:	f7 95       	ror	r31
    8134:	9e 3f       	cpi	r25, 0xFE	; 254
    8136:	08 f0       	brcs	.+2      	; 0x813a <__addsf3x+0x96>
    8138:	b3 cf       	rjmp	.-154    	; 0x80a0 <__addsf3+0x1e>
    813a:	93 95       	inc	r25
    813c:	88 0f       	add	r24, r24
    813e:	08 f0       	brcs	.+2      	; 0x8142 <__addsf3x+0x9e>
    8140:	99 27       	eor	r25, r25
    8142:	ee 0f       	add	r30, r30
    8144:	97 95       	ror	r25
    8146:	87 95       	ror	r24
    8148:	08 95       	ret

0000814a <atan>:
    814a:	df 93       	push	r29
    814c:	dd 27       	eor	r29, r29
    814e:	b9 2f       	mov	r27, r25
    8150:	bf 77       	andi	r27, 0x7F	; 127
    8152:	40 e8       	ldi	r20, 0x80	; 128
    8154:	5f e3       	ldi	r21, 0x3F	; 63
    8156:	16 16       	cp	r1, r22
    8158:	17 06       	cpc	r1, r23
    815a:	48 07       	cpc	r20, r24
    815c:	5b 07       	cpc	r21, r27
    815e:	10 f4       	brcc	.+4      	; 0x8164 <atan+0x1a>
    8160:	d9 2f       	mov	r29, r25
    8162:	83 d2       	rcall	.+1286   	; 0x866a <inverse>
    8164:	9f 93       	push	r25
    8166:	8f 93       	push	r24
    8168:	7f 93       	push	r23
    816a:	6f 93       	push	r22
    816c:	96 d3       	rcall	.+1836   	; 0x889a <square>
    816e:	e8 ee       	ldi	r30, 0xE8	; 232
    8170:	f1 e0       	ldi	r31, 0x01	; 1
    8172:	59 d1       	rcall	.+690    	; 0x8426 <__fp_powser>
    8174:	b3 d1       	rcall	.+870    	; 0x84dc <__fp_round>
    8176:	2f 91       	pop	r18
    8178:	3f 91       	pop	r19
    817a:	4f 91       	pop	r20
    817c:	5f 91       	pop	r21
    817e:	ee d2       	rcall	.+1500   	; 0x875c <__mulsf3x>
    8180:	dd 23       	and	r29, r29
    8182:	49 f0       	breq	.+18     	; 0x8196 <atan+0x4c>
    8184:	90 58       	subi	r25, 0x80	; 128
    8186:	a2 ea       	ldi	r26, 0xA2	; 162
    8188:	2a ed       	ldi	r18, 0xDA	; 218
    818a:	3f e0       	ldi	r19, 0x0F	; 15
    818c:	49 ec       	ldi	r20, 0xC9	; 201
    818e:	5f e3       	ldi	r21, 0x3F	; 63
    8190:	d0 78       	andi	r29, 0x80	; 128
    8192:	5d 27       	eor	r21, r29
    8194:	87 df       	rcall	.-242    	; 0x80a4 <__addsf3x>
    8196:	df 91       	pop	r29
    8198:	a1 c1       	rjmp	.+834    	; 0x84dc <__fp_round>

0000819a <ceil>:
    819a:	e4 d1       	rcall	.+968    	; 0x8564 <__fp_trunc>
    819c:	80 f0       	brcs	.+32     	; 0x81be <ceil+0x24>
    819e:	9f 37       	cpi	r25, 0x7F	; 127
    81a0:	40 f4       	brcc	.+16     	; 0x81b2 <ceil+0x18>
    81a2:	91 11       	cpse	r25, r1
    81a4:	0e f4       	brtc	.+2      	; 0x81a8 <ceil+0xe>
    81a6:	f6 c1       	rjmp	.+1004   	; 0x8594 <__fp_szero>
    81a8:	60 e0       	ldi	r22, 0x00	; 0
    81aa:	70 e0       	ldi	r23, 0x00	; 0
    81ac:	80 e8       	ldi	r24, 0x80	; 128
    81ae:	9f e3       	ldi	r25, 0x3F	; 63
    81b0:	08 95       	ret
    81b2:	26 f0       	brts	.+8      	; 0x81bc <ceil+0x22>
    81b4:	1b 16       	cp	r1, r27
    81b6:	61 1d       	adc	r22, r1
    81b8:	71 1d       	adc	r23, r1
    81ba:	81 1d       	adc	r24, r1
    81bc:	08 c1       	rjmp	.+528    	; 0x83ce <__fp_mintl>
    81be:	22 c1       	rjmp	.+580    	; 0x8404 <__fp_mpack>

000081c0 <__cmpsf2>:
    81c0:	dc d0       	rcall	.+440    	; 0x837a <__fp_cmp>
    81c2:	08 f4       	brcc	.+2      	; 0x81c6 <__cmpsf2+0x6>
    81c4:	81 e0       	ldi	r24, 0x01	; 1
    81c6:	08 95       	ret

000081c8 <cos>:
    81c8:	62 d1       	rcall	.+708    	; 0x848e <__fp_rempio2>
    81ca:	e3 95       	inc	r30
    81cc:	98 c1       	rjmp	.+816    	; 0x84fe <__fp_sinus>

000081ce <__divsf3>:
    81ce:	0c d0       	rcall	.+24     	; 0x81e8 <__divsf3x>
    81d0:	85 c1       	rjmp	.+778    	; 0x84dc <__fp_round>
    81d2:	55 d1       	rcall	.+682    	; 0x847e <__fp_pscB>
    81d4:	40 f0       	brcs	.+16     	; 0x81e6 <__divsf3+0x18>
    81d6:	4c d1       	rcall	.+664    	; 0x8470 <__fp_pscA>
    81d8:	30 f0       	brcs	.+12     	; 0x81e6 <__divsf3+0x18>
    81da:	21 f4       	brne	.+8      	; 0x81e4 <__divsf3+0x16>
    81dc:	5f 3f       	cpi	r21, 0xFF	; 255
    81de:	19 f0       	breq	.+6      	; 0x81e6 <__divsf3+0x18>
    81e0:	f0 c0       	rjmp	.+480    	; 0x83c2 <__fp_inf>
    81e2:	51 11       	cpse	r21, r1
    81e4:	d7 c1       	rjmp	.+942    	; 0x8594 <__fp_szero>
    81e6:	1c c1       	rjmp	.+568    	; 0x8420 <__fp_nan>

000081e8 <__divsf3x>:
    81e8:	9b d1       	rcall	.+822    	; 0x8520 <__fp_split3>
    81ea:	98 f3       	brcs	.-26     	; 0x81d2 <__divsf3+0x4>

000081ec <__divsf3_pse>:
    81ec:	99 23       	and	r25, r25
    81ee:	c9 f3       	breq	.-14     	; 0x81e2 <__divsf3+0x14>
    81f0:	55 23       	and	r21, r21
    81f2:	b1 f3       	breq	.-20     	; 0x81e0 <__divsf3+0x12>
    81f4:	95 1b       	sub	r25, r21
    81f6:	55 0b       	sbc	r21, r21
    81f8:	bb 27       	eor	r27, r27
    81fa:	aa 27       	eor	r26, r26
    81fc:	62 17       	cp	r22, r18
    81fe:	73 07       	cpc	r23, r19
    8200:	84 07       	cpc	r24, r20
    8202:	38 f0       	brcs	.+14     	; 0x8212 <__divsf3_pse+0x26>
    8204:	9f 5f       	subi	r25, 0xFF	; 255
    8206:	5f 4f       	sbci	r21, 0xFF	; 255
    8208:	22 0f       	add	r18, r18
    820a:	33 1f       	adc	r19, r19
    820c:	44 1f       	adc	r20, r20
    820e:	aa 1f       	adc	r26, r26
    8210:	a9 f3       	breq	.-22     	; 0x81fc <__divsf3_pse+0x10>
    8212:	33 d0       	rcall	.+102    	; 0x827a <__divsf3_pse+0x8e>
    8214:	0e 2e       	mov	r0, r30
    8216:	3a f0       	brmi	.+14     	; 0x8226 <__divsf3_pse+0x3a>
    8218:	e0 e8       	ldi	r30, 0x80	; 128
    821a:	30 d0       	rcall	.+96     	; 0x827c <__divsf3_pse+0x90>
    821c:	91 50       	subi	r25, 0x01	; 1
    821e:	50 40       	sbci	r21, 0x00	; 0
    8220:	e6 95       	lsr	r30
    8222:	00 1c       	adc	r0, r0
    8224:	ca f7       	brpl	.-14     	; 0x8218 <__divsf3_pse+0x2c>
    8226:	29 d0       	rcall	.+82     	; 0x827a <__divsf3_pse+0x8e>
    8228:	fe 2f       	mov	r31, r30
    822a:	27 d0       	rcall	.+78     	; 0x827a <__divsf3_pse+0x8e>
    822c:	66 0f       	add	r22, r22
    822e:	77 1f       	adc	r23, r23
    8230:	88 1f       	adc	r24, r24
    8232:	bb 1f       	adc	r27, r27
    8234:	26 17       	cp	r18, r22
    8236:	37 07       	cpc	r19, r23
    8238:	48 07       	cpc	r20, r24
    823a:	ab 07       	cpc	r26, r27
    823c:	b0 e8       	ldi	r27, 0x80	; 128
    823e:	09 f0       	breq	.+2      	; 0x8242 <__divsf3_pse+0x56>
    8240:	bb 0b       	sbc	r27, r27
    8242:	80 2d       	mov	r24, r0
    8244:	bf 01       	movw	r22, r30
    8246:	ff 27       	eor	r31, r31
    8248:	93 58       	subi	r25, 0x83	; 131
    824a:	5f 4f       	sbci	r21, 0xFF	; 255
    824c:	2a f0       	brmi	.+10     	; 0x8258 <__divsf3_pse+0x6c>
    824e:	9e 3f       	cpi	r25, 0xFE	; 254
    8250:	51 05       	cpc	r21, r1
    8252:	68 f0       	brcs	.+26     	; 0x826e <__divsf3_pse+0x82>
    8254:	b6 c0       	rjmp	.+364    	; 0x83c2 <__fp_inf>
    8256:	9e c1       	rjmp	.+828    	; 0x8594 <__fp_szero>
    8258:	5f 3f       	cpi	r21, 0xFF	; 255
    825a:	ec f3       	brlt	.-6      	; 0x8256 <__divsf3_pse+0x6a>
    825c:	98 3e       	cpi	r25, 0xE8	; 232
    825e:	dc f3       	brlt	.-10     	; 0x8256 <__divsf3_pse+0x6a>
    8260:	86 95       	lsr	r24
    8262:	77 95       	ror	r23
    8264:	67 95       	ror	r22
    8266:	b7 95       	ror	r27
    8268:	f7 95       	ror	r31
    826a:	9f 5f       	subi	r25, 0xFF	; 255
    826c:	c9 f7       	brne	.-14     	; 0x8260 <__divsf3_pse+0x74>
    826e:	88 0f       	add	r24, r24
    8270:	91 1d       	adc	r25, r1
    8272:	96 95       	lsr	r25
    8274:	87 95       	ror	r24
    8276:	97 f9       	bld	r25, 7
    8278:	08 95       	ret
    827a:	e1 e0       	ldi	r30, 0x01	; 1
    827c:	66 0f       	add	r22, r22
    827e:	77 1f       	adc	r23, r23
    8280:	88 1f       	adc	r24, r24
    8282:	bb 1f       	adc	r27, r27
    8284:	62 17       	cp	r22, r18
    8286:	73 07       	cpc	r23, r19
    8288:	84 07       	cpc	r24, r20
    828a:	ba 07       	cpc	r27, r26
    828c:	20 f0       	brcs	.+8      	; 0x8296 <__divsf3_pse+0xaa>
    828e:	62 1b       	sub	r22, r18
    8290:	73 0b       	sbc	r23, r19
    8292:	84 0b       	sbc	r24, r20
    8294:	ba 0b       	sbc	r27, r26
    8296:	ee 1f       	adc	r30, r30
    8298:	88 f7       	brcc	.-30     	; 0x827c <__divsf3_pse+0x90>
    829a:	e0 95       	com	r30
    829c:	08 95       	ret

0000829e <__fixsfsi>:
    829e:	04 d0       	rcall	.+8      	; 0x82a8 <__fixunssfsi>
    82a0:	68 94       	set
    82a2:	b1 11       	cpse	r27, r1
    82a4:	77 c1       	rjmp	.+750    	; 0x8594 <__fp_szero>
    82a6:	08 95       	ret

000082a8 <__fixunssfsi>:
    82a8:	43 d1       	rcall	.+646    	; 0x8530 <__fp_splitA>
    82aa:	88 f0       	brcs	.+34     	; 0x82ce <__fixunssfsi+0x26>
    82ac:	9f 57       	subi	r25, 0x7F	; 127
    82ae:	90 f0       	brcs	.+36     	; 0x82d4 <__fixunssfsi+0x2c>
    82b0:	b9 2f       	mov	r27, r25
    82b2:	99 27       	eor	r25, r25
    82b4:	b7 51       	subi	r27, 0x17	; 23
    82b6:	a0 f0       	brcs	.+40     	; 0x82e0 <__fixunssfsi+0x38>
    82b8:	d1 f0       	breq	.+52     	; 0x82ee <__fixunssfsi+0x46>
    82ba:	66 0f       	add	r22, r22
    82bc:	77 1f       	adc	r23, r23
    82be:	88 1f       	adc	r24, r24
    82c0:	99 1f       	adc	r25, r25
    82c2:	1a f0       	brmi	.+6      	; 0x82ca <__fixunssfsi+0x22>
    82c4:	ba 95       	dec	r27
    82c6:	c9 f7       	brne	.-14     	; 0x82ba <__fixunssfsi+0x12>
    82c8:	12 c0       	rjmp	.+36     	; 0x82ee <__fixunssfsi+0x46>
    82ca:	b1 30       	cpi	r27, 0x01	; 1
    82cc:	81 f0       	breq	.+32     	; 0x82ee <__fixunssfsi+0x46>
    82ce:	61 d1       	rcall	.+706    	; 0x8592 <__fp_zero>
    82d0:	b1 e0       	ldi	r27, 0x01	; 1
    82d2:	08 95       	ret
    82d4:	5e c1       	rjmp	.+700    	; 0x8592 <__fp_zero>
    82d6:	67 2f       	mov	r22, r23
    82d8:	78 2f       	mov	r23, r24
    82da:	88 27       	eor	r24, r24
    82dc:	b8 5f       	subi	r27, 0xF8	; 248
    82de:	39 f0       	breq	.+14     	; 0x82ee <__fixunssfsi+0x46>
    82e0:	b9 3f       	cpi	r27, 0xF9	; 249
    82e2:	cc f3       	brlt	.-14     	; 0x82d6 <__fixunssfsi+0x2e>
    82e4:	86 95       	lsr	r24
    82e6:	77 95       	ror	r23
    82e8:	67 95       	ror	r22
    82ea:	b3 95       	inc	r27
    82ec:	d9 f7       	brne	.-10     	; 0x82e4 <__fixunssfsi+0x3c>
    82ee:	3e f4       	brtc	.+14     	; 0x82fe <__fixunssfsi+0x56>
    82f0:	90 95       	com	r25
    82f2:	80 95       	com	r24
    82f4:	70 95       	com	r23
    82f6:	61 95       	neg	r22
    82f8:	7f 4f       	sbci	r23, 0xFF	; 255
    82fa:	8f 4f       	sbci	r24, 0xFF	; 255
    82fc:	9f 4f       	sbci	r25, 0xFF	; 255
    82fe:	08 95       	ret

00008300 <__floatunsisf>:
    8300:	e8 94       	clt
    8302:	09 c0       	rjmp	.+18     	; 0x8316 <__floatsisf+0x12>

00008304 <__floatsisf>:
    8304:	97 fb       	bst	r25, 7
    8306:	3e f4       	brtc	.+14     	; 0x8316 <__floatsisf+0x12>
    8308:	90 95       	com	r25
    830a:	80 95       	com	r24
    830c:	70 95       	com	r23
    830e:	61 95       	neg	r22
    8310:	7f 4f       	sbci	r23, 0xFF	; 255
    8312:	8f 4f       	sbci	r24, 0xFF	; 255
    8314:	9f 4f       	sbci	r25, 0xFF	; 255
    8316:	99 23       	and	r25, r25
    8318:	a9 f0       	breq	.+42     	; 0x8344 <__floatsisf+0x40>
    831a:	f9 2f       	mov	r31, r25
    831c:	96 e9       	ldi	r25, 0x96	; 150
    831e:	bb 27       	eor	r27, r27
    8320:	93 95       	inc	r25
    8322:	f6 95       	lsr	r31
    8324:	87 95       	ror	r24
    8326:	77 95       	ror	r23
    8328:	67 95       	ror	r22
    832a:	b7 95       	ror	r27
    832c:	f1 11       	cpse	r31, r1
    832e:	f8 cf       	rjmp	.-16     	; 0x8320 <__floatsisf+0x1c>
    8330:	fa f4       	brpl	.+62     	; 0x8370 <__floatsisf+0x6c>
    8332:	bb 0f       	add	r27, r27
    8334:	11 f4       	brne	.+4      	; 0x833a <__floatsisf+0x36>
    8336:	60 ff       	sbrs	r22, 0
    8338:	1b c0       	rjmp	.+54     	; 0x8370 <__floatsisf+0x6c>
    833a:	6f 5f       	subi	r22, 0xFF	; 255
    833c:	7f 4f       	sbci	r23, 0xFF	; 255
    833e:	8f 4f       	sbci	r24, 0xFF	; 255
    8340:	9f 4f       	sbci	r25, 0xFF	; 255
    8342:	16 c0       	rjmp	.+44     	; 0x8370 <__floatsisf+0x6c>
    8344:	88 23       	and	r24, r24
    8346:	11 f0       	breq	.+4      	; 0x834c <__floatsisf+0x48>
    8348:	96 e9       	ldi	r25, 0x96	; 150
    834a:	11 c0       	rjmp	.+34     	; 0x836e <__floatsisf+0x6a>
    834c:	77 23       	and	r23, r23
    834e:	21 f0       	breq	.+8      	; 0x8358 <__floatsisf+0x54>
    8350:	9e e8       	ldi	r25, 0x8E	; 142
    8352:	87 2f       	mov	r24, r23
    8354:	76 2f       	mov	r23, r22
    8356:	05 c0       	rjmp	.+10     	; 0x8362 <__floatsisf+0x5e>
    8358:	66 23       	and	r22, r22
    835a:	71 f0       	breq	.+28     	; 0x8378 <__floatsisf+0x74>
    835c:	96 e8       	ldi	r25, 0x86	; 134
    835e:	86 2f       	mov	r24, r22
    8360:	70 e0       	ldi	r23, 0x00	; 0
    8362:	60 e0       	ldi	r22, 0x00	; 0
    8364:	2a f0       	brmi	.+10     	; 0x8370 <__floatsisf+0x6c>
    8366:	9a 95       	dec	r25
    8368:	66 0f       	add	r22, r22
    836a:	77 1f       	adc	r23, r23
    836c:	88 1f       	adc	r24, r24
    836e:	da f7       	brpl	.-10     	; 0x8366 <__floatsisf+0x62>
    8370:	88 0f       	add	r24, r24
    8372:	96 95       	lsr	r25
    8374:	87 95       	ror	r24
    8376:	97 f9       	bld	r25, 7
    8378:	08 95       	ret

0000837a <__fp_cmp>:
    837a:	99 0f       	add	r25, r25
    837c:	00 08       	sbc	r0, r0
    837e:	55 0f       	add	r21, r21
    8380:	aa 0b       	sbc	r26, r26
    8382:	e0 e8       	ldi	r30, 0x80	; 128
    8384:	fe ef       	ldi	r31, 0xFE	; 254
    8386:	16 16       	cp	r1, r22
    8388:	17 06       	cpc	r1, r23
    838a:	e8 07       	cpc	r30, r24
    838c:	f9 07       	cpc	r31, r25
    838e:	c0 f0       	brcs	.+48     	; 0x83c0 <__fp_cmp+0x46>
    8390:	12 16       	cp	r1, r18
    8392:	13 06       	cpc	r1, r19
    8394:	e4 07       	cpc	r30, r20
    8396:	f5 07       	cpc	r31, r21
    8398:	98 f0       	brcs	.+38     	; 0x83c0 <__fp_cmp+0x46>
    839a:	62 1b       	sub	r22, r18
    839c:	73 0b       	sbc	r23, r19
    839e:	84 0b       	sbc	r24, r20
    83a0:	95 0b       	sbc	r25, r21
    83a2:	39 f4       	brne	.+14     	; 0x83b2 <__fp_cmp+0x38>
    83a4:	0a 26       	eor	r0, r26
    83a6:	61 f0       	breq	.+24     	; 0x83c0 <__fp_cmp+0x46>
    83a8:	23 2b       	or	r18, r19
    83aa:	24 2b       	or	r18, r20
    83ac:	25 2b       	or	r18, r21
    83ae:	21 f4       	brne	.+8      	; 0x83b8 <__fp_cmp+0x3e>
    83b0:	08 95       	ret
    83b2:	0a 26       	eor	r0, r26
    83b4:	09 f4       	brne	.+2      	; 0x83b8 <__fp_cmp+0x3e>
    83b6:	a1 40       	sbci	r26, 0x01	; 1
    83b8:	a6 95       	lsr	r26
    83ba:	8f ef       	ldi	r24, 0xFF	; 255
    83bc:	81 1d       	adc	r24, r1
    83be:	81 1d       	adc	r24, r1
    83c0:	08 95       	ret

000083c2 <__fp_inf>:
    83c2:	97 f9       	bld	r25, 7
    83c4:	9f 67       	ori	r25, 0x7F	; 127
    83c6:	80 e8       	ldi	r24, 0x80	; 128
    83c8:	70 e0       	ldi	r23, 0x00	; 0
    83ca:	60 e0       	ldi	r22, 0x00	; 0
    83cc:	08 95       	ret

000083ce <__fp_mintl>:
    83ce:	88 23       	and	r24, r24
    83d0:	71 f4       	brne	.+28     	; 0x83ee <__fp_mintl+0x20>
    83d2:	77 23       	and	r23, r23
    83d4:	21 f0       	breq	.+8      	; 0x83de <__fp_mintl+0x10>
    83d6:	98 50       	subi	r25, 0x08	; 8
    83d8:	87 2b       	or	r24, r23
    83da:	76 2f       	mov	r23, r22
    83dc:	07 c0       	rjmp	.+14     	; 0x83ec <__fp_mintl+0x1e>
    83de:	66 23       	and	r22, r22
    83e0:	11 f4       	brne	.+4      	; 0x83e6 <__fp_mintl+0x18>
    83e2:	99 27       	eor	r25, r25
    83e4:	0d c0       	rjmp	.+26     	; 0x8400 <__fp_mintl+0x32>
    83e6:	90 51       	subi	r25, 0x10	; 16
    83e8:	86 2b       	or	r24, r22
    83ea:	70 e0       	ldi	r23, 0x00	; 0
    83ec:	60 e0       	ldi	r22, 0x00	; 0
    83ee:	2a f0       	brmi	.+10     	; 0x83fa <__fp_mintl+0x2c>
    83f0:	9a 95       	dec	r25
    83f2:	66 0f       	add	r22, r22
    83f4:	77 1f       	adc	r23, r23
    83f6:	88 1f       	adc	r24, r24
    83f8:	da f7       	brpl	.-10     	; 0x83f0 <__fp_mintl+0x22>
    83fa:	88 0f       	add	r24, r24
    83fc:	96 95       	lsr	r25
    83fe:	87 95       	ror	r24
    8400:	97 f9       	bld	r25, 7
    8402:	08 95       	ret

00008404 <__fp_mpack>:
    8404:	9f 3f       	cpi	r25, 0xFF	; 255
    8406:	31 f0       	breq	.+12     	; 0x8414 <__fp_mpack_finite+0xc>

00008408 <__fp_mpack_finite>:
    8408:	91 50       	subi	r25, 0x01	; 1
    840a:	20 f4       	brcc	.+8      	; 0x8414 <__fp_mpack_finite+0xc>
    840c:	87 95       	ror	r24
    840e:	77 95       	ror	r23
    8410:	67 95       	ror	r22
    8412:	b7 95       	ror	r27
    8414:	88 0f       	add	r24, r24
    8416:	91 1d       	adc	r25, r1
    8418:	96 95       	lsr	r25
    841a:	87 95       	ror	r24
    841c:	97 f9       	bld	r25, 7
    841e:	08 95       	ret

00008420 <__fp_nan>:
    8420:	9f ef       	ldi	r25, 0xFF	; 255
    8422:	80 ec       	ldi	r24, 0xC0	; 192
    8424:	08 95       	ret

00008426 <__fp_powser>:
    8426:	df 93       	push	r29
    8428:	cf 93       	push	r28
    842a:	1f 93       	push	r17
    842c:	0f 93       	push	r16
    842e:	ff 92       	push	r15
    8430:	ef 92       	push	r14
    8432:	df 92       	push	r13
    8434:	7b 01       	movw	r14, r22
    8436:	8c 01       	movw	r16, r24
    8438:	68 94       	set
    843a:	05 c0       	rjmp	.+10     	; 0x8446 <__fp_powser+0x20>
    843c:	da 2e       	mov	r13, r26
    843e:	ef 01       	movw	r28, r30
    8440:	8d d1       	rcall	.+794    	; 0x875c <__mulsf3x>
    8442:	fe 01       	movw	r30, r28
    8444:	e8 94       	clt
    8446:	a5 91       	lpm	r26, Z+
    8448:	25 91       	lpm	r18, Z+
    844a:	35 91       	lpm	r19, Z+
    844c:	45 91       	lpm	r20, Z+
    844e:	55 91       	lpm	r21, Z+
    8450:	ae f3       	brts	.-22     	; 0x843c <__fp_powser+0x16>
    8452:	ef 01       	movw	r28, r30
    8454:	27 de       	rcall	.-946    	; 0x80a4 <__addsf3x>
    8456:	fe 01       	movw	r30, r28
    8458:	97 01       	movw	r18, r14
    845a:	a8 01       	movw	r20, r16
    845c:	da 94       	dec	r13
    845e:	79 f7       	brne	.-34     	; 0x843e <__fp_powser+0x18>
    8460:	df 90       	pop	r13
    8462:	ef 90       	pop	r14
    8464:	ff 90       	pop	r15
    8466:	0f 91       	pop	r16
    8468:	1f 91       	pop	r17
    846a:	cf 91       	pop	r28
    846c:	df 91       	pop	r29
    846e:	08 95       	ret

00008470 <__fp_pscA>:
    8470:	00 24       	eor	r0, r0
    8472:	0a 94       	dec	r0
    8474:	16 16       	cp	r1, r22
    8476:	17 06       	cpc	r1, r23
    8478:	18 06       	cpc	r1, r24
    847a:	09 06       	cpc	r0, r25
    847c:	08 95       	ret

0000847e <__fp_pscB>:
    847e:	00 24       	eor	r0, r0
    8480:	0a 94       	dec	r0
    8482:	12 16       	cp	r1, r18
    8484:	13 06       	cpc	r1, r19
    8486:	14 06       	cpc	r1, r20
    8488:	05 06       	cpc	r0, r21
    848a:	08 95       	ret
    848c:	c9 cf       	rjmp	.-110    	; 0x8420 <__fp_nan>

0000848e <__fp_rempio2>:
    848e:	50 d0       	rcall	.+160    	; 0x8530 <__fp_splitA>
    8490:	e8 f3       	brcs	.-6      	; 0x848c <__fp_pscB+0xe>
    8492:	e8 94       	clt
    8494:	e0 e0       	ldi	r30, 0x00	; 0
    8496:	bb 27       	eor	r27, r27
    8498:	9f 57       	subi	r25, 0x7F	; 127
    849a:	f0 f0       	brcs	.+60     	; 0x84d8 <__fp_rempio2+0x4a>
    849c:	2a ed       	ldi	r18, 0xDA	; 218
    849e:	3f e0       	ldi	r19, 0x0F	; 15
    84a0:	49 ec       	ldi	r20, 0xC9	; 201
    84a2:	06 c0       	rjmp	.+12     	; 0x84b0 <__fp_rempio2+0x22>
    84a4:	ee 0f       	add	r30, r30
    84a6:	bb 0f       	add	r27, r27
    84a8:	66 1f       	adc	r22, r22
    84aa:	77 1f       	adc	r23, r23
    84ac:	88 1f       	adc	r24, r24
    84ae:	28 f0       	brcs	.+10     	; 0x84ba <__fp_rempio2+0x2c>
    84b0:	b2 3a       	cpi	r27, 0xA2	; 162
    84b2:	62 07       	cpc	r22, r18
    84b4:	73 07       	cpc	r23, r19
    84b6:	84 07       	cpc	r24, r20
    84b8:	28 f0       	brcs	.+10     	; 0x84c4 <__fp_rempio2+0x36>
    84ba:	b2 5a       	subi	r27, 0xA2	; 162
    84bc:	62 0b       	sbc	r22, r18
    84be:	73 0b       	sbc	r23, r19
    84c0:	84 0b       	sbc	r24, r20
    84c2:	e3 95       	inc	r30
    84c4:	9a 95       	dec	r25
    84c6:	72 f7       	brpl	.-36     	; 0x84a4 <__fp_rempio2+0x16>
    84c8:	80 38       	cpi	r24, 0x80	; 128
    84ca:	30 f4       	brcc	.+12     	; 0x84d8 <__fp_rempio2+0x4a>
    84cc:	9a 95       	dec	r25
    84ce:	bb 0f       	add	r27, r27
    84d0:	66 1f       	adc	r22, r22
    84d2:	77 1f       	adc	r23, r23
    84d4:	88 1f       	adc	r24, r24
    84d6:	d2 f7       	brpl	.-12     	; 0x84cc <__fp_rempio2+0x3e>
    84d8:	90 48       	sbci	r25, 0x80	; 128
    84da:	96 cf       	rjmp	.-212    	; 0x8408 <__fp_mpack_finite>

000084dc <__fp_round>:
    84dc:	09 2e       	mov	r0, r25
    84de:	03 94       	inc	r0
    84e0:	00 0c       	add	r0, r0
    84e2:	11 f4       	brne	.+4      	; 0x84e8 <__fp_round+0xc>
    84e4:	88 23       	and	r24, r24
    84e6:	52 f0       	brmi	.+20     	; 0x84fc <__fp_round+0x20>
    84e8:	bb 0f       	add	r27, r27
    84ea:	40 f4       	brcc	.+16     	; 0x84fc <__fp_round+0x20>
    84ec:	bf 2b       	or	r27, r31
    84ee:	11 f4       	brne	.+4      	; 0x84f4 <__fp_round+0x18>
    84f0:	60 ff       	sbrs	r22, 0
    84f2:	04 c0       	rjmp	.+8      	; 0x84fc <__fp_round+0x20>
    84f4:	6f 5f       	subi	r22, 0xFF	; 255
    84f6:	7f 4f       	sbci	r23, 0xFF	; 255
    84f8:	8f 4f       	sbci	r24, 0xFF	; 255
    84fa:	9f 4f       	sbci	r25, 0xFF	; 255
    84fc:	08 95       	ret

000084fe <__fp_sinus>:
    84fe:	ef 93       	push	r30
    8500:	e0 ff       	sbrs	r30, 0
    8502:	06 c0       	rjmp	.+12     	; 0x8510 <__fp_sinus+0x12>
    8504:	a2 ea       	ldi	r26, 0xA2	; 162
    8506:	2a ed       	ldi	r18, 0xDA	; 218
    8508:	3f e0       	ldi	r19, 0x0F	; 15
    850a:	49 ec       	ldi	r20, 0xC9	; 201
    850c:	5f eb       	ldi	r21, 0xBF	; 191
    850e:	ca dd       	rcall	.-1132   	; 0x80a4 <__addsf3x>
    8510:	e5 df       	rcall	.-54     	; 0x84dc <__fp_round>
    8512:	0f 90       	pop	r0
    8514:	03 94       	inc	r0
    8516:	01 fc       	sbrc	r0, 1
    8518:	90 58       	subi	r25, 0x80	; 128
    851a:	e5 e1       	ldi	r30, 0x15	; 21
    851c:	f2 e0       	ldi	r31, 0x02	; 2
    851e:	d2 c1       	rjmp	.+932    	; 0x88c4 <__fp_powsodd>

00008520 <__fp_split3>:
    8520:	57 fd       	sbrc	r21, 7
    8522:	90 58       	subi	r25, 0x80	; 128
    8524:	44 0f       	add	r20, r20
    8526:	55 1f       	adc	r21, r21
    8528:	59 f0       	breq	.+22     	; 0x8540 <__fp_splitA+0x10>
    852a:	5f 3f       	cpi	r21, 0xFF	; 255
    852c:	71 f0       	breq	.+28     	; 0x854a <__fp_splitA+0x1a>
    852e:	47 95       	ror	r20

00008530 <__fp_splitA>:
    8530:	88 0f       	add	r24, r24
    8532:	97 fb       	bst	r25, 7
    8534:	99 1f       	adc	r25, r25
    8536:	61 f0       	breq	.+24     	; 0x8550 <__fp_splitA+0x20>
    8538:	9f 3f       	cpi	r25, 0xFF	; 255
    853a:	79 f0       	breq	.+30     	; 0x855a <__fp_splitA+0x2a>
    853c:	87 95       	ror	r24
    853e:	08 95       	ret
    8540:	12 16       	cp	r1, r18
    8542:	13 06       	cpc	r1, r19
    8544:	14 06       	cpc	r1, r20
    8546:	55 1f       	adc	r21, r21
    8548:	f2 cf       	rjmp	.-28     	; 0x852e <__fp_split3+0xe>
    854a:	46 95       	lsr	r20
    854c:	f1 df       	rcall	.-30     	; 0x8530 <__fp_splitA>
    854e:	08 c0       	rjmp	.+16     	; 0x8560 <__fp_splitA+0x30>
    8550:	16 16       	cp	r1, r22
    8552:	17 06       	cpc	r1, r23
    8554:	18 06       	cpc	r1, r24
    8556:	99 1f       	adc	r25, r25
    8558:	f1 cf       	rjmp	.-30     	; 0x853c <__fp_splitA+0xc>
    855a:	86 95       	lsr	r24
    855c:	71 05       	cpc	r23, r1
    855e:	61 05       	cpc	r22, r1
    8560:	08 94       	sec
    8562:	08 95       	ret

00008564 <__fp_trunc>:
    8564:	e5 df       	rcall	.-54     	; 0x8530 <__fp_splitA>
    8566:	a0 f0       	brcs	.+40     	; 0x8590 <__fp_trunc+0x2c>
    8568:	be e7       	ldi	r27, 0x7E	; 126
    856a:	b9 17       	cp	r27, r25
    856c:	88 f4       	brcc	.+34     	; 0x8590 <__fp_trunc+0x2c>
    856e:	bb 27       	eor	r27, r27
    8570:	9f 38       	cpi	r25, 0x8F	; 143
    8572:	60 f4       	brcc	.+24     	; 0x858c <__fp_trunc+0x28>
    8574:	16 16       	cp	r1, r22
    8576:	b1 1d       	adc	r27, r1
    8578:	67 2f       	mov	r22, r23
    857a:	78 2f       	mov	r23, r24
    857c:	88 27       	eor	r24, r24
    857e:	98 5f       	subi	r25, 0xF8	; 248
    8580:	f7 cf       	rjmp	.-18     	; 0x8570 <__fp_trunc+0xc>
    8582:	86 95       	lsr	r24
    8584:	77 95       	ror	r23
    8586:	67 95       	ror	r22
    8588:	b1 1d       	adc	r27, r1
    858a:	93 95       	inc	r25
    858c:	96 39       	cpi	r25, 0x96	; 150
    858e:	c8 f3       	brcs	.-14     	; 0x8582 <__fp_trunc+0x1e>
    8590:	08 95       	ret

00008592 <__fp_zero>:
    8592:	e8 94       	clt

00008594 <__fp_szero>:
    8594:	bb 27       	eor	r27, r27
    8596:	66 27       	eor	r22, r22
    8598:	77 27       	eor	r23, r23
    859a:	cb 01       	movw	r24, r22
    859c:	97 f9       	bld	r25, 7
    859e:	08 95       	ret

000085a0 <__gesf2>:
    85a0:	ec de       	rcall	.-552    	; 0x837a <__fp_cmp>
    85a2:	08 f4       	brcc	.+2      	; 0x85a6 <__gesf2+0x6>
    85a4:	8f ef       	ldi	r24, 0xFF	; 255
    85a6:	08 95       	ret
    85a8:	63 df       	rcall	.-314    	; 0x8470 <__fp_pscA>
    85aa:	19 f0       	breq	.+6      	; 0x85b2 <__gesf2+0x12>
    85ac:	68 df       	rcall	.-304    	; 0x847e <__fp_pscB>
    85ae:	09 f0       	breq	.+2      	; 0x85b2 <__gesf2+0x12>
    85b0:	37 cf       	rjmp	.-402    	; 0x8420 <__fp_nan>
    85b2:	07 cf       	rjmp	.-498    	; 0x83c2 <__fp_inf>
    85b4:	b9 01       	movw	r22, r18
    85b6:	ca 01       	movw	r24, r20
    85b8:	25 cf       	rjmp	.-438    	; 0x8404 <__fp_mpack>

000085ba <hypot>:
    85ba:	9f 77       	andi	r25, 0x7F	; 127
    85bc:	5f 77       	andi	r21, 0x7F	; 127
    85be:	b0 df       	rcall	.-160    	; 0x8520 <__fp_split3>
    85c0:	98 f3       	brcs	.-26     	; 0x85a8 <__gesf2+0x8>
    85c2:	99 23       	and	r25, r25
    85c4:	b9 f3       	breq	.-18     	; 0x85b4 <__gesf2+0x14>
    85c6:	55 23       	and	r21, r21
    85c8:	b9 f3       	breq	.-18     	; 0x85b8 <__gesf2+0x18>
    85ca:	ff 27       	eor	r31, r31
    85cc:	95 17       	cp	r25, r21
    85ce:	58 f4       	brcc	.+22     	; 0x85e6 <hypot+0x2c>
    85d0:	e5 2f       	mov	r30, r21
    85d2:	e9 1b       	sub	r30, r25
    85d4:	ed 30       	cpi	r30, 0x0D	; 13
    85d6:	70 f7       	brcc	.-36     	; 0x85b4 <__gesf2+0x14>
    85d8:	5e 3b       	cpi	r21, 0xBE	; 190
    85da:	10 f0       	brcs	.+4      	; 0x85e0 <hypot+0x26>
    85dc:	f1 e4       	ldi	r31, 0x41	; 65
    85de:	1c c0       	rjmp	.+56     	; 0x8618 <hypot+0x5e>
    85e0:	90 34       	cpi	r25, 0x40	; 64
    85e2:	e0 f4       	brcc	.+56     	; 0x861c <hypot+0x62>
    85e4:	0a c0       	rjmp	.+20     	; 0x85fa <hypot+0x40>
    85e6:	e9 2f       	mov	r30, r25
    85e8:	e5 1b       	sub	r30, r21
    85ea:	ed 30       	cpi	r30, 0x0D	; 13
    85ec:	28 f7       	brcc	.-54     	; 0x85b8 <__gesf2+0x18>
    85ee:	9e 3b       	cpi	r25, 0xBE	; 190
    85f0:	10 f0       	brcs	.+4      	; 0x85f6 <hypot+0x3c>
    85f2:	f1 e4       	ldi	r31, 0x41	; 65
    85f4:	11 c0       	rjmp	.+34     	; 0x8618 <hypot+0x5e>
    85f6:	50 34       	cpi	r21, 0x40	; 64
    85f8:	88 f4       	brcc	.+34     	; 0x861c <hypot+0x62>
    85fa:	f9 ea       	ldi	r31, 0xA9	; 169
    85fc:	88 23       	and	r24, r24
    85fe:	2a f0       	brmi	.+10     	; 0x860a <hypot+0x50>
    8600:	9a 95       	dec	r25
    8602:	66 0f       	add	r22, r22
    8604:	77 1f       	adc	r23, r23
    8606:	88 1f       	adc	r24, r24
    8608:	da f7       	brpl	.-10     	; 0x8600 <hypot+0x46>
    860a:	44 23       	and	r20, r20
    860c:	2a f0       	brmi	.+10     	; 0x8618 <hypot+0x5e>
    860e:	5a 95       	dec	r21
    8610:	22 0f       	add	r18, r18
    8612:	33 1f       	adc	r19, r19
    8614:	44 1f       	adc	r20, r20
    8616:	da f7       	brpl	.-10     	; 0x860e <hypot+0x54>
    8618:	9f 1b       	sub	r25, r31
    861a:	5f 1b       	sub	r21, r31
    861c:	ff 93       	push	r31
    861e:	1f 93       	push	r17
    8620:	0f 93       	push	r16
    8622:	ff 92       	push	r15
    8624:	ef 92       	push	r14
    8626:	79 01       	movw	r14, r18
    8628:	8a 01       	movw	r16, r20
    862a:	bb 27       	eor	r27, r27
    862c:	ab 2f       	mov	r26, r27
    862e:	9b 01       	movw	r18, r22
    8630:	ac 01       	movw	r20, r24
    8632:	96 d0       	rcall	.+300    	; 0x8760 <__mulsf3_pse>
    8634:	97 01       	movw	r18, r14
    8636:	a8 01       	movw	r20, r16
    8638:	bf 93       	push	r27
    863a:	7b 01       	movw	r14, r22
    863c:	8c 01       	movw	r16, r24
    863e:	aa 27       	eor	r26, r26
    8640:	ba 2f       	mov	r27, r26
    8642:	b9 01       	movw	r22, r18
    8644:	ca 01       	movw	r24, r20
    8646:	8c d0       	rcall	.+280    	; 0x8760 <__mulsf3_pse>
    8648:	af 91       	pop	r26
    864a:	97 01       	movw	r18, r14
    864c:	a8 01       	movw	r20, r16
    864e:	ef 90       	pop	r14
    8650:	ff 90       	pop	r15
    8652:	0f 91       	pop	r16
    8654:	1f 91       	pop	r17
    8656:	26 dd       	rcall	.-1460   	; 0x80a4 <__addsf3x>
    8658:	41 df       	rcall	.-382    	; 0x84dc <__fp_round>
    865a:	e1 d0       	rcall	.+450    	; 0x881e <sqrt>
    865c:	4f 91       	pop	r20
    865e:	40 ff       	sbrs	r20, 0
    8660:	08 95       	ret
    8662:	55 27       	eor	r21, r21
    8664:	47 fd       	sbrc	r20, 7
    8666:	50 95       	com	r21
    8668:	09 c0       	rjmp	.+18     	; 0x867c <ldexp>

0000866a <inverse>:
    866a:	9b 01       	movw	r18, r22
    866c:	ac 01       	movw	r20, r24
    866e:	60 e0       	ldi	r22, 0x00	; 0
    8670:	70 e0       	ldi	r23, 0x00	; 0
    8672:	80 e8       	ldi	r24, 0x80	; 128
    8674:	9f e3       	ldi	r25, 0x3F	; 63
    8676:	ab cd       	rjmp	.-1194   	; 0x81ce <__divsf3>
    8678:	a4 ce       	rjmp	.-696    	; 0x83c2 <__fp_inf>
    867a:	c4 ce       	rjmp	.-632    	; 0x8404 <__fp_mpack>

0000867c <ldexp>:
    867c:	59 df       	rcall	.-334    	; 0x8530 <__fp_splitA>
    867e:	e8 f3       	brcs	.-6      	; 0x867a <inverse+0x10>
    8680:	99 23       	and	r25, r25
    8682:	d9 f3       	breq	.-10     	; 0x867a <inverse+0x10>
    8684:	94 0f       	add	r25, r20
    8686:	51 1d       	adc	r21, r1
    8688:	bb f3       	brvs	.-18     	; 0x8678 <inverse+0xe>
    868a:	91 50       	subi	r25, 0x01	; 1
    868c:	50 40       	sbci	r21, 0x00	; 0
    868e:	94 f0       	brlt	.+36     	; 0x86b4 <ldexp+0x38>
    8690:	59 f0       	breq	.+22     	; 0x86a8 <ldexp+0x2c>
    8692:	88 23       	and	r24, r24
    8694:	32 f0       	brmi	.+12     	; 0x86a2 <ldexp+0x26>
    8696:	66 0f       	add	r22, r22
    8698:	77 1f       	adc	r23, r23
    869a:	88 1f       	adc	r24, r24
    869c:	91 50       	subi	r25, 0x01	; 1
    869e:	50 40       	sbci	r21, 0x00	; 0
    86a0:	c1 f7       	brne	.-16     	; 0x8692 <ldexp+0x16>
    86a2:	9e 3f       	cpi	r25, 0xFE	; 254
    86a4:	51 05       	cpc	r21, r1
    86a6:	44 f7       	brge	.-48     	; 0x8678 <inverse+0xe>
    86a8:	88 0f       	add	r24, r24
    86aa:	91 1d       	adc	r25, r1
    86ac:	96 95       	lsr	r25
    86ae:	87 95       	ror	r24
    86b0:	97 f9       	bld	r25, 7
    86b2:	08 95       	ret
    86b4:	5f 3f       	cpi	r21, 0xFF	; 255
    86b6:	ac f0       	brlt	.+42     	; 0x86e2 <ldexp+0x66>
    86b8:	98 3e       	cpi	r25, 0xE8	; 232
    86ba:	9c f0       	brlt	.+38     	; 0x86e2 <ldexp+0x66>
    86bc:	bb 27       	eor	r27, r27
    86be:	86 95       	lsr	r24
    86c0:	77 95       	ror	r23
    86c2:	67 95       	ror	r22
    86c4:	b7 95       	ror	r27
    86c6:	08 f4       	brcc	.+2      	; 0x86ca <ldexp+0x4e>
    86c8:	b1 60       	ori	r27, 0x01	; 1
    86ca:	93 95       	inc	r25
    86cc:	c1 f7       	brne	.-16     	; 0x86be <ldexp+0x42>
    86ce:	bb 0f       	add	r27, r27
    86d0:	58 f7       	brcc	.-42     	; 0x86a8 <ldexp+0x2c>
    86d2:	11 f4       	brne	.+4      	; 0x86d8 <ldexp+0x5c>
    86d4:	60 ff       	sbrs	r22, 0
    86d6:	e8 cf       	rjmp	.-48     	; 0x86a8 <ldexp+0x2c>
    86d8:	6f 5f       	subi	r22, 0xFF	; 255
    86da:	7f 4f       	sbci	r23, 0xFF	; 255
    86dc:	8f 4f       	sbci	r24, 0xFF	; 255
    86de:	9f 4f       	sbci	r25, 0xFF	; 255
    86e0:	e3 cf       	rjmp	.-58     	; 0x86a8 <ldexp+0x2c>
    86e2:	58 cf       	rjmp	.-336    	; 0x8594 <__fp_szero>

000086e4 <lround>:
    86e4:	25 df       	rcall	.-438    	; 0x8530 <__fp_splitA>
    86e6:	58 f1       	brcs	.+86     	; 0x873e <lround+0x5a>
    86e8:	9e 57       	subi	r25, 0x7E	; 126
    86ea:	58 f1       	brcs	.+86     	; 0x8742 <lround+0x5e>
    86ec:	98 51       	subi	r25, 0x18	; 24
    86ee:	a0 f0       	brcs	.+40     	; 0x8718 <lround+0x34>
    86f0:	e9 f0       	breq	.+58     	; 0x872c <lround+0x48>
    86f2:	98 30       	cpi	r25, 0x08	; 8
    86f4:	20 f5       	brcc	.+72     	; 0x873e <lround+0x5a>
    86f6:	09 2e       	mov	r0, r25
    86f8:	99 27       	eor	r25, r25
    86fa:	66 0f       	add	r22, r22
    86fc:	77 1f       	adc	r23, r23
    86fe:	88 1f       	adc	r24, r24
    8700:	99 1f       	adc	r25, r25
    8702:	0a 94       	dec	r0
    8704:	d1 f7       	brne	.-12     	; 0x86fa <lround+0x16>
    8706:	12 c0       	rjmp	.+36     	; 0x872c <lround+0x48>
    8708:	06 2e       	mov	r0, r22
    870a:	67 2f       	mov	r22, r23
    870c:	78 2f       	mov	r23, r24
    870e:	88 27       	eor	r24, r24
    8710:	98 5f       	subi	r25, 0xF8	; 248
    8712:	11 f4       	brne	.+4      	; 0x8718 <lround+0x34>
    8714:	00 0c       	add	r0, r0
    8716:	07 c0       	rjmp	.+14     	; 0x8726 <lround+0x42>
    8718:	99 3f       	cpi	r25, 0xF9	; 249
    871a:	b4 f3       	brlt	.-20     	; 0x8708 <lround+0x24>
    871c:	86 95       	lsr	r24
    871e:	77 95       	ror	r23
    8720:	67 95       	ror	r22
    8722:	93 95       	inc	r25
    8724:	d9 f7       	brne	.-10     	; 0x871c <lround+0x38>
    8726:	61 1d       	adc	r22, r1
    8728:	71 1d       	adc	r23, r1
    872a:	81 1d       	adc	r24, r1
    872c:	3e f4       	brtc	.+14     	; 0x873c <lround+0x58>
    872e:	90 95       	com	r25
    8730:	80 95       	com	r24
    8732:	70 95       	com	r23
    8734:	61 95       	neg	r22
    8736:	7f 4f       	sbci	r23, 0xFF	; 255
    8738:	8f 4f       	sbci	r24, 0xFF	; 255
    873a:	9f 4f       	sbci	r25, 0xFF	; 255
    873c:	08 95       	ret
    873e:	68 94       	set
    8740:	29 cf       	rjmp	.-430    	; 0x8594 <__fp_szero>
    8742:	27 cf       	rjmp	.-434    	; 0x8592 <__fp_zero>

00008744 <__mulsf3>:
    8744:	0b d0       	rcall	.+22     	; 0x875c <__mulsf3x>
    8746:	ca ce       	rjmp	.-620    	; 0x84dc <__fp_round>
    8748:	93 de       	rcall	.-730    	; 0x8470 <__fp_pscA>
    874a:	28 f0       	brcs	.+10     	; 0x8756 <__mulsf3+0x12>
    874c:	98 de       	rcall	.-720    	; 0x847e <__fp_pscB>
    874e:	18 f0       	brcs	.+6      	; 0x8756 <__mulsf3+0x12>
    8750:	95 23       	and	r25, r21
    8752:	09 f0       	breq	.+2      	; 0x8756 <__mulsf3+0x12>
    8754:	36 ce       	rjmp	.-916    	; 0x83c2 <__fp_inf>
    8756:	64 ce       	rjmp	.-824    	; 0x8420 <__fp_nan>
    8758:	11 24       	eor	r1, r1
    875a:	1c cf       	rjmp	.-456    	; 0x8594 <__fp_szero>

0000875c <__mulsf3x>:
    875c:	e1 de       	rcall	.-574    	; 0x8520 <__fp_split3>
    875e:	a0 f3       	brcs	.-24     	; 0x8748 <__mulsf3+0x4>

00008760 <__mulsf3_pse>:
    8760:	95 9f       	mul	r25, r21
    8762:	d1 f3       	breq	.-12     	; 0x8758 <__mulsf3+0x14>
    8764:	95 0f       	add	r25, r21
    8766:	50 e0       	ldi	r21, 0x00	; 0
    8768:	55 1f       	adc	r21, r21
    876a:	62 9f       	mul	r22, r18
    876c:	f0 01       	movw	r30, r0
    876e:	72 9f       	mul	r23, r18
    8770:	bb 27       	eor	r27, r27
    8772:	f0 0d       	add	r31, r0
    8774:	b1 1d       	adc	r27, r1
    8776:	63 9f       	mul	r22, r19
    8778:	aa 27       	eor	r26, r26
    877a:	f0 0d       	add	r31, r0
    877c:	b1 1d       	adc	r27, r1
    877e:	aa 1f       	adc	r26, r26
    8780:	64 9f       	mul	r22, r20
    8782:	66 27       	eor	r22, r22
    8784:	b0 0d       	add	r27, r0
    8786:	a1 1d       	adc	r26, r1
    8788:	66 1f       	adc	r22, r22
    878a:	82 9f       	mul	r24, r18
    878c:	22 27       	eor	r18, r18
    878e:	b0 0d       	add	r27, r0
    8790:	a1 1d       	adc	r26, r1
    8792:	62 1f       	adc	r22, r18
    8794:	73 9f       	mul	r23, r19
    8796:	b0 0d       	add	r27, r0
    8798:	a1 1d       	adc	r26, r1
    879a:	62 1f       	adc	r22, r18
    879c:	83 9f       	mul	r24, r19
    879e:	a0 0d       	add	r26, r0
    87a0:	61 1d       	adc	r22, r1
    87a2:	22 1f       	adc	r18, r18
    87a4:	74 9f       	mul	r23, r20
    87a6:	33 27       	eor	r19, r19
    87a8:	a0 0d       	add	r26, r0
    87aa:	61 1d       	adc	r22, r1
    87ac:	23 1f       	adc	r18, r19
    87ae:	84 9f       	mul	r24, r20
    87b0:	60 0d       	add	r22, r0
    87b2:	21 1d       	adc	r18, r1
    87b4:	82 2f       	mov	r24, r18
    87b6:	76 2f       	mov	r23, r22
    87b8:	6a 2f       	mov	r22, r26
    87ba:	11 24       	eor	r1, r1
    87bc:	9f 57       	subi	r25, 0x7F	; 127
    87be:	50 40       	sbci	r21, 0x00	; 0
    87c0:	8a f0       	brmi	.+34     	; 0x87e4 <__mulsf3_pse+0x84>
    87c2:	e1 f0       	breq	.+56     	; 0x87fc <__mulsf3_pse+0x9c>
    87c4:	88 23       	and	r24, r24
    87c6:	4a f0       	brmi	.+18     	; 0x87da <__mulsf3_pse+0x7a>
    87c8:	ee 0f       	add	r30, r30
    87ca:	ff 1f       	adc	r31, r31
    87cc:	bb 1f       	adc	r27, r27
    87ce:	66 1f       	adc	r22, r22
    87d0:	77 1f       	adc	r23, r23
    87d2:	88 1f       	adc	r24, r24
    87d4:	91 50       	subi	r25, 0x01	; 1
    87d6:	50 40       	sbci	r21, 0x00	; 0
    87d8:	a9 f7       	brne	.-22     	; 0x87c4 <__mulsf3_pse+0x64>
    87da:	9e 3f       	cpi	r25, 0xFE	; 254
    87dc:	51 05       	cpc	r21, r1
    87de:	70 f0       	brcs	.+28     	; 0x87fc <__mulsf3_pse+0x9c>
    87e0:	f0 cd       	rjmp	.-1056   	; 0x83c2 <__fp_inf>
    87e2:	d8 ce       	rjmp	.-592    	; 0x8594 <__fp_szero>
    87e4:	5f 3f       	cpi	r21, 0xFF	; 255
    87e6:	ec f3       	brlt	.-6      	; 0x87e2 <__mulsf3_pse+0x82>
    87e8:	98 3e       	cpi	r25, 0xE8	; 232
    87ea:	dc f3       	brlt	.-10     	; 0x87e2 <__mulsf3_pse+0x82>
    87ec:	86 95       	lsr	r24
    87ee:	77 95       	ror	r23
    87f0:	67 95       	ror	r22
    87f2:	b7 95       	ror	r27
    87f4:	f7 95       	ror	r31
    87f6:	e7 95       	ror	r30
    87f8:	9f 5f       	subi	r25, 0xFF	; 255
    87fa:	c1 f7       	brne	.-16     	; 0x87ec <__mulsf3_pse+0x8c>
    87fc:	fe 2b       	or	r31, r30
    87fe:	88 0f       	add	r24, r24
    8800:	91 1d       	adc	r25, r1
    8802:	96 95       	lsr	r25
    8804:	87 95       	ror	r24
    8806:	97 f9       	bld	r25, 7
    8808:	08 95       	ret

0000880a <sin>:
    880a:	9f 93       	push	r25
    880c:	40 de       	rcall	.-896    	; 0x848e <__fp_rempio2>
    880e:	0f 90       	pop	r0
    8810:	07 fc       	sbrc	r0, 7
    8812:	ee 5f       	subi	r30, 0xFE	; 254
    8814:	74 ce       	rjmp	.-792    	; 0x84fe <__fp_sinus>
    8816:	11 f4       	brne	.+4      	; 0x881c <sin+0x12>
    8818:	0e f4       	brtc	.+2      	; 0x881c <sin+0x12>
    881a:	02 ce       	rjmp	.-1020   	; 0x8420 <__fp_nan>
    881c:	f3 cd       	rjmp	.-1050   	; 0x8404 <__fp_mpack>

0000881e <sqrt>:
    881e:	88 de       	rcall	.-752    	; 0x8530 <__fp_splitA>
    8820:	d0 f3       	brcs	.-12     	; 0x8816 <sin+0xc>
    8822:	99 23       	and	r25, r25
    8824:	d9 f3       	breq	.-10     	; 0x881c <sin+0x12>
    8826:	ce f3       	brts	.-14     	; 0x881a <sin+0x10>
    8828:	9f 57       	subi	r25, 0x7F	; 127
    882a:	55 0b       	sbc	r21, r21
    882c:	87 ff       	sbrs	r24, 7
    882e:	43 d0       	rcall	.+134    	; 0x88b6 <__fp_norm2>
    8830:	00 24       	eor	r0, r0
    8832:	a0 e6       	ldi	r26, 0x60	; 96
    8834:	40 ea       	ldi	r20, 0xA0	; 160
    8836:	90 01       	movw	r18, r0
    8838:	80 58       	subi	r24, 0x80	; 128
    883a:	56 95       	lsr	r21
    883c:	97 95       	ror	r25
    883e:	28 f4       	brcc	.+10     	; 0x884a <sqrt+0x2c>
    8840:	80 5c       	subi	r24, 0xC0	; 192
    8842:	66 0f       	add	r22, r22
    8844:	77 1f       	adc	r23, r23
    8846:	88 1f       	adc	r24, r24
    8848:	20 f0       	brcs	.+8      	; 0x8852 <sqrt+0x34>
    884a:	26 17       	cp	r18, r22
    884c:	37 07       	cpc	r19, r23
    884e:	48 07       	cpc	r20, r24
    8850:	30 f4       	brcc	.+12     	; 0x885e <sqrt+0x40>
    8852:	62 1b       	sub	r22, r18
    8854:	73 0b       	sbc	r23, r19
    8856:	84 0b       	sbc	r24, r20
    8858:	20 29       	or	r18, r0
    885a:	31 29       	or	r19, r1
    885c:	4a 2b       	or	r20, r26
    885e:	a6 95       	lsr	r26
    8860:	17 94       	ror	r1
    8862:	07 94       	ror	r0
    8864:	20 25       	eor	r18, r0
    8866:	31 25       	eor	r19, r1
    8868:	4a 27       	eor	r20, r26
    886a:	58 f7       	brcc	.-42     	; 0x8842 <sqrt+0x24>
    886c:	66 0f       	add	r22, r22
    886e:	77 1f       	adc	r23, r23
    8870:	88 1f       	adc	r24, r24
    8872:	20 f0       	brcs	.+8      	; 0x887c <sqrt+0x5e>
    8874:	26 17       	cp	r18, r22
    8876:	37 07       	cpc	r19, r23
    8878:	48 07       	cpc	r20, r24
    887a:	30 f4       	brcc	.+12     	; 0x8888 <sqrt+0x6a>
    887c:	62 0b       	sbc	r22, r18
    887e:	73 0b       	sbc	r23, r19
    8880:	84 0b       	sbc	r24, r20
    8882:	20 0d       	add	r18, r0
    8884:	31 1d       	adc	r19, r1
    8886:	41 1d       	adc	r20, r1
    8888:	a0 95       	com	r26
    888a:	81 f7       	brne	.-32     	; 0x886c <sqrt+0x4e>
    888c:	b9 01       	movw	r22, r18
    888e:	84 2f       	mov	r24, r20
    8890:	91 58       	subi	r25, 0x81	; 129
    8892:	88 0f       	add	r24, r24
    8894:	96 95       	lsr	r25
    8896:	87 95       	ror	r24
    8898:	08 95       	ret

0000889a <square>:
    889a:	9b 01       	movw	r18, r22
    889c:	ac 01       	movw	r20, r24
    889e:	52 cf       	rjmp	.-348    	; 0x8744 <__mulsf3>

000088a0 <trunc>:
    88a0:	61 de       	rcall	.-830    	; 0x8564 <__fp_trunc>
    88a2:	20 f0       	brcs	.+8      	; 0x88ac <trunc+0xc>
    88a4:	9f 37       	cpi	r25, 0x7F	; 127
    88a6:	08 f4       	brcc	.+2      	; 0x88aa <trunc+0xa>
    88a8:	75 ce       	rjmp	.-790    	; 0x8594 <__fp_szero>
    88aa:	91 cd       	rjmp	.-1246   	; 0x83ce <__fp_mintl>
    88ac:	ab cd       	rjmp	.-1194   	; 0x8404 <__fp_mpack>

000088ae <__unordsf2>:
    88ae:	65 dd       	rcall	.-1334   	; 0x837a <__fp_cmp>
    88b0:	88 0b       	sbc	r24, r24
    88b2:	99 0b       	sbc	r25, r25
    88b4:	08 95       	ret

000088b6 <__fp_norm2>:
    88b6:	91 50       	subi	r25, 0x01	; 1
    88b8:	50 40       	sbci	r21, 0x00	; 0
    88ba:	66 0f       	add	r22, r22
    88bc:	77 1f       	adc	r23, r23
    88be:	88 1f       	adc	r24, r24
    88c0:	d2 f7       	brpl	.-12     	; 0x88b6 <__fp_norm2>
    88c2:	08 95       	ret

000088c4 <__fp_powsodd>:
    88c4:	9f 93       	push	r25
    88c6:	8f 93       	push	r24
    88c8:	7f 93       	push	r23
    88ca:	6f 93       	push	r22
    88cc:	ff 93       	push	r31
    88ce:	ef 93       	push	r30
    88d0:	9b 01       	movw	r18, r22
    88d2:	ac 01       	movw	r20, r24
    88d4:	37 df       	rcall	.-402    	; 0x8744 <__mulsf3>
    88d6:	ef 91       	pop	r30
    88d8:	ff 91       	pop	r31
    88da:	a5 dd       	rcall	.-1206   	; 0x8426 <__fp_powser>
    88dc:	2f 91       	pop	r18
    88de:	3f 91       	pop	r19
    88e0:	4f 91       	pop	r20
    88e2:	5f 91       	pop	r21
    88e4:	2f cf       	rjmp	.-418    	; 0x8744 <__mulsf3>

000088e6 <__mulsi3>:
    88e6:	62 9f       	mul	r22, r18
    88e8:	d0 01       	movw	r26, r0
    88ea:	73 9f       	mul	r23, r19
    88ec:	f0 01       	movw	r30, r0
    88ee:	82 9f       	mul	r24, r18
    88f0:	e0 0d       	add	r30, r0
    88f2:	f1 1d       	adc	r31, r1
    88f4:	64 9f       	mul	r22, r20
    88f6:	e0 0d       	add	r30, r0
    88f8:	f1 1d       	adc	r31, r1
    88fa:	92 9f       	mul	r25, r18
    88fc:	f0 0d       	add	r31, r0
    88fe:	83 9f       	mul	r24, r19
    8900:	f0 0d       	add	r31, r0
    8902:	74 9f       	mul	r23, r20
    8904:	f0 0d       	add	r31, r0
    8906:	65 9f       	mul	r22, r21
    8908:	f0 0d       	add	r31, r0
    890a:	99 27       	eor	r25, r25
    890c:	72 9f       	mul	r23, r18
    890e:	b0 0d       	add	r27, r0
    8910:	e1 1d       	adc	r30, r1
    8912:	f9 1f       	adc	r31, r25
    8914:	63 9f       	mul	r22, r19
    8916:	b0 0d       	add	r27, r0
    8918:	e1 1d       	adc	r30, r1
    891a:	f9 1f       	adc	r31, r25
    891c:	bd 01       	movw	r22, r26
    891e:	cf 01       	movw	r24, r30
    8920:	11 24       	eor	r1, r1
    8922:	08 95       	ret

00008924 <__udivmodsi4>:
    8924:	a1 e2       	ldi	r26, 0x21	; 33
    8926:	1a 2e       	mov	r1, r26
    8928:	aa 1b       	sub	r26, r26
    892a:	bb 1b       	sub	r27, r27
    892c:	fd 01       	movw	r30, r26
    892e:	0d c0       	rjmp	.+26     	; 0x894a <__udivmodsi4_ep>

00008930 <__udivmodsi4_loop>:
    8930:	aa 1f       	adc	r26, r26
    8932:	bb 1f       	adc	r27, r27
    8934:	ee 1f       	adc	r30, r30
    8936:	ff 1f       	adc	r31, r31
    8938:	a2 17       	cp	r26, r18
    893a:	b3 07       	cpc	r27, r19
    893c:	e4 07       	cpc	r30, r20
    893e:	f5 07       	cpc	r31, r21
    8940:	20 f0       	brcs	.+8      	; 0x894a <__udivmodsi4_ep>
    8942:	a2 1b       	sub	r26, r18
    8944:	b3 0b       	sbc	r27, r19
    8946:	e4 0b       	sbc	r30, r20
    8948:	f5 0b       	sbc	r31, r21

0000894a <__udivmodsi4_ep>:
    894a:	66 1f       	adc	r22, r22
    894c:	77 1f       	adc	r23, r23
    894e:	88 1f       	adc	r24, r24
    8950:	99 1f       	adc	r25, r25
    8952:	1a 94       	dec	r1
    8954:	69 f7       	brne	.-38     	; 0x8930 <__udivmodsi4_loop>
    8956:	60 95       	com	r22
    8958:	70 95       	com	r23
    895a:	80 95       	com	r24
    895c:	90 95       	com	r25
    895e:	9b 01       	movw	r18, r22
    8960:	ac 01       	movw	r20, r24
    8962:	bd 01       	movw	r22, r26
    8964:	cf 01       	movw	r24, r30
    8966:	08 95       	ret

00008968 <__prologue_saves__>:
    8968:	2f 92       	push	r2
    896a:	3f 92       	push	r3
    896c:	4f 92       	push	r4
    896e:	5f 92       	push	r5
    8970:	6f 92       	push	r6
    8972:	7f 92       	push	r7
    8974:	8f 92       	push	r8
    8976:	9f 92       	push	r9
    8978:	af 92       	push	r10
    897a:	bf 92       	push	r11
    897c:	cf 92       	push	r12
    897e:	df 92       	push	r13
    8980:	ef 92       	push	r14
    8982:	ff 92       	push	r15
    8984:	0f 93       	push	r16
    8986:	1f 93       	push	r17
    8988:	cf 93       	push	r28
    898a:	df 93       	push	r29
    898c:	cd b7       	in	r28, 0x3d	; 61
    898e:	de b7       	in	r29, 0x3e	; 62
    8990:	ca 1b       	sub	r28, r26
    8992:	db 0b       	sbc	r29, r27
    8994:	0f b6       	in	r0, 0x3f	; 63
    8996:	f8 94       	cli
    8998:	de bf       	out	0x3e, r29	; 62
    899a:	0f be       	out	0x3f, r0	; 63
    899c:	cd bf       	out	0x3d, r28	; 61
    899e:	19 94       	eijmp

000089a0 <__epilogue_restores__>:
    89a0:	2a 88       	ldd	r2, Y+18	; 0x12
    89a2:	39 88       	ldd	r3, Y+17	; 0x11
    89a4:	48 88       	ldd	r4, Y+16	; 0x10
    89a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    89a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    89aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    89ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    89ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    89b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    89b2:	b9 84       	ldd	r11, Y+9	; 0x09
    89b4:	c8 84       	ldd	r12, Y+8	; 0x08
    89b6:	df 80       	ldd	r13, Y+7	; 0x07
    89b8:	ee 80       	ldd	r14, Y+6	; 0x06
    89ba:	fd 80       	ldd	r15, Y+5	; 0x05
    89bc:	0c 81       	ldd	r16, Y+4	; 0x04
    89be:	1b 81       	ldd	r17, Y+3	; 0x03
    89c0:	aa 81       	ldd	r26, Y+2	; 0x02
    89c2:	b9 81       	ldd	r27, Y+1	; 0x01
    89c4:	ce 0f       	add	r28, r30
    89c6:	d1 1d       	adc	r29, r1
    89c8:	0f b6       	in	r0, 0x3f	; 63
    89ca:	f8 94       	cli
    89cc:	de bf       	out	0x3e, r29	; 62
    89ce:	0f be       	out	0x3f, r0	; 63
    89d0:	cd bf       	out	0x3d, r28	; 61
    89d2:	ed 01       	movw	r28, r26
    89d4:	08 95       	ret

000089d6 <strtod>:
    89d6:	8f 92       	push	r8
    89d8:	9f 92       	push	r9
    89da:	af 92       	push	r10
    89dc:	bf 92       	push	r11
    89de:	cf 92       	push	r12
    89e0:	df 92       	push	r13
    89e2:	ef 92       	push	r14
    89e4:	ff 92       	push	r15
    89e6:	0f 93       	push	r16
    89e8:	1f 93       	push	r17
    89ea:	cf 93       	push	r28
    89ec:	df 93       	push	r29
    89ee:	ec 01       	movw	r28, r24
    89f0:	5b 01       	movw	r10, r22
    89f2:	61 15       	cp	r22, r1
    89f4:	71 05       	cpc	r23, r1
    89f6:	19 f0       	breq	.+6      	; 0x89fe <strtod+0x28>
    89f8:	fb 01       	movw	r30, r22
    89fa:	80 83       	st	Z, r24
    89fc:	91 83       	std	Z+1, r25	; 0x01
    89fe:	f9 90       	ld	r15, Y+
    8a00:	8f 2d       	mov	r24, r15
    8a02:	90 e0       	ldi	r25, 0x00	; 0
    8a04:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <isspace>
    8a08:	89 2b       	or	r24, r25
    8a0a:	c9 f7       	brne	.-14     	; 0x89fe <strtod+0x28>
    8a0c:	fd e2       	ldi	r31, 0x2D	; 45
    8a0e:	ff 16       	cp	r15, r31
    8a10:	21 f4       	brne	.+8      	; 0x8a1a <strtod+0x44>
    8a12:	f9 90       	ld	r15, Y+
    8a14:	ee 24       	eor	r14, r14
    8a16:	e3 94       	inc	r14
    8a18:	05 c0       	rjmp	.+10     	; 0x8a24 <strtod+0x4e>
    8a1a:	2b e2       	ldi	r18, 0x2B	; 43
    8a1c:	f2 16       	cp	r15, r18
    8a1e:	09 f4       	brne	.+2      	; 0x8a22 <strtod+0x4c>
    8a20:	f9 90       	ld	r15, Y+
    8a22:	ee 24       	eor	r14, r14
    8a24:	8e 01       	movw	r16, r28
    8a26:	01 50       	subi	r16, 0x01	; 1
    8a28:	10 40       	sbci	r17, 0x00	; 0
    8a2a:	c8 01       	movw	r24, r16
    8a2c:	69 ef       	ldi	r22, 0xF9	; 249
    8a2e:	7d e1       	ldi	r23, 0x1D	; 29
    8a30:	43 e0       	ldi	r20, 0x03	; 3
    8a32:	50 e0       	ldi	r21, 0x00	; 0
    8a34:	0e 94 57 47 	call	0x8eae	; 0x8eae <strncasecmp_P>
    8a38:	89 2b       	or	r24, r25
    8a3a:	01 f5       	brne	.+64     	; 0x8a7c <strtod+0xa6>
    8a3c:	8e 01       	movw	r16, r28
    8a3e:	0e 5f       	subi	r16, 0xFE	; 254
    8a40:	1f 4f       	sbci	r17, 0xFF	; 255
    8a42:	c8 01       	movw	r24, r16
    8a44:	6c ef       	ldi	r22, 0xFC	; 252
    8a46:	7d e1       	ldi	r23, 0x1D	; 29
    8a48:	45 e0       	ldi	r20, 0x05	; 5
    8a4a:	50 e0       	ldi	r21, 0x00	; 0
    8a4c:	0e 94 57 47 	call	0x8eae	; 0x8eae <strncasecmp_P>
    8a50:	89 2b       	or	r24, r25
    8a52:	19 f4       	brne	.+6      	; 0x8a5a <strtod+0x84>
    8a54:	8e 01       	movw	r16, r28
    8a56:	09 5f       	subi	r16, 0xF9	; 249
    8a58:	1f 4f       	sbci	r17, 0xFF	; 255
    8a5a:	a1 14       	cp	r10, r1
    8a5c:	b1 04       	cpc	r11, r1
    8a5e:	19 f0       	breq	.+6      	; 0x8a66 <strtod+0x90>
    8a60:	f5 01       	movw	r30, r10
    8a62:	00 83       	st	Z, r16
    8a64:	11 83       	std	Z+1, r17	; 0x01
    8a66:	e0 fc       	sbrc	r14, 0
    8a68:	04 c0       	rjmp	.+8      	; 0x8a72 <strtod+0x9c>
    8a6a:	70 e0       	ldi	r23, 0x00	; 0
    8a6c:	90 e0       	ldi	r25, 0x00	; 0
    8a6e:	80 e8       	ldi	r24, 0x80	; 128
    8a70:	14 c0       	rjmp	.+40     	; 0x8a9a <strtod+0xc4>
    8a72:	70 e0       	ldi	r23, 0x00	; 0
    8a74:	90 e0       	ldi	r25, 0x00	; 0
    8a76:	80 e8       	ldi	r24, 0x80	; 128
    8a78:	6f ef       	ldi	r22, 0xFF	; 255
    8a7a:	08 c1       	rjmp	.+528    	; 0x8c8c <strtod+0x2b6>
    8a7c:	c8 01       	movw	r24, r16
    8a7e:	61 e0       	ldi	r22, 0x01	; 1
    8a80:	7e e1       	ldi	r23, 0x1E	; 30
    8a82:	43 e0       	ldi	r20, 0x03	; 3
    8a84:	50 e0       	ldi	r21, 0x00	; 0
    8a86:	0e 94 57 47 	call	0x8eae	; 0x8eae <strncasecmp_P>
    8a8a:	89 2b       	or	r24, r25
    8a8c:	69 f4       	brne	.+26     	; 0x8aa8 <strtod+0xd2>
    8a8e:	a1 14       	cp	r10, r1
    8a90:	b1 04       	cpc	r11, r1
    8a92:	29 f4       	brne	.+10     	; 0x8a9e <strtod+0xc8>
    8a94:	70 e0       	ldi	r23, 0x00	; 0
    8a96:	90 e0       	ldi	r25, 0x00	; 0
    8a98:	80 ec       	ldi	r24, 0xC0	; 192
    8a9a:	6f e7       	ldi	r22, 0x7F	; 127
    8a9c:	f7 c0       	rjmp	.+494    	; 0x8c8c <strtod+0x2b6>
    8a9e:	22 96       	adiw	r28, 0x02	; 2
    8aa0:	f5 01       	movw	r30, r10
    8aa2:	c0 83       	st	Z, r28
    8aa4:	d1 83       	std	Z+1, r29	; 0x01
    8aa6:	f6 cf       	rjmp	.-20     	; 0x8a94 <strtod+0xbe>
    8aa8:	88 24       	eor	r8, r8
    8aaa:	99 24       	eor	r9, r9
    8aac:	40 e0       	ldi	r20, 0x00	; 0
    8aae:	50 e0       	ldi	r21, 0x00	; 0
    8ab0:	60 e0       	ldi	r22, 0x00	; 0
    8ab2:	70 e0       	ldi	r23, 0x00	; 0
    8ab4:	ef 2d       	mov	r30, r15
    8ab6:	e0 53       	subi	r30, 0x30	; 48
    8ab8:	ea 30       	cpi	r30, 0x0A	; 10
    8aba:	a0 f5       	brcc	.+104    	; 0x8b24 <strtod+0x14e>
    8abc:	f2 e0       	ldi	r31, 0x02	; 2
    8abe:	ef 2a       	or	r14, r31
    8ac0:	8e 2d       	mov	r24, r14
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	9c 01       	movw	r18, r24
    8ac6:	28 70       	andi	r18, 0x08	; 8
    8ac8:	30 70       	andi	r19, 0x00	; 0
    8aca:	e2 fe       	sbrs	r14, 2
    8acc:	06 c0       	rjmp	.+12     	; 0x8ada <strtod+0x104>
    8ace:	23 2b       	or	r18, r19
    8ad0:	79 f5       	brne	.+94     	; 0x8b30 <strtod+0x15a>
    8ad2:	08 94       	sec
    8ad4:	81 1c       	adc	r8, r1
    8ad6:	91 1c       	adc	r9, r1
    8ad8:	2b c0       	rjmp	.+86     	; 0x8b30 <strtod+0x15a>
    8ada:	23 2b       	or	r18, r19
    8adc:	19 f0       	breq	.+6      	; 0x8ae4 <strtod+0x10e>
    8ade:	08 94       	sec
    8ae0:	81 08       	sbc	r8, r1
    8ae2:	91 08       	sbc	r9, r1
    8ae4:	db 01       	movw	r26, r22
    8ae6:	ca 01       	movw	r24, r20
    8ae8:	12 e0       	ldi	r17, 0x02	; 2
    8aea:	88 0f       	add	r24, r24
    8aec:	99 1f       	adc	r25, r25
    8aee:	aa 1f       	adc	r26, r26
    8af0:	bb 1f       	adc	r27, r27
    8af2:	1a 95       	dec	r17
    8af4:	d1 f7       	brne	.-12     	; 0x8aea <strtod+0x114>
    8af6:	48 0f       	add	r20, r24
    8af8:	59 1f       	adc	r21, r25
    8afa:	6a 1f       	adc	r22, r26
    8afc:	7b 1f       	adc	r23, r27
    8afe:	44 0f       	add	r20, r20
    8b00:	55 1f       	adc	r21, r21
    8b02:	66 1f       	adc	r22, r22
    8b04:	77 1f       	adc	r23, r23
    8b06:	4e 0f       	add	r20, r30
    8b08:	51 1d       	adc	r21, r1
    8b0a:	61 1d       	adc	r22, r1
    8b0c:	71 1d       	adc	r23, r1
    8b0e:	48 39       	cpi	r20, 0x98	; 152
    8b10:	29 e9       	ldi	r18, 0x99	; 153
    8b12:	52 07       	cpc	r21, r18
    8b14:	29 e9       	ldi	r18, 0x99	; 153
    8b16:	62 07       	cpc	r22, r18
    8b18:	29 e1       	ldi	r18, 0x19	; 25
    8b1a:	72 07       	cpc	r23, r18
    8b1c:	48 f0       	brcs	.+18     	; 0x8b30 <strtod+0x15a>
    8b1e:	84 e0       	ldi	r24, 0x04	; 4
    8b20:	e8 2a       	or	r14, r24
    8b22:	06 c0       	rjmp	.+12     	; 0x8b30 <strtod+0x15a>
    8b24:	ee 3f       	cpi	r30, 0xFE	; 254
    8b26:	31 f4       	brne	.+12     	; 0x8b34 <strtod+0x15e>
    8b28:	e3 fc       	sbrc	r14, 3
    8b2a:	39 c0       	rjmp	.+114    	; 0x8b9e <strtod+0x1c8>
    8b2c:	98 e0       	ldi	r25, 0x08	; 8
    8b2e:	e9 2a       	or	r14, r25
    8b30:	f9 90       	ld	r15, Y+
    8b32:	c0 cf       	rjmp	.-128    	; 0x8ab4 <strtod+0xde>
    8b34:	e5 33       	cpi	r30, 0x35	; 53
    8b36:	11 f0       	breq	.+4      	; 0x8b3c <strtod+0x166>
    8b38:	e5 31       	cpi	r30, 0x15	; 21
    8b3a:	89 f5       	brne	.+98     	; 0x8b9e <strtod+0x1c8>
    8b3c:	29 91       	ld	r18, Y+
    8b3e:	2d 32       	cpi	r18, 0x2D	; 45
    8b40:	19 f4       	brne	.+6      	; 0x8b48 <strtod+0x172>
    8b42:	e0 e1       	ldi	r30, 0x10	; 16
    8b44:	ee 2a       	or	r14, r30
    8b46:	05 c0       	rjmp	.+10     	; 0x8b52 <strtod+0x17c>
    8b48:	2b 32       	cpi	r18, 0x2B	; 43
    8b4a:	19 f0       	breq	.+6      	; 0x8b52 <strtod+0x17c>
    8b4c:	81 e0       	ldi	r24, 0x01	; 1
    8b4e:	90 e0       	ldi	r25, 0x00	; 0
    8b50:	03 c0       	rjmp	.+6      	; 0x8b58 <strtod+0x182>
    8b52:	29 91       	ld	r18, Y+
    8b54:	82 e0       	ldi	r24, 0x02	; 2
    8b56:	90 e0       	ldi	r25, 0x00	; 0
    8b58:	e2 2f       	mov	r30, r18
    8b5a:	e0 53       	subi	r30, 0x30	; 48
    8b5c:	ea 30       	cpi	r30, 0x0A	; 10
    8b5e:	18 f0       	brcs	.+6      	; 0x8b66 <strtod+0x190>
    8b60:	c8 1b       	sub	r28, r24
    8b62:	d9 0b       	sbc	r29, r25
    8b64:	1c c0       	rjmp	.+56     	; 0x8b9e <strtod+0x1c8>
    8b66:	20 e0       	ldi	r18, 0x00	; 0
    8b68:	30 e0       	ldi	r19, 0x00	; 0
    8b6a:	fc e0       	ldi	r31, 0x0C	; 12
    8b6c:	20 38       	cpi	r18, 0x80	; 128
    8b6e:	3f 07       	cpc	r19, r31
    8b70:	5c f4       	brge	.+22     	; 0x8b88 <strtod+0x1b2>
    8b72:	c9 01       	movw	r24, r18
    8b74:	88 0f       	add	r24, r24
    8b76:	99 1f       	adc	r25, r25
    8b78:	88 0f       	add	r24, r24
    8b7a:	99 1f       	adc	r25, r25
    8b7c:	28 0f       	add	r18, r24
    8b7e:	39 1f       	adc	r19, r25
    8b80:	22 0f       	add	r18, r18
    8b82:	33 1f       	adc	r19, r19
    8b84:	2e 0f       	add	r18, r30
    8b86:	31 1d       	adc	r19, r1
    8b88:	e9 91       	ld	r30, Y+
    8b8a:	e0 53       	subi	r30, 0x30	; 48
    8b8c:	ea 30       	cpi	r30, 0x0A	; 10
    8b8e:	68 f3       	brcs	.-38     	; 0x8b6a <strtod+0x194>
    8b90:	e4 fe       	sbrs	r14, 4
    8b92:	03 c0       	rjmp	.+6      	; 0x8b9a <strtod+0x1c4>
    8b94:	30 95       	com	r19
    8b96:	21 95       	neg	r18
    8b98:	3f 4f       	sbci	r19, 0xFF	; 255
    8b9a:	82 0e       	add	r8, r18
    8b9c:	93 1e       	adc	r9, r19
    8b9e:	ce 2c       	mov	r12, r14
    8ba0:	dd 24       	eor	r13, r13
    8ba2:	e1 fe       	sbrs	r14, 1
    8ba4:	07 c0       	rjmp	.+14     	; 0x8bb4 <strtod+0x1de>
    8ba6:	a1 14       	cp	r10, r1
    8ba8:	b1 04       	cpc	r11, r1
    8baa:	21 f0       	breq	.+8      	; 0x8bb4 <strtod+0x1de>
    8bac:	21 97       	sbiw	r28, 0x01	; 1
    8bae:	f5 01       	movw	r30, r10
    8bb0:	c0 83       	st	Z, r28
    8bb2:	d1 83       	std	Z+1, r29	; 0x01
    8bb4:	cb 01       	movw	r24, r22
    8bb6:	ba 01       	movw	r22, r20
    8bb8:	0e 94 80 41 	call	0x8300	; 0x8300 <__floatunsisf>
    8bbc:	7b 01       	movw	r14, r22
    8bbe:	8c 01       	movw	r16, r24
    8bc0:	f3 e0       	ldi	r31, 0x03	; 3
    8bc2:	cf 22       	and	r12, r31
    8bc4:	dd 24       	eor	r13, r13
    8bc6:	23 e0       	ldi	r18, 0x03	; 3
    8bc8:	c2 16       	cp	r12, r18
    8bca:	d1 04       	cpc	r13, r1
    8bcc:	21 f4       	brne	.+8      	; 0x8bd6 <strtod+0x200>
    8bce:	17 fb       	bst	r17, 7
    8bd0:	10 95       	com	r17
    8bd2:	17 f9       	bld	r17, 7
    8bd4:	10 95       	com	r17
    8bd6:	57 01       	movw	r10, r14
    8bd8:	68 01       	movw	r12, r16
    8bda:	c8 01       	movw	r24, r16
    8bdc:	b7 01       	movw	r22, r14
    8bde:	20 e0       	ldi	r18, 0x00	; 0
    8be0:	30 e0       	ldi	r19, 0x00	; 0
    8be2:	40 e0       	ldi	r20, 0x00	; 0
    8be4:	50 e0       	ldi	r21, 0x00	; 0
    8be6:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <__cmpsf2>
    8bea:	88 23       	and	r24, r24
    8bec:	09 f4       	brne	.+2      	; 0x8bf0 <strtod+0x21a>
    8bee:	4a c0       	rjmp	.+148    	; 0x8c84 <strtod+0x2ae>
    8bf0:	97 fe       	sbrs	r9, 7
    8bf2:	0d c0       	rjmp	.+26     	; 0x8c0e <strtod+0x238>
    8bf4:	28 e1       	ldi	r18, 0x18	; 24
    8bf6:	e2 2e       	mov	r14, r18
    8bf8:	2e e1       	ldi	r18, 0x1E	; 30
    8bfa:	f2 2e       	mov	r15, r18
    8bfc:	90 94       	com	r9
    8bfe:	81 94       	neg	r8
    8c00:	91 08       	sbc	r9, r1
    8c02:	93 94       	inc	r9
    8c04:	c0 e2       	ldi	r28, 0x20	; 32
    8c06:	d0 e0       	ldi	r29, 0x00	; 0
    8c08:	00 e0       	ldi	r16, 0x00	; 0
    8c0a:	10 e0       	ldi	r17, 0x00	; 0
    8c0c:	12 c0       	rjmp	.+36     	; 0x8c32 <strtod+0x25c>
    8c0e:	90 e3       	ldi	r25, 0x30	; 48
    8c10:	e9 2e       	mov	r14, r25
    8c12:	9e e1       	ldi	r25, 0x1E	; 30
    8c14:	f9 2e       	mov	r15, r25
    8c16:	f6 cf       	rjmp	.-20     	; 0x8c04 <strtod+0x22e>
    8c18:	f7 01       	movw	r30, r14
    8c1a:	25 91       	lpm	r18, Z+
    8c1c:	35 91       	lpm	r19, Z+
    8c1e:	45 91       	lpm	r20, Z+
    8c20:	54 91       	lpm	r21, Z+
    8c22:	c6 01       	movw	r24, r12
    8c24:	b5 01       	movw	r22, r10
    8c26:	0e 94 a2 43 	call	0x8744	; 0x8744 <__mulsf3>
    8c2a:	5b 01       	movw	r10, r22
    8c2c:	6c 01       	movw	r12, r24
    8c2e:	8c 1a       	sub	r8, r28
    8c30:	9d 0a       	sbc	r9, r29
    8c32:	8c 16       	cp	r8, r28
    8c34:	9d 06       	cpc	r9, r29
    8c36:	84 f7       	brge	.-32     	; 0x8c18 <strtod+0x242>
    8c38:	d5 95       	asr	r29
    8c3a:	c7 95       	ror	r28
    8c3c:	0f 5f       	subi	r16, 0xFF	; 255
    8c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8c40:	06 30       	cpi	r16, 0x06	; 6
    8c42:	11 05       	cpc	r17, r1
    8c44:	29 f0       	breq	.+10     	; 0x8c50 <strtod+0x27a>
    8c46:	8c ef       	ldi	r24, 0xFC	; 252
    8c48:	9f ef       	ldi	r25, 0xFF	; 255
    8c4a:	e8 0e       	add	r14, r24
    8c4c:	f9 1e       	adc	r15, r25
    8c4e:	f1 cf       	rjmp	.-30     	; 0x8c32 <strtod+0x25c>
    8c50:	c5 01       	movw	r24, r10
    8c52:	d6 01       	movw	r26, r12
    8c54:	7c 01       	movw	r14, r24
    8c56:	8d 01       	movw	r16, r26
    8c58:	8c 2d       	mov	r24, r12
    8c5a:	88 0f       	add	r24, r24
    8c5c:	8d 2d       	mov	r24, r13
    8c5e:	88 1f       	adc	r24, r24
    8c60:	8f 3f       	cpi	r24, 0xFF	; 255
    8c62:	51 f0       	breq	.+20     	; 0x8c78 <strtod+0x2a2>
    8c64:	c6 01       	movw	r24, r12
    8c66:	b5 01       	movw	r22, r10
    8c68:	20 e0       	ldi	r18, 0x00	; 0
    8c6a:	30 e0       	ldi	r19, 0x00	; 0
    8c6c:	40 e0       	ldi	r20, 0x00	; 0
    8c6e:	50 e0       	ldi	r21, 0x00	; 0
    8c70:	0e 94 e0 40 	call	0x81c0	; 0x81c0 <__cmpsf2>
    8c74:	88 23       	and	r24, r24
    8c76:	31 f4       	brne	.+12     	; 0x8c84 <strtod+0x2ae>
    8c78:	82 e2       	ldi	r24, 0x22	; 34
    8c7a:	90 e0       	ldi	r25, 0x00	; 0
    8c7c:	80 93 10 25 	sts	0x2510, r24
    8c80:	90 93 11 25 	sts	0x2511, r25
    8c84:	7e 2d       	mov	r23, r14
    8c86:	9f 2d       	mov	r25, r15
    8c88:	80 2f       	mov	r24, r16
    8c8a:	61 2f       	mov	r22, r17
    8c8c:	27 2f       	mov	r18, r23
    8c8e:	39 2f       	mov	r19, r25
    8c90:	48 2f       	mov	r20, r24
    8c92:	56 2f       	mov	r21, r22
    8c94:	b9 01       	movw	r22, r18
    8c96:	ca 01       	movw	r24, r20
    8c98:	df 91       	pop	r29
    8c9a:	cf 91       	pop	r28
    8c9c:	1f 91       	pop	r17
    8c9e:	0f 91       	pop	r16
    8ca0:	ff 90       	pop	r15
    8ca2:	ef 90       	pop	r14
    8ca4:	df 90       	pop	r13
    8ca6:	cf 90       	pop	r12
    8ca8:	bf 90       	pop	r11
    8caa:	af 90       	pop	r10
    8cac:	9f 90       	pop	r9
    8cae:	8f 90       	pop	r8
    8cb0:	08 95       	ret

00008cb2 <atoi>:
    8cb2:	fc 01       	movw	r30, r24
    8cb4:	88 27       	eor	r24, r24
    8cb6:	99 27       	eor	r25, r25
    8cb8:	e8 94       	clt
    8cba:	21 91       	ld	r18, Z+
    8cbc:	20 32       	cpi	r18, 0x20	; 32
    8cbe:	e9 f3       	breq	.-6      	; 0x8cba <atoi+0x8>
    8cc0:	29 30       	cpi	r18, 0x09	; 9
    8cc2:	10 f0       	brcs	.+4      	; 0x8cc8 <atoi+0x16>
    8cc4:	2e 30       	cpi	r18, 0x0E	; 14
    8cc6:	c8 f3       	brcs	.-14     	; 0x8cba <atoi+0x8>
    8cc8:	2b 32       	cpi	r18, 0x2B	; 43
    8cca:	41 f0       	breq	.+16     	; 0x8cdc <atoi+0x2a>
    8ccc:	2d 32       	cpi	r18, 0x2D	; 45
    8cce:	39 f4       	brne	.+14     	; 0x8cde <atoi+0x2c>
    8cd0:	68 94       	set
    8cd2:	04 c0       	rjmp	.+8      	; 0x8cdc <atoi+0x2a>
    8cd4:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <__mulhi_const_10>
    8cd8:	82 0f       	add	r24, r18
    8cda:	91 1d       	adc	r25, r1
    8cdc:	21 91       	ld	r18, Z+
    8cde:	20 53       	subi	r18, 0x30	; 48
    8ce0:	2a 30       	cpi	r18, 0x0A	; 10
    8ce2:	c0 f3       	brcs	.-16     	; 0x8cd4 <atoi+0x22>
    8ce4:	1e f4       	brtc	.+6      	; 0x8cec <atoi+0x3a>
    8ce6:	90 95       	com	r25
    8ce8:	81 95       	neg	r24
    8cea:	9f 4f       	sbci	r25, 0xFF	; 255
    8cec:	08 95       	ret

00008cee <__ftoa_engine>:
    8cee:	28 30       	cpi	r18, 0x08	; 8
    8cf0:	08 f0       	brcs	.+2      	; 0x8cf4 <__ftoa_engine+0x6>
    8cf2:	27 e0       	ldi	r18, 0x07	; 7
    8cf4:	33 27       	eor	r19, r19
    8cf6:	da 01       	movw	r26, r20
    8cf8:	99 0f       	add	r25, r25
    8cfa:	31 1d       	adc	r19, r1
    8cfc:	87 fd       	sbrc	r24, 7
    8cfe:	91 60       	ori	r25, 0x01	; 1
    8d00:	00 96       	adiw	r24, 0x00	; 0
    8d02:	61 05       	cpc	r22, r1
    8d04:	71 05       	cpc	r23, r1
    8d06:	39 f4       	brne	.+14     	; 0x8d16 <__ftoa_engine+0x28>
    8d08:	32 60       	ori	r19, 0x02	; 2
    8d0a:	2e 5f       	subi	r18, 0xFE	; 254
    8d0c:	3d 93       	st	X+, r19
    8d0e:	30 e3       	ldi	r19, 0x30	; 48
    8d10:	2a 95       	dec	r18
    8d12:	e1 f7       	brne	.-8      	; 0x8d0c <__ftoa_engine+0x1e>
    8d14:	08 95       	ret
    8d16:	9f 3f       	cpi	r25, 0xFF	; 255
    8d18:	30 f0       	brcs	.+12     	; 0x8d26 <__ftoa_engine+0x38>
    8d1a:	80 38       	cpi	r24, 0x80	; 128
    8d1c:	71 05       	cpc	r23, r1
    8d1e:	61 05       	cpc	r22, r1
    8d20:	09 f0       	breq	.+2      	; 0x8d24 <__ftoa_engine+0x36>
    8d22:	3c 5f       	subi	r19, 0xFC	; 252
    8d24:	3c 5f       	subi	r19, 0xFC	; 252
    8d26:	3d 93       	st	X+, r19
    8d28:	91 30       	cpi	r25, 0x01	; 1
    8d2a:	08 f0       	brcs	.+2      	; 0x8d2e <__ftoa_engine+0x40>
    8d2c:	80 68       	ori	r24, 0x80	; 128
    8d2e:	91 1d       	adc	r25, r1
    8d30:	df 93       	push	r29
    8d32:	cf 93       	push	r28
    8d34:	1f 93       	push	r17
    8d36:	0f 93       	push	r16
    8d38:	ff 92       	push	r15
    8d3a:	ef 92       	push	r14
    8d3c:	19 2f       	mov	r17, r25
    8d3e:	98 7f       	andi	r25, 0xF8	; 248
    8d40:	96 95       	lsr	r25
    8d42:	e9 2f       	mov	r30, r25
    8d44:	96 95       	lsr	r25
    8d46:	96 95       	lsr	r25
    8d48:	e9 0f       	add	r30, r25
    8d4a:	ff 27       	eor	r31, r31
    8d4c:	e2 57       	subi	r30, 0x72	; 114
    8d4e:	f1 4e       	sbci	r31, 0xE1	; 225
    8d50:	99 27       	eor	r25, r25
    8d52:	33 27       	eor	r19, r19
    8d54:	ee 24       	eor	r14, r14
    8d56:	ff 24       	eor	r15, r15
    8d58:	a7 01       	movw	r20, r14
    8d5a:	e7 01       	movw	r28, r14
    8d5c:	05 90       	lpm	r0, Z+
    8d5e:	08 94       	sec
    8d60:	07 94       	ror	r0
    8d62:	28 f4       	brcc	.+10     	; 0x8d6e <__ftoa_engine+0x80>
    8d64:	36 0f       	add	r19, r22
    8d66:	e7 1e       	adc	r14, r23
    8d68:	f8 1e       	adc	r15, r24
    8d6a:	49 1f       	adc	r20, r25
    8d6c:	51 1d       	adc	r21, r1
    8d6e:	66 0f       	add	r22, r22
    8d70:	77 1f       	adc	r23, r23
    8d72:	88 1f       	adc	r24, r24
    8d74:	99 1f       	adc	r25, r25
    8d76:	06 94       	lsr	r0
    8d78:	a1 f7       	brne	.-24     	; 0x8d62 <__ftoa_engine+0x74>
    8d7a:	05 90       	lpm	r0, Z+
    8d7c:	07 94       	ror	r0
    8d7e:	28 f4       	brcc	.+10     	; 0x8d8a <__ftoa_engine+0x9c>
    8d80:	e7 0e       	add	r14, r23
    8d82:	f8 1e       	adc	r15, r24
    8d84:	49 1f       	adc	r20, r25
    8d86:	56 1f       	adc	r21, r22
    8d88:	c1 1d       	adc	r28, r1
    8d8a:	77 0f       	add	r23, r23
    8d8c:	88 1f       	adc	r24, r24
    8d8e:	99 1f       	adc	r25, r25
    8d90:	66 1f       	adc	r22, r22
    8d92:	06 94       	lsr	r0
    8d94:	a1 f7       	brne	.-24     	; 0x8d7e <__ftoa_engine+0x90>
    8d96:	05 90       	lpm	r0, Z+
    8d98:	07 94       	ror	r0
    8d9a:	28 f4       	brcc	.+10     	; 0x8da6 <__ftoa_engine+0xb8>
    8d9c:	f8 0e       	add	r15, r24
    8d9e:	49 1f       	adc	r20, r25
    8da0:	56 1f       	adc	r21, r22
    8da2:	c7 1f       	adc	r28, r23
    8da4:	d1 1d       	adc	r29, r1
    8da6:	88 0f       	add	r24, r24
    8da8:	99 1f       	adc	r25, r25
    8daa:	66 1f       	adc	r22, r22
    8dac:	77 1f       	adc	r23, r23
    8dae:	06 94       	lsr	r0
    8db0:	a1 f7       	brne	.-24     	; 0x8d9a <__ftoa_engine+0xac>
    8db2:	05 90       	lpm	r0, Z+
    8db4:	07 94       	ror	r0
    8db6:	20 f4       	brcc	.+8      	; 0x8dc0 <__ftoa_engine+0xd2>
    8db8:	49 0f       	add	r20, r25
    8dba:	56 1f       	adc	r21, r22
    8dbc:	c7 1f       	adc	r28, r23
    8dbe:	d8 1f       	adc	r29, r24
    8dc0:	99 0f       	add	r25, r25
    8dc2:	66 1f       	adc	r22, r22
    8dc4:	77 1f       	adc	r23, r23
    8dc6:	88 1f       	adc	r24, r24
    8dc8:	06 94       	lsr	r0
    8dca:	a9 f7       	brne	.-22     	; 0x8db6 <__ftoa_engine+0xc8>
    8dcc:	84 91       	lpm	r24, Z+
    8dce:	10 95       	com	r17
    8dd0:	17 70       	andi	r17, 0x07	; 7
    8dd2:	41 f0       	breq	.+16     	; 0x8de4 <__ftoa_engine+0xf6>
    8dd4:	d6 95       	lsr	r29
    8dd6:	c7 95       	ror	r28
    8dd8:	57 95       	ror	r21
    8dda:	47 95       	ror	r20
    8ddc:	f7 94       	ror	r15
    8dde:	e7 94       	ror	r14
    8de0:	1a 95       	dec	r17
    8de2:	c1 f7       	brne	.-16     	; 0x8dd4 <__ftoa_engine+0xe6>
    8de4:	e4 e3       	ldi	r30, 0x34	; 52
    8de6:	fe e1       	ldi	r31, 0x1E	; 30
    8de8:	68 94       	set
    8dea:	15 90       	lpm	r1, Z+
    8dec:	15 91       	lpm	r17, Z+
    8dee:	35 91       	lpm	r19, Z+
    8df0:	65 91       	lpm	r22, Z+
    8df2:	95 91       	lpm	r25, Z+
    8df4:	05 90       	lpm	r0, Z+
    8df6:	7f e2       	ldi	r23, 0x2F	; 47
    8df8:	73 95       	inc	r23
    8dfa:	e1 18       	sub	r14, r1
    8dfc:	f1 0a       	sbc	r15, r17
    8dfe:	43 0b       	sbc	r20, r19
    8e00:	56 0b       	sbc	r21, r22
    8e02:	c9 0b       	sbc	r28, r25
    8e04:	d0 09       	sbc	r29, r0
    8e06:	c0 f7       	brcc	.-16     	; 0x8df8 <__ftoa_engine+0x10a>
    8e08:	e1 0c       	add	r14, r1
    8e0a:	f1 1e       	adc	r15, r17
    8e0c:	43 1f       	adc	r20, r19
    8e0e:	56 1f       	adc	r21, r22
    8e10:	c9 1f       	adc	r28, r25
    8e12:	d0 1d       	adc	r29, r0
    8e14:	7e f4       	brtc	.+30     	; 0x8e34 <__ftoa_engine+0x146>
    8e16:	70 33       	cpi	r23, 0x30	; 48
    8e18:	11 f4       	brne	.+4      	; 0x8e1e <__ftoa_engine+0x130>
    8e1a:	8a 95       	dec	r24
    8e1c:	e6 cf       	rjmp	.-52     	; 0x8dea <__ftoa_engine+0xfc>
    8e1e:	e8 94       	clt
    8e20:	01 50       	subi	r16, 0x01	; 1
    8e22:	30 f0       	brcs	.+12     	; 0x8e30 <__ftoa_engine+0x142>
    8e24:	08 0f       	add	r16, r24
    8e26:	0a f4       	brpl	.+2      	; 0x8e2a <__ftoa_engine+0x13c>
    8e28:	00 27       	eor	r16, r16
    8e2a:	02 17       	cp	r16, r18
    8e2c:	08 f4       	brcc	.+2      	; 0x8e30 <__ftoa_engine+0x142>
    8e2e:	20 2f       	mov	r18, r16
    8e30:	23 95       	inc	r18
    8e32:	02 2f       	mov	r16, r18
    8e34:	7a 33       	cpi	r23, 0x3A	; 58
    8e36:	28 f0       	brcs	.+10     	; 0x8e42 <__ftoa_engine+0x154>
    8e38:	79 e3       	ldi	r23, 0x39	; 57
    8e3a:	7d 93       	st	X+, r23
    8e3c:	2a 95       	dec	r18
    8e3e:	e9 f7       	brne	.-6      	; 0x8e3a <__ftoa_engine+0x14c>
    8e40:	10 c0       	rjmp	.+32     	; 0x8e62 <__ftoa_engine+0x174>
    8e42:	7d 93       	st	X+, r23
    8e44:	2a 95       	dec	r18
    8e46:	89 f6       	brne	.-94     	; 0x8dea <__ftoa_engine+0xfc>
    8e48:	06 94       	lsr	r0
    8e4a:	97 95       	ror	r25
    8e4c:	67 95       	ror	r22
    8e4e:	37 95       	ror	r19
    8e50:	17 95       	ror	r17
    8e52:	17 94       	ror	r1
    8e54:	e1 18       	sub	r14, r1
    8e56:	f1 0a       	sbc	r15, r17
    8e58:	43 0b       	sbc	r20, r19
    8e5a:	56 0b       	sbc	r21, r22
    8e5c:	c9 0b       	sbc	r28, r25
    8e5e:	d0 09       	sbc	r29, r0
    8e60:	98 f0       	brcs	.+38     	; 0x8e88 <__ftoa_engine+0x19a>
    8e62:	23 95       	inc	r18
    8e64:	7e 91       	ld	r23, -X
    8e66:	73 95       	inc	r23
    8e68:	7a 33       	cpi	r23, 0x3A	; 58
    8e6a:	08 f0       	brcs	.+2      	; 0x8e6e <__ftoa_engine+0x180>
    8e6c:	70 e3       	ldi	r23, 0x30	; 48
    8e6e:	7c 93       	st	X, r23
    8e70:	20 13       	cpse	r18, r16
    8e72:	b8 f7       	brcc	.-18     	; 0x8e62 <__ftoa_engine+0x174>
    8e74:	7e 91       	ld	r23, -X
    8e76:	70 61       	ori	r23, 0x10	; 16
    8e78:	7d 93       	st	X+, r23
    8e7a:	30 f0       	brcs	.+12     	; 0x8e88 <__ftoa_engine+0x19a>
    8e7c:	83 95       	inc	r24
    8e7e:	71 e3       	ldi	r23, 0x31	; 49
    8e80:	7d 93       	st	X+, r23
    8e82:	70 e3       	ldi	r23, 0x30	; 48
    8e84:	2a 95       	dec	r18
    8e86:	e1 f7       	brne	.-8      	; 0x8e80 <__ftoa_engine+0x192>
    8e88:	11 24       	eor	r1, r1
    8e8a:	ef 90       	pop	r14
    8e8c:	ff 90       	pop	r15
    8e8e:	0f 91       	pop	r16
    8e90:	1f 91       	pop	r17
    8e92:	cf 91       	pop	r28
    8e94:	df 91       	pop	r29
    8e96:	99 27       	eor	r25, r25
    8e98:	87 fd       	sbrc	r24, 7
    8e9a:	90 95       	com	r25
    8e9c:	08 95       	ret

00008e9e <isspace>:
    8e9e:	91 11       	cpse	r25, r1
    8ea0:	21 c1       	rjmp	.+578    	; 0x90e4 <__ctype_isfalse>
    8ea2:	80 32       	cpi	r24, 0x20	; 32
    8ea4:	19 f0       	breq	.+6      	; 0x8eac <isspace+0xe>
    8ea6:	89 50       	subi	r24, 0x09	; 9
    8ea8:	85 50       	subi	r24, 0x05	; 5
    8eaa:	d0 f7       	brcc	.-12     	; 0x8ea0 <isspace+0x2>
    8eac:	08 95       	ret

00008eae <strncasecmp_P>:
    8eae:	fb 01       	movw	r30, r22
    8eb0:	dc 01       	movw	r26, r24
    8eb2:	41 50       	subi	r20, 0x01	; 1
    8eb4:	50 40       	sbci	r21, 0x00	; 0
    8eb6:	88 f0       	brcs	.+34     	; 0x8eda <strncasecmp_P+0x2c>
    8eb8:	8d 91       	ld	r24, X+
    8eba:	81 34       	cpi	r24, 0x41	; 65
    8ebc:	1c f0       	brlt	.+6      	; 0x8ec4 <strncasecmp_P+0x16>
    8ebe:	8b 35       	cpi	r24, 0x5B	; 91
    8ec0:	0c f4       	brge	.+2      	; 0x8ec4 <strncasecmp_P+0x16>
    8ec2:	80 5e       	subi	r24, 0xE0	; 224
    8ec4:	65 91       	lpm	r22, Z+
    8ec6:	61 34       	cpi	r22, 0x41	; 65
    8ec8:	1c f0       	brlt	.+6      	; 0x8ed0 <strncasecmp_P+0x22>
    8eca:	6b 35       	cpi	r22, 0x5B	; 91
    8ecc:	0c f4       	brge	.+2      	; 0x8ed0 <strncasecmp_P+0x22>
    8ece:	60 5e       	subi	r22, 0xE0	; 224
    8ed0:	86 1b       	sub	r24, r22
    8ed2:	61 11       	cpse	r22, r1
    8ed4:	71 f3       	breq	.-36     	; 0x8eb2 <strncasecmp_P+0x4>
    8ed6:	99 0b       	sbc	r25, r25
    8ed8:	08 95       	ret
    8eda:	88 1b       	sub	r24, r24
    8edc:	fc cf       	rjmp	.-8      	; 0x8ed6 <strncasecmp_P+0x28>

00008ede <strnlen_P>:
    8ede:	fc 01       	movw	r30, r24
    8ee0:	05 90       	lpm	r0, Z+
    8ee2:	61 50       	subi	r22, 0x01	; 1
    8ee4:	70 40       	sbci	r23, 0x00	; 0
    8ee6:	01 10       	cpse	r0, r1
    8ee8:	d8 f7       	brcc	.-10     	; 0x8ee0 <strnlen_P+0x2>
    8eea:	80 95       	com	r24
    8eec:	90 95       	com	r25
    8eee:	8e 0f       	add	r24, r30
    8ef0:	9f 1f       	adc	r25, r31
    8ef2:	08 95       	ret

00008ef4 <strnlen>:
    8ef4:	fc 01       	movw	r30, r24
    8ef6:	61 50       	subi	r22, 0x01	; 1
    8ef8:	70 40       	sbci	r23, 0x00	; 0
    8efa:	01 90       	ld	r0, Z+
    8efc:	01 10       	cpse	r0, r1
    8efe:	d8 f7       	brcc	.-10     	; 0x8ef6 <strnlen+0x2>
    8f00:	80 95       	com	r24
    8f02:	90 95       	com	r25
    8f04:	8e 0f       	add	r24, r30
    8f06:	9f 1f       	adc	r25, r31
    8f08:	08 95       	ret

00008f0a <__mulhi_const_10>:
    8f0a:	7a e0       	ldi	r23, 0x0A	; 10
    8f0c:	97 9f       	mul	r25, r23
    8f0e:	90 2d       	mov	r25, r0
    8f10:	87 9f       	mul	r24, r23
    8f12:	80 2d       	mov	r24, r0
    8f14:	91 0d       	add	r25, r1
    8f16:	11 24       	eor	r1, r1
    8f18:	08 95       	ret

00008f1a <clearerr>:
    8f1a:	fc 01       	movw	r30, r24
    8f1c:	83 81       	ldd	r24, Z+3	; 0x03
    8f1e:	8f 7c       	andi	r24, 0xCF	; 207
    8f20:	83 83       	std	Z+3, r24	; 0x03
    8f22:	08 95       	ret

00008f24 <fgets>:
    8f24:	cf 92       	push	r12
    8f26:	df 92       	push	r13
    8f28:	ef 92       	push	r14
    8f2a:	ff 92       	push	r15
    8f2c:	0f 93       	push	r16
    8f2e:	1f 93       	push	r17
    8f30:	cf 93       	push	r28
    8f32:	df 93       	push	r29
    8f34:	7c 01       	movw	r14, r24
    8f36:	6a 01       	movw	r12, r20
    8f38:	fa 01       	movw	r30, r20
    8f3a:	83 81       	ldd	r24, Z+3	; 0x03
    8f3c:	80 ff       	sbrs	r24, 0
    8f3e:	19 c0       	rjmp	.+50     	; 0x8f72 <fgets+0x4e>
    8f40:	16 16       	cp	r1, r22
    8f42:	17 06       	cpc	r1, r23
    8f44:	b4 f4       	brge	.+44     	; 0x8f72 <fgets+0x4e>
    8f46:	eb 01       	movw	r28, r22
    8f48:	21 97       	sbiw	r28, 0x01	; 1
    8f4a:	87 01       	movw	r16, r14
    8f4c:	0d c0       	rjmp	.+26     	; 0x8f68 <fgets+0x44>
    8f4e:	c6 01       	movw	r24, r12
    8f50:	0e 94 75 48 	call	0x90ea	; 0x90ea <fgetc>
    8f54:	ff ef       	ldi	r31, 0xFF	; 255
    8f56:	8f 3f       	cpi	r24, 0xFF	; 255
    8f58:	9f 07       	cpc	r25, r31
    8f5a:	59 f0       	breq	.+22     	; 0x8f72 <fgets+0x4e>
    8f5c:	f8 01       	movw	r30, r16
    8f5e:	81 93       	st	Z+, r24
    8f60:	8f 01       	movw	r16, r30
    8f62:	0a 97       	sbiw	r24, 0x0a	; 10
    8f64:	19 f0       	breq	.+6      	; 0x8f6c <fgets+0x48>
    8f66:	21 97       	sbiw	r28, 0x01	; 1
    8f68:	20 97       	sbiw	r28, 0x00	; 0
    8f6a:	89 f7       	brne	.-30     	; 0x8f4e <fgets+0x2a>
    8f6c:	f8 01       	movw	r30, r16
    8f6e:	10 82       	st	Z, r1
    8f70:	02 c0       	rjmp	.+4      	; 0x8f76 <fgets+0x52>
    8f72:	ee 24       	eor	r14, r14
    8f74:	ff 24       	eor	r15, r15
    8f76:	c7 01       	movw	r24, r14
    8f78:	df 91       	pop	r29
    8f7a:	cf 91       	pop	r28
    8f7c:	1f 91       	pop	r17
    8f7e:	0f 91       	pop	r16
    8f80:	ff 90       	pop	r15
    8f82:	ef 90       	pop	r14
    8f84:	df 90       	pop	r13
    8f86:	cf 90       	pop	r12
    8f88:	08 95       	ret

00008f8a <fputc>:
    8f8a:	0f 93       	push	r16
    8f8c:	1f 93       	push	r17
    8f8e:	cf 93       	push	r28
    8f90:	df 93       	push	r29
    8f92:	8c 01       	movw	r16, r24
    8f94:	eb 01       	movw	r28, r22
    8f96:	8b 81       	ldd	r24, Y+3	; 0x03
    8f98:	81 ff       	sbrs	r24, 1
    8f9a:	1b c0       	rjmp	.+54     	; 0x8fd2 <fputc+0x48>
    8f9c:	82 ff       	sbrs	r24, 2
    8f9e:	0d c0       	rjmp	.+26     	; 0x8fba <fputc+0x30>
    8fa0:	2e 81       	ldd	r18, Y+6	; 0x06
    8fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    8fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    8fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    8fa8:	28 17       	cp	r18, r24
    8faa:	39 07       	cpc	r19, r25
    8fac:	64 f4       	brge	.+24     	; 0x8fc6 <fputc+0x3c>
    8fae:	e8 81       	ld	r30, Y
    8fb0:	f9 81       	ldd	r31, Y+1	; 0x01
    8fb2:	01 93       	st	Z+, r16
    8fb4:	e8 83       	st	Y, r30
    8fb6:	f9 83       	std	Y+1, r31	; 0x01
    8fb8:	06 c0       	rjmp	.+12     	; 0x8fc6 <fputc+0x3c>
    8fba:	e8 85       	ldd	r30, Y+8	; 0x08
    8fbc:	f9 85       	ldd	r31, Y+9	; 0x09
    8fbe:	80 2f       	mov	r24, r16
    8fc0:	19 95       	eicall
    8fc2:	89 2b       	or	r24, r25
    8fc4:	31 f4       	brne	.+12     	; 0x8fd2 <fputc+0x48>
    8fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    8fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    8fca:	01 96       	adiw	r24, 0x01	; 1
    8fcc:	8e 83       	std	Y+6, r24	; 0x06
    8fce:	9f 83       	std	Y+7, r25	; 0x07
    8fd0:	02 c0       	rjmp	.+4      	; 0x8fd6 <fputc+0x4c>
    8fd2:	0f ef       	ldi	r16, 0xFF	; 255
    8fd4:	1f ef       	ldi	r17, 0xFF	; 255
    8fd6:	c8 01       	movw	r24, r16
    8fd8:	df 91       	pop	r29
    8fda:	cf 91       	pop	r28
    8fdc:	1f 91       	pop	r17
    8fde:	0f 91       	pop	r16
    8fe0:	08 95       	ret

00008fe2 <printf_P>:
    8fe2:	df 93       	push	r29
    8fe4:	cf 93       	push	r28
    8fe6:	cd b7       	in	r28, 0x3d	; 61
    8fe8:	de b7       	in	r29, 0x3e	; 62
    8fea:	fe 01       	movw	r30, r28
    8fec:	36 96       	adiw	r30, 0x06	; 6
    8fee:	61 91       	ld	r22, Z+
    8ff0:	71 91       	ld	r23, Z+
    8ff2:	a0 91 0c 25 	lds	r26, 0x250C
    8ff6:	b0 91 0d 25 	lds	r27, 0x250D
    8ffa:	13 96       	adiw	r26, 0x03	; 3
    8ffc:	8c 91       	ld	r24, X
    8ffe:	13 97       	sbiw	r26, 0x03	; 3
    9000:	88 60       	ori	r24, 0x08	; 8
    9002:	13 96       	adiw	r26, 0x03	; 3
    9004:	8c 93       	st	X, r24
    9006:	80 91 0c 25 	lds	r24, 0x250C
    900a:	90 91 0d 25 	lds	r25, 0x250D
    900e:	af 01       	movw	r20, r30
    9010:	0e 94 96 3c 	call	0x792c	; 0x792c <vfprintf>
    9014:	e0 91 0c 25 	lds	r30, 0x250C
    9018:	f0 91 0d 25 	lds	r31, 0x250D
    901c:	23 81       	ldd	r18, Z+3	; 0x03
    901e:	27 7f       	andi	r18, 0xF7	; 247
    9020:	23 83       	std	Z+3, r18	; 0x03
    9022:	cf 91       	pop	r28
    9024:	df 91       	pop	r29
    9026:	08 95       	ret

00009028 <__ultoa_invert>:
    9028:	fa 01       	movw	r30, r20
    902a:	aa 27       	eor	r26, r26
    902c:	28 30       	cpi	r18, 0x08	; 8
    902e:	51 f1       	breq	.+84     	; 0x9084 <__ultoa_invert+0x5c>
    9030:	20 31       	cpi	r18, 0x10	; 16
    9032:	81 f1       	breq	.+96     	; 0x9094 <__ultoa_invert+0x6c>
    9034:	e8 94       	clt
    9036:	6f 93       	push	r22
    9038:	6e 7f       	andi	r22, 0xFE	; 254
    903a:	6e 5f       	subi	r22, 0xFE	; 254
    903c:	7f 4f       	sbci	r23, 0xFF	; 255
    903e:	8f 4f       	sbci	r24, 0xFF	; 255
    9040:	9f 4f       	sbci	r25, 0xFF	; 255
    9042:	af 4f       	sbci	r26, 0xFF	; 255
    9044:	b1 e0       	ldi	r27, 0x01	; 1
    9046:	3e d0       	rcall	.+124    	; 0x90c4 <__ultoa_invert+0x9c>
    9048:	b4 e0       	ldi	r27, 0x04	; 4
    904a:	3c d0       	rcall	.+120    	; 0x90c4 <__ultoa_invert+0x9c>
    904c:	67 0f       	add	r22, r23
    904e:	78 1f       	adc	r23, r24
    9050:	89 1f       	adc	r24, r25
    9052:	9a 1f       	adc	r25, r26
    9054:	a1 1d       	adc	r26, r1
    9056:	68 0f       	add	r22, r24
    9058:	79 1f       	adc	r23, r25
    905a:	8a 1f       	adc	r24, r26
    905c:	91 1d       	adc	r25, r1
    905e:	a1 1d       	adc	r26, r1
    9060:	6a 0f       	add	r22, r26
    9062:	71 1d       	adc	r23, r1
    9064:	81 1d       	adc	r24, r1
    9066:	91 1d       	adc	r25, r1
    9068:	a1 1d       	adc	r26, r1
    906a:	20 d0       	rcall	.+64     	; 0x90ac <__ultoa_invert+0x84>
    906c:	09 f4       	brne	.+2      	; 0x9070 <__ultoa_invert+0x48>
    906e:	68 94       	set
    9070:	3f 91       	pop	r19
    9072:	2a e0       	ldi	r18, 0x0A	; 10
    9074:	26 9f       	mul	r18, r22
    9076:	11 24       	eor	r1, r1
    9078:	30 19       	sub	r19, r0
    907a:	30 5d       	subi	r19, 0xD0	; 208
    907c:	31 93       	st	Z+, r19
    907e:	de f6       	brtc	.-74     	; 0x9036 <__ultoa_invert+0xe>
    9080:	cf 01       	movw	r24, r30
    9082:	08 95       	ret
    9084:	46 2f       	mov	r20, r22
    9086:	47 70       	andi	r20, 0x07	; 7
    9088:	40 5d       	subi	r20, 0xD0	; 208
    908a:	41 93       	st	Z+, r20
    908c:	b3 e0       	ldi	r27, 0x03	; 3
    908e:	0f d0       	rcall	.+30     	; 0x90ae <__ultoa_invert+0x86>
    9090:	c9 f7       	brne	.-14     	; 0x9084 <__ultoa_invert+0x5c>
    9092:	f6 cf       	rjmp	.-20     	; 0x9080 <__ultoa_invert+0x58>
    9094:	46 2f       	mov	r20, r22
    9096:	4f 70       	andi	r20, 0x0F	; 15
    9098:	40 5d       	subi	r20, 0xD0	; 208
    909a:	4a 33       	cpi	r20, 0x3A	; 58
    909c:	18 f0       	brcs	.+6      	; 0x90a4 <__ultoa_invert+0x7c>
    909e:	49 5d       	subi	r20, 0xD9	; 217
    90a0:	31 fd       	sbrc	r19, 1
    90a2:	40 52       	subi	r20, 0x20	; 32
    90a4:	41 93       	st	Z+, r20
    90a6:	02 d0       	rcall	.+4      	; 0x90ac <__ultoa_invert+0x84>
    90a8:	a9 f7       	brne	.-22     	; 0x9094 <__ultoa_invert+0x6c>
    90aa:	ea cf       	rjmp	.-44     	; 0x9080 <__ultoa_invert+0x58>
    90ac:	b4 e0       	ldi	r27, 0x04	; 4
    90ae:	a6 95       	lsr	r26
    90b0:	97 95       	ror	r25
    90b2:	87 95       	ror	r24
    90b4:	77 95       	ror	r23
    90b6:	67 95       	ror	r22
    90b8:	ba 95       	dec	r27
    90ba:	c9 f7       	brne	.-14     	; 0x90ae <__ultoa_invert+0x86>
    90bc:	00 97       	sbiw	r24, 0x00	; 0
    90be:	61 05       	cpc	r22, r1
    90c0:	71 05       	cpc	r23, r1
    90c2:	08 95       	ret
    90c4:	9b 01       	movw	r18, r22
    90c6:	ac 01       	movw	r20, r24
    90c8:	0a 2e       	mov	r0, r26
    90ca:	06 94       	lsr	r0
    90cc:	57 95       	ror	r21
    90ce:	47 95       	ror	r20
    90d0:	37 95       	ror	r19
    90d2:	27 95       	ror	r18
    90d4:	ba 95       	dec	r27
    90d6:	c9 f7       	brne	.-14     	; 0x90ca <__ultoa_invert+0xa2>
    90d8:	62 0f       	add	r22, r18
    90da:	73 1f       	adc	r23, r19
    90dc:	84 1f       	adc	r24, r20
    90de:	95 1f       	adc	r25, r21
    90e0:	a0 1d       	adc	r26, r0
    90e2:	08 95       	ret

000090e4 <__ctype_isfalse>:
    90e4:	99 27       	eor	r25, r25
    90e6:	88 27       	eor	r24, r24

000090e8 <__ctype_istrue>:
    90e8:	08 95       	ret

000090ea <fgetc>:
    90ea:	cf 93       	push	r28
    90ec:	df 93       	push	r29
    90ee:	ec 01       	movw	r28, r24
    90f0:	4b 81       	ldd	r20, Y+3	; 0x03
    90f2:	40 ff       	sbrs	r20, 0
    90f4:	1a c0       	rjmp	.+52     	; 0x912a <fgetc+0x40>
    90f6:	46 ff       	sbrs	r20, 6
    90f8:	0a c0       	rjmp	.+20     	; 0x910e <fgetc+0x24>
    90fa:	4f 7b       	andi	r20, 0xBF	; 191
    90fc:	4b 83       	std	Y+3, r20	; 0x03
    90fe:	8e 81       	ldd	r24, Y+6	; 0x06
    9100:	9f 81       	ldd	r25, Y+7	; 0x07
    9102:	01 96       	adiw	r24, 0x01	; 1
    9104:	8e 83       	std	Y+6, r24	; 0x06
    9106:	9f 83       	std	Y+7, r25	; 0x07
    9108:	8a 81       	ldd	r24, Y+2	; 0x02
    910a:	28 2f       	mov	r18, r24
    910c:	2b c0       	rjmp	.+86     	; 0x9164 <fgetc+0x7a>
    910e:	42 ff       	sbrs	r20, 2
    9110:	13 c0       	rjmp	.+38     	; 0x9138 <fgetc+0x4e>
    9112:	e8 81       	ld	r30, Y
    9114:	f9 81       	ldd	r31, Y+1	; 0x01
    9116:	80 81       	ld	r24, Z
    9118:	28 2f       	mov	r18, r24
    911a:	33 27       	eor	r19, r19
    911c:	27 fd       	sbrc	r18, 7
    911e:	30 95       	com	r19
    9120:	21 15       	cp	r18, r1
    9122:	31 05       	cpc	r19, r1
    9124:	29 f4       	brne	.+10     	; 0x9130 <fgetc+0x46>
    9126:	40 62       	ori	r20, 0x20	; 32
    9128:	4b 83       	std	Y+3, r20	; 0x03
    912a:	2f ef       	ldi	r18, 0xFF	; 255
    912c:	3f ef       	ldi	r19, 0xFF	; 255
    912e:	1b c0       	rjmp	.+54     	; 0x9166 <fgetc+0x7c>
    9130:	31 96       	adiw	r30, 0x01	; 1
    9132:	e8 83       	st	Y, r30
    9134:	f9 83       	std	Y+1, r31	; 0x01
    9136:	11 c0       	rjmp	.+34     	; 0x915a <fgetc+0x70>
    9138:	ea 85       	ldd	r30, Y+10	; 0x0a
    913a:	fb 85       	ldd	r31, Y+11	; 0x0b
    913c:	ce 01       	movw	r24, r28
    913e:	19 95       	eicall
    9140:	9c 01       	movw	r18, r24
    9142:	97 ff       	sbrs	r25, 7
    9144:	0a c0       	rjmp	.+20     	; 0x915a <fgetc+0x70>
    9146:	9b 81       	ldd	r25, Y+3	; 0x03
    9148:	2f 5f       	subi	r18, 0xFF	; 255
    914a:	3f 4f       	sbci	r19, 0xFF	; 255
    914c:	11 f0       	breq	.+4      	; 0x9152 <fgetc+0x68>
    914e:	80 e2       	ldi	r24, 0x20	; 32
    9150:	01 c0       	rjmp	.+2      	; 0x9154 <fgetc+0x6a>
    9152:	80 e1       	ldi	r24, 0x10	; 16
    9154:	89 2b       	or	r24, r25
    9156:	8b 83       	std	Y+3, r24	; 0x03
    9158:	e8 cf       	rjmp	.-48     	; 0x912a <fgetc+0x40>
    915a:	8e 81       	ldd	r24, Y+6	; 0x06
    915c:	9f 81       	ldd	r25, Y+7	; 0x07
    915e:	01 96       	adiw	r24, 0x01	; 1
    9160:	8e 83       	std	Y+6, r24	; 0x06
    9162:	9f 83       	std	Y+7, r25	; 0x07
    9164:	30 e0       	ldi	r19, 0x00	; 0
    9166:	c9 01       	movw	r24, r18
    9168:	df 91       	pop	r29
    916a:	cf 91       	pop	r28
    916c:	08 95       	ret

0000916e <_exit>:
    916e:	f8 94       	cli

00009170 <__stop_program>:
    9170:	ff cf       	rjmp	.-2      	; 0x9170 <__stop_program>
