
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  00009112  000091a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000412  00802100  00802100  000092a6  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  000092a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e14  00000000  00000000  00009626  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d420  00000000  00000000  0000a43a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d57  00000000  00000000  0001785a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004e1e  00000000  00000000  0001a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  0001f3d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023d0  00000000  00000000  0001fee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003aea  00000000  00000000  000222b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00025d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__ctors_end>
       4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      10:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      14:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      18:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      1c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      20:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      24:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      28:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      2c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      30:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      34:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      38:	0c 94 a5 27 	jmp	0x4f4a	; 0x4f4a <__vector_14>
      3c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      44:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      48:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      4c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      50:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      54:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      58:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      60:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      64:	0c 94 49 32 	jmp	0x6492	; 0x6492 <__vector_25>
      68:	0c 94 e5 2f 	jmp	0x5fca	; 0x5fca <__vector_26>
      6c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      70:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__vector_28>
      74:	0c 94 a1 32 	jmp	0x6542	; 0x6542 <__vector_29>
      78:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      7c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      80:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      84:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      88:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      8c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      90:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      94:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      98:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ac:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__vector_43>
      b0:	0c 94 e1 2e 	jmp	0x5dc2	; 0x5dc2 <__vector_44>
      b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      bc:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__vector_47>
      c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ec:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      fc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     100:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__vector_64>
     104:	0c 94 f5 2e 	jmp	0x5dea	; 0x5dea <__vector_65>
     108:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__vector_66>
     10c:	0c 94 b9 2e 	jmp	0x5d72	; 0x5d72 <__vector_67>
     110:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     114:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     118:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     11c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     120:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     124:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     128:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     12c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     130:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     134:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <__vector_77>
     138:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     13c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     140:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     144:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     148:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     14c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     150:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     154:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     158:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     15c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     160:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     164:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     168:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     16c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     170:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     174:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     178:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     17c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     180:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     184:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     188:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     18c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     190:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     194:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     198:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     19c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1a0:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__vector_104>
     1a4:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__vector_105>
     1a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1ac:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b0:	0c 94 76 26 	jmp	0x4cec	; 0x4cec <__vector_108>
     1b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1bc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3808>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3805>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3802>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3799>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3796>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3793>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3725>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3723>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3721>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3719>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3717>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3715>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3713>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3711>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3709>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3707>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3702>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3688>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3686>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3684>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3682>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3680>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <__c.3660>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <square_test1>:
     750:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     760:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     770:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     780:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     790:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007be <square_test2>:
     7be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7de:	78 30 20 79 30 00                                   x0 y0.

000007e4 <square_test10>:
     7e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     804:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000810 <circle_test10>:
     810:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     820:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     830:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     840:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     850:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     860:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     870:	30 00                                               0.

00000872 <square_circle_test10>:
     872:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     882:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     892:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e2:	31 30 20 79 30 00                                   10 y0.

000008e8 <square_circle_test100>:
     8e8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8f8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     908:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     918:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     928:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     938:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     948:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     958:	35 30 20 6a 30 00                                   50 j0.

0000095e <spiral_test5>:
     95e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     96e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     97e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     98e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     99e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9ae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9be:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9ce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009d8 <spiral_test50a>:
     9d8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9e8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009f8 <dwell_test1>:
     9f8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a88:	20 78 30 00                                          x0.

00000a8c <dwell_test2>:
     a8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     aac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     abc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     acc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     adc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     aec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     afc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b16 <dwell_testMax>:
     b16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b20 <g0_test1>:
     b20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b40 <g0_test2>:
     b40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b70:	79 30 20 7a 30 00                                   y0 z0.

00000b76 <g0_test3>:
     b76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba4 <radius_arc_test1>:
     ba4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc4:	72 35 30 0a 00                                      r50..

00000bc9 <radius_arc_test2>:
     bc9:	67 32 0a 00                                         g2..

00000bcd <zoetrope>:
     bcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     bdd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bed:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     bfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cad:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cbd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ccd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     cdd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ced:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     cfd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     dad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ddd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     ded:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     dfd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e0d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e1d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e2d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e3d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e4d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e5d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e6d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e7d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e8d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e9d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     ead:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ebd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ecd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     edd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     eed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     efd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f0d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f1d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f2d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f3d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f4d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f5d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f6d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f7d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f8d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f9d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fbd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fcd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fdd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     fed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     ffd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    100d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    101d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    102d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    103d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    104d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    105d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    106d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    107d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    108d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    109d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    10fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    110d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    111d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    112d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    113d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    114d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    115d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    116d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    117d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    118d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    119d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    11fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    120d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    121d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    122d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    123d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    124d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    125d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    126d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    127d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    128d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    129d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    12fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    130d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    131d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    132d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    133d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    134d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    135d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    136d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    137d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    138d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    139d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    13fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    140d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    141d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    142d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    143d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    144d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    145d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    146d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    147d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    148d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    149d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    14fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    150d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    151d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    152d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    153d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    154d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    155d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    156d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    157d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001588 <contraptor_circle>:
    1588:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1598:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1608:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1618:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1628:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1638:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1648:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1658:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1668:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1678:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1688:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1698:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1708:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1718:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1728:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1738:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1748:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1758:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1768:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1778:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1788:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1798:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1808:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1818:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1828:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1838:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1848:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1858:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1868:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1878:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1888:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1898:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18a8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18b8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18c8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18d8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18e8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18f8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1908:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1918:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1928:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1938:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1948:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1958:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001968 <tgModeStringControl>:
    1968:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001975 <tgModeStringConfig>:
    1975:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001981 <tgModeStringGCode>:
    1981:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

0000198d <tgModeStringDirect>:
    198d:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

0000199a <tgModeStrings>:
    199a:	68 19 75 19 81 19 8d 19                             h.u.....

000019a2 <__c.3908>:
    19a2:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    19b2:	69 6c 65 0a 00                                      ile..

000019b7 <__c.3971>:
    19b7:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

000019c5 <__c.3888>:
    19c5:	62 75 69 6c 64 20 32 30 34 00                       build 204.

000019cf <__c.3886>:
    19cf:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    19df:	25 53 0a 00                                         %S..

000019e3 <bsel>:
    19e3:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000019ee <bscale>:
    19ee:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000019f9 <readlnFuncs>:
    19f9:	ae 31 83 31 83 31 ee 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a09:	da 31 83 31 ae 31 83 31 83 31 ae 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a19:	83 31 fa 31 83 31 f4 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a29:	ee 31 83 31 83 31 ee 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a39:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a49:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a59:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a69:	83 31 83 31 83 31 d0 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a79:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a89:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1a99:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1aa9:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1ab9:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1ac9:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1ad9:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 83 31     .1.1.1.1.1.1.1.1
    1ae9:	83 31 83 31 83 31 83 31 83 31 83 31 83 31 da 31     .1.1.1.1.1.1.1.1

00001af9 <getcFuncs>:
    1af9:	ff 30 ef 30 ef 30 ee 31 ef 30 ef 30 ef 30 ef 30     .0.0.0.1.0.0.0.0
    1b09:	20 31 ef 30 ff 30 ef 30 ef 30 ff 30 ef 30 ef 30      1.0.0.0.0.0.0.0
    1b19:	ef 30 fa 31 ef 30 f4 31 ef 30 ef 30 ef 30 ef 30     .0.1.0.1.0.0.0.0
    1b29:	ee 31 ef 30 ef 30 ee 31 ef 30 ef 30 ef 30 ef 30     .1.0.0.1.0.0.0.0
    1b39:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1b49:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1b59:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1b69:	ef 30 ef 30 ef 30 16 31 ef 30 ef 30 ef 30 ef 30     .0.0.0.1.0.0.0.0
    1b79:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1b89:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1b99:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1ba9:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1bb9:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1bc9:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1bd9:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30     .0.0.0.0.0.0.0.0
    1be9:	ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 ef 30 20 31     .0.0.0.0.0.0.0 1

00001bf9 <readlnFuncs>:
    1bf9:	50 34 25 34 25 34 90 34 25 34 25 34 25 34 25 34     P4%4%4.4%4%4%4%4
    1c09:	7c 34 25 34 50 34 25 34 25 34 50 34 25 34 25 34     |4%4P4%4%4P4%4%4
    1c19:	25 34 9c 34 25 34 96 34 25 34 25 34 25 34 25 34     %4.4%4.4%4%4%4%4
    1c29:	90 34 25 34 25 34 90 34 25 34 25 34 25 34 25 34     .4%4%4.4%4%4%4%4
    1c39:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1c49:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1c59:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1c69:	25 34 25 34 25 34 72 34 25 34 25 34 25 34 25 34     %4%4%4r4%4%4%4%4
    1c79:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1c89:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1c99:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1ca9:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1cb9:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1cc9:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1cd9:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 25 34     %4%4%4%4%4%4%4%4
    1ce9:	25 34 25 34 25 34 25 34 25 34 25 34 25 34 7c 34     %4%4%4%4%4%4%4|4

00001cf9 <getcFuncs>:
    1cf9:	bc 33 ac 33 ac 33 90 34 ac 33 ac 33 ac 33 ac 33     .3.3.3.4.3.3.3.3
    1d09:	dd 33 ac 33 bc 33 ac 33 ac 33 bc 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d19:	ac 33 9c 34 ac 33 96 34 ac 33 ac 33 ac 33 ac 33     .3.4.3.4.3.3.3.3
    1d29:	90 34 ac 33 ac 33 90 34 ac 33 ac 33 ac 33 ac 33     .4.3.3.4.3.3.3.3
    1d39:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d49:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d59:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d69:	ac 33 ac 33 ac 33 d3 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d79:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d89:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1d99:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1da9:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1db9:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1dc9:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1dd9:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33     .3.3.3.3.3.3.3.3
    1de9:	ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 ac 33 dd 33     .3.3.3.3.3.3.3.3

00001df9 <pstr_inf>:
    1df9:	49 4e 46                                            INF

00001dfc <pstr_inity>:
    1dfc:	49 4e 49 54 59                                      INITY

00001e01 <pstr_nan>:
    1e01:	4e 41 4e                                            NAN

00001e04 <pwr_m10>:
    1e04:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e14:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e1c <pwr_p10>:
    1e1c:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e2c:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e3c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e4c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e5c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e6c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e7c:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e8c:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e9c:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eac:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ebc:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ecc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1edc:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1eec:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1efc:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f0c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f1c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f2c:	3d 27                                               ='

00001f2e <__ctors_end>:
    1f2e:	11 24       	eor	r1, r1
    1f30:	1f be       	out	0x3f, r1	; 63
    1f32:	cf ef       	ldi	r28, 0xFF	; 255
    1f34:	df e5       	ldi	r29, 0x5F	; 95
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	0c bf       	out	0x3c, r16	; 60

00001f3e <__do_copy_data>:
    1f3e:	11 e2       	ldi	r17, 0x21	; 33
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e2       	ldi	r27, 0x20	; 32
    1f44:	e2 e1       	ldi	r30, 0x12	; 18
    1f46:	f1 e9       	ldi	r31, 0x91	; 145
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0b bf       	out	0x3b, r16	; 59
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <__do_copy_data+0x14>
    1f4e:	07 90       	elpm	r0, Z+
    1f50:	0d 92       	st	X+, r0
    1f52:	a0 30       	cpi	r26, 0x00	; 0
    1f54:	b1 07       	cpc	r27, r17
    1f56:	d9 f7       	brne	.-10     	; 0x1f4e <__do_copy_data+0x10>

00001f58 <__do_clear_bss>:
    1f58:	15 e2       	ldi	r17, 0x25	; 37
    1f5a:	a0 e0       	ldi	r26, 0x00	; 0
    1f5c:	b1 e2       	ldi	r27, 0x21	; 33
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <.do_clear_bss_start>

00001f60 <.do_clear_bss_loop>:
    1f60:	1d 92       	st	X+, r1

00001f62 <.do_clear_bss_start>:
    1f62:	a2 31       	cpi	r26, 0x12	; 18
    1f64:	b1 07       	cpc	r27, r17
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <.do_clear_bss_loop>
    1f68:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <main>
    1f6c:	0c 94 87 48 	jmp	0x910e	; 0x910e <_exit>

00001f70 <__bad_interrupt>:
    1f70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f74 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f74:	f8 94       	cli
	xmega_init();				// xmega setup
    1f76:	0e 94 b3 1b 	call	0x3766	; 0x3766 <xmega_init>
	xio_init();					// xmega io subsystem
    1f7a:	0e 94 1d 29 	call	0x523a	; 0x523a <xio_init>

	cfg_init();					// get config record from eeprom
    1f7e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <cfg_init>
	st_init(); 					// stepper subsystem
    1f82:	0e 94 32 24 	call	0x4864	; 0x4864 <st_init>
	ls_init();					// limit switches
    1f86:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <ls_init>
	mv_init();					// move buffers
    1f8a:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <mv_init>
	mc_init();					// motion control subsystem
    1f8e:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <mc_init>
	spindle_init();				// spindle controller
    1f92:	0e 94 16 24 	call	0x482c	; 0x482c <spindle_init>
	en_init();					// encoders
    1f96:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <en_init>
	gc_init();					// gcode-parser
    1f9a:	0e 94 09 10 	call	0x2012	; 0x2012 <gc_init>
	dd_init();					// direct drive commands
    1f9e:	0e 94 5f 2c 	call	0x58be	; 0x58be <dd_init>
	tg_init();					// tinyg parsers
    1fa2:	0e 94 3a 2c 	call	0x5874	; 0x5874 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fa6:	0e 94 18 28 	call	0x5030	; 0x5030 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1faa:	e0 ea       	ldi	r30, 0xA0	; 160
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 91 a2 00 	lds	r24, 0x00A2
    1fb2:	81 60       	ori	r24, 0x01	; 1
    1fb4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fb6:	80 91 a2 00 	lds	r24, 0x00A2
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fbe:	80 91 a2 00 	lds	r24, 0x00A2
    1fc2:	84 60       	ori	r24, 0x04	; 4
    1fc4:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fc6:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1fc8:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <tg_controller>
    1fcc:	fd cf       	rjmp	.-6      	; 0x1fc8 <main+0x54>

00001fce <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fce:	80 93 4d 21 	sts	0x214D, r24
	gc.plane_axis_1 = axis_1;
    1fd2:	60 93 4e 21 	sts	0x214E, r22
	gc.plane_axis_2 = axis_2;
    1fd6:	40 93 4f 21 	sts	0x214F, r20
}
    1fda:	08 95       	ret

00001fdc <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	7b 01       	movw	r14, r22
    1fe6:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1fe8:	80 91 0d 21 	lds	r24, 0x210D
    1fec:	88 23       	and	r24, r24
    1fee:	51 f0       	breq	.+20     	; 0x2004 <to_millimeters+0x28>
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	25 e8       	ldi	r18, 0x85	; 133
    1ff6:	32 e4       	ldi	r19, 0x42	; 66
    1ff8:	41 e2       	ldi	r20, 0x21	; 33
    1ffa:	5d e3       	ldi	r21, 0x3D	; 61
    1ffc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    2000:	7b 01       	movw	r14, r22
    2002:	8c 01       	movw	r16, r24
}
    2004:	b7 01       	movw	r22, r14
    2006:	c8 01       	movw	r24, r16
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	08 95       	ret

00002012 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2012:	86 e5       	ldi	r24, 0x56	; 86
    2014:	e0 e0       	ldi	r30, 0x00	; 0
    2016:	f1 e2       	ldi	r31, 0x21	; 33
    2018:	df 01       	movw	r26, r30
    201a:	1d 92       	st	X+, r1
    201c:	8a 95       	dec	r24
    201e:	e9 f7       	brne	.-6      	; 0x201a <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	80 93 11 21 	sts	0x2111, r24
    202c:	90 93 12 21 	sts	0x2112, r25
    2030:	a0 93 13 21 	sts	0x2113, r26
    2034:	b0 93 14 21 	sts	0x2114, r27
	gc.radius = 0;							// radius value
    2038:	80 93 15 21 	sts	0x2115, r24
    203c:	90 93 16 21 	sts	0x2116, r25
    2040:	a0 93 17 21 	sts	0x2117, r26
    2044:	b0 93 18 21 	sts	0x2118, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2048:	80 91 83 22 	lds	r24, 0x2283
    204c:	90 91 84 22 	lds	r25, 0x2284
    2050:	a0 91 85 22 	lds	r26, 0x2285
    2054:	b0 91 86 22 	lds	r27, 0x2286
    2058:	80 93 19 21 	sts	0x2119, r24
    205c:	90 93 1a 21 	sts	0x211A, r25
    2060:	a0 93 1b 21 	sts	0x211B, r26
    2064:	b0 93 1c 21 	sts	0x211C, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2068:	80 91 87 22 	lds	r24, 0x2287
    206c:	90 91 88 22 	lds	r25, 0x2288
    2070:	a0 91 89 22 	lds	r26, 0x2289
    2074:	b0 91 8a 22 	lds	r27, 0x228A
    2078:	80 93 1d 21 	sts	0x211D, r24
    207c:	90 93 1e 21 	sts	0x211E, r25
    2080:	a0 93 1f 21 	sts	0x211F, r26
    2084:	b0 93 20 21 	sts	0x2120, r27

	gc.absolute_mode = TRUE;
    2088:	21 e0       	ldi	r18, 0x01	; 1
    208a:	20 93 0e 21 	sts	0x210E, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf eb       	ldi	r27, 0xBF	; 191
    2096:	80 93 25 21 	sts	0x2125, r24
    209a:	90 93 26 21 	sts	0x2126, r25
    209e:	a0 93 27 21 	sts	0x2127, r26
    20a2:	b0 93 28 21 	sts	0x2128, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20a6:	10 92 0f 21 	sts	0x210F, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20aa:	10 92 54 21 	sts	0x2154, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20ae:	10 92 55 21 	sts	0x2155, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20b2:	10 92 4d 21 	sts	0x214D, r1
	gc.plane_axis_1 = axis_1;
    20b6:	20 93 4e 21 	sts	0x214E, r18
	gc.plane_axis_2 = axis_2;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 93 4f 21 	sts	0x214F, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20c0:	08 95       	ret

000020c2 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	0f 92       	push	r0
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	3b 01       	movw	r6, r22
    20ec:	2a 01       	movw	r4, r20
    20ee:	49 01       	movw	r8, r18
    20f0:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    20f2:	d8 01       	movw	r26, r16
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	e0 81       	ld	r30, Z
    20fe:	ee 23       	and	r30, r30
    2100:	41 f0       	breq	.+16     	; 0x2112 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2102:	dc 01       	movw	r26, r24
    2104:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2106:	e1 54       	subi	r30, 0x41	; 65
    2108:	ea 31       	cpi	r30, 0x1A	; 26
    210a:	30 f0       	brcs	.+12     	; 0x2118 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    210c:	8d e0       	ldi	r24, 0x0D	; 13
    210e:	80 93 00 21 	sts	0x2100, r24
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	35 c0       	rjmp	.+106    	; 0x2182 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2118:	f8 01       	movw	r30, r16
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2124:	89 01       	movw	r16, r18
    2126:	08 0f       	add	r16, r24
    2128:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    212a:	c8 01       	movw	r24, r16
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	0e 94 bb 44 	call	0x8976	; 0x8976 <strtod>
    2136:	6b 01       	movw	r12, r22
    2138:	7c 01       	movw	r14, r24
    213a:	d3 01       	movw	r26, r6
    213c:	6d 93       	st	X+, r22
    213e:	7d 93       	st	X+, r23
    2140:	8d 93       	st	X+, r24
    2142:	9c 93       	st	X, r25
    2144:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	80 17       	cp	r24, r16
    214c:	91 07       	cpc	r25, r17
    214e:	11 f4       	brne	.+4      	; 0x2154 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2150:	8f e0       	ldi	r24, 0x0F	; 15
    2152:	dd cf       	rjmp	.-70     	; 0x210e <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2154:	88 19       	sub	r24, r8
    2156:	99 09       	sbc	r25, r9
    2158:	f5 01       	movw	r30, r10
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    215e:	c7 01       	movw	r24, r14
    2160:	b6 01       	movw	r22, r12
    2162:	0e 94 20 44 	call	0x8840	; 0x8840 <trunc>
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	c7 01       	movw	r24, r14
    216c:	b6 01       	movw	r22, r12
    216e:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2172:	d2 01       	movw	r26, r4
    2174:	6d 93       	st	X+, r22
    2176:	7d 93       	st	X+, r23
    2178:	8d 93       	st	X+, r24
    217a:	9c 93       	st	X, r25
    217c:	13 97       	sbiw	r26, 0x03	; 3
    217e:	21 e0       	ldi	r18, 0x01	; 1
    2180:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2182:	c9 01       	movw	r24, r18
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	7f 90       	pop	r7
    21a2:	6f 90       	pop	r6
    21a4:	5f 90       	pop	r5
    21a6:	4f 90       	pop	r4
    21a8:	08 95       	ret

000021aa <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21aa:	af 92       	push	r10
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	79 01       	movw	r14, r18
    21bc:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21be:	5f 77       	andi	r21, 0x7F	; 127
    21c0:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    21c4:	0e 94 75 40 	call	0x80ea	; 0x80ea <atan>
    21c8:	5b 01       	movw	r10, r22
    21ca:	6c 01       	movw	r12, r24

	if (y>0) {
    21cc:	c8 01       	movw	r24, r16
    21ce:	b7 01       	movw	r22, r14
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	0e 94 a0 42 	call	0x8540	; 0x8540 <__gesf2>
    21dc:	18 16       	cp	r1, r24
    21de:	cc f0       	brlt	.+50     	; 0x2212 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21e0:	c6 01       	movw	r24, r12
    21e2:	b5 01       	movw	r22, r10
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 a0 42 	call	0x8540	; 0x8540 <__gesf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <theta+0x54>
	    {
			return(M_PI-theta);
    21f4:	6b ed       	ldi	r22, 0xDB	; 219
    21f6:	7f e0       	ldi	r23, 0x0F	; 15
    21f8:	89 e4       	ldi	r24, 0x49	; 73
    21fa:	90 e4       	ldi	r25, 0x40	; 64
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    21fe:	6b ed       	ldi	r22, 0xDB	; 219
    2200:	7f e0       	ldi	r23, 0x0F	; 15
    2202:	89 e4       	ldi	r24, 0x49	; 73
    2204:	90 ec       	ldi	r25, 0xC0	; 192
    2206:	a6 01       	movw	r20, r12
    2208:	95 01       	movw	r18, r10
    220a:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    220e:	5b 01       	movw	r10, r22
    2210:	6c 01       	movw	r12, r24
		}
	}
}
    2212:	b5 01       	movw	r22, r10
    2214:	c6 01       	movw	r24, r12
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	08 95       	ret

00002228 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	68 97       	sbiw	r28, 0x18	; 24
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    225c:	e5 e3       	ldi	r30, 0x35	; 53
    225e:	f1 e2       	ldi	r31, 0x21	; 33
    2260:	8c e0       	ldi	r24, 0x0C	; 12
    2262:	df 01       	movw	r26, r30
    2264:	28 2f       	mov	r18, r24
    2266:	1d 92       	st	X+, r1
    2268:	2a 95       	dec	r18
    226a:	e9 f7       	brne	.-6      	; 0x2266 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    226c:	3c 96       	adiw	r30, 0x0c	; 12
    226e:	df 01       	movw	r26, r30
    2270:	1d 92       	st	X+, r1
    2272:	8a 95       	dec	r24
    2274:	e9 f7       	brne	.-6      	; 0x2270 <gc_execute_block+0x48>

	gc.status = TG_OK;
    2276:	10 92 00 21 	sts	0x2100, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    227a:	10 92 10 21 	sts	0x2110, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    227e:	10 92 55 21 	sts	0x2155, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2282:	5e 01       	movw	r10, r28
    2284:	08 94       	sec
    2286:	a1 1c       	adc	r10, r1
    2288:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    228a:	ff 24       	eor	r15, r15
    228c:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    228e:	be e0       	ldi	r27, 0x0E	; 14
    2290:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2292:	a2 e0       	ldi	r26, 0x02	; 2
    2294:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2296:	77 24       	eor	r7, r7
    2298:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    229a:	f3 e0       	ldi	r31, 0x03	; 3
    229c:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    229e:	e4 e0       	ldi	r30, 0x04	; 4
    22a0:	6e 2e       	mov	r6, r30
    22a2:	0a c1       	rjmp	.+532    	; 0x24b8 <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22a4:	80 91 01 21 	lds	r24, 0x2101
    22a8:	8d 34       	cpi	r24, 0x4D	; 77
    22aa:	09 f4       	brne	.+2      	; 0x22ae <gc_execute_block+0x86>
    22ac:	be c0       	rjmp	.+380    	; 0x242a <gc_execute_block+0x202>
    22ae:	84 35       	cpi	r24, 0x54	; 84
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <gc_execute_block+0x8c>
    22b2:	f0 c0       	rjmp	.+480    	; 0x2494 <gc_execute_block+0x26c>
    22b4:	87 34       	cpi	r24, 0x47	; 71
    22b6:	09 f0       	breq	.+2      	; 0x22ba <gc_execute_block+0x92>
    22b8:	fb c0       	rjmp	.+502    	; 0x24b0 <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22ba:	60 91 02 21 	lds	r22, 0x2102
    22be:	70 91 03 21 	lds	r23, 0x2103
    22c2:	80 91 04 21 	lds	r24, 0x2104
    22c6:	90 91 05 21 	lds	r25, 0x2105
    22ca:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    22ce:	65 31       	cpi	r22, 0x15	; 21
    22d0:	71 05       	cpc	r23, r1
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <gc_execute_block+0xae>
    22d4:	8f c0       	rjmp	.+286    	; 0x23f4 <gc_execute_block+0x1cc>
    22d6:	66 31       	cpi	r22, 0x16	; 22
    22d8:	71 05       	cpc	r23, r1
    22da:	84 f5       	brge	.+96     	; 0x233c <gc_execute_block+0x114>
    22dc:	64 30       	cpi	r22, 0x04	; 4
    22de:	71 05       	cpc	r23, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <gc_execute_block+0xbc>
    22e2:	6d c0       	rjmp	.+218    	; 0x23be <gc_execute_block+0x196>
    22e4:	65 30       	cpi	r22, 0x05	; 5
    22e6:	71 05       	cpc	r23, r1
    22e8:	a4 f4       	brge	.+40     	; 0x2312 <gc_execute_block+0xea>
    22ea:	61 30       	cpi	r22, 0x01	; 1
    22ec:	71 05       	cpc	r23, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <gc_execute_block+0xca>
    22f0:	57 c0       	rjmp	.+174    	; 0x23a0 <gc_execute_block+0x178>
    22f2:	62 30       	cpi	r22, 0x02	; 2
    22f4:	71 05       	cpc	r23, r1
    22f6:	24 f4       	brge	.+8      	; 0x2300 <gc_execute_block+0xd8>
    22f8:	67 2b       	or	r22, r23
    22fa:	09 f4       	brne	.+2      	; 0x22fe <gc_execute_block+0xd6>
    22fc:	4c c0       	rjmp	.+152    	; 0x2396 <gc_execute_block+0x16e>
    22fe:	c7 c0       	rjmp	.+398    	; 0x248e <gc_execute_block+0x266>
    2300:	62 30       	cpi	r22, 0x02	; 2
    2302:	71 05       	cpc	r23, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <gc_execute_block+0xe0>
    2306:	51 c0       	rjmp	.+162    	; 0x23aa <gc_execute_block+0x182>
    2308:	63 30       	cpi	r22, 0x03	; 3
    230a:	71 05       	cpc	r23, r1
    230c:	09 f0       	breq	.+2      	; 0x2310 <gc_execute_block+0xe8>
    230e:	bf c0       	rjmp	.+382    	; 0x248e <gc_execute_block+0x266>
    2310:	51 c0       	rjmp	.+162    	; 0x23b4 <gc_execute_block+0x18c>
    2312:	62 31       	cpi	r22, 0x12	; 18
    2314:	71 05       	cpc	r23, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <gc_execute_block+0xf2>
    2318:	5c c0       	rjmp	.+184    	; 0x23d2 <gc_execute_block+0x1aa>
    231a:	63 31       	cpi	r22, 0x13	; 19
    231c:	71 05       	cpc	r23, r1
    231e:	2c f4       	brge	.+10     	; 0x232a <gc_execute_block+0x102>
    2320:	61 31       	cpi	r22, 0x11	; 17
    2322:	71 05       	cpc	r23, r1
    2324:	09 f0       	breq	.+2      	; 0x2328 <gc_execute_block+0x100>
    2326:	b3 c0       	rjmp	.+358    	; 0x248e <gc_execute_block+0x266>
    2328:	4d c0       	rjmp	.+154    	; 0x23c4 <gc_execute_block+0x19c>
    232a:	63 31       	cpi	r22, 0x13	; 19
    232c:	71 05       	cpc	r23, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <gc_execute_block+0x10a>
    2330:	57 c0       	rjmp	.+174    	; 0x23e0 <gc_execute_block+0x1b8>
    2332:	64 31       	cpi	r22, 0x14	; 20
    2334:	71 05       	cpc	r23, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <gc_execute_block+0x112>
    2338:	aa c0       	rjmp	.+340    	; 0x248e <gc_execute_block+0x266>
    233a:	59 c0       	rjmp	.+178    	; 0x23ee <gc_execute_block+0x1c6>
    233c:	6a 35       	cpi	r22, 0x5A	; 90
    233e:	71 05       	cpc	r23, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <gc_execute_block+0x11c>
    2342:	64 c0       	rjmp	.+200    	; 0x240c <gc_execute_block+0x1e4>
    2344:	6b 35       	cpi	r22, 0x5B	; 91
    2346:	71 05       	cpc	r23, r1
    2348:	ac f4       	brge	.+42     	; 0x2374 <gc_execute_block+0x14c>
    234a:	6e 31       	cpi	r22, 0x1E	; 30
    234c:	71 05       	cpc	r23, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <gc_execute_block+0x12a>
    2350:	54 c0       	rjmp	.+168    	; 0x23fa <gc_execute_block+0x1d2>
    2352:	6f 31       	cpi	r22, 0x1F	; 31
    2354:	71 05       	cpc	r23, r1
    2356:	2c f4       	brge	.+10     	; 0x2362 <gc_execute_block+0x13a>
    2358:	6c 31       	cpi	r22, 0x1C	; 28
    235a:	71 05       	cpc	r23, r1
    235c:	09 f0       	breq	.+2      	; 0x2360 <gc_execute_block+0x138>
    235e:	97 c0       	rjmp	.+302    	; 0x248e <gc_execute_block+0x266>
    2360:	4c c0       	rjmp	.+152    	; 0x23fa <gc_execute_block+0x1d2>
    2362:	65 33       	cpi	r22, 0x35	; 53
    2364:	71 05       	cpc	r23, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <gc_execute_block+0x142>
    2368:	4b c0       	rjmp	.+150    	; 0x2400 <gc_execute_block+0x1d8>
    236a:	60 35       	cpi	r22, 0x50	; 80
    236c:	71 05       	cpc	r23, r1
    236e:	09 f0       	breq	.+2      	; 0x2372 <gc_execute_block+0x14a>
    2370:	8e c0       	rjmp	.+284    	; 0x248e <gc_execute_block+0x266>
    2372:	49 c0       	rjmp	.+146    	; 0x2406 <gc_execute_block+0x1de>
    2374:	6c 35       	cpi	r22, 0x5C	; 92
    2376:	71 05       	cpc	r23, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <gc_execute_block+0x154>
    237a:	4e c0       	rjmp	.+156    	; 0x2418 <gc_execute_block+0x1f0>
    237c:	6c 35       	cpi	r22, 0x5C	; 92
    237e:	71 05       	cpc	r23, r1
    2380:	0c f4       	brge	.+2      	; 0x2384 <gc_execute_block+0x15c>
    2382:	47 c0       	rjmp	.+142    	; 0x2412 <gc_execute_block+0x1ea>
    2384:	6d 35       	cpi	r22, 0x5D	; 93
    2386:	71 05       	cpc	r23, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <gc_execute_block+0x164>
    238a:	49 c0       	rjmp	.+146    	; 0x241e <gc_execute_block+0x1f6>
    238c:	6e 35       	cpi	r22, 0x5E	; 94
    238e:	71 05       	cpc	r23, r1
    2390:	09 f0       	breq	.+2      	; 0x2394 <gc_execute_block+0x16c>
    2392:	7d c0       	rjmp	.+250    	; 0x248e <gc_execute_block+0x266>
    2394:	47 c0       	rjmp	.+142    	; 0x2424 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2396:	f0 92 55 21 	sts	0x2155, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    239a:	10 92 0b 21 	sts	0x210B, r1
    239e:	88 c0       	rjmp	.+272    	; 0x24b0 <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23a0:	f0 92 55 21 	sts	0x2155, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23a4:	f0 92 0b 21 	sts	0x210B, r15
    23a8:	83 c0       	rjmp	.+262    	; 0x24b0 <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23aa:	f0 92 55 21 	sts	0x2155, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23ae:	e0 92 0b 21 	sts	0x210B, r14
    23b2:	7e c0       	rjmp	.+252    	; 0x24b0 <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23b4:	f0 92 55 21 	sts	0x2155, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23b8:	d0 92 0b 21 	sts	0x210B, r13
    23bc:	79 c0       	rjmp	.+242    	; 0x24b0 <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23be:	e0 92 55 21 	sts	0x2155, r14
    23c2:	76 c0       	rjmp	.+236    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23c4:	10 92 4d 21 	sts	0x214D, r1
	gc.plane_axis_1 = axis_1;
    23c8:	f0 92 4e 21 	sts	0x214E, r15
	gc.plane_axis_2 = axis_2;
    23cc:	e0 92 4f 21 	sts	0x214F, r14
    23d0:	6f c0       	rjmp	.+222    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23d2:	10 92 4d 21 	sts	0x214D, r1
	gc.plane_axis_1 = axis_1;
    23d6:	e0 92 4e 21 	sts	0x214E, r14
	gc.plane_axis_2 = axis_2;
    23da:	f0 92 4f 21 	sts	0x214F, r15
    23de:	68 c0       	rjmp	.+208    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e0:	f0 92 4d 21 	sts	0x214D, r15
	gc.plane_axis_1 = axis_1;
    23e4:	e0 92 4e 21 	sts	0x214E, r14
	gc.plane_axis_2 = axis_2;
    23e8:	10 92 4f 21 	sts	0x214F, r1
    23ec:	61 c0       	rjmp	.+194    	; 0x24b0 <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    23ee:	f0 92 0d 21 	sts	0x210D, r15
    23f2:	5e c0       	rjmp	.+188    	; 0x24b0 <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    23f4:	10 92 0d 21 	sts	0x210D, r1
    23f8:	5b c0       	rjmp	.+182    	; 0x24b0 <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    23fa:	d0 92 55 21 	sts	0x2155, r13
    23fe:	58 c0       	rjmp	.+176    	; 0x24b0 <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    2400:	f0 92 54 21 	sts	0x2154, r15
    2404:	55 c0       	rjmp	.+170    	; 0x24b0 <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2406:	60 92 0b 21 	sts	0x210B, r6
    240a:	52 c0       	rjmp	.+164    	; 0x24b0 <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    240c:	f0 92 0e 21 	sts	0x210E, r15
    2410:	4f c0       	rjmp	.+158    	; 0x24b0 <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    2412:	10 92 0e 21 	sts	0x210E, r1
    2416:	4c c0       	rjmp	.+152    	; 0x24b0 <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2418:	f0 92 10 21 	sts	0x2110, r15
    241c:	49 c0       	rjmp	.+146    	; 0x24b0 <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    241e:	f0 92 0c 21 	sts	0x210C, r15
    2422:	46 c0       	rjmp	.+140    	; 0x24b0 <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2424:	10 92 0c 21 	sts	0x210C, r1
    2428:	43 c0       	rjmp	.+134    	; 0x24b0 <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    242a:	60 91 02 21 	lds	r22, 0x2102
    242e:	70 91 03 21 	lds	r23, 0x2103
    2432:	80 91 04 21 	lds	r24, 0x2104
    2436:	90 91 05 21 	lds	r25, 0x2105
    243a:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    243e:	63 30       	cpi	r22, 0x03	; 3
    2440:	71 05       	cpc	r23, r1
    2442:	e1 f0       	breq	.+56     	; 0x247c <gc_execute_block+0x254>
    2444:	64 30       	cpi	r22, 0x04	; 4
    2446:	71 05       	cpc	r23, r1
    2448:	34 f4       	brge	.+12     	; 0x2456 <gc_execute_block+0x22e>
    244a:	77 fd       	sbrc	r23, 7
    244c:	20 c0       	rjmp	.+64     	; 0x248e <gc_execute_block+0x266>
    244e:	62 30       	cpi	r22, 0x02	; 2
    2450:	71 05       	cpc	r23, r1
    2452:	74 f0       	brlt	.+28     	; 0x2470 <gc_execute_block+0x248>
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <gc_execute_block+0x24e>
    2456:	65 30       	cpi	r22, 0x05	; 5
    2458:	71 05       	cpc	r23, r1
    245a:	b1 f0       	breq	.+44     	; 0x2488 <gc_execute_block+0x260>
    245c:	65 30       	cpi	r22, 0x05	; 5
    245e:	71 05       	cpc	r23, r1
    2460:	84 f0       	brlt	.+32     	; 0x2482 <gc_execute_block+0x25a>
    2462:	6e 31       	cpi	r22, 0x1E	; 30
    2464:	71 05       	cpc	r23, r1
    2466:	39 f0       	breq	.+14     	; 0x2476 <gc_execute_block+0x24e>
    2468:	6c 33       	cpi	r22, 0x3C	; 60
    246a:	71 05       	cpc	r23, r1
    246c:	81 f4       	brne	.+32     	; 0x248e <gc_execute_block+0x266>
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2470:	f0 92 0a 21 	sts	0x210A, r15
    2474:	1d c0       	rjmp	.+58     	; 0x24b0 <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2476:	e0 92 0a 21 	sts	0x210A, r14
    247a:	1a c0       	rjmp	.+52     	; 0x24b0 <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    247c:	f0 92 51 21 	sts	0x2151, r15
    2480:	17 c0       	rjmp	.+46     	; 0x24b0 <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    2482:	70 92 51 21 	sts	0x2151, r7
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    2488:	10 92 51 21 	sts	0x2151, r1
    248c:	11 c0       	rjmp	.+34     	; 0x24b0 <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    248e:	c0 92 00 21 	sts	0x2100, r12
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2494:	60 91 02 21 	lds	r22, 0x2102
    2498:	70 91 03 21 	lds	r23, 0x2103
    249c:	80 91 04 21 	lds	r24, 0x2104
    24a0:	90 91 05 21 	lds	r25, 0x2105
    24a4:	0e 94 20 44 	call	0x8840	; 0x8840 <trunc>
    24a8:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixunssfsi>
    24ac:	60 93 50 21 	sts	0x2150, r22
		}
		if(gc.status) {
    24b0:	80 91 00 21 	lds	r24, 0x2100
    24b4:	88 23       	and	r24, r24
    24b6:	69 f4       	brne	.+26     	; 0x24d2 <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	91 e2       	ldi	r25, 0x21	; 33
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	71 e2       	ldi	r23, 0x21	; 33
    24c0:	46 e0       	ldi	r20, 0x06	; 6
    24c2:	51 e2       	ldi	r21, 0x21	; 33
    24c4:	94 01       	movw	r18, r8
    24c6:	85 01       	movw	r16, r10
    24c8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_gc_next_statement>
    24cc:	89 2b       	or	r24, r25
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <gc_execute_block+0x2aa>
    24d0:	e9 ce       	rjmp	.-558    	; 0x22a4 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24d2:	80 91 00 21 	lds	r24, 0x2100
    24d6:	88 23       	and	r24, r24
    24d8:	09 f0       	breq	.+2      	; 0x24dc <gc_execute_block+0x2b4>
    24da:	99 c3       	rjmp	.+1842   	; 0x2c0e <gc_execute_block+0x9e6>
		return(gc.status); 
	}

	i = 0;
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24e0:	e1 e4       	ldi	r30, 0x41	; 65
    24e2:	f1 e2       	ldi	r31, 0x21	; 33
    24e4:	8c e0       	ldi	r24, 0x0C	; 12
    24e6:	df 01       	movw	r26, r30
    24e8:	1d 92       	st	X+, r1
    24ea:	8a 95       	dec	r24
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    24ee:	df 01       	movw	r26, r30
    24f0:	1c 97       	sbiw	r26, 0x0c	; 12
    24f2:	78 97       	sbiw	r30, 0x18	; 24
    24f4:	8c e0       	ldi	r24, 0x0C	; 12
    24f6:	01 90       	ld	r0, Z+
    24f8:	0d 92       	st	X+, r0
    24fa:	81 50       	subi	r24, 0x01	; 1
    24fc:	e1 f7       	brne	.-8      	; 0x24f6 <gc_execute_block+0x2ce>
    24fe:	c6 c0       	rjmp	.+396    	; 0x268c <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2500:	c0 90 02 21 	lds	r12, 0x2102
    2504:	d0 90 03 21 	lds	r13, 0x2103
    2508:	e0 90 04 21 	lds	r14, 0x2104
    250c:	f0 90 05 21 	lds	r15, 0x2105
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2510:	80 91 0d 21 	lds	r24, 0x210D
    2514:	88 23       	and	r24, r24
    2516:	19 f4       	brne	.+6      	; 0x251e <gc_execute_block+0x2f6>
    2518:	a7 01       	movw	r20, r14
    251a:	96 01       	movw	r18, r12
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <gc_execute_block+0x30a>
    251e:	c7 01       	movw	r24, r14
    2520:	b6 01       	movw	r22, r12
    2522:	25 e8       	ldi	r18, 0x85	; 133
    2524:	32 e4       	ldi	r19, 0x42	; 66
    2526:	41 e2       	ldi	r20, 0x21	; 33
    2528:	5d e3       	ldi	r21, 0x3D	; 61
    252a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2532:	20 93 21 21 	sts	0x2121, r18
    2536:	30 93 22 21 	sts	0x2122, r19
    253a:	40 93 23 21 	sts	0x2123, r20
    253e:	50 93 24 21 	sts	0x2124, r21
		switch(gc.letter) {
    2542:	00 91 01 21 	lds	r16, 0x2101
    2546:	00 35       	cpi	r16, 0x50	; 80
    2548:	09 f4       	brne	.+2      	; 0x254c <gc_execute_block+0x324>
    254a:	47 c0       	rjmp	.+142    	; 0x25da <gc_execute_block+0x3b2>
    254c:	01 35       	cpi	r16, 0x51	; 81
    254e:	58 f4       	brcc	.+22     	; 0x2566 <gc_execute_block+0x33e>
    2550:	06 34       	cpi	r16, 0x46	; 70
    2552:	c1 f0       	breq	.+48     	; 0x2584 <gc_execute_block+0x35c>
    2554:	06 34       	cpi	r16, 0x46	; 70
    2556:	08 f4       	brcc	.+2      	; 0x255a <gc_execute_block+0x332>
    2558:	9f c0       	rjmp	.+318    	; 0x2698 <gc_execute_block+0x470>
    255a:	80 2f       	mov	r24, r16
    255c:	89 54       	subi	r24, 0x49	; 73
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	08 f0       	brcs	.+2      	; 0x2564 <gc_execute_block+0x33c>
    2562:	9a c0       	rjmp	.+308    	; 0x2698 <gc_execute_block+0x470>
    2564:	2d c0       	rjmp	.+90     	; 0x25c0 <gc_execute_block+0x398>
    2566:	03 35       	cpi	r16, 0x53	; 83
    2568:	09 f4       	brne	.+2      	; 0x256c <gc_execute_block+0x344>
    256a:	4b c0       	rjmp	.+150    	; 0x2602 <gc_execute_block+0x3da>
    256c:	04 35       	cpi	r16, 0x54	; 84
    256e:	20 f4       	brcc	.+8      	; 0x2578 <gc_execute_block+0x350>
    2570:	02 35       	cpi	r16, 0x52	; 82
    2572:	09 f0       	breq	.+2      	; 0x2576 <gc_execute_block+0x34e>
    2574:	91 c0       	rjmp	.+290    	; 0x2698 <gc_execute_block+0x470>
    2576:	3a c0       	rjmp	.+116    	; 0x25ec <gc_execute_block+0x3c4>
    2578:	80 2f       	mov	r24, r16
    257a:	88 55       	subi	r24, 0x58	; 88
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	08 f0       	brcs	.+2      	; 0x2582 <gc_execute_block+0x35a>
    2580:	8b c0       	rjmp	.+278    	; 0x2698 <gc_execute_block+0x470>
    2582:	48 c0       	rjmp	.+144    	; 0x2614 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2584:	80 91 0c 21 	lds	r24, 0x210C
    2588:	88 23       	and	r24, r24
    258a:	49 f0       	breq	.+18     	; 0x259e <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    258c:	20 93 25 21 	sts	0x2125, r18
    2590:	30 93 26 21 	sts	0x2126, r19
    2594:	40 93 27 21 	sts	0x2127, r20
    2598:	50 93 28 21 	sts	0x2128, r21
    259c:	7d c0       	rjmp	.+250    	; 0x2698 <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    259e:	ca 01       	movw	r24, r20
    25a0:	b9 01       	movw	r22, r18
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e7       	ldi	r20, 0x70	; 112
    25a8:	52 e4       	ldi	r21, 0x42	; 66
    25aa:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    25ae:	60 93 19 21 	sts	0x2119, r22
    25b2:	70 93 1a 21 	sts	0x211A, r23
    25b6:	80 93 1b 21 	sts	0x211B, r24
    25ba:	90 93 1c 21 	sts	0x211C, r25
    25be:	6c c0       	rjmp	.+216    	; 0x2698 <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25c0:	e0 2f       	mov	r30, r16
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	e3 5e       	subi	r30, 0xE3	; 227
    25ce:	ff 4d       	sbci	r31, 0xDF	; 223
    25d0:	20 83       	st	Z, r18
    25d2:	31 83       	std	Z+1, r19	; 0x01
    25d4:	42 83       	std	Z+2, r20	; 0x02
    25d6:	53 83       	std	Z+3, r21	; 0x03
    25d8:	5f c0       	rjmp	.+190    	; 0x2698 <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25da:	c0 92 11 21 	sts	0x2111, r12
    25de:	d0 92 12 21 	sts	0x2112, r13
    25e2:	e0 92 13 21 	sts	0x2113, r14
    25e6:	f0 92 14 21 	sts	0x2114, r15
    25ea:	56 c0       	rjmp	.+172    	; 0x2698 <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    25ec:	20 93 15 21 	sts	0x2115, r18
    25f0:	30 93 16 21 	sts	0x2116, r19
    25f4:	40 93 17 21 	sts	0x2117, r20
    25f8:	50 93 18 21 	sts	0x2118, r21
    25fc:	70 92 0f 21 	sts	0x210F, r7
    2600:	4b c0       	rjmp	.+150    	; 0x2698 <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    2602:	c7 01       	movw	r24, r14
    2604:	b6 01       	movw	r22, r12
    2606:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    260a:	60 93 52 21 	sts	0x2152, r22
    260e:	70 93 53 21 	sts	0x2153, r23
    2612:	42 c0       	rjmp	.+132    	; 0x2698 <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2614:	80 91 10 21 	lds	r24, 0x2110
    2618:	88 23       	and	r24, r24
    261a:	69 f0       	breq	.+26     	; 0x2636 <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    261c:	e0 2f       	mov	r30, r16
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	ee 0f       	add	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	e0 56       	subi	r30, 0x60	; 96
    262a:	f0 4e       	sbci	r31, 0xE0	; 224
    262c:	21 a7       	std	Z+41, r18	; 0x29
    262e:	32 a7       	std	Z+42, r19	; 0x2a
    2630:	43 a7       	std	Z+43, r20	; 0x2b
    2632:	54 a7       	std	Z+44, r21	; 0x2c
    2634:	31 c0       	rjmp	.+98     	; 0x2698 <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2636:	80 91 0e 21 	lds	r24, 0x210E
    263a:	88 23       	and	r24, r24
    263c:	21 f4       	brne	.+8      	; 0x2646 <gc_execute_block+0x41e>
    263e:	80 91 54 21 	lds	r24, 0x2154
    2642:	88 23       	and	r24, r24
    2644:	69 f0       	breq	.+26     	; 0x2660 <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2646:	e0 2f       	mov	r30, r16
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	e0 56       	subi	r30, 0x60	; 96
    2654:	f0 4e       	sbci	r31, 0xE0	; 224
    2656:	25 ab       	std	Z+53, r18	; 0x35
    2658:	36 ab       	std	Z+54, r19	; 0x36
    265a:	47 ab       	std	Z+55, r20	; 0x37
    265c:	50 af       	std	Z+56, r21	; 0x38
    265e:	1c c0       	rjmp	.+56     	; 0x2698 <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	00 0f       	add	r16, r16
    2664:	11 1f       	adc	r17, r17
    2666:	00 0f       	add	r16, r16
    2668:	11 1f       	adc	r17, r17
    266a:	00 56       	subi	r16, 0x60	; 96
    266c:	10 4e       	sbci	r17, 0xE0	; 224
    266e:	f8 01       	movw	r30, r16
    2670:	65 a9       	ldd	r22, Z+53	; 0x35
    2672:	76 a9       	ldd	r23, Z+54	; 0x36
    2674:	87 a9       	ldd	r24, Z+55	; 0x37
    2676:	90 ad       	ldd	r25, Z+56	; 0x38
    2678:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    267c:	d8 01       	movw	r26, r16
    267e:	d5 96       	adiw	r26, 0x35	; 53
    2680:	6d 93       	st	X+, r22
    2682:	7d 93       	st	X+, r23
    2684:	8d 93       	st	X+, r24
    2686:	9c 93       	st	X, r25
    2688:	d8 97       	sbiw	r26, 0x38	; 56
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    268c:	5e 01       	movw	r10, r28
    268e:	08 94       	sec
    2690:	a1 1c       	adc	r10, r1
    2692:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2694:	77 24       	eor	r7, r7
    2696:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	91 e2       	ldi	r25, 0x21	; 33
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	71 e2       	ldi	r23, 0x21	; 33
    26a0:	46 e0       	ldi	r20, 0x06	; 6
    26a2:	51 e2       	ldi	r21, 0x21	; 33
    26a4:	94 01       	movw	r18, r8
    26a6:	85 01       	movw	r16, r10
    26a8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_gc_next_statement>
    26ac:	89 2b       	or	r24, r25
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <gc_execute_block+0x48a>
    26b0:	27 cf       	rjmp	.-434    	; 0x2500 <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26b2:	80 91 00 21 	lds	r24, 0x2100
    26b6:	88 23       	and	r24, r24
    26b8:	09 f0       	breq	.+2      	; 0x26bc <gc_execute_block+0x494>
    26ba:	a9 c2       	rjmp	.+1362   	; 0x2c0e <gc_execute_block+0x9e6>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26bc:	80 91 51 21 	lds	r24, 0x2151
    26c0:	88 23       	and	r24, r24
    26c2:	71 f0       	breq	.+28     	; 0x26e0 <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26c4:	40 91 52 21 	lds	r20, 0x2152
    26c8:	50 91 53 21 	lds	r21, 0x2153
    26cc:	66 27       	eor	r22, r22
    26ce:	57 fd       	sbrc	r21, 7
    26d0:	60 95       	com	r22
    26d2:	76 2f       	mov	r23, r22
    26d4:	99 27       	eor	r25, r25
    26d6:	87 fd       	sbrc	r24, 7
    26d8:	90 95       	com	r25
    26da:	0e 94 1d 24 	call	0x483a	; 0x483a <spindle_run>
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26e0:	0e 94 2d 24 	call	0x485a	; 0x485a <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    26e4:	80 91 55 21 	lds	r24, 0x2155
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	49 f0       	breq	.+18     	; 0x26fe <gc_execute_block+0x4d6>
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	21 f0       	breq	.+8      	; 0x26f8 <gc_execute_block+0x4d0>
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <gc_execute_block+0x4ce>
    26f4:	7d c2       	rjmp	.+1274   	; 0x2bf0 <gc_execute_block+0x9c8>
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    26f8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <mc_go_home>
    26fc:	77 c2       	rjmp	.+1262   	; 0x2bec <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    26fe:	60 91 11 21 	lds	r22, 0x2111
    2702:	70 91 12 21 	lds	r23, 0x2112
    2706:	80 91 13 21 	lds	r24, 0x2113
    270a:	90 91 14 21 	lds	r25, 0x2114
    270e:	0e 94 31 1c 	call	0x3862	; 0x3862 <mc_dwell>
    2712:	6c c2       	rjmp	.+1240   	; 0x2bec <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2714:	b0 91 0b 21 	lds	r27, 0x210B
    2718:	b8 8f       	std	Y+24, r27	; 0x18
    271a:	b2 30       	cpi	r27, 0x02	; 2
    271c:	20 f0       	brcs	.+8      	; 0x2726 <gc_execute_block+0x4fe>
    271e:	b4 30       	cpi	r27, 0x04	; 4
    2720:	08 f0       	brcs	.+2      	; 0x2724 <gc_execute_block+0x4fc>
    2722:	66 c2       	rjmp	.+1228   	; 0x2bf0 <gc_execute_block+0x9c8>
    2724:	31 c0       	rjmp	.+98     	; 0x2788 <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2726:	60 91 35 21 	lds	r22, 0x2135
    272a:	70 91 36 21 	lds	r23, 0x2136
    272e:	80 91 37 21 	lds	r24, 0x2137
    2732:	90 91 38 21 	lds	r25, 0x2138
    2736:	20 91 39 21 	lds	r18, 0x2139
    273a:	30 91 3a 21 	lds	r19, 0x213A
    273e:	40 91 3b 21 	lds	r20, 0x213B
    2742:	50 91 3c 21 	lds	r21, 0x213C
    2746:	e0 90 3d 21 	lds	r14, 0x213D
    274a:	f0 90 3e 21 	lds	r15, 0x213E
    274e:	00 91 3f 21 	lds	r16, 0x213F
    2752:	10 91 40 21 	lds	r17, 0x2140
    2756:	80 90 0c 21 	lds	r8, 0x210C
    275a:	88 20       	and	r8, r8
    275c:	49 f0       	breq	.+18     	; 0x2770 <gc_execute_block+0x548>
    275e:	a0 90 25 21 	lds	r10, 0x2125
    2762:	b0 90 26 21 	lds	r11, 0x2126
    2766:	c0 90 27 21 	lds	r12, 0x2127
    276a:	d0 90 28 21 	lds	r13, 0x2128
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <gc_execute_block+0x558>
    2770:	a0 90 19 21 	lds	r10, 0x2119
    2774:	b0 90 1a 21 	lds	r11, 0x211A
    2778:	c0 90 1b 21 	lds	r12, 0x211B
    277c:	d0 90 1c 21 	lds	r13, 0x211C
    2780:	99 24       	eor	r9, r9
    2782:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <mc_line>
    2786:	32 c2       	rjmp	.+1124   	; 0x2bec <gc_execute_block+0x9c4>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2788:	80 91 0f 21 	lds	r24, 0x210F
    278c:	88 23       	and	r24, r24
    278e:	09 f4       	brne	.+2      	; 0x2792 <gc_execute_block+0x56a>
    2790:	ec c0       	rjmp	.+472    	; 0x296a <gc_execute_block+0x742>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2792:	e0 91 4d 21 	lds	r30, 0x214D
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	e0 50       	subi	r30, 0x00	; 0
    27a2:	ff 4d       	sbci	r31, 0xDF	; 223
    27a4:	65 a9       	ldd	r22, Z+53	; 0x35
    27a6:	76 a9       	ldd	r23, Z+54	; 0x36
    27a8:	87 a9       	ldd	r24, Z+55	; 0x37
    27aa:	90 ad       	ldd	r25, Z+56	; 0x38
    27ac:	21 a5       	ldd	r18, Z+41	; 0x29
    27ae:	32 a5       	ldd	r19, Z+42	; 0x2a
    27b0:	43 a5       	ldd	r20, Z+43	; 0x2b
    27b2:	54 a5       	ldd	r21, Z+44	; 0x2c
    27b4:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    27b8:	6f 83       	std	Y+7, r22	; 0x07
    27ba:	78 87       	std	Y+8, r23	; 0x08
    27bc:	89 87       	std	Y+9, r24	; 0x09
    27be:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27c0:	e0 91 4e 21 	lds	r30, 0x214E
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	e0 50       	subi	r30, 0x00	; 0
    27d0:	ff 4d       	sbci	r31, 0xDF	; 223
    27d2:	65 a9       	ldd	r22, Z+53	; 0x35
    27d4:	76 a9       	ldd	r23, Z+54	; 0x36
    27d6:	87 a9       	ldd	r24, Z+55	; 0x37
    27d8:	90 ad       	ldd	r25, Z+56	; 0x38
    27da:	21 a5       	ldd	r18, Z+41	; 0x29
    27dc:	32 a5       	ldd	r19, Z+42	; 0x2a
    27de:	43 a5       	ldd	r20, Z+43	; 0x2b
    27e0:	54 a5       	ldd	r21, Z+44	; 0x2c
    27e2:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    27e6:	1b 01       	movw	r2, r22
    27e8:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    27ea:	10 92 41 21 	sts	0x2141, r1
    27ee:	10 92 42 21 	sts	0x2142, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    27f2:	60 90 15 21 	lds	r6, 0x2115
    27f6:	70 90 16 21 	lds	r7, 0x2116
    27fa:	80 90 17 21 	lds	r8, 0x2117
    27fe:	90 90 18 21 	lds	r9, 0x2118
    2802:	c4 01       	movw	r24, r8
    2804:	b3 01       	movw	r22, r6
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	50 e4       	ldi	r21, 0x40	; 64
    280e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    2812:	a4 01       	movw	r20, r8
    2814:	93 01       	movw	r18, r6
    2816:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    281a:	5b 01       	movw	r10, r22
    281c:	6c 01       	movw	r12, r24
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	9b 01       	movw	r18, r22
    2828:	ac 01       	movw	r20, r24
    282a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    282e:	7b 01       	movw	r14, r22
    2830:	8c 01       	movw	r16, r24
    2832:	c2 01       	movw	r24, r4
    2834:	b1 01       	movw	r22, r2
    2836:	a2 01       	movw	r20, r4
    2838:	91 01       	movw	r18, r2
    283a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	c8 01       	movw	r24, r16
    2844:	b7 01       	movw	r22, r14
    2846:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	c6 01       	movw	r24, r12
    2850:	b5 01       	movw	r22, r10
    2852:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2856:	0e 94 df 43 	call	0x87be	; 0x87be <sqrt>
    285a:	7b 01       	movw	r14, r22
    285c:	8c 01       	movw	r16, r24
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	a2 01       	movw	r20, r4
    2868:	91 01       	movw	r18, r2
    286a:	0e 94 ad 42 	call	0x855a	; 0x855a <hypot>
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	17 fb       	bst	r17, 7
    2874:	10 95       	com	r17
    2876:	17 f9       	bld	r17, 7
    2878:	10 95       	com	r17
    287a:	c8 01       	movw	r24, r16
    287c:	b7 01       	movw	r22, r14
    287e:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2882:	7b 01       	movw	r14, r22
    2884:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2886:	a8 01       	movw	r20, r16
    2888:	97 01       	movw	r18, r14
    288a:	0e 94 27 44 	call	0x884e	; 0x884e <__unordsf2>
    288e:	88 23       	and	r24, r24
    2890:	21 f0       	breq	.+8      	; 0x289a <gc_execute_block+0x672>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2892:	80 e1       	ldi	r24, 0x10	; 16
    2894:	80 93 00 21 	sts	0x2100, r24
    2898:	65 c0       	rjmp	.+202    	; 0x2964 <gc_execute_block+0x73c>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    289a:	e8 8d       	ldd	r30, Y+24	; 0x18
    289c:	e3 30       	cpi	r30, 0x03	; 3
    289e:	21 f4       	brne	.+8      	; 0x28a8 <gc_execute_block+0x680>
		h_x2_div_d = -h_x2_div_d;
    28a0:	17 fb       	bst	r17, 7
    28a2:	10 95       	com	r17
    28a4:	17 f9       	bld	r17, 7
    28a6:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28a8:	c4 01       	movw	r24, r8
    28aa:	b3 01       	movw	r22, r6
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	0e 94 b0 40 	call	0x8160	; 0x8160 <__cmpsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	24 f4       	brge	.+8      	; 0x28c4 <gc_execute_block+0x69c>
		h_x2_div_d = -h_x2_div_d; 
    28bc:	17 fb       	bst	r17, 7
    28be:	10 95       	com	r17
    28c0:	17 f9       	bld	r17, 7
    28c2:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28c4:	80 91 4d 21 	lds	r24, 0x214D
    28c8:	c8 2e       	mov	r12, r24
    28ca:	dd 24       	eor	r13, r13
    28cc:	cc 0c       	add	r12, r12
    28ce:	dd 1c       	adc	r13, r13
    28d0:	cc 0c       	add	r12, r12
    28d2:	dd 1c       	adc	r13, r13
    28d4:	21 e4       	ldi	r18, 0x41	; 65
    28d6:	31 e2       	ldi	r19, 0x21	; 33
    28d8:	c2 0e       	add	r12, r18
    28da:	d3 1e       	adc	r13, r19
    28dc:	c2 01       	movw	r24, r4
    28de:	b1 01       	movw	r22, r2
    28e0:	a8 01       	movw	r20, r16
    28e2:	97 01       	movw	r18, r14
    28e4:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    2904:	d6 01       	movw	r26, r12
    2906:	6d 93       	st	X+, r22
    2908:	7d 93       	st	X+, r23
    290a:	8d 93       	st	X+, r24
    290c:	9c 93       	st	X, r25
    290e:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2910:	80 91 4e 21 	lds	r24, 0x214E
    2914:	c8 2e       	mov	r12, r24
    2916:	dd 24       	eor	r13, r13
    2918:	cc 0c       	add	r12, r12
    291a:	dd 1c       	adc	r13, r13
    291c:	cc 0c       	add	r12, r12
    291e:	dd 1c       	adc	r13, r13
    2920:	e1 e4       	ldi	r30, 0x41	; 65
    2922:	f1 e2       	ldi	r31, 0x21	; 33
    2924:	ce 0e       	add	r12, r30
    2926:	df 1e       	adc	r13, r31
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	a8 01       	movw	r20, r16
    2932:	97 01       	movw	r18, r14
    2934:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
    293c:	c2 01       	movw	r24, r4
    293e:	b1 01       	movw	r22, r2
    2940:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    2950:	d6 01       	movw	r26, r12
    2952:	6d 93       	st	X+, r22
    2954:	7d 93       	st	X+, r23
    2956:	8d 93       	st	X+, r24
    2958:	9c 93       	st	X, r25
    295a:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    295c:	80 91 00 21 	lds	r24, 0x2100
    2960:	88 23       	and	r24, r24
    2962:	19 f0       	breq	.+6      	; 0x296a <gc_execute_block+0x742>
			return (gc.status);
    2964:	80 91 00 21 	lds	r24, 0x2100
    2968:	41 c1       	rjmp	.+642    	; 0x2bec <gc_execute_block+0x9c4>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    296a:	e0 91 4d 21 	lds	r30, 0x214D
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	ef 5b       	subi	r30, 0xBF	; 191
    297a:	fe 4d       	sbci	r31, 0xDE	; 222
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	90 58       	subi	r25, 0x80	; 128
    2986:	e0 91 4e 21 	lds	r30, 0x214E
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	ef 5b       	subi	r30, 0xBF	; 191
    2996:	fe 4d       	sbci	r31, 0xDE	; 222
    2998:	20 81       	ld	r18, Z
    299a:	31 81       	ldd	r19, Z+1	; 0x01
    299c:	42 81       	ldd	r20, Z+2	; 0x02
    299e:	53 81       	ldd	r21, Z+3	; 0x03
    29a0:	50 58       	subi	r21, 0x80	; 128
    29a2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <theta>
    29a6:	6f 87       	std	Y+15, r22	; 0x0f
    29a8:	78 8b       	std	Y+16, r23	; 0x10
    29aa:	89 8b       	std	Y+17, r24	; 0x11
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	0e 94 27 44 	call	0x884e	; 0x884e <__unordsf2>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <gc_execute_block+0x794>
    29ba:	54 c0       	rjmp	.+168    	; 0x2a64 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29bc:	e0 91 4d 21 	lds	r30, 0x214D
    29c0:	0e 2f       	mov	r16, r30
    29c2:	10 e0       	ldi	r17, 0x00	; 0
    29c4:	e0 91 4e 21 	lds	r30, 0x214E
    29c8:	ce 2e       	mov	r12, r30
    29ca:	dd 24       	eor	r13, r13
    29cc:	00 0f       	add	r16, r16
    29ce:	11 1f       	adc	r17, r17
    29d0:	00 0f       	add	r16, r16
    29d2:	11 1f       	adc	r17, r17
    29d4:	00 50       	subi	r16, 0x00	; 0
    29d6:	1f 4d       	sbci	r17, 0xDF	; 223
    29d8:	f8 01       	movw	r30, r16
    29da:	ef 5b       	subi	r30, 0xBF	; 191
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	d8 01       	movw	r26, r16
    29e0:	d5 96       	adiw	r26, 0x35	; 53
    29e2:	6d 91       	ld	r22, X+
    29e4:	7d 91       	ld	r23, X+
    29e6:	8d 91       	ld	r24, X+
    29e8:	9c 91       	ld	r25, X
    29ea:	d8 97       	sbiw	r26, 0x38	; 56
    29ec:	20 81       	ld	r18, Z
    29ee:	31 81       	ldd	r19, Z+1	; 0x01
    29f0:	42 81       	ldd	r20, Z+2	; 0x02
    29f2:	53 81       	ldd	r21, Z+3	; 0x03
    29f4:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    29f8:	f8 01       	movw	r30, r16
    29fa:	21 a5       	ldd	r18, Z+41	; 0x29
    29fc:	32 a5       	ldd	r19, Z+42	; 0x2a
    29fe:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a00:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a02:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2a06:	7b 01       	movw	r14, r22
    2a08:	8c 01       	movw	r16, r24
    2a0a:	cc 0c       	add	r12, r12
    2a0c:	dd 1c       	adc	r13, r13
    2a0e:	cc 0c       	add	r12, r12
    2a10:	dd 1c       	adc	r13, r13
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	31 e2       	ldi	r19, 0x21	; 33
    2a16:	c2 0e       	add	r12, r18
    2a18:	d3 1e       	adc	r13, r19
    2a1a:	f6 01       	movw	r30, r12
    2a1c:	ef 5b       	subi	r30, 0xBF	; 191
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	d6 01       	movw	r26, r12
    2a22:	d5 96       	adiw	r26, 0x35	; 53
    2a24:	6d 91       	ld	r22, X+
    2a26:	7d 91       	ld	r23, X+
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	d8 97       	sbiw	r26, 0x38	; 56
    2a2e:	20 81       	ld	r18, Z
    2a30:	31 81       	ldd	r19, Z+1	; 0x01
    2a32:	42 81       	ldd	r20, Z+2	; 0x02
    2a34:	53 81       	ldd	r21, Z+3	; 0x03
    2a36:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	21 a5       	ldd	r18, Z+41	; 0x29
    2a3e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a40:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a42:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a44:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2a48:	9b 01       	movw	r18, r22
    2a4a:	ac 01       	movw	r20, r24
    2a4c:	c8 01       	movw	r24, r16
    2a4e:	b7 01       	movw	r22, r14
    2a50:	0e 94 d5 10 	call	0x21aa	; 0x21aa <theta>
    2a54:	7b 01       	movw	r14, r22
    2a56:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a58:	a8 01       	movw	r20, r16
    2a5a:	97 01       	movw	r18, r14
    2a5c:	0e 94 27 44 	call	0x884e	; 0x884e <__unordsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	19 f0       	breq	.+6      	; 0x2a6a <gc_execute_block+0x842>
		FAIL(TG_ARC_ERROR); 
    2a64:	82 e1       	ldi	r24, 0x12	; 18
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	c1 c0       	rjmp	.+386    	; 0x2bec <gc_execute_block+0x9c4>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	b7 01       	movw	r22, r14
    2a6e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a70:	38 89       	ldd	r19, Y+16	; 0x10
    2a72:	49 89       	ldd	r20, Y+17	; 0x11
    2a74:	5a 89       	ldd	r21, Y+18	; 0x12
    2a76:	0e 94 b0 40 	call	0x8160	; 0x8160 <__cmpsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	54 f4       	brge	.+20     	; 0x2a92 <gc_execute_block+0x86a>
		theta_end += 2*M_PI;
    2a7e:	c8 01       	movw	r24, r16
    2a80:	b7 01       	movw	r22, r14
    2a82:	2b ed       	ldi	r18, 0xDB	; 219
    2a84:	3f e0       	ldi	r19, 0x0F	; 15
    2a86:	49 ec       	ldi	r20, 0xC9	; 201
    2a88:	50 e4       	ldi	r21, 0x40	; 64
    2a8a:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    2a8e:	7b 01       	movw	r14, r22
    2a90:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2a92:	c8 01       	movw	r24, r16
    2a94:	b7 01       	movw	r22, r14
    2a96:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a98:	38 89       	ldd	r19, Y+16	; 0x10
    2a9a:	49 89       	ldd	r20, Y+17	; 0x11
    2a9c:	5a 89       	ldd	r21, Y+18	; 0x12
    2a9e:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2aa2:	6b 87       	std	Y+11, r22	; 0x0b
    2aa4:	7c 87       	std	Y+12, r23	; 0x0c
    2aa6:	8d 87       	std	Y+13, r24	; 0x0d
    2aa8:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2aaa:	80 91 0b 21 	lds	r24, 0x210B
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	71 f4       	brne	.+28     	; 0x2ace <gc_execute_block+0x8a6>
		angular_travel = angular_travel - 2*M_PI;
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	2b ed       	ldi	r18, 0xDB	; 219
    2abc:	3f e0       	ldi	r19, 0x0F	; 15
    2abe:	49 ec       	ldi	r20, 0xC9	; 201
    2ac0:	50 e4       	ldi	r21, 0x40	; 64
    2ac2:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2ac6:	6b 87       	std	Y+11, r22	; 0x0b
    2ac8:	7c 87       	std	Y+12, r23	; 0x0c
    2aca:	8d 87       	std	Y+13, r24	; 0x0d
    2acc:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2ace:	80 91 4d 21 	lds	r24, 0x214D
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	2d 83       	std	Y+5, r18	; 0x05
    2ad8:	3e 83       	std	Y+6, r19	; 0x06
    2ada:	f9 01       	movw	r30, r18
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	ef 5b       	subi	r30, 0xBF	; 191
    2ae6:	fe 4d       	sbci	r31, 0xDE	; 222
    2ae8:	e0 80       	ld	r14, Z
    2aea:	f1 80       	ldd	r15, Z+1	; 0x01
    2aec:	02 81       	ldd	r16, Z+2	; 0x02
    2aee:	13 81       	ldd	r17, Z+3	; 0x03
    2af0:	80 91 4e 21 	lds	r24, 0x214E
    2af4:	a8 2f       	mov	r26, r24
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	ab 83       	std	Y+3, r26	; 0x03
    2afa:	bc 83       	std	Y+4, r27	; 0x04
    2afc:	fd 01       	movw	r30, r26
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	ee 0f       	add	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	ef 5b       	subi	r30, 0xBF	; 191
    2b08:	fe 4d       	sbci	r31, 0xDE	; 222
    2b0a:	20 81       	ld	r18, Z
    2b0c:	31 81       	ldd	r19, Z+1	; 0x01
    2b0e:	42 81       	ldd	r20, Z+2	; 0x02
    2b10:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b12:	80 91 4f 21 	lds	r24, 0x214F
    2b16:	28 2e       	mov	r2, r24
    2b18:	33 24       	eor	r3, r3
    2b1a:	f1 01       	movw	r30, r2
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	e0 50       	subi	r30, 0x00	; 0
    2b26:	ff 4d       	sbci	r31, 0xDF	; 223
    2b28:	85 a9       	ldd	r24, Z+53	; 0x35
    2b2a:	96 a9       	ldd	r25, Z+54	; 0x36
    2b2c:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b2e:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b30:	8c 8b       	std	Y+20, r24	; 0x14
    2b32:	9d 8b       	std	Y+21, r25	; 0x15
    2b34:	ae 8b       	std	Y+22, r26	; 0x16
    2b36:	bf 8b       	std	Y+23, r27	; 0x17
    2b38:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b3a:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b3c:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b3e:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b40:	90 91 0c 21 	lds	r25, 0x210C
    2b44:	9b 8b       	std	Y+19, r25	; 0x13
    2b46:	99 23       	and	r25, r25
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <gc_execute_block+0x934>
    2b4a:	40 90 25 21 	lds	r4, 0x2125
    2b4e:	50 90 26 21 	lds	r5, 0x2126
    2b52:	60 90 27 21 	lds	r6, 0x2127
    2b56:	70 90 28 21 	lds	r7, 0x2128
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <gc_execute_block+0x944>
    2b5c:	40 90 19 21 	lds	r4, 0x2119
    2b60:	50 90 1a 21 	lds	r5, 0x211A
    2b64:	60 90 1b 21 	lds	r6, 0x211B
    2b68:	70 90 1c 21 	lds	r7, 0x211C
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	b7 01       	movw	r22, r14
    2b70:	0e 94 ad 42 	call	0x855a	; 0x855a <hypot>
    2b74:	7b 01       	movw	r14, r22
    2b76:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b78:	ad b7       	in	r26, 0x3d	; 61
    2b7a:	be b7       	in	r27, 0x3e	; 62
    2b7c:	1a 97       	sbiw	r26, 0x0a	; 10
    2b7e:	ad bf       	out	0x3d, r26	; 61
    2b80:	be bf       	out	0x3e, r27	; 62
    2b82:	8d b6       	in	r8, 0x3d	; 61
    2b84:	9e b6       	in	r9, 0x3e	; 62
    2b86:	08 94       	sec
    2b88:	81 1c       	adc	r8, r1
    2b8a:	91 1c       	adc	r9, r1
    2b8c:	6c 89       	ldd	r22, Y+20	; 0x14
    2b8e:	7d 89       	ldd	r23, Y+21	; 0x15
    2b90:	8e 89       	ldd	r24, Y+22	; 0x16
    2b92:	9f 89       	ldd	r25, Y+23	; 0x17
    2b94:	a6 01       	movw	r20, r12
    2b96:	95 01       	movw	r18, r10
    2b98:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    2b9c:	5b 01       	movw	r10, r22
    2b9e:	6c 01       	movw	r12, r24
    2ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba4:	f4 01       	movw	r30, r8
    2ba6:	20 83       	st	Z, r18
    2ba8:	31 83       	std	Z+1, r19	; 0x01
    2baa:	22 82       	std	Z+2, r2	; 0x02
    2bac:	33 82       	std	Z+3, r3	; 0x03
    2bae:	d4 01       	movw	r26, r8
    2bb0:	14 96       	adiw	r26, 0x04	; 4
    2bb2:	4d 92       	st	X+, r4
    2bb4:	5d 92       	st	X+, r5
    2bb6:	6d 92       	st	X+, r6
    2bb8:	7c 92       	st	X, r7
    2bba:	17 97       	sbiw	r26, 0x07	; 7
    2bbc:	eb 89       	ldd	r30, Y+19	; 0x13
    2bbe:	18 96       	adiw	r26, 0x08	; 8
    2bc0:	ec 93       	st	X, r30
    2bc2:	18 97       	sbiw	r26, 0x08	; 8
    2bc4:	19 96       	adiw	r26, 0x09	; 9
    2bc6:	1c 92       	st	X, r1
    2bc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bca:	78 89       	ldd	r23, Y+16	; 0x10
    2bcc:	89 89       	ldd	r24, Y+17	; 0x11
    2bce:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bd4:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bd6:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bd8:	8d 80       	ldd	r8, Y+5	; 0x05
    2bda:	9e 80       	ldd	r9, Y+6	; 0x06
    2bdc:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2be0:	2d b7       	in	r18, 0x3d	; 61
    2be2:	3e b7       	in	r19, 0x3e	; 62
    2be4:	26 5f       	subi	r18, 0xF6	; 246
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	2d bf       	out	0x3d, r18	; 61
    2bea:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2bec:	80 93 00 21 	sts	0x2100, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2bf0:	80 91 00 21 	lds	r24, 0x2100
    2bf4:	88 23       	and	r24, r24
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <gc_execute_block+0x9d4>
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	49 f4       	brne	.+18     	; 0x2c0e <gc_execute_block+0x9e6>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2bfc:	e9 e2       	ldi	r30, 0x29	; 41
    2bfe:	f1 e2       	ldi	r31, 0x21	; 33
    2c00:	df 01       	movw	r26, r30
    2c02:	1c 96       	adiw	r26, 0x0c	; 12
    2c04:	9c e0       	ldi	r25, 0x0C	; 12
    2c06:	0d 90       	ld	r0, X+
    2c08:	01 92       	st	Z+, r0
    2c0a:	91 50       	subi	r25, 0x01	; 1
    2c0c:	e1 f7       	brne	.-8      	; 0x2c06 <gc_execute_block+0x9de>
	};
	return(gc.status);
}
    2c0e:	68 96       	adiw	r28, 0x18	; 24
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	bf 90       	pop	r11
    2c26:	af 90       	pop	r10
    2c28:	9f 90       	pop	r9
    2c2a:	8f 90       	pop	r8
    2c2c:	7f 90       	pop	r7
    2c2e:	6f 90       	pop	r6
    2c30:	5f 90       	pop	r5
    2c32:	4f 90       	pop	r4
    2c34:	3f 90       	pop	r3
    2c36:	2f 90       	pop	r2
    2c38:	08 95       	ret

00002c3a <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	ec 01       	movw	r28, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	10 c0       	rjmp	.+32     	; 0x2c66 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != 0) {			// NUL character
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c46:	e1 32       	cpi	r30, 0x21	; 33
    2c48:	70 f0       	brcs	.+28     	; 0x2c66 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c4a:	8e 2f       	mov	r24, r30
    2c4c:	81 56       	subi	r24, 0x61	; 97
    2c4e:	a9 2f       	mov	r26, r25
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	9f 5f       	subi	r25, 0xFF	; 255
    2c54:	8a 31       	cpi	r24, 0x1A	; 26
    2c56:	20 f4       	brcc	.+8      	; 0x2c60 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c58:	ac 0f       	add	r26, r28
    2c5a:	bd 1f       	adc	r27, r29
    2c5c:	e0 52       	subi	r30, 0x20	; 32
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c60:	ac 0f       	add	r26, r28
    2c62:	bd 1f       	adc	r27, r29
    2c64:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != 0) {			// NUL character
    2c66:	fe 01       	movw	r30, r28
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f1 1d       	adc	r31, r1
    2c6c:	e0 81       	ld	r30, Z
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	ee 23       	and	r30, r30
    2c72:	49 f7       	brne	.-46     	; 0x2c46 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c74:	fe 01       	movw	r30, r28
    2c76:	e9 0f       	add	r30, r25
    2c78:	f1 1d       	adc	r31, r1
    2c7a:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c7c:	88 81       	ld	r24, Y
    2c7e:	88 32       	cpi	r24, 0x28	; 40
    2c80:	61 f0       	breq	.+24     	; 0x2c9a <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c82:	81 35       	cpi	r24, 0x51	; 81
    2c84:	11 f4       	brne	.+4      	; 0x2c8a <gc_gcode_parser+0x50>
    2c86:	8b e0       	ldi	r24, 0x0B	; 11
    2c88:	09 c0       	rjmp	.+18     	; 0x2c9c <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2c8a:	8f 32       	cpi	r24, 0x2F	; 47
    2c8c:	31 f0       	breq	.+12     	; 0x2c9a <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c8e:	ce 01       	movw	r24, r28
    2c90:	0e 94 14 11 	call	0x2228	; 0x2228 <gc_execute_block>
    2c94:	80 93 00 21 	sts	0x2100, r24
    2c98:	01 c0       	rjmp	.+2      	; 0x2c9c <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	cb e8       	ldi	r28, 0x8B	; 139
    2cb4:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cb6:	68 81       	ld	r22, Y
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	88 27       	eor	r24, r24
    2cbc:	77 fd       	sbrc	r23, 7
    2cbe:	80 95       	com	r24
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    2cc6:	9b 01       	movw	r18, r22
    2cc8:	ac 01       	movw	r20, r24
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	84 eb       	ldi	r24, 0xB4	; 180
    2ce0:	93 e4       	ldi	r25, 0x43	; 67
    2ce2:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2ce6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ce8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cea:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cec:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cee:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2cf2:	6b 8b       	std	Y+19, r22	; 0x13
    2cf4:	7c 8b       	std	Y+20, r23	; 0x14
    2cf6:	8d 8b       	std	Y+21, r24	; 0x15
    2cf8:	9e 8b       	std	Y+22, r25	; 0x16
    2cfa:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2cfc:	82 e2       	ldi	r24, 0x22	; 34
    2cfe:	cb 3e       	cpi	r28, 0xEB	; 235
    2d00:	d8 07       	cpc	r29, r24
    2d02:	c9 f6       	brne	.-78     	; 0x2cb6 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d04:	00 91 8b 22 	lds	r16, 0x228B
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	b8 01       	movw	r22, r16
    2d0c:	88 27       	eor	r24, r24
    2d0e:	77 fd       	sbrc	r23, 7
    2d10:	80 95       	com	r24
    2d12:	98 2f       	mov	r25, r24
    2d14:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    2d18:	9b 01       	movw	r18, r22
    2d1a:	ac 01       	movw	r20, r24
    2d1c:	60 91 92 22 	lds	r22, 0x2292
    2d20:	70 91 93 22 	lds	r23, 0x2293
    2d24:	80 91 94 22 	lds	r24, 0x2294
    2d28:	90 91 95 22 	lds	r25, 0x2295
    2d2c:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	84 eb       	ldi	r24, 0xB4	; 180
    2d3a:	93 e4       	ldi	r25, 0x43	; 67
    2d3c:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2d40:	6b 01       	movw	r12, r22
    2d42:	7c 01       	movw	r14, r24
    2d44:	80 91 90 22 	lds	r24, 0x2290
    2d48:	90 91 91 22 	lds	r25, 0x2291
    2d4c:	08 9f       	mul	r16, r24
    2d4e:	b0 01       	movw	r22, r0
    2d50:	09 9f       	mul	r16, r25
    2d52:	70 0d       	add	r23, r0
    2d54:	18 9f       	mul	r17, r24
    2d56:	70 0d       	add	r23, r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 50 41 	call	0x82a0	; 0x82a0 <__floatunsisf>
    2d62:	a7 01       	movw	r20, r14
    2d64:	96 01       	movw	r18, r12
    2d66:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2d6a:	60 93 83 22 	sts	0x2283, r22
    2d6e:	70 93 84 22 	sts	0x2284, r23
    2d72:	80 93 85 22 	sts	0x2285, r24
    2d76:	90 93 86 22 	sts	0x2286, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d7a:	80 91 8e 22 	lds	r24, 0x228E
    2d7e:	90 91 8f 22 	lds	r25, 0x228F
    2d82:	08 9f       	mul	r16, r24
    2d84:	b0 01       	movw	r22, r0
    2d86:	09 9f       	mul	r16, r25
    2d88:	70 0d       	add	r23, r0
    2d8a:	18 9f       	mul	r17, r24
    2d8c:	70 0d       	add	r23, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 50 41 	call	0x82a0	; 0x82a0 <__floatunsisf>
    2d98:	a7 01       	movw	r20, r14
    2d9a:	96 01       	movw	r18, r12
    2d9c:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    2da0:	60 93 87 22 	sts	0x2287, r22
    2da4:	70 93 88 22 	sts	0x2288, r23
    2da8:	80 93 89 22 	sts	0x2289, r24
    2dac:	90 93 8a 22 	sts	0x228A, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	08 95       	ret

00002dc2 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dc2:	ed e7       	ldi	r30, 0x7D	; 125
    2dc4:	f2 e2       	ldi	r31, 0x22	; 34
    2dc6:	84 e6       	ldi	r24, 0x64	; 100
    2dc8:	80 93 7d 22 	sts	0x227D, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2dcc:	8a e0       	ldi	r24, 0x0A	; 10
    2dce:	97 ed       	ldi	r25, 0xD7	; 215
    2dd0:	a3 e2       	ldi	r26, 0x23	; 35
    2dd2:	bc e3       	ldi	r27, 0x3C	; 60
    2dd4:	80 93 7f 22 	sts	0x227F, r24
    2dd8:	90 93 80 22 	sts	0x2280, r25
    2ddc:	a0 93 81 22 	sts	0x2281, r26
    2de0:	b0 93 82 22 	sts	0x2282, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2de4:	8c ed       	ldi	r24, 0xDC	; 220
    2de6:	95 e0       	ldi	r25, 0x05	; 5
    2de8:	80 93 8e 22 	sts	0x228E, r24
    2dec:	90 93 8f 22 	sts	0x228F, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2df0:	80 93 a6 22 	sts	0x22A6, r24
    2df4:	90 93 a7 22 	sts	0x22A7, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2df8:	80 93 be 22 	sts	0x22BE, r24
    2dfc:	90 93 bf 22 	sts	0x22BF, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e00:	80 93 d6 22 	sts	0x22D6, r24
    2e04:	90 93 d7 22 	sts	0x22D7, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e08:	80 93 90 22 	sts	0x2290, r24
    2e0c:	90 93 91 22 	sts	0x2291, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e10:	80 93 a8 22 	sts	0x22A8, r24
    2e14:	90 93 a9 22 	sts	0x22A9, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e18:	80 93 c0 22 	sts	0x22C0, r24
    2e1c:	90 93 c1 22 	sts	0x22C1, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e20:	80 93 d8 22 	sts	0x22D8, r24
    2e24:	90 93 d9 22 	sts	0x22D9, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e28:	86 e6       	ldi	r24, 0x66	; 102
    2e2a:	96 e6       	ldi	r25, 0x66	; 102
    2e2c:	a6 ee       	ldi	r26, 0xE6	; 230
    2e2e:	bf e3       	ldi	r27, 0x3F	; 63
    2e30:	80 93 92 22 	sts	0x2292, r24
    2e34:	90 93 93 22 	sts	0x2293, r25
    2e38:	a0 93 94 22 	sts	0x2294, r26
    2e3c:	b0 93 95 22 	sts	0x2295, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e40:	80 93 aa 22 	sts	0x22AA, r24
    2e44:	90 93 ab 22 	sts	0x22AB, r25
    2e48:	a0 93 ac 22 	sts	0x22AC, r26
    2e4c:	b0 93 ad 22 	sts	0x22AD, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e50:	80 93 c2 22 	sts	0x22C2, r24
    2e54:	90 93 c3 22 	sts	0x22C3, r25
    2e58:	a0 93 c4 22 	sts	0x22C4, r26
    2e5c:	b0 93 c5 22 	sts	0x22C5, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e60:	80 93 da 22 	sts	0x22DA, r24
    2e64:	90 93 db 22 	sts	0x22DB, r25
    2e68:	a0 93 dc 22 	sts	0x22DC, r26
    2e6c:	b0 93 dd 22 	sts	0x22DD, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e70:	8c e5       	ldi	r24, 0x5C	; 92
    2e72:	9f e8       	ldi	r25, 0x8F	; 143
    2e74:	a2 ea       	ldi	r26, 0xA2	; 162
    2e76:	bf e3       	ldi	r27, 0x3F	; 63
    2e78:	80 93 96 22 	sts	0x2296, r24
    2e7c:	90 93 97 22 	sts	0x2297, r25
    2e80:	a0 93 98 22 	sts	0x2298, r26
    2e84:	b0 93 99 22 	sts	0x2299, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e88:	80 93 ae 22 	sts	0x22AE, r24
    2e8c:	90 93 af 22 	sts	0x22AF, r25
    2e90:	a0 93 b0 22 	sts	0x22B0, r26
    2e94:	b0 93 b1 22 	sts	0x22B1, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e98:	80 93 c6 22 	sts	0x22C6, r24
    2e9c:	90 93 c7 22 	sts	0x22C7, r25
    2ea0:	a0 93 c8 22 	sts	0x22C8, r26
    2ea4:	b0 93 c9 22 	sts	0x22C9, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ea8:	80 93 de 22 	sts	0x22DE, r24
    2eac:	90 93 df 22 	sts	0x22DF, r25
    2eb0:	a0 93 e0 22 	sts	0x22E0, r26
    2eb4:	b0 93 e1 22 	sts	0x22E1, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a8 ec       	ldi	r26, 0xC8	; 200
    2ebe:	b3 e4       	ldi	r27, 0x43	; 67
    2ec0:	80 93 9a 22 	sts	0x229A, r24
    2ec4:	90 93 9b 22 	sts	0x229B, r25
    2ec8:	a0 93 9c 22 	sts	0x229C, r26
    2ecc:	b0 93 9d 22 	sts	0x229D, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ed0:	80 93 b2 22 	sts	0x22B2, r24
    2ed4:	90 93 b3 22 	sts	0x22B3, r25
    2ed8:	a0 93 b4 22 	sts	0x22B4, r26
    2edc:	b0 93 b5 22 	sts	0x22B5, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a6 e9       	ldi	r26, 0x96	; 150
    2ee6:	b3 e4       	ldi	r27, 0x43	; 67
    2ee8:	80 93 ca 22 	sts	0x22CA, r24
    2eec:	90 93 cb 22 	sts	0x22CB, r25
    2ef0:	a0 93 cc 22 	sts	0x22CC, r26
    2ef4:	b0 93 cd 22 	sts	0x22CD, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a0 e8       	ldi	r26, 0x80	; 128
    2efe:	bf eb       	ldi	r27, 0xBF	; 191
    2f00:	80 93 e2 22 	sts	0x22E2, r24
    2f04:	90 93 e3 22 	sts	0x22E3, r25
    2f08:	a0 93 e4 22 	sts	0x22E4, r26
    2f0c:	b0 93 e5 22 	sts	0x22E5, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f10:	88 e0       	ldi	r24, 0x08	; 8
    2f12:	80 93 8b 22 	sts	0x228B, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f16:	80 93 a3 22 	sts	0x22A3, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f1a:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f1c:	80 93 d3 22 	sts	0x22D3, r24

	cfg.a[X].polarity = X_POLARITY;
    2f20:	10 92 8d 22 	sts	0x228D, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	80 93 a5 22 	sts	0x22A5, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f2a:	10 92 bd 22 	sts	0x22BD, r1
	cfg.a[A].polarity = A_POLARITY;
    2f2e:	10 92 d5 22 	sts	0x22D5, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f32:	80 93 a2 22 	sts	0x22A2, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f36:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f38:	80 93 d2 22 	sts	0x22D2, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f3c:	10 92 ea 22 	sts	0x22EA, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f40:	80 93 8c 22 	sts	0x228C, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f44:	80 93 a4 22 	sts	0x22A4, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f48:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f4a:	80 93 d4 22 	sts	0x22D4, r24

	_cfg_computed();		// generate computed values from the above
    2f4e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_cfg_computed>
}
    2f52:	08 95       	ret

00002f54 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f54:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <cfg_reset>
}
    2f58:	08 95       	ret

00002f5a <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f5a:	8c 30       	cpi	r24, 0x0C	; 12
    2f5c:	31 f1       	breq	.+76     	; 0x2faa <_cfg_print_status+0x50>
    2f5e:	8d 30       	cpi	r24, 0x0D	; 13
    2f60:	30 f4       	brcc	.+12     	; 0x2f6e <_cfg_print_status+0x14>
    2f62:	82 30       	cpi	r24, 0x02	; 2
    2f64:	59 f0       	breq	.+22     	; 0x2f7c <_cfg_print_status+0x22>
    2f66:	8b 30       	cpi	r24, 0x0B	; 11
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <_cfg_print_status+0x12>
    2f6a:	45 c0       	rjmp	.+138    	; 0x2ff6 <_cfg_print_status+0x9c>
    2f6c:	0c c0       	rjmp	.+24     	; 0x2f86 <_cfg_print_status+0x2c>
    2f6e:	80 31       	cpi	r24, 0x10	; 16
    2f70:	09 f1       	breq	.+66     	; 0x2fb4 <_cfg_print_status+0x5a>
    2f72:	82 31       	cpi	r24, 0x12	; 18
    2f74:	81 f1       	breq	.+96     	; 0x2fd6 <_cfg_print_status+0x7c>
    2f76:	8f 30       	cpi	r24, 0x0F	; 15
    2f78:	f1 f5       	brne	.+124    	; 0x2ff6 <_cfg_print_status+0x9c>
    2f7a:	12 c0       	rjmp	.+36     	; 0x2fa0 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <_cfg_print_status+0x24>
    2f7e:	0f 92       	push	r0
    2f80:	85 e1       	ldi	r24, 0x15	; 21
    2f82:	94 e0       	ldi	r25, 0x04	; 4
    2f84:	1b c0       	rjmp	.+54     	; 0x2fbc <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f86:	0f 92       	push	r0
    2f88:	0f 92       	push	r0
    2f8a:	8f ef       	ldi	r24, 0xFF	; 255
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	ed b7       	in	r30, 0x3d	; 61
    2f90:	fe b7       	in	r31, 0x3e	; 62
    2f92:	81 83       	std	Z+1, r24	; 0x01
    2f94:	92 83       	std	Z+2, r25	; 0x02
    2f96:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <_cfg_print_status+0x48>
    2fa2:	0f 92       	push	r0
    2fa4:	88 ee       	ldi	r24, 0xE8	; 232
    2fa6:	93 e0       	ldi	r25, 0x03	; 3
    2fa8:	09 c0       	rjmp	.+18     	; 0x2fbc <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <_cfg_print_status+0x52>
    2fac:	0f 92       	push	r0
    2fae:	8e ec       	ldi	r24, 0xCE	; 206
    2fb0:	93 e0       	ldi	r25, 0x03	; 3
    2fb2:	04 c0       	rjmp	.+8      	; 0x2fbc <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <_cfg_print_status+0x5c>
    2fb6:	0f 92       	push	r0
    2fb8:	84 eb       	ldi	r24, 0xB4	; 180
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	ed b7       	in	r30, 0x3d	; 61
    2fbe:	fe b7       	in	r31, 0x3e	; 62
    2fc0:	81 83       	std	Z+1, r24	; 0x01
    2fc2:	92 83       	std	Z+2, r25	; 0x02
    2fc4:	63 83       	std	Z+3, r22	; 0x03
    2fc6:	74 83       	std	Z+4, r23	; 0x04
    2fc8:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <_cfg_print_status+0x7e>
    2fd8:	0f 92       	push	r0
    2fda:	89 e9       	ldi	r24, 0x99	; 153
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
    2fde:	ed b7       	in	r30, 0x3d	; 61
    2fe0:	fe b7       	in	r31, 0x3e	; 62
    2fe2:	81 83       	std	Z+1, r24	; 0x01
    2fe4:	92 83       	std	Z+2, r25	; 0x02
    2fe6:	63 83       	std	Z+3, r22	; 0x03
    2fe8:	74 83       	std	Z+4, r23	; 0x04
    2fea:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	08 95       	ret

00002ff8 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3000:	e8 2e       	mov	r14, r24
    3002:	ff 24       	eor	r15, r15
    3004:	87 01       	movw	r16, r14
    3006:	00 0f       	add	r16, r16
    3008:	11 1f       	adc	r17, r17
    300a:	f8 01       	movw	r30, r16
    300c:	ed 5b       	subi	r30, 0xBD	; 189
    300e:	fd 4f       	sbci	r31, 0xFD	; 253
    3010:	25 91       	lpm	r18, Z+
    3012:	34 91       	lpm	r19, Z+
    3014:	00 d0       	rcall	.+0      	; 0x3016 <_cfg_dump_axis+0x1e>
    3016:	0f 92       	push	r0
    3018:	88 e3       	ldi	r24, 0x38	; 56
    301a:	96 e0       	ldi	r25, 0x06	; 6
    301c:	ad b7       	in	r26, 0x3d	; 61
    301e:	be b7       	in	r27, 0x3e	; 62
    3020:	11 96       	adiw	r26, 0x01	; 1
    3022:	8d 93       	st	X+, r24
    3024:	9c 93       	st	X, r25
    3026:	12 97       	sbiw	r26, 0x02	; 2
    3028:	13 96       	adiw	r26, 0x03	; 3
    302a:	2d 93       	st	X+, r18
    302c:	3c 93       	st	X, r19
    302e:	14 97       	sbiw	r26, 0x04	; 4
    3030:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	96 e0       	ldi	r25, 0x06	; 6
    3038:	ed b7       	in	r30, 0x3d	; 61
    303a:	fe b7       	in	r31, 0x3e	; 62
    303c:	81 83       	std	Z+1, r24	; 0x01
    303e:	92 83       	std	Z+2, r25	; 0x02
    3040:	0e 0d       	add	r16, r14
    3042:	1f 1d       	adc	r17, r15
    3044:	83 e0       	ldi	r24, 0x03	; 3
    3046:	00 0f       	add	r16, r16
    3048:	11 1f       	adc	r17, r17
    304a:	8a 95       	dec	r24
    304c:	e1 f7       	brne	.-8      	; 0x3046 <_cfg_dump_axis+0x4e>
    304e:	03 58       	subi	r16, 0x83	; 131
    3050:	1d 4d       	sbci	r17, 0xDD	; 221
    3052:	d8 01       	movw	r26, r16
    3054:	51 96       	adiw	r26, 0x11	; 17
    3056:	8d 91       	ld	r24, X+
    3058:	9c 91       	ld	r25, X
    305a:	52 97       	sbiw	r26, 0x12	; 18
    305c:	83 83       	std	Z+3, r24	; 0x03
    305e:	94 83       	std	Z+4, r25	; 0x04
    3060:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3064:	88 ec       	ldi	r24, 0xC8	; 200
    3066:	95 e0       	ldi	r25, 0x05	; 5
    3068:	ed b7       	in	r30, 0x3d	; 61
    306a:	fe b7       	in	r31, 0x3e	; 62
    306c:	81 83       	std	Z+1, r24	; 0x01
    306e:	92 83       	std	Z+2, r25	; 0x02
    3070:	d8 01       	movw	r26, r16
    3072:	53 96       	adiw	r26, 0x13	; 19
    3074:	8d 91       	ld	r24, X+
    3076:	9c 91       	ld	r25, X
    3078:	54 97       	sbiw	r26, 0x14	; 20
    307a:	83 83       	std	Z+3, r24	; 0x03
    307c:	94 83       	std	Z+4, r25	; 0x04
    307e:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3082:	ed b7       	in	r30, 0x3d	; 61
    3084:	fe b7       	in	r31, 0x3e	; 62
    3086:	31 96       	adiw	r30, 0x01	; 1
    3088:	85 e9       	ldi	r24, 0x95	; 149
    308a:	95 e0       	ldi	r25, 0x05	; 5
    308c:	ad b7       	in	r26, 0x3d	; 61
    308e:	be b7       	in	r27, 0x3e	; 62
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	8d 93       	st	X+, r24
    3094:	9c 93       	st	X, r25
    3096:	12 97       	sbiw	r26, 0x02	; 2
    3098:	d8 01       	movw	r26, r16
    309a:	1e 96       	adiw	r26, 0x0e	; 14
    309c:	8c 91       	ld	r24, X
    309e:	82 83       	std	Z+2, r24	; 0x02
    30a0:	13 82       	std	Z+3, r1	; 0x03
    30a2:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30a6:	0f 92       	push	r0
    30a8:	0f 92       	push	r0
    30aa:	8e e5       	ldi	r24, 0x5E	; 94
    30ac:	95 e0       	ldi	r25, 0x05	; 5
    30ae:	ed b7       	in	r30, 0x3d	; 61
    30b0:	fe b7       	in	r31, 0x3e	; 62
    30b2:	81 83       	std	Z+1, r24	; 0x01
    30b4:	92 83       	std	Z+2, r25	; 0x02
    30b6:	f8 01       	movw	r30, r16
    30b8:	85 89       	ldd	r24, Z+21	; 0x15
    30ba:	96 89       	ldd	r25, Z+22	; 0x16
    30bc:	a7 89       	ldd	r26, Z+23	; 0x17
    30be:	b0 8d       	ldd	r27, Z+24	; 0x18
    30c0:	ed b7       	in	r30, 0x3d	; 61
    30c2:	fe b7       	in	r31, 0x3e	; 62
    30c4:	83 83       	std	Z+3, r24	; 0x03
    30c6:	94 83       	std	Z+4, r25	; 0x04
    30c8:	a5 83       	std	Z+5, r26	; 0x05
    30ca:	b6 83       	std	Z+6, r27	; 0x06
    30cc:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30d0:	8b e2       	ldi	r24, 0x2B	; 43
    30d2:	95 e0       	ldi	r25, 0x05	; 5
    30d4:	ad b7       	in	r26, 0x3d	; 61
    30d6:	be b7       	in	r27, 0x3e	; 62
    30d8:	11 96       	adiw	r26, 0x01	; 1
    30da:	8d 93       	st	X+, r24
    30dc:	9c 93       	st	X, r25
    30de:	12 97       	sbiw	r26, 0x02	; 2
    30e0:	f8 01       	movw	r30, r16
    30e2:	81 8d       	ldd	r24, Z+25	; 0x19
    30e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    30e6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30e8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30ea:	ed b7       	in	r30, 0x3d	; 61
    30ec:	fe b7       	in	r31, 0x3e	; 62
    30ee:	83 83       	std	Z+3, r24	; 0x03
    30f0:	94 83       	std	Z+4, r25	; 0x04
    30f2:	a5 83       	std	Z+5, r26	; 0x05
    30f4:	b6 83       	std	Z+6, r27	; 0x06
    30f6:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    30fa:	88 ef       	ldi	r24, 0xF8	; 248
    30fc:	94 e0       	ldi	r25, 0x04	; 4
    30fe:	ad b7       	in	r26, 0x3d	; 61
    3100:	be b7       	in	r27, 0x3e	; 62
    3102:	11 96       	adiw	r26, 0x01	; 1
    3104:	8d 93       	st	X+, r24
    3106:	9c 93       	st	X, r25
    3108:	12 97       	sbiw	r26, 0x02	; 2
    310a:	f8 01       	movw	r30, r16
    310c:	85 8d       	ldd	r24, Z+29	; 0x1d
    310e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3110:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3112:	b0 a1       	ldd	r27, Z+32	; 0x20
    3114:	ed b7       	in	r30, 0x3d	; 61
    3116:	fe b7       	in	r31, 0x3e	; 62
    3118:	83 83       	std	Z+3, r24	; 0x03
    311a:	94 83       	std	Z+4, r25	; 0x04
    311c:	a5 83       	std	Z+5, r26	; 0x05
    311e:	b6 83       	std	Z+6, r27	; 0x06
    3120:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	ed b7       	in	r30, 0x3d	; 61
    312a:	fe b7       	in	r31, 0x3e	; 62
    312c:	31 96       	adiw	r30, 0x01	; 1
    312e:	87 ec       	ldi	r24, 0xC7	; 199
    3130:	94 e0       	ldi	r25, 0x04	; 4
    3132:	ad b7       	in	r26, 0x3d	; 61
    3134:	be b7       	in	r27, 0x3e	; 62
    3136:	11 96       	adiw	r26, 0x01	; 1
    3138:	8d 93       	st	X+, r24
    313a:	9c 93       	st	X, r25
    313c:	12 97       	sbiw	r26, 0x02	; 2
    313e:	d8 01       	movw	r26, r16
    3140:	95 96       	adiw	r26, 0x25	; 37
    3142:	8c 91       	ld	r24, X
    3144:	82 83       	std	Z+2, r24	; 0x02
    3146:	13 82       	std	Z+3, r1	; 0x03
    3148:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    314c:	ed b7       	in	r30, 0x3d	; 61
    314e:	fe b7       	in	r31, 0x3e	; 62
    3150:	31 96       	adiw	r30, 0x01	; 1
    3152:	86 e9       	ldi	r24, 0x96	; 150
    3154:	94 e0       	ldi	r25, 0x04	; 4
    3156:	ad b7       	in	r26, 0x3d	; 61
    3158:	be b7       	in	r27, 0x3e	; 62
    315a:	11 96       	adiw	r26, 0x01	; 1
    315c:	8d 93       	st	X+, r24
    315e:	9c 93       	st	X, r25
    3160:	12 97       	sbiw	r26, 0x02	; 2
    3162:	d8 01       	movw	r26, r16
    3164:	1f 96       	adiw	r26, 0x0f	; 15
    3166:	8c 91       	ld	r24, X
    3168:	82 83       	std	Z+2, r24	; 0x02
    316a:	13 82       	std	Z+3, r1	; 0x03
    316c:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3170:	ed b7       	in	r30, 0x3d	; 61
    3172:	fe b7       	in	r31, 0x3e	; 62
    3174:	31 96       	adiw	r30, 0x01	; 1
    3176:	86 e6       	ldi	r24, 0x66	; 102
    3178:	94 e0       	ldi	r25, 0x04	; 4
    317a:	ad b7       	in	r26, 0x3d	; 61
    317c:	be b7       	in	r27, 0x3e	; 62
    317e:	11 96       	adiw	r26, 0x01	; 1
    3180:	8d 93       	st	X+, r24
    3182:	9c 93       	st	X, r25
    3184:	12 97       	sbiw	r26, 0x02	; 2
    3186:	d8 01       	movw	r26, r16
    3188:	50 96       	adiw	r26, 0x10	; 16
    318a:	8c 91       	ld	r24, X
    318c:	82 83       	std	Z+2, r24	; 0x02
    318e:	13 82       	std	Z+3, r1	; 0x03
    3190:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3194:	0f 92       	push	r0
    3196:	0f 92       	push	r0
    3198:	82 e3       	ldi	r24, 0x32	; 50
    319a:	94 e0       	ldi	r25, 0x04	; 4
    319c:	ed b7       	in	r30, 0x3d	; 61
    319e:	fe b7       	in	r31, 0x3e	; 62
    31a0:	81 83       	std	Z+1, r24	; 0x01
    31a2:	92 83       	std	Z+2, r25	; 0x02
    31a4:	f8 01       	movw	r30, r16
    31a6:	81 a1       	ldd	r24, Z+33	; 0x21
    31a8:	92 a1       	ldd	r25, Z+34	; 0x22
    31aa:	a3 a1       	ldd	r26, Z+35	; 0x23
    31ac:	b4 a1       	ldd	r27, Z+36	; 0x24
    31ae:	ed b7       	in	r30, 0x3d	; 61
    31b0:	fe b7       	in	r31, 0x3e	; 62
    31b2:	83 83       	std	Z+3, r24	; 0x03
    31b4:	94 83       	std	Z+4, r25	; 0x04
    31b6:	a5 83       	std	Z+5, r26	; 0x05
    31b8:	b6 83       	std	Z+6, r27	; 0x06
    31ba:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    31be:	8d b7       	in	r24, 0x3d	; 61
    31c0:	9e b7       	in	r25, 0x3e	; 62
    31c2:	06 96       	adiw	r24, 0x06	; 6
    31c4:	8d bf       	out	0x3d, r24	; 61
    31c6:	9e bf       	out	0x3e, r25	; 62
}
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	08 95       	ret

000031d2 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31d2:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <cfg_dump+0x4>
    31d6:	0f 92       	push	r0
    31d8:	ed b7       	in	r30, 0x3d	; 61
    31da:	fe b7       	in	r31, 0x3e	; 62
    31dc:	31 96       	adiw	r30, 0x01	; 1
    31de:	8c ef       	ldi	r24, 0xFC	; 252
    31e0:	96 e0       	ldi	r25, 0x06	; 6
    31e2:	ad b7       	in	r26, 0x3d	; 61
    31e4:	be b7       	in	r27, 0x3e	; 62
    31e6:	11 96       	adiw	r26, 0x01	; 1
    31e8:	8d 93       	st	X+, r24
    31ea:	9c 93       	st	X, r25
    31ec:	12 97       	sbiw	r26, 0x02	; 2
    31ee:	80 91 7d 22 	lds	r24, 0x227D
    31f2:	82 83       	std	Z+2, r24	; 0x02
    31f4:	13 82       	std	Z+3, r1	; 0x03
    31f6:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	85 ed       	ldi	r24, 0xD5	; 213
    3200:	96 e0       	ldi	r25, 0x06	; 6
    3202:	ed b7       	in	r30, 0x3d	; 61
    3204:	fe b7       	in	r31, 0x3e	; 62
    3206:	81 83       	std	Z+1, r24	; 0x01
    3208:	92 83       	std	Z+2, r25	; 0x02
    320a:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    320e:	00 d0       	rcall	.+0      	; 0x3210 <cfg_dump+0x3e>
    3210:	0f 92       	push	r0
    3212:	8b ea       	ldi	r24, 0xAB	; 171
    3214:	96 e0       	ldi	r25, 0x06	; 6
    3216:	ad b7       	in	r26, 0x3d	; 61
    3218:	be b7       	in	r27, 0x3e	; 62
    321a:	11 96       	adiw	r26, 0x01	; 1
    321c:	8d 93       	st	X+, r24
    321e:	9c 93       	st	X, r25
    3220:	12 97       	sbiw	r26, 0x02	; 2
    3222:	80 91 7f 22 	lds	r24, 0x227F
    3226:	90 91 80 22 	lds	r25, 0x2280
    322a:	a0 91 81 22 	lds	r26, 0x2281
    322e:	b0 91 82 22 	lds	r27, 0x2282
    3232:	ed b7       	in	r30, 0x3d	; 61
    3234:	fe b7       	in	r31, 0x3e	; 62
    3236:	83 83       	std	Z+3, r24	; 0x03
    3238:	94 83       	std	Z+4, r25	; 0x04
    323a:	a5 83       	std	Z+5, r26	; 0x05
    323c:	b6 83       	std	Z+6, r27	; 0x06
    323e:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3242:	81 e8       	ldi	r24, 0x81	; 129
    3244:	96 e0       	ldi	r25, 0x06	; 6
    3246:	ad b7       	in	r26, 0x3d	; 61
    3248:	be b7       	in	r27, 0x3e	; 62
    324a:	11 96       	adiw	r26, 0x01	; 1
    324c:	8d 93       	st	X+, r24
    324e:	9c 93       	st	X, r25
    3250:	12 97       	sbiw	r26, 0x02	; 2
    3252:	80 91 87 22 	lds	r24, 0x2287
    3256:	90 91 88 22 	lds	r25, 0x2288
    325a:	a0 91 89 22 	lds	r26, 0x2289
    325e:	b0 91 8a 22 	lds	r27, 0x228A
    3262:	ed b7       	in	r30, 0x3d	; 61
    3264:	fe b7       	in	r31, 0x3e	; 62
    3266:	83 83       	std	Z+3, r24	; 0x03
    3268:	94 83       	std	Z+4, r25	; 0x04
    326a:	a5 83       	std	Z+5, r26	; 0x05
    326c:	b6 83       	std	Z+6, r27	; 0x06
    326e:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3272:	86 e5       	ldi	r24, 0x56	; 86
    3274:	96 e0       	ldi	r25, 0x06	; 6
    3276:	ad b7       	in	r26, 0x3d	; 61
    3278:	be b7       	in	r27, 0x3e	; 62
    327a:	11 96       	adiw	r26, 0x01	; 1
    327c:	8d 93       	st	X+, r24
    327e:	9c 93       	st	X, r25
    3280:	12 97       	sbiw	r26, 0x02	; 2
    3282:	80 91 83 22 	lds	r24, 0x2283
    3286:	90 91 84 22 	lds	r25, 0x2284
    328a:	a0 91 85 22 	lds	r26, 0x2285
    328e:	b0 91 86 22 	lds	r27, 0x2286
    3292:	ed b7       	in	r30, 0x3d	; 61
    3294:	fe b7       	in	r31, 0x3e	; 62
    3296:	83 83       	std	Z+3, r24	; 0x03
    3298:	94 83       	std	Z+4, r25	; 0x04
    329a:	a5 83       	std	Z+5, r26	; 0x05
    329c:	b6 83       	std	Z+6, r27	; 0x06
    329e:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    32a2:	10 e0       	ldi	r17, 0x00	; 0
    32a4:	8d b7       	in	r24, 0x3d	; 61
    32a6:	9e b7       	in	r25, 0x3e	; 62
    32a8:	06 96       	adiw	r24, 0x06	; 6
    32aa:	8d bf       	out	0x3d, r24	; 61
    32ac:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32ae:	81 2f       	mov	r24, r17
    32b0:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32b4:	1f 5f       	subi	r17, 0xFF	; 255
    32b6:	14 30       	cpi	r17, 0x04	; 4
    32b8:	d1 f7       	brne	.-12     	; 0x32ae <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32ba:	1f 91       	pop	r17
    32bc:	08 95       	ret

000032be <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	6d e7       	ldi	r22, 0x7D	; 125
    32c4:	72 e2       	ldi	r23, 0x22	; 34
    32c6:	4e e6       	ldi	r20, 0x6E	; 110
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <memcpy_to_eeprom_with_checksum>
}
    32ce:	08 95       	ret

000032d0 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 cb 29 	call	0x5396	; 0x5396 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32d8:	84 36       	cpi	r24, 0x64	; 100
    32da:	19 f0       	breq	.+6      	; 0x32e2 <cfg_read+0x12>
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	0d c0       	rjmp	.+26     	; 0x32fc <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32e2:	8d e7       	ldi	r24, 0x7D	; 125
    32e4:	92 e2       	ldi	r25, 0x22	; 34
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	4e e6       	ldi	r20, 0x6E	; 110
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	0e 94 d5 29 	call	0x53aa	; 0x53aa <memcpy_from_eeprom_with_checksum>
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	11 f0       	breq	.+4      	; 0x32fa <cfg_read+0x2a>
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    32fc:	c9 01       	movw	r24, r18
    32fe:	08 95       	ret

00003300 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	1f 93       	push	r17
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	0f 92       	push	r0
    3310:	0f 92       	push	r0
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3318:	19 82       	std	Y+1, r1	; 0x01
    331a:	1a 82       	std	Y+2, r1	; 0x02
    331c:	cc 24       	eor	r12, r12
    331e:	dd 24       	eor	r13, r13
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	2b c0       	rjmp	.+86     	; 0x337c <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3326:	9d 33       	cpi	r25, 0x3D	; 61
    3328:	49 f4       	brne	.+18     	; 0x333c <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    332a:	f7 01       	movw	r30, r14
    332c:	e2 0f       	add	r30, r18
    332e:	f1 1d       	adc	r31, r1
    3330:	10 82       	st	Z, r1
    3332:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3334:	67 01       	movw	r12, r14
    3336:	c2 0e       	add	r12, r18
    3338:	d1 1c       	adc	r13, r1
    333a:	20 c0       	rjmp	.+64     	; 0x337c <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    333c:	9d 32       	cpi	r25, 0x2D	; 45
    333e:	c9 f0       	breq	.+50     	; 0x3372 <cfg_parse+0x72>
    3340:	9b 32       	cpi	r25, 0x2B	; 43
    3342:	b9 f0       	breq	.+46     	; 0x3372 <cfg_parse+0x72>
    3344:	9e 32       	cpi	r25, 0x2E	; 46
    3346:	a9 f0       	breq	.+42     	; 0x3372 <cfg_parse+0x72>
    3348:	9f 33       	cpi	r25, 0x3F	; 63
    334a:	99 f0       	breq	.+38     	; 0x3372 <cfg_parse+0x72>
    334c:	98 32       	cpi	r25, 0x28	; 40
    334e:	89 f0       	breq	.+34     	; 0x3372 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3350:	89 2f       	mov	r24, r25
    3352:	81 56       	subi	r24, 0x61	; 97
    3354:	8a 31       	cpi	r24, 0x1A	; 26
    3356:	28 f4       	brcc	.+10     	; 0x3362 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3358:	f7 01       	movw	r30, r14
    335a:	e2 0f       	add	r30, r18
    335c:	f1 1d       	adc	r31, r1
    335e:	90 52       	subi	r25, 0x20	; 32
    3360:	0b c0       	rjmp	.+22     	; 0x3378 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3362:	89 2f       	mov	r24, r25
    3364:	81 54       	subi	r24, 0x41	; 65
    3366:	8a 31       	cpi	r24, 0x1A	; 26
    3368:	20 f0       	brcs	.+8      	; 0x3372 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    336a:	89 2f       	mov	r24, r25
    336c:	80 53       	subi	r24, 0x30	; 48
    336e:	8a 30       	cpi	r24, 0x0A	; 10
    3370:	28 f4       	brcc	.+10     	; 0x337c <cfg_parse+0x7c>
			text[j++] = c;
    3372:	f7 01       	movw	r30, r14
    3374:	e2 0f       	add	r30, r18
    3376:	f1 1d       	adc	r31, r1
    3378:	90 83       	st	Z, r25
    337a:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    337c:	f7 01       	movw	r30, r14
    337e:	e3 0f       	add	r30, r19
    3380:	f1 1d       	adc	r31, r1
    3382:	90 81       	ld	r25, Z
    3384:	3f 5f       	subi	r19, 0xFF	; 255
    3386:	99 23       	and	r25, r25
    3388:	71 f6       	brne	.-100    	; 0x3326 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    338a:	f7 01       	movw	r30, r14
    338c:	e2 0f       	add	r30, r18
    338e:	f1 1d       	adc	r31, r1
    3390:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    3392:	2f 5f       	subi	r18, 0xFF	; 255
    3394:	c7 01       	movw	r24, r14
    3396:	82 0f       	add	r24, r18
    3398:	91 1d       	adc	r25, r1
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    339e:	10 92 7e 22 	sts	0x227E, r1
	switch (text[0]) {
    33a2:	f7 01       	movw	r30, r14
    33a4:	80 81       	ld	r24, Z
    33a6:	81 35       	cpi	r24, 0x51	; 81
    33a8:	d1 f0       	breq	.+52     	; 0x33de <cfg_parse+0xde>
    33aa:	82 35       	cpi	r24, 0x52	; 82
    33ac:	60 f4       	brcc	.+24     	; 0x33c6 <cfg_parse+0xc6>
    33ae:	81 34       	cpi	r24, 0x41	; 65
    33b0:	59 f1       	breq	.+86     	; 0x3408 <cfg_parse+0x108>
    33b2:	82 34       	cpi	r24, 0x42	; 66
    33b4:	28 f4       	brcc	.+10     	; 0x33c0 <cfg_parse+0xc0>
    33b6:	88 32       	cpi	r24, 0x28	; 40
    33b8:	11 f1       	breq	.+68     	; 0x33fe <cfg_parse+0xfe>
    33ba:	8f 33       	cpi	r24, 0x3F	; 63
    33bc:	39 f5       	brne	.+78     	; 0x340c <cfg_parse+0x10c>
    33be:	0c c0       	rjmp	.+24     	; 0x33d8 <cfg_parse+0xd8>
    33c0:	8d 34       	cpi	r24, 0x4D	; 77
    33c2:	21 f5       	brne	.+72     	; 0x340c <cfg_parse+0x10c>
    33c4:	0e c0       	rjmp	.+28     	; 0x33e2 <cfg_parse+0xe2>
    33c6:	89 35       	cpi	r24, 0x59	; 89
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <cfg_parse+0xd4>
    33ca:	8a 35       	cpi	r24, 0x5A	; 90
    33cc:	d9 f0       	breq	.+54     	; 0x3404 <cfg_parse+0x104>
    33ce:	88 35       	cpi	r24, 0x58	; 88
    33d0:	e9 f4       	brne	.+58     	; 0x340c <cfg_parse+0x10c>
    33d2:	1f c0       	rjmp	.+62     	; 0x3412 <cfg_parse+0x112>
    33d4:	11 e0       	ldi	r17, 0x01	; 1
    33d6:	1e c0       	rjmp	.+60     	; 0x3414 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33d8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <cfg_dump>
    33dc:	10 c0       	rjmp	.+32     	; 0x33fe <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33de:	8b e0       	ldi	r24, 0x0B	; 11
    33e0:	16 c0       	rjmp	.+44     	; 0x340e <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33e2:	c6 01       	movw	r24, r12
    33e4:	be 01       	movw	r22, r28
    33e6:	6f 5f       	subi	r22, 0xFF	; 255
    33e8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ea:	0e 94 bb 44 	call	0x8976	; 0x8976 <strtod>
    33ee:	60 93 7f 22 	sts	0x227F, r22
    33f2:	70 93 80 22 	sts	0x2280, r23
    33f6:	80 93 81 22 	sts	0x2281, r24
    33fa:	90 93 82 22 	sts	0x2282, r25
				  status(TG_OK); 
    33fe:	10 92 7e 22 	sts	0x227E, r1
    3402:	07 c0       	rjmp	.+14     	; 0x3412 <cfg_parse+0x112>
				  break;
    3404:	12 e0       	ldi	r17, 0x02	; 2
    3406:	06 c0       	rjmp	.+12     	; 0x3414 <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3408:	13 e0       	ldi	r17, 0x03	; 3
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    340c:	8c e0       	ldi	r24, 0x0C	; 12
    340e:	80 93 7e 22 	sts	0x227E, r24
    3412:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3414:	80 91 7e 22 	lds	r24, 0x227E
    3418:	88 23       	and	r24, r24
    341a:	09 f0       	breq	.+2      	; 0x341e <cfg_parse+0x11e>
    341c:	ee c0       	rjmp	.+476    	; 0x35fa <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    341e:	10 92 7e 22 	sts	0x227E, r1
		switch (text[1]) {
    3422:	f7 01       	movw	r30, r14
    3424:	81 81       	ldd	r24, Z+1	; 0x01
    3426:	8c 34       	cpi	r24, 0x4C	; 76
    3428:	09 f4       	brne	.+2      	; 0x342c <cfg_parse+0x12c>
    342a:	b8 c0       	rjmp	.+368    	; 0x359c <cfg_parse+0x29c>
    342c:	8d 34       	cpi	r24, 0x4D	; 77
    342e:	30 f4       	brcc	.+12     	; 0x343c <cfg_parse+0x13c>
    3430:	84 34       	cpi	r24, 0x44	; 68
    3432:	a9 f1       	breq	.+106    	; 0x349e <cfg_parse+0x19e>
    3434:	86 34       	cpi	r24, 0x46	; 70
    3436:	09 f0       	breq	.+2      	; 0x343a <cfg_parse+0x13a>
    3438:	dd c0       	rjmp	.+442    	; 0x35f4 <cfg_parse+0x2f4>
    343a:	1d c0       	rjmp	.+58     	; 0x3476 <cfg_parse+0x176>
    343c:	80 35       	cpi	r24, 0x50	; 80
    343e:	09 f4       	brne	.+2      	; 0x3442 <cfg_parse+0x142>
    3440:	47 c0       	rjmp	.+142    	; 0x34d0 <cfg_parse+0x1d0>
    3442:	83 35       	cpi	r24, 0x53	; 83
    3444:	21 f0       	breq	.+8      	; 0x344e <cfg_parse+0x14e>
    3446:	8d 34       	cpi	r24, 0x4D	; 77
    3448:	09 f0       	breq	.+2      	; 0x344c <cfg_parse+0x14c>
    344a:	d4 c0       	rjmp	.+424    	; 0x35f4 <cfg_parse+0x2f4>
    344c:	58 c0       	rjmp	.+176    	; 0x34fe <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    344e:	c6 01       	movw	r24, r12
    3450:	0e 94 29 46 	call	0x8c52	; 0x8c52 <atoi>
    3454:	21 2f       	mov	r18, r17
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	f9 01       	movw	r30, r18
    345a:	ee 0f       	add	r30, r30
    345c:	ff 1f       	adc	r31, r31
    345e:	e2 0f       	add	r30, r18
    3460:	f3 1f       	adc	r31, r19
    3462:	53 e0       	ldi	r21, 0x03	; 3
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	5a 95       	dec	r21
    346a:	e1 f7       	brne	.-8      	; 0x3464 <cfg_parse+0x164>
    346c:	e3 58       	subi	r30, 0x83	; 131
    346e:	fd 4d       	sbci	r31, 0xDD	; 221
    3470:	81 8b       	std	Z+17, r24	; 0x11
    3472:	92 8b       	std	Z+18, r25	; 0x12
    3474:	c2 c0       	rjmp	.+388    	; 0x35fa <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3476:	c6 01       	movw	r24, r12
    3478:	0e 94 29 46 	call	0x8c52	; 0x8c52 <atoi>
    347c:	21 2f       	mov	r18, r17
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	f9 01       	movw	r30, r18
    3482:	ee 0f       	add	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	23 e0       	ldi	r18, 0x03	; 3
    348c:	ee 0f       	add	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	2a 95       	dec	r18
    3492:	e1 f7       	brne	.-8      	; 0x348c <cfg_parse+0x18c>
    3494:	e3 58       	subi	r30, 0x83	; 131
    3496:	fd 4d       	sbci	r31, 0xDD	; 221
    3498:	83 8b       	std	Z+19, r24	; 0x13
    349a:	94 8b       	std	Z+20, r25	; 0x14
    349c:	ae c0       	rjmp	.+348    	; 0x35fa <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    349e:	c6 01       	movw	r24, r12
    34a0:	be 01       	movw	r22, r28
    34a2:	6f 5f       	subi	r22, 0xFF	; 255
    34a4:	7f 4f       	sbci	r23, 0xFF	; 255
    34a6:	0e 94 bb 44 	call	0x8976	; 0x8976 <strtod>
    34aa:	21 2f       	mov	r18, r17
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	f9 01       	movw	r30, r18
    34b0:	ee 0f       	add	r30, r30
    34b2:	ff 1f       	adc	r31, r31
    34b4:	e2 0f       	add	r30, r18
    34b6:	f3 1f       	adc	r31, r19
    34b8:	b3 e0       	ldi	r27, 0x03	; 3
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ba 95       	dec	r27
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <cfg_parse+0x1ba>
    34c2:	e3 58       	subi	r30, 0x83	; 131
    34c4:	fd 4d       	sbci	r31, 0xDD	; 221
    34c6:	65 8b       	std	Z+21, r22	; 0x15
    34c8:	76 8b       	std	Z+22, r23	; 0x16
    34ca:	87 8b       	std	Z+23, r24	; 0x17
    34cc:	90 8f       	std	Z+24, r25	; 0x18
    34ce:	95 c0       	rjmp	.+298    	; 0x35fa <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34d0:	c6 01       	movw	r24, r12
    34d2:	0e 94 29 46 	call	0x8c52	; 0x8c52 <atoi>
    34d6:	68 2f       	mov	r22, r24
    34d8:	81 2f       	mov	r24, r17
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	fc 01       	movw	r30, r24
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	e8 0f       	add	r30, r24
    34e4:	f9 1f       	adc	r31, r25
    34e6:	73 e0       	ldi	r23, 0x03	; 3
    34e8:	ee 0f       	add	r30, r30
    34ea:	ff 1f       	adc	r31, r31
    34ec:	7a 95       	dec	r23
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <cfg_parse+0x1e8>
    34f0:	e3 58       	subi	r30, 0x83	; 131
    34f2:	fd 4d       	sbci	r31, 0xDD	; 221
    34f4:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    34f6:	81 2f       	mov	r24, r17
    34f8:	0e 94 9f 24 	call	0x493e	; 0x493e <st_set_polarity>
    34fc:	7e c0       	rjmp	.+252    	; 0x35fa <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    34fe:	f7 01       	movw	r30, r14
    3500:	82 81       	ldd	r24, Z+2	; 0x02
    3502:	89 34       	cpi	r24, 0x49	; 73
    3504:	99 f4       	brne	.+38     	; 0x352c <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3506:	c6 01       	movw	r24, r12
    3508:	0e 94 29 46 	call	0x8c52	; 0x8c52 <atoi>
    350c:	21 2f       	mov	r18, r17
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	f9 01       	movw	r30, r18
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	53 e0       	ldi	r21, 0x03	; 3
    351c:	ee 0f       	add	r30, r30
    351e:	ff 1f       	adc	r31, r31
    3520:	5a 95       	dec	r21
    3522:	e1 f7       	brne	.-8      	; 0x351c <cfg_parse+0x21c>
    3524:	e3 58       	subi	r30, 0x83	; 131
    3526:	fd 4d       	sbci	r31, 0xDD	; 221
    3528:	86 87       	std	Z+14, r24	; 0x0e
    352a:	67 c0       	rjmp	.+206    	; 0x35fa <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    352c:	f7 01       	movw	r30, r14
    352e:	83 81       	ldd	r24, Z+3	; 0x03
    3530:	82 35       	cpi	r24, 0x52	; 82
    3532:	c9 f4       	brne	.+50     	; 0x3566 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3534:	c6 01       	movw	r24, r12
    3536:	be 01       	movw	r22, r28
    3538:	6f 5f       	subi	r22, 0xFF	; 255
    353a:	7f 4f       	sbci	r23, 0xFF	; 255
    353c:	0e 94 bb 44 	call	0x8976	; 0x8976 <strtod>
    3540:	21 2f       	mov	r18, r17
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	f9 01       	movw	r30, r18
    3546:	ee 0f       	add	r30, r30
    3548:	ff 1f       	adc	r31, r31
    354a:	e2 0f       	add	r30, r18
    354c:	f3 1f       	adc	r31, r19
    354e:	13 e0       	ldi	r17, 0x03	; 3
    3550:	ee 0f       	add	r30, r30
    3552:	ff 1f       	adc	r31, r31
    3554:	1a 95       	dec	r17
    3556:	e1 f7       	brne	.-8      	; 0x3550 <cfg_parse+0x250>
    3558:	e3 58       	subi	r30, 0x83	; 131
    355a:	fd 4d       	sbci	r31, 0xDD	; 221
    355c:	61 8f       	std	Z+25, r22	; 0x19
    355e:	72 8f       	std	Z+26, r23	; 0x1a
    3560:	83 8f       	std	Z+27, r24	; 0x1b
    3562:	94 8f       	std	Z+28, r25	; 0x1c
    3564:	4a c0       	rjmp	.+148    	; 0x35fa <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3566:	84 35       	cpi	r24, 0x54	; 84
    3568:	c9 f4       	brne	.+50     	; 0x359c <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    356a:	c6 01       	movw	r24, r12
    356c:	be 01       	movw	r22, r28
    356e:	6f 5f       	subi	r22, 0xFF	; 255
    3570:	7f 4f       	sbci	r23, 0xFF	; 255
    3572:	0e 94 bb 44 	call	0x8976	; 0x8976 <strtod>
    3576:	21 2f       	mov	r18, r17
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	f9 01       	movw	r30, r18
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	e2 0f       	add	r30, r18
    3582:	f3 1f       	adc	r31, r19
    3584:	a3 e0       	ldi	r26, 0x03	; 3
    3586:	ee 0f       	add	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	aa 95       	dec	r26
    358c:	e1 f7       	brne	.-8      	; 0x3586 <cfg_parse+0x286>
    358e:	e3 58       	subi	r30, 0x83	; 131
    3590:	fd 4d       	sbci	r31, 0xDD	; 221
    3592:	65 8f       	std	Z+29, r22	; 0x1d
    3594:	76 8f       	std	Z+30, r23	; 0x1e
    3596:	87 8f       	std	Z+31, r24	; 0x1f
    3598:	90 a3       	std	Z+32, r25	; 0x20
    359a:	2f c0       	rjmp	.+94     	; 0x35fa <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    359c:	f7 01       	movw	r30, r14
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	8f 34       	cpi	r24, 0x4F	; 79
    35a2:	99 f4       	brne	.+38     	; 0x35ca <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35a4:	c6 01       	movw	r24, r12
    35a6:	0e 94 29 46 	call	0x8c52	; 0x8c52 <atoi>
    35aa:	21 2f       	mov	r18, r17
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	f9 01       	movw	r30, r18
    35b0:	ee 0f       	add	r30, r30
    35b2:	ff 1f       	adc	r31, r31
    35b4:	e2 0f       	add	r30, r18
    35b6:	f3 1f       	adc	r31, r19
    35b8:	53 e0       	ldi	r21, 0x03	; 3
    35ba:	ee 0f       	add	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	5a 95       	dec	r21
    35c0:	e1 f7       	brne	.-8      	; 0x35ba <cfg_parse+0x2ba>
    35c2:	e3 58       	subi	r30, 0x83	; 131
    35c4:	fd 4d       	sbci	r31, 0xDD	; 221
    35c6:	87 87       	std	Z+15, r24	; 0x0f
    35c8:	18 c0       	rjmp	.+48     	; 0x35fa <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35ca:	89 34       	cpi	r24, 0x49	; 73
    35cc:	99 f4       	brne	.+38     	; 0x35f4 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35ce:	c6 01       	movw	r24, r12
    35d0:	0e 94 29 46 	call	0x8c52	; 0x8c52 <atoi>
    35d4:	21 2f       	mov	r18, r17
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	f9 01       	movw	r30, r18
    35da:	ee 0f       	add	r30, r30
    35dc:	ff 1f       	adc	r31, r31
    35de:	e2 0f       	add	r30, r18
    35e0:	f3 1f       	adc	r31, r19
    35e2:	23 e0       	ldi	r18, 0x03	; 3
    35e4:	ee 0f       	add	r30, r30
    35e6:	ff 1f       	adc	r31, r31
    35e8:	2a 95       	dec	r18
    35ea:	e1 f7       	brne	.-8      	; 0x35e4 <cfg_parse+0x2e4>
    35ec:	e3 58       	subi	r30, 0x83	; 131
    35ee:	fd 4d       	sbci	r31, 0xDD	; 221
    35f0:	85 a3       	std	Z+37, r24	; 0x25
    35f2:	03 c0       	rjmp	.+6      	; 0x35fa <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    35f4:	8c e0       	ldi	r24, 0x0C	; 12
    35f6:	80 93 7e 22 	sts	0x227E, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    35fa:	80 91 7e 22 	lds	r24, 0x227E
    35fe:	b7 01       	movw	r22, r14
    3600:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3604:	80 91 7e 22 	lds	r24, 0x227E
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	1f 91       	pop	r17
    3614:	ff 90       	pop	r15
    3616:	ef 90       	pop	r14
    3618:	df 90       	pop	r13
    361a:	cf 90       	pop	r12
    361c:	08 95       	ret

0000361e <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	a8 97       	sbiw	r28, 0x28	; 40
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0b e4       	ldi	r16, 0x4B	; 75
    3636:	12 e0       	ldi	r17, 0x02	; 2
    3638:	a0 e0       	ldi	r26, 0x00	; 0
    363a:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    363c:	7e 01       	movw	r14, r28
    363e:	08 94       	sec
    3640:	e1 1c       	adc	r14, r1
    3642:	f1 1c       	adc	r15, r1
    3644:	02 c0       	rjmp	.+4      	; 0x364a <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3646:	0f 5f       	subi	r16, 0xFF	; 255
    3648:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    364a:	f8 01       	movw	r30, r16
    364c:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    364e:	88 23       	and	r24, r24
    3650:	89 f4       	brne	.+34     	; 0x3674 <cfg_test+0x56>
			text[j] = 0;
    3652:	ce 01       	movw	r24, r28
    3654:	01 96       	adiw	r24, 0x01	; 1
    3656:	a8 0f       	add	r26, r24
    3658:	b9 1f       	adc	r27, r25
    365a:	1c 92       	st	X, r1
			cfg_parse(text);
    365c:	0e 94 80 19 	call	0x3300	; 0x3300 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3660:	a8 96       	adiw	r28, 0x28	; 40
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3674:	8d 30       	cpi	r24, 0x0D	; 13
    3676:	21 f0       	breq	.+8      	; 0x3680 <cfg_test+0x62>
    3678:	8a 30       	cpi	r24, 0x0A	; 10
    367a:	11 f0       	breq	.+4      	; 0x3680 <cfg_test+0x62>
    367c:	8b 33       	cpi	r24, 0x3B	; 59
    367e:	49 f4       	brne	.+18     	; 0x3692 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3680:	ae 0d       	add	r26, r14
    3682:	bf 1d       	adc	r27, r15
    3684:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3686:	c7 01       	movw	r24, r14
    3688:	0e 94 80 19 	call	0x3300	; 0x3300 <cfg_parse>
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	da cf       	rjmp	.-76     	; 0x3646 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    3692:	81 32       	cpi	r24, 0x21	; 33
    3694:	c0 f2       	brcs	.-80     	; 0x3646 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    3696:	f7 01       	movw	r30, r14
    3698:	ea 0f       	add	r30, r26
    369a:	fb 1f       	adc	r31, r27
    369c:	80 83       	st	Z, r24
    369e:	11 96       	adiw	r26, 0x01	; 1
    36a0:	d2 cf       	rjmp	.-92     	; 0x3646 <cfg_test+0x28>

000036a2 <en_init>:


void en_init(void) 
{
	return;
}
    36a2:	08 95       	ret

000036a4 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36a4:	88 23       	and	r24, r24
    36a6:	b1 f0       	breq	.+44     	; 0x36d4 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36a8:	e0 91 79 22 	lds	r30, 0x2279
    36ac:	f0 91 7a 22 	lds	r31, 0x227A
    36b0:	80 e2       	ldi	r24, 0x20	; 32
    36b2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36b4:	e0 91 69 22 	lds	r30, 0x2269
    36b8:	f0 91 6a 22 	lds	r31, 0x226A
    36bc:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36be:	e0 91 59 22 	lds	r30, 0x2259
    36c2:	f0 91 5a 22 	lds	r31, 0x225A
    36c6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c8:	e0 91 49 22 	lds	r30, 0x2249
    36cc:	f0 91 4a 22 	lds	r31, 0x224A
    36d0:	85 83       	std	Z+5, r24	; 0x05
    36d2:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36d4:	e0 91 79 22 	lds	r30, 0x2279
    36d8:	f0 91 7a 22 	lds	r31, 0x227A
    36dc:	80 e2       	ldi	r24, 0x20	; 32
    36de:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36e0:	e0 91 69 22 	lds	r30, 0x2269
    36e4:	f0 91 6a 22 	lds	r31, 0x226A
    36e8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ea:	e0 91 59 22 	lds	r30, 0x2259
    36ee:	f0 91 5a 22 	lds	r31, 0x225A
    36f2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f4:	e0 91 49 22 	lds	r30, 0x2249
    36f8:	f0 91 4a 22 	lds	r31, 0x224A
    36fc:	86 83       	std	Z+6, r24	; 0x06
    36fe:	08 95       	ret

00003700 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3700:	0f 93       	push	r16
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	0f 92       	push	r0
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    370c:	8b ec       	ldi	r24, 0xCB	; 203
    370e:	e0 e5       	ldi	r30, 0x50	; 80
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3714:	88 e0       	ldi	r24, 0x08	; 8
    3716:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    371a:	80 91 51 00 	lds	r24, 0x0051
    371e:	83 ff       	sbrs	r24, 3
    3720:	fc cf       	rjmp	.-8      	; 0x371a <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3722:	82 ec       	ldi	r24, 0xC2	; 194
    3724:	e0 e5       	ldi	r30, 0x50	; 80
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    372a:	88 e1       	ldi	r24, 0x18	; 24
    372c:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3730:	80 91 51 00 	lds	r24, 0x0051
    3734:	84 ff       	sbrs	r24, 4
    3736:	fc cf       	rjmp	.-8      	; 0x3730 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3738:	8f b7       	in	r24, 0x3f	; 63
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    373e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3740:	24 e0       	ldi	r18, 0x04	; 4
    3742:	80 e4       	ldi	r24, 0x40	; 64
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	fc 01       	movw	r30, r24
    3748:	08 ed       	ldi	r16, 0xD8	; 216
    374a:	04 bf       	out	0x34, r16	; 52
    374c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3752:	80 91 50 00 	lds	r24, 0x0050
    3756:	8e 7f       	andi	r24, 0xFE	; 254
    3758:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    375c:	0f 90       	pop	r0
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	0f 91       	pop	r16
    3764:	08 95       	ret

00003766 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3766:	0e 94 80 1b 	call	0x3700	; 0x3700 <xmega_init_clocks>
}
    376a:	08 95       	ret

0000376c <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    376c:	0f 93       	push	r16
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	0f 92       	push	r0
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3778:	2f b7       	in	r18, 0x3f	; 63
    377a:	29 83       	std	Y+1, r18	; 0x01
    377c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    377e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3780:	fc 01       	movw	r30, r24
    3782:	08 ed       	ldi	r16, 0xD8	; 216
    3784:	04 bf       	out	0x34, r16	; 52
    3786:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	8f bf       	out	0x3f, r24	; 63
#endif
}
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	0f 91       	pop	r16
    3794:	08 95       	ret

00003796 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3796:	10 92 56 21 	sts	0x2156, r1
	ma.arc_state = MC_STATE_OFF;
    379a:	10 92 eb 22 	sts	0x22EB, r1
	return (TG_OK);
}
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	08 95       	ret

000037a4 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37a4:	8c e0       	ldi	r24, 0x0C	; 12
    37a6:	e7 e5       	ldi	r30, 0x57	; 87
    37a8:	f1 e2       	ldi	r31, 0x21	; 33
    37aa:	df 01       	movw	r26, r30
    37ac:	1d 92       	st	X+, r1
    37ae:	8a 95       	dec	r24
    37b0:	e9 f7       	brne	.-6      	; 0x37ac <mc_go_home+0x8>
	return (TG_OK);
}
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	08 95       	ret

000037b8 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37b8:	8c e0       	ldi	r24, 0x0C	; 12
    37ba:	e7 e5       	ldi	r30, 0x57	; 87
    37bc:	f1 e2       	ldi	r31, 0x21	; 33
    37be:	df 01       	movw	r26, r30
    37c0:	1d 92       	st	X+, r1
    37c2:	8a 95       	dec	r24
    37c4:	e9 f7       	brne	.-6      	; 0x37c0 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37c6:	10 92 56 21 	sts	0x2156, r1
	ma.arc_state = MC_STATE_OFF;
    37ca:	10 92 eb 22 	sts	0x22EB, r1
}
    37ce:	08 95       	ret

000037d0 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37d0:	af 92       	push	r10
    37d2:	bf 92       	push	r11
    37d4:	cf 92       	push	r12
    37d6:	df 92       	push	r13
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37e0:	80 91 56 21 	lds	r24, 0x2156
    37e4:	88 23       	and	r24, r24
    37e6:	19 f4       	brne	.+6      	; 0x37ee <mc_line_continue+0x1e>
    37e8:	23 e0       	ldi	r18, 0x03	; 3
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	30 c0       	rjmp	.+96     	; 0x384e <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    37ee:	82 e0       	ldi	r24, 0x02	; 2
    37f0:	80 93 56 21 	sts	0x2156, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    37f4:	0e 94 8a 2c 	call	0x5914	; 0x5914 <mv_test_move_buffer_full>
    37f8:	88 23       	and	r24, r24
    37fa:	19 f0       	breq	.+6      	; 0x3802 <mc_line_continue+0x32>
    37fc:	22 e0       	ldi	r18, 0x02	; 2
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	26 c0       	rjmp	.+76     	; 0x384e <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3802:	60 91 6f 21 	lds	r22, 0x216F
    3806:	70 91 70 21 	lds	r23, 0x2170
    380a:	80 91 71 21 	lds	r24, 0x2171
    380e:	90 91 72 21 	lds	r25, 0x2172
    3812:	20 91 73 21 	lds	r18, 0x2173
    3816:	30 91 74 21 	lds	r19, 0x2174
    381a:	40 91 75 21 	lds	r20, 0x2175
    381e:	50 91 76 21 	lds	r21, 0x2176
    3822:	e0 90 77 21 	lds	r14, 0x2177
    3826:	f0 90 78 21 	lds	r15, 0x2178
    382a:	00 91 79 21 	lds	r16, 0x2179
    382e:	10 91 7a 21 	lds	r17, 0x217A
    3832:	a0 90 7b 21 	lds	r10, 0x217B
    3836:	b0 90 7c 21 	lds	r11, 0x217C
    383a:	c0 90 7d 21 	lds	r12, 0x217D
    383e:	d0 90 7e 21 	lds	r13, 0x217E
    3842:	0e 94 b6 2c 	call	0x596c	; 0x596c <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3846:	10 92 56 21 	sts	0x2156, r1
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    384e:	c9 01       	movw	r24, r18
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	ff 90       	pop	r15
    3856:	ef 90       	pop	r14
    3858:	df 90       	pop	r13
    385a:	cf 90       	pop	r12
    385c:	bf 90       	pop	r11
    385e:	af 90       	pop	r10
    3860:	08 95       	ret

00003862 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3862:	10 92 6f 21 	sts	0x216F, r1
    3866:	10 92 70 21 	sts	0x2170, r1
    386a:	10 92 71 21 	sts	0x2171, r1
    386e:	10 92 72 21 	sts	0x2172, r1
	mc.steps[Y] = 0;
    3872:	10 92 73 21 	sts	0x2173, r1
    3876:	10 92 74 21 	sts	0x2174, r1
    387a:	10 92 75 21 	sts	0x2175, r1
    387e:	10 92 76 21 	sts	0x2176, r1
	mc.steps[Z] = 0;
    3882:	10 92 77 21 	sts	0x2177, r1
    3886:	10 92 78 21 	sts	0x2178, r1
    388a:	10 92 79 21 	sts	0x2179, r1
    388e:	10 92 7a 21 	sts	0x217A, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	20 93 7f 21 	sts	0x217F, r18
    389e:	30 93 80 21 	sts	0x2180, r19
    38a2:	40 93 81 21 	sts	0x2181, r20
    38a6:	50 93 82 21 	sts	0x2182, r21
	mc.microseconds = trunc(seconds*1000000);
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	34 e2       	ldi	r19, 0x24	; 36
    38ae:	44 e7       	ldi	r20, 0x74	; 116
    38b0:	59 e4       	ldi	r21, 0x49	; 73
    38b2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    38b6:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixunssfsi>
    38ba:	60 93 7b 21 	sts	0x217B, r22
    38be:	70 93 7c 21 	sts	0x217C, r23
    38c2:	80 93 7d 21 	sts	0x217D, r24
    38c6:	90 93 7e 21 	sts	0x217E, r25
	mc.line_state = MC_STATE_NEW;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	80 93 56 21 	sts	0x2156, r24
	return (mc_line_continue());
    38d0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_line_continue>
}
    38d4:	08 95       	ret

000038d6 <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38d6:	2f 92       	push	r2
    38d8:	3f 92       	push	r3
    38da:	4f 92       	push	r4
    38dc:	5f 92       	push	r5
    38de:	6f 92       	push	r6
    38e0:	7f 92       	push	r7
    38e2:	8f 92       	push	r8
    38e4:	9f 92       	push	r9
    38e6:	af 92       	push	r10
    38e8:	bf 92       	push	r11
    38ea:	cf 92       	push	r12
    38ec:	df 92       	push	r13
    38ee:	ef 92       	push	r14
    38f0:	ff 92       	push	r15
    38f2:	0f 93       	push	r16
    38f4:	1f 93       	push	r17
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	cd b7       	in	r28, 0x3d	; 61
    38fc:	de b7       	in	r29, 0x3e	; 62
    38fe:	64 97       	sbiw	r28, 0x14	; 20
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	2d 87       	std	Y+13, r18	; 0x0d
    3906:	3e 87       	std	Y+14, r19	; 0x0e
    3908:	4f 87       	std	Y+15, r20	; 0x0f
    390a:	58 8b       	std	Y+16, r21	; 0x10
    390c:	a9 8a       	std	Y+17, r10	; 0x11
    390e:	ba 8a       	std	Y+18, r11	; 0x12
    3910:	cb 8a       	std	Y+19, r12	; 0x13
    3912:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3914:	20 91 9e 22 	lds	r18, 0x229E
    3918:	30 91 9f 22 	lds	r19, 0x229F
    391c:	40 91 a0 22 	lds	r20, 0x22A0
    3920:	50 91 a1 22 	lds	r21, 0x22A1
    3924:	29 87       	std	Y+9, r18	; 0x09
    3926:	3a 87       	std	Y+10, r19	; 0x0a
    3928:	4b 87       	std	Y+11, r20	; 0x0b
    392a:	5c 87       	std	Y+12, r21	; 0x0c
    392c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3930:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    3934:	2b 01       	movw	r4, r22
    3936:	3c 01       	movw	r6, r24
    3938:	40 92 63 21 	sts	0x2163, r4
    393c:	50 92 64 21 	sts	0x2164, r5
    3940:	60 92 65 21 	sts	0x2165, r6
    3944:	70 92 66 21 	sts	0x2166, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3948:	80 91 b6 22 	lds	r24, 0x22B6
    394c:	90 91 b7 22 	lds	r25, 0x22B7
    3950:	a0 91 b8 22 	lds	r26, 0x22B8
    3954:	b0 91 b9 22 	lds	r27, 0x22B9
    3958:	8d 83       	std	Y+5, r24	; 0x05
    395a:	9e 83       	std	Y+6, r25	; 0x06
    395c:	af 83       	std	Y+7, r26	; 0x07
    395e:	b8 87       	std	Y+8, r27	; 0x08
    3960:	6d 85       	ldd	r22, Y+13	; 0x0d
    3962:	7e 85       	ldd	r23, Y+14	; 0x0e
    3964:	8f 85       	ldd	r24, Y+15	; 0x0f
    3966:	98 89       	ldd	r25, Y+16	; 0x10
    3968:	2d 81       	ldd	r18, Y+5	; 0x05
    396a:	3e 81       	ldd	r19, Y+6	; 0x06
    396c:	4f 81       	ldd	r20, Y+7	; 0x07
    396e:	58 85       	ldd	r21, Y+8	; 0x08
    3970:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3974:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    3978:	5b 01       	movw	r10, r22
    397a:	6c 01       	movw	r12, r24
    397c:	a0 92 67 21 	sts	0x2167, r10
    3980:	b0 92 68 21 	sts	0x2168, r11
    3984:	c0 92 69 21 	sts	0x2169, r12
    3988:	d0 92 6a 21 	sts	0x216A, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    398c:	20 91 ce 22 	lds	r18, 0x22CE
    3990:	30 91 cf 22 	lds	r19, 0x22CF
    3994:	40 91 d0 22 	lds	r20, 0x22D0
    3998:	50 91 d1 22 	lds	r21, 0x22D1
    399c:	29 83       	std	Y+1, r18	; 0x01
    399e:	3a 83       	std	Y+2, r19	; 0x02
    39a0:	4b 83       	std	Y+3, r20	; 0x03
    39a2:	5c 83       	std	Y+4, r21	; 0x04
    39a4:	c8 01       	movw	r24, r16
    39a6:	b7 01       	movw	r22, r14
    39a8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    39ac:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    39b0:	9b 01       	movw	r18, r22
    39b2:	ac 01       	movw	r20, r24
    39b4:	20 93 6b 21 	sts	0x216B, r18
    39b8:	30 93 6c 21 	sts	0x216C, r19
    39bc:	40 93 6d 21 	sts	0x216D, r20
    39c0:	50 93 6e 21 	sts	0x216E, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39c4:	80 91 57 21 	lds	r24, 0x2157
    39c8:	90 91 58 21 	lds	r25, 0x2158
    39cc:	a0 91 59 21 	lds	r26, 0x2159
    39d0:	b0 91 5a 21 	lds	r27, 0x215A
    39d4:	83 01       	movw	r16, r6
    39d6:	72 01       	movw	r14, r4
    39d8:	e8 1a       	sub	r14, r24
    39da:	f9 0a       	sbc	r15, r25
    39dc:	0a 0b       	sbc	r16, r26
    39de:	1b 0b       	sbc	r17, r27
    39e0:	e0 92 6f 21 	sts	0x216F, r14
    39e4:	f0 92 70 21 	sts	0x2170, r15
    39e8:	00 93 71 21 	sts	0x2171, r16
    39ec:	10 93 72 21 	sts	0x2172, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39f0:	80 91 5b 21 	lds	r24, 0x215B
    39f4:	90 91 5c 21 	lds	r25, 0x215C
    39f8:	a0 91 5d 21 	lds	r26, 0x215D
    39fc:	b0 91 5e 21 	lds	r27, 0x215E
    3a00:	a8 1a       	sub	r10, r24
    3a02:	b9 0a       	sbc	r11, r25
    3a04:	ca 0a       	sbc	r12, r26
    3a06:	db 0a       	sbc	r13, r27
    3a08:	a0 92 73 21 	sts	0x2173, r10
    3a0c:	b0 92 74 21 	sts	0x2174, r11
    3a10:	c0 92 75 21 	sts	0x2175, r12
    3a14:	d0 92 76 21 	sts	0x2176, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a18:	80 91 5f 21 	lds	r24, 0x215F
    3a1c:	90 91 60 21 	lds	r25, 0x2160
    3a20:	a0 91 61 21 	lds	r26, 0x2161
    3a24:	b0 91 62 21 	lds	r27, 0x2162
    3a28:	19 01       	movw	r2, r18
    3a2a:	2a 01       	movw	r4, r20
    3a2c:	28 1a       	sub	r2, r24
    3a2e:	39 0a       	sbc	r3, r25
    3a30:	4a 0a       	sbc	r4, r26
    3a32:	5b 0a       	sbc	r5, r27
    3a34:	20 92 77 21 	sts	0x2177, r2
    3a38:	30 92 78 21 	sts	0x2178, r3
    3a3c:	40 92 79 21 	sts	0x2179, r4
    3a40:	50 92 7a 21 	sts	0x217A, r5

	if (invert_feed_rate) {
    3a44:	89 28       	or	r8, r9
    3a46:	59 f0       	breq	.+22     	; 0x3a5e <mc_line+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a48:	60 ec       	ldi	r22, 0xC0	; 192
    3a4a:	71 ee       	ldi	r23, 0xE1	; 225
    3a4c:	84 e6       	ldi	r24, 0x64	; 100
    3a4e:	9c e4       	ldi	r25, 0x4C	; 76
    3a50:	29 89       	ldd	r18, Y+17	; 0x11
    3a52:	3a 89       	ldd	r19, Y+18	; 0x12
    3a54:	4b 89       	ldd	r20, Y+19	; 0x13
    3a56:	5c 89       	ldd	r21, Y+20	; 0x14
    3a58:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3a5c:	4a c0       	rjmp	.+148    	; 0x3af2 <mc_line+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a5e:	c8 01       	movw	r24, r16
    3a60:	b7 01       	movw	r22, r14
    3a62:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3a66:	29 85       	ldd	r18, Y+9	; 0x09
    3a68:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a6e:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3a72:	0e 94 1d 44 	call	0x883a	; 0x883a <square>
    3a76:	3b 01       	movw	r6, r22
    3a78:	4c 01       	movw	r8, r24
    3a7a:	c6 01       	movw	r24, r12
    3a7c:	b5 01       	movw	r22, r10
    3a7e:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3a82:	2d 81       	ldd	r18, Y+5	; 0x05
    3a84:	3e 81       	ldd	r19, Y+6	; 0x06
    3a86:	4f 81       	ldd	r20, Y+7	; 0x07
    3a88:	58 85       	ldd	r21, Y+8	; 0x08
    3a8a:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3a8e:	0e 94 1d 44 	call	0x883a	; 0x883a <square>
    3a92:	5b 01       	movw	r10, r22
    3a94:	6c 01       	movw	r12, r24
    3a96:	c2 01       	movw	r24, r4
    3a98:	b1 01       	movw	r22, r2
    3a9a:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3a9e:	29 81       	ldd	r18, Y+1	; 0x01
    3aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    3aa2:	4b 81       	ldd	r20, Y+3	; 0x03
    3aa4:	5c 81       	ldd	r21, Y+4	; 0x04
    3aa6:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3aaa:	0e 94 1d 44 	call	0x883a	; 0x883a <square>
    3aae:	7b 01       	movw	r14, r22
    3ab0:	8c 01       	movw	r16, r24
    3ab2:	c4 01       	movw	r24, r8
    3ab4:	b3 01       	movw	r22, r6
    3ab6:	a6 01       	movw	r20, r12
    3ab8:	95 01       	movw	r18, r10
    3aba:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    3abe:	a8 01       	movw	r20, r16
    3ac0:	97 01       	movw	r18, r14
    3ac2:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    3ac6:	0e 94 df 43 	call	0x87be	; 0x87be <sqrt>
    3aca:	60 93 7f 21 	sts	0x217F, r22
    3ace:	70 93 80 21 	sts	0x2180, r23
    3ad2:	80 93 81 21 	sts	0x2181, r24
    3ad6:	90 93 82 21 	sts	0x2182, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3ada:	29 89       	ldd	r18, Y+17	; 0x11
    3adc:	3a 89       	ldd	r19, Y+18	; 0x12
    3ade:	4b 89       	ldd	r20, Y+19	; 0x13
    3ae0:	5c 89       	ldd	r21, Y+20	; 0x14
    3ae2:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	34 e2       	ldi	r19, 0x24	; 36
    3aea:	44 e7       	ldi	r20, 0x74	; 116
    3aec:	59 e4       	ldi	r21, 0x49	; 73
    3aee:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3af2:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    3af6:	60 93 7b 21 	sts	0x217B, r22
    3afa:	70 93 7c 21 	sts	0x217C, r23
    3afe:	80 93 7d 21 	sts	0x217D, r24
    3b02:	90 93 7e 21 	sts	0x217E, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	80 93 56 21 	sts	0x2156, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b0c:	e7 e5       	ldi	r30, 0x57	; 87
    3b0e:	f1 e2       	ldi	r31, 0x21	; 33
    3b10:	df 01       	movw	r26, r30
    3b12:	1c 96       	adiw	r26, 0x0c	; 12
    3b14:	8c e0       	ldi	r24, 0x0C	; 12
    3b16:	0d 90       	ld	r0, X+
    3b18:	01 92       	st	Z+, r0
    3b1a:	81 50       	subi	r24, 0x01	; 1
    3b1c:	e1 f7       	brne	.-8      	; 0x3b16 <mc_line+0x240>
	return (mc_line_continue());
    3b1e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_line_continue>
}
    3b22:	64 96       	adiw	r28, 0x14	; 20
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	de bf       	out	0x3e, r29	; 62
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	1f 91       	pop	r17
    3b2e:	0f 91       	pop	r16
    3b30:	ff 90       	pop	r15
    3b32:	ef 90       	pop	r14
    3b34:	df 90       	pop	r13
    3b36:	cf 90       	pop	r12
    3b38:	bf 90       	pop	r11
    3b3a:	af 90       	pop	r10
    3b3c:	9f 90       	pop	r9
    3b3e:	8f 90       	pop	r8
    3b40:	7f 90       	pop	r7
    3b42:	6f 90       	pop	r6
    3b44:	5f 90       	pop	r5
    3b46:	4f 90       	pop	r4
    3b48:	3f 90       	pop	r3
    3b4a:	2f 90       	pop	r2
    3b4c:	08 95       	ret

00003b4e <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b4e:	8f 92       	push	r8
    3b50:	9f 92       	push	r9
    3b52:	af 92       	push	r10
    3b54:	bf 92       	push	r11
    3b56:	cf 92       	push	r12
    3b58:	df 92       	push	r13
    3b5a:	ef 92       	push	r14
    3b5c:	ff 92       	push	r15
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b62:	80 91 eb 22 	lds	r24, 0x22EB
    3b66:	88 23       	and	r24, r24
    3b68:	19 f4       	brne	.+6      	; 0x3b70 <mc_arc_continue+0x22>
    3b6a:	23 e0       	ldi	r18, 0x03	; 3
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	dd c0       	rjmp	.+442    	; 0x3d2a <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b70:	81 30       	cpi	r24, 0x01	; 1
    3b72:	09 f0       	breq	.+2      	; 0x3b76 <mc_arc_continue+0x28>
    3b74:	ca c0       	rjmp	.+404    	; 0x3d0a <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3b76:	10 92 ee 22 	sts	0x22EE, r1
    3b7a:	10 92 ef 22 	sts	0x22EF, r1
		ma.arc_state = MC_STATE_RUNNING;
    3b7e:	82 e0       	ldi	r24, 0x02	; 2
    3b80:	80 93 eb 22 	sts	0x22EB, r24
    3b84:	c2 c0       	rjmp	.+388    	; 0x3d0a <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3b86:	0e 94 8a 2c 	call	0x5914	; 0x5914 <mv_test_move_buffer_full>
    3b8a:	88 23       	and	r24, r24
    3b8c:	19 f0       	breq	.+6      	; 0x3b94 <mc_arc_continue+0x46>
    3b8e:	22 e0       	ldi	r18, 0x02	; 2
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	cb c0       	rjmp	.+406    	; 0x3d2a <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3b94:	80 91 ee 22 	lds	r24, 0x22EE
    3b98:	90 91 ef 22 	lds	r25, 0x22EF
    3b9c:	01 96       	adiw	r24, 0x01	; 1
    3b9e:	80 93 ee 22 	sts	0x22EE, r24
    3ba2:	90 93 ef 22 	sts	0x22EF, r25
		ma.theta += ma.theta_per_segment;
    3ba6:	60 91 10 23 	lds	r22, 0x2310
    3baa:	70 91 11 23 	lds	r23, 0x2311
    3bae:	80 91 12 23 	lds	r24, 0x2312
    3bb2:	90 91 13 23 	lds	r25, 0x2313
    3bb6:	20 91 1c 23 	lds	r18, 0x231C
    3bba:	30 91 1d 23 	lds	r19, 0x231D
    3bbe:	40 91 1e 23 	lds	r20, 0x231E
    3bc2:	50 91 1f 23 	lds	r21, 0x231F
    3bc6:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    3bca:	7b 01       	movw	r14, r22
    3bcc:	8c 01       	movw	r16, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	d8 01       	movw	r26, r16
    3bd2:	80 93 10 23 	sts	0x2310, r24
    3bd6:	90 93 11 23 	sts	0x2311, r25
    3bda:	a0 93 12 23 	sts	0x2312, r26
    3bde:	b0 93 13 23 	sts	0x2313, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3be2:	b7 01       	movw	r22, r14
    3be4:	c8 01       	movw	r24, r16
    3be6:	0e 94 d5 43 	call	0x87aa	; 0x87aa <sin>
    3bea:	80 90 14 23 	lds	r8, 0x2314
    3bee:	90 90 15 23 	lds	r9, 0x2315
    3bf2:	a0 90 16 23 	lds	r10, 0x2316
    3bf6:	b0 90 17 23 	lds	r11, 0x2317
    3bfa:	c0 90 f2 22 	lds	r12, 0x22F2
    3bfe:	d0 90 f3 22 	lds	r13, 0x22F3
    3c02:	cc 0c       	add	r12, r12
    3c04:	dd 1c       	adc	r13, r13
    3c06:	cc 0c       	add	r12, r12
    3c08:	dd 1c       	adc	r13, r13
    3c0a:	2b ee       	ldi	r18, 0xEB	; 235
    3c0c:	32 e2       	ldi	r19, 0x22	; 34
    3c0e:	c2 0e       	add	r12, r18
    3c10:	d3 1e       	adc	r13, r19
    3c12:	a5 01       	movw	r20, r10
    3c14:	94 01       	movw	r18, r8
    3c16:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3c1a:	9b 01       	movw	r18, r22
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	60 91 08 23 	lds	r22, 0x2308
    3c22:	70 91 09 23 	lds	r23, 0x2309
    3c26:	80 91 0a 23 	lds	r24, 0x230A
    3c2a:	90 91 0b 23 	lds	r25, 0x230B
    3c2e:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    3c32:	f6 01       	movw	r30, r12
    3c34:	65 87       	std	Z+13, r22	; 0x0d
    3c36:	76 87       	std	Z+14, r23	; 0x0e
    3c38:	87 87       	std	Z+15, r24	; 0x0f
    3c3a:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c3c:	b7 01       	movw	r22, r14
    3c3e:	c8 01       	movw	r24, r16
    3c40:	0e 94 b4 40 	call	0x8168	; 0x8168 <cos>
    3c44:	00 91 f4 22 	lds	r16, 0x22F4
    3c48:	10 91 f5 22 	lds	r17, 0x22F5
    3c4c:	00 0f       	add	r16, r16
    3c4e:	11 1f       	adc	r17, r17
    3c50:	00 0f       	add	r16, r16
    3c52:	11 1f       	adc	r17, r17
    3c54:	05 51       	subi	r16, 0x15	; 21
    3c56:	1d 4d       	sbci	r17, 0xDD	; 221
    3c58:	a5 01       	movw	r20, r10
    3c5a:	94 01       	movw	r18, r8
    3c5c:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3c60:	9b 01       	movw	r18, r22
    3c62:	ac 01       	movw	r20, r24
    3c64:	60 91 0c 23 	lds	r22, 0x230C
    3c68:	70 91 0d 23 	lds	r23, 0x230D
    3c6c:	80 91 0e 23 	lds	r24, 0x230E
    3c70:	90 91 0f 23 	lds	r25, 0x230F
    3c74:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    3c78:	f8 01       	movw	r30, r16
    3c7a:	65 87       	std	Z+13, r22	; 0x0d
    3c7c:	76 87       	std	Z+14, r23	; 0x0e
    3c7e:	87 87       	std	Z+15, r24	; 0x0f
    3c80:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3c82:	00 91 f6 22 	lds	r16, 0x22F6
    3c86:	10 91 f7 22 	lds	r17, 0x22F7
    3c8a:	00 0f       	add	r16, r16
    3c8c:	11 1f       	adc	r17, r17
    3c8e:	00 0f       	add	r16, r16
    3c90:	11 1f       	adc	r17, r17
    3c92:	05 51       	subi	r16, 0x15	; 21
    3c94:	1d 4d       	sbci	r17, 0xDD	; 221
    3c96:	f8 01       	movw	r30, r16
    3c98:	65 85       	ldd	r22, Z+13	; 0x0d
    3c9a:	76 85       	ldd	r23, Z+14	; 0x0e
    3c9c:	87 85       	ldd	r24, Z+15	; 0x0f
    3c9e:	90 89       	ldd	r25, Z+16	; 0x10
    3ca0:	20 91 20 23 	lds	r18, 0x2320
    3ca4:	30 91 21 23 	lds	r19, 0x2321
    3ca8:	40 91 22 23 	lds	r20, 0x2322
    3cac:	50 91 23 23 	lds	r21, 0x2323
    3cb0:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    3cb4:	f8 01       	movw	r30, r16
    3cb6:	65 87       	std	Z+13, r22	; 0x0d
    3cb8:	76 87       	std	Z+14, r23	; 0x0e
    3cba:	87 87       	std	Z+15, r24	; 0x0f
    3cbc:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cbe:	60 91 f8 22 	lds	r22, 0x22F8
    3cc2:	70 91 f9 22 	lds	r23, 0x22F9
    3cc6:	80 91 fa 22 	lds	r24, 0x22FA
    3cca:	90 91 fb 22 	lds	r25, 0x22FB
    3cce:	20 91 fc 22 	lds	r18, 0x22FC
    3cd2:	30 91 fd 22 	lds	r19, 0x22FD
    3cd6:	40 91 fe 22 	lds	r20, 0x22FE
    3cda:	50 91 ff 22 	lds	r21, 0x22FF
    3cde:	e0 90 00 23 	lds	r14, 0x2300
    3ce2:	f0 90 01 23 	lds	r15, 0x2301
    3ce6:	00 91 02 23 	lds	r16, 0x2302
    3cea:	10 91 03 23 	lds	r17, 0x2303
    3cee:	a0 90 18 23 	lds	r10, 0x2318
    3cf2:	b0 90 19 23 	lds	r11, 0x2319
    3cf6:	c0 90 1a 23 	lds	r12, 0x231A
    3cfa:	d0 90 1b 23 	lds	r13, 0x231B
    3cfe:	80 90 f0 22 	lds	r8, 0x22F0
    3d02:	90 90 f1 22 	lds	r9, 0x22F1
    3d06:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d0a:	20 91 ee 22 	lds	r18, 0x22EE
    3d0e:	30 91 ef 22 	lds	r19, 0x22EF
    3d12:	80 91 ec 22 	lds	r24, 0x22EC
    3d16:	90 91 ed 22 	lds	r25, 0x22ED
    3d1a:	82 17       	cp	r24, r18
    3d1c:	93 07       	cpc	r25, r19
    3d1e:	0c f0       	brlt	.+2      	; 0x3d22 <mc_arc_continue+0x1d4>
    3d20:	32 cf       	rjmp	.-412    	; 0x3b86 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d22:	10 92 eb 22 	sts	0x22EB, r1
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d2a:	c9 01       	movw	r24, r18
    3d2c:	1f 91       	pop	r17
    3d2e:	0f 91       	pop	r16
    3d30:	ff 90       	pop	r15
    3d32:	ef 90       	pop	r14
    3d34:	df 90       	pop	r13
    3d36:	cf 90       	pop	r12
    3d38:	bf 90       	pop	r11
    3d3a:	af 90       	pop	r10
    3d3c:	9f 90       	pop	r9
    3d3e:	8f 90       	pop	r8
    3d40:	08 95       	ret

00003d42 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d42:	2f 92       	push	r2
    3d44:	3f 92       	push	r3
    3d46:	4f 92       	push	r4
    3d48:	5f 92       	push	r5
    3d4a:	6f 92       	push	r6
    3d4c:	7f 92       	push	r7
    3d4e:	8f 92       	push	r8
    3d50:	9f 92       	push	r9
    3d52:	af 92       	push	r10
    3d54:	bf 92       	push	r11
    3d56:	cf 92       	push	r12
    3d58:	df 92       	push	r13
    3d5a:	ef 92       	push	r14
    3d5c:	ff 92       	push	r15
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	28 97       	sbiw	r28, 0x08	; 8
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	de bf       	out	0x3e, r29	; 62
    3d70:	69 83       	std	Y+1, r22	; 0x01
    3d72:	7a 83       	std	Y+2, r23	; 0x02
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	29 01       	movw	r4, r18
    3d7a:	3a 01       	movw	r6, r20
    3d7c:	ed 82       	std	Y+5, r14	; 0x05
    3d7e:	fe 82       	std	Y+6, r15	; 0x06
    3d80:	0f 83       	std	Y+7, r16	; 0x07
    3d82:	18 87       	std	Y+8, r17	; 0x08
    3d84:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3d86:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3d88:	60 93 10 23 	sts	0x2310, r22
    3d8c:	70 93 11 23 	sts	0x2311, r23
    3d90:	80 93 12 23 	sts	0x2312, r24
    3d94:	90 93 13 23 	sts	0x2313, r25
	ma.radius = radius;
    3d98:	e0 92 14 23 	sts	0x2314, r14
    3d9c:	f0 92 15 23 	sts	0x2315, r15
    3da0:	00 93 16 23 	sts	0x2316, r16
    3da4:	10 93 17 23 	sts	0x2317, r17
	ma.angular_travel = angular_travel;
    3da8:	20 93 24 23 	sts	0x2324, r18
    3dac:	30 93 25 23 	sts	0x2325, r19
    3db0:	40 93 26 23 	sts	0x2326, r20
    3db4:	50 93 27 23 	sts	0x2327, r21
	ma.linear_travel = linear_travel;
    3db8:	a0 92 28 23 	sts	0x2328, r10
    3dbc:	b0 92 29 23 	sts	0x2329, r11
    3dc0:	c0 92 2a 23 	sts	0x232A, r12
    3dc4:	d0 92 2b 23 	sts	0x232B, r13
	ma.feed_rate = feed_rate;
    3dc8:	8a a1       	ldd	r24, Y+34	; 0x22
    3dca:	9b a1       	ldd	r25, Y+35	; 0x23
    3dcc:	ac a1       	ldd	r26, Y+36	; 0x24
    3dce:	bd a1       	ldd	r27, Y+37	; 0x25
    3dd0:	80 93 18 23 	sts	0x2318, r24
    3dd4:	90 93 19 23 	sts	0x2319, r25
    3dd8:	a0 93 1a 23 	sts	0x231A, r26
    3ddc:	b0 93 1b 23 	sts	0x231B, r27
	ma.invert_feed_rate = invert_feed_rate;
    3de0:	ae a1       	ldd	r26, Y+38	; 0x26
    3de2:	bf a1       	ldd	r27, Y+39	; 0x27
    3de4:	a0 93 f0 22 	sts	0x22F0, r26
    3de8:	b0 93 f1 22 	sts	0x22F1, r27
	ma.axis_1 = axis_1;
    3dec:	80 92 f2 22 	sts	0x22F2, r8
    3df0:	90 92 f3 22 	sts	0x22F3, r9
	ma.axis_2 = axis_2;
    3df4:	20 92 f4 22 	sts	0x22F4, r2
    3df8:	30 92 f5 22 	sts	0x22F5, r3
	ma.axis_linear = axis_linear;
    3dfc:	e8 a1       	ldd	r30, Y+32	; 0x20
    3dfe:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e00:	e0 93 f6 22 	sts	0x22F6, r30
    3e04:	f0 93 f7 22 	sts	0x22F7, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e08:	ca 01       	movw	r24, r20
    3e0a:	b9 01       	movw	r22, r18
    3e0c:	a8 01       	movw	r20, r16
    3e0e:	97 01       	movw	r18, r14
    3e10:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3e14:	7b 01       	movw	r14, r22
    3e16:	8c 01       	movw	r16, r24
    3e18:	c6 01       	movw	r24, r12
    3e1a:	b5 01       	movw	r22, r10
    3e1c:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    3e20:	97 ff       	sbrs	r25, 7
    3e22:	07 c0       	rjmp	.+14     	; 0x3e32 <mc_arc+0xf0>
    3e24:	90 95       	com	r25
    3e26:	80 95       	com	r24
    3e28:	70 95       	com	r23
    3e2a:	61 95       	neg	r22
    3e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e30:	9f 4f       	sbci	r25, 0xFF	; 255
    3e32:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3e36:	9b 01       	movw	r18, r22
    3e38:	ac 01       	movw	r20, r24
    3e3a:	c8 01       	movw	r24, r16
    3e3c:	b7 01       	movw	r22, r14
    3e3e:	0e 94 ad 42 	call	0x855a	; 0x855a <hypot>
    3e42:	7b 01       	movw	r14, r22
    3e44:	8c 01       	movw	r16, r24
    3e46:	60 93 04 23 	sts	0x2304, r22
    3e4a:	70 93 05 23 	sts	0x2305, r23
    3e4e:	80 93 06 23 	sts	0x2306, r24
    3e52:	90 93 07 23 	sts	0x2307, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e56:	2a e0       	ldi	r18, 0x0A	; 10
    3e58:	37 ed       	ldi	r19, 0xD7	; 215
    3e5a:	43 e2       	ldi	r20, 0x23	; 35
    3e5c:	5c e3       	ldi	r21, 0x3C	; 60
    3e5e:	0e 94 b0 40 	call	0x8160	; 0x8160 <__cmpsf2>
    3e62:	88 23       	and	r24, r24
    3e64:	1c f4       	brge	.+6      	; 0x3e6c <mc_arc+0x12a>
    3e66:	22 e1       	ldi	r18, 0x12	; 18
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	fb c0       	rjmp	.+502    	; 0x4062 <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e6c:	c8 01       	movw	r24, r16
    3e6e:	b7 01       	movw	r22, r14
    3e70:	20 91 7f 22 	lds	r18, 0x227F
    3e74:	30 91 80 22 	lds	r19, 0x2280
    3e78:	40 91 81 22 	lds	r20, 0x2281
    3e7c:	50 91 82 22 	lds	r21, 0x2282
    3e80:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3e84:	0e 94 9d 40 	call	0x813a	; 0x813a <ceil>
    3e88:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    3e8c:	8b 01       	movw	r16, r22
    3e8e:	60 93 ec 22 	sts	0x22EC, r22
    3e92:	70 93 ed 22 	sts	0x22ED, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3e96:	8e a1       	ldd	r24, Y+38	; 0x26
    3e98:	9f a1       	ldd	r25, Y+39	; 0x27
    3e9a:	89 2b       	or	r24, r25
    3e9c:	b9 f0       	breq	.+46     	; 0x3ecc <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3e9e:	b8 01       	movw	r22, r16
    3ea0:	88 27       	eor	r24, r24
    3ea2:	77 fd       	sbrc	r23, 7
    3ea4:	80 95       	com	r24
    3ea6:	98 2f       	mov	r25, r24
    3ea8:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3eac:	9b 01       	movw	r18, r22
    3eae:	ac 01       	movw	r20, r24
    3eb0:	6a a1       	ldd	r22, Y+34	; 0x22
    3eb2:	7b a1       	ldd	r23, Y+35	; 0x23
    3eb4:	8c a1       	ldd	r24, Y+36	; 0x24
    3eb6:	9d a1       	ldd	r25, Y+37	; 0x25
    3eb8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3ebc:	60 93 18 23 	sts	0x2318, r22
    3ec0:	70 93 19 23 	sts	0x2319, r23
    3ec4:	80 93 1a 23 	sts	0x231A, r24
    3ec8:	90 93 1b 23 	sts	0x231B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3ecc:	b8 01       	movw	r22, r16
    3ece:	88 27       	eor	r24, r24
    3ed0:	77 fd       	sbrc	r23, 7
    3ed2:	80 95       	com	r24
    3ed4:	98 2f       	mov	r25, r24
    3ed6:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3eda:	7b 01       	movw	r14, r22
    3edc:	8c 01       	movw	r16, r24
    3ede:	c3 01       	movw	r24, r6
    3ee0:	b2 01       	movw	r22, r4
    3ee2:	a8 01       	movw	r20, r16
    3ee4:	97 01       	movw	r18, r14
    3ee6:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3eea:	60 93 1c 23 	sts	0x231C, r22
    3eee:	70 93 1d 23 	sts	0x231D, r23
    3ef2:	80 93 1e 23 	sts	0x231E, r24
    3ef6:	90 93 1f 23 	sts	0x231F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3efa:	c6 01       	movw	r24, r12
    3efc:	b5 01       	movw	r22, r10
    3efe:	a8 01       	movw	r20, r16
    3f00:	97 01       	movw	r18, r14
    3f02:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3f06:	60 93 20 23 	sts	0x2320, r22
    3f0a:	70 93 21 23 	sts	0x2321, r23
    3f0e:	80 93 22 23 	sts	0x2322, r24
    3f12:	90 93 23 23 	sts	0x2323, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f16:	69 81       	ldd	r22, Y+1	; 0x01
    3f18:	7a 81       	ldd	r23, Y+2	; 0x02
    3f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f1e:	0e 94 d5 43 	call	0x87aa	; 0x87aa <sin>
    3f22:	5b 01       	movw	r10, r22
    3f24:	6c 01       	movw	r12, r24
    3f26:	f4 01       	movw	r30, r8
    3f28:	ee 0f       	add	r30, r30
    3f2a:	ff 1f       	adc	r31, r31
    3f2c:	ee 0f       	add	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	ea 5a       	subi	r30, 0xAA	; 170
    3f32:	fe 4d       	sbci	r31, 0xDE	; 222
    3f34:	61 81       	ldd	r22, Z+1	; 0x01
    3f36:	72 81       	ldd	r23, Z+2	; 0x02
    3f38:	83 81       	ldd	r24, Z+3	; 0x03
    3f3a:	94 81       	ldd	r25, Z+4	; 0x04
    3f3c:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3f40:	f4 01       	movw	r30, r8
    3f42:	ee 0f       	add	r30, r30
    3f44:	ff 1f       	adc	r31, r31
    3f46:	e8 0d       	add	r30, r8
    3f48:	f9 1d       	adc	r31, r9
    3f4a:	13 e0       	ldi	r17, 0x03	; 3
    3f4c:	ee 0f       	add	r30, r30
    3f4e:	ff 1f       	adc	r31, r31
    3f50:	1a 95       	dec	r17
    3f52:	e1 f7       	brne	.-8      	; 0x3f4c <mc_arc+0x20a>
    3f54:	e3 58       	subi	r30, 0x83	; 131
    3f56:	fd 4d       	sbci	r31, 0xDD	; 221
    3f58:	21 a1       	ldd	r18, Z+33	; 0x21
    3f5a:	32 a1       	ldd	r19, Z+34	; 0x22
    3f5c:	43 a1       	ldd	r20, Z+35	; 0x23
    3f5e:	54 a1       	ldd	r21, Z+36	; 0x24
    3f60:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3f64:	7b 01       	movw	r14, r22
    3f66:	8c 01       	movw	r16, r24
    3f68:	c6 01       	movw	r24, r12
    3f6a:	b5 01       	movw	r22, r10
    3f6c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f6e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f70:	4f 81       	ldd	r20, Y+7	; 0x07
    3f72:	58 85       	ldd	r21, Y+8	; 0x08
    3f74:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3f78:	9b 01       	movw	r18, r22
    3f7a:	ac 01       	movw	r20, r24
    3f7c:	c8 01       	movw	r24, r16
    3f7e:	b7 01       	movw	r22, r14
    3f80:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    3f84:	60 93 08 23 	sts	0x2308, r22
    3f88:	70 93 09 23 	sts	0x2309, r23
    3f8c:	80 93 0a 23 	sts	0x230A, r24
    3f90:	90 93 0b 23 	sts	0x230B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3f94:	69 81       	ldd	r22, Y+1	; 0x01
    3f96:	7a 81       	ldd	r23, Y+2	; 0x02
    3f98:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9c:	0e 94 b4 40 	call	0x8168	; 0x8168 <cos>
    3fa0:	5b 01       	movw	r10, r22
    3fa2:	6c 01       	movw	r12, r24
    3fa4:	f1 01       	movw	r30, r2
    3fa6:	ee 0f       	add	r30, r30
    3fa8:	ff 1f       	adc	r31, r31
    3faa:	ee 0f       	add	r30, r30
    3fac:	ff 1f       	adc	r31, r31
    3fae:	ea 5a       	subi	r30, 0xAA	; 170
    3fb0:	fe 4d       	sbci	r31, 0xDE	; 222
    3fb2:	61 81       	ldd	r22, Z+1	; 0x01
    3fb4:	72 81       	ldd	r23, Z+2	; 0x02
    3fb6:	83 81       	ldd	r24, Z+3	; 0x03
    3fb8:	94 81       	ldd	r25, Z+4	; 0x04
    3fba:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    3fbe:	f1 01       	movw	r30, r2
    3fc0:	ee 0f       	add	r30, r30
    3fc2:	ff 1f       	adc	r31, r31
    3fc4:	e2 0d       	add	r30, r2
    3fc6:	f3 1d       	adc	r31, r3
    3fc8:	53 e0       	ldi	r21, 0x03	; 3
    3fca:	ee 0f       	add	r30, r30
    3fcc:	ff 1f       	adc	r31, r31
    3fce:	5a 95       	dec	r21
    3fd0:	e1 f7       	brne	.-8      	; 0x3fca <mc_arc+0x288>
    3fd2:	e3 58       	subi	r30, 0x83	; 131
    3fd4:	fd 4d       	sbci	r31, 0xDD	; 221
    3fd6:	21 a1       	ldd	r18, Z+33	; 0x21
    3fd8:	32 a1       	ldd	r19, Z+34	; 0x22
    3fda:	43 a1       	ldd	r20, Z+35	; 0x23
    3fdc:	54 a1       	ldd	r21, Z+36	; 0x24
    3fde:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    3fe2:	7b 01       	movw	r14, r22
    3fe4:	8c 01       	movw	r16, r24
    3fe6:	c6 01       	movw	r24, r12
    3fe8:	b5 01       	movw	r22, r10
    3fea:	2d 81       	ldd	r18, Y+5	; 0x05
    3fec:	3e 81       	ldd	r19, Y+6	; 0x06
    3fee:	4f 81       	ldd	r20, Y+7	; 0x07
    3ff0:	58 85       	ldd	r21, Y+8	; 0x08
    3ff2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    3ff6:	9b 01       	movw	r18, r22
    3ff8:	ac 01       	movw	r20, r24
    3ffa:	c8 01       	movw	r24, r16
    3ffc:	b7 01       	movw	r22, r14
    3ffe:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    4002:	60 93 0c 23 	sts	0x230C, r22
    4006:	70 93 0d 23 	sts	0x230D, r23
    400a:	80 93 0e 23 	sts	0x230E, r24
    400e:	90 93 0f 23 	sts	0x230F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4012:	e8 a1       	ldd	r30, Y+32	; 0x20
    4014:	f9 a1       	ldd	r31, Y+33	; 0x21
    4016:	ee 0f       	add	r30, r30
    4018:	ff 1f       	adc	r31, r31
    401a:	ee 0f       	add	r30, r30
    401c:	ff 1f       	adc	r31, r31
    401e:	8f 01       	movw	r16, r30
    4020:	05 51       	subi	r16, 0x15	; 21
    4022:	1d 4d       	sbci	r17, 0xDD	; 221
    4024:	ea 5a       	subi	r30, 0xAA	; 170
    4026:	fe 4d       	sbci	r31, 0xDE	; 222
    4028:	61 81       	ldd	r22, Z+1	; 0x01
    402a:	72 81       	ldd	r23, Z+2	; 0x02
    402c:	83 81       	ldd	r24, Z+3	; 0x03
    402e:	94 81       	ldd	r25, Z+4	; 0x04
    4030:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    4034:	20 91 ce 22 	lds	r18, 0x22CE
    4038:	30 91 cf 22 	lds	r19, 0x22CF
    403c:	40 91 d0 22 	lds	r20, 0x22D0
    4040:	50 91 d1 22 	lds	r21, 0x22D1
    4044:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4048:	d8 01       	movw	r26, r16
    404a:	1d 96       	adiw	r26, 0x0d	; 13
    404c:	6d 93       	st	X+, r22
    404e:	7d 93       	st	X+, r23
    4050:	8d 93       	st	X+, r24
    4052:	9c 93       	st	X, r25
    4054:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	80 93 eb 22 	sts	0x22EB, r24
	return (mc_arc_continue());
    405c:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <mc_arc_continue>
    4060:	9c 01       	movw	r18, r24
}
    4062:	c9 01       	movw	r24, r18
    4064:	28 96       	adiw	r28, 0x08	; 8
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	cf 91       	pop	r28
    406c:	df 91       	pop	r29
    406e:	1f 91       	pop	r17
    4070:	0f 91       	pop	r16
    4072:	ff 90       	pop	r15
    4074:	ef 90       	pop	r14
    4076:	df 90       	pop	r13
    4078:	cf 90       	pop	r12
    407a:	bf 90       	pop	r11
    407c:	af 90       	pop	r10
    407e:	9f 90       	pop	r9
    4080:	8f 90       	pop	r8
    4082:	7f 90       	pop	r7
    4084:	6f 90       	pop	r6
    4086:	5f 90       	pop	r5
    4088:	4f 90       	pop	r4
    408a:	3f 90       	pop	r3
    408c:	2f 90       	pop	r2
    408e:	08 95       	ret

00004090 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4090:	2f 92       	push	r2
    4092:	3f 92       	push	r3
    4094:	4f 92       	push	r4
    4096:	5f 92       	push	r5
    4098:	6f 92       	push	r6
    409a:	7f 92       	push	r7
    409c:	8f 92       	push	r8
    409e:	9f 92       	push	r9
    40a0:	af 92       	push	r10
    40a2:	bf 92       	push	r11
    40a4:	cf 92       	push	r12
    40a6:	df 92       	push	r13
    40a8:	ef 92       	push	r14
    40aa:	ff 92       	push	r15
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	df 93       	push	r29
    40b2:	cf 93       	push	r28
    40b4:	cd b7       	in	r28, 0x3d	; 61
    40b6:	de b7       	in	r29, 0x3e	; 62
    40b8:	28 97       	sbiw	r28, 0x08	; 8
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	de bf       	out	0x3e, r29	; 62
    40be:	69 83       	std	Y+1, r22	; 0x01
    40c0:	7a 83       	std	Y+2, r23	; 0x02
    40c2:	8b 83       	std	Y+3, r24	; 0x03
    40c4:	9c 83       	std	Y+4, r25	; 0x04
    40c6:	29 01       	movw	r4, r18
    40c8:	3a 01       	movw	r6, r20
    40ca:	ed 82       	std	Y+5, r14	; 0x05
    40cc:	fe 82       	std	Y+6, r15	; 0x06
    40ce:	0f 83       	std	Y+7, r16	; 0x07
    40d0:	18 87       	std	Y+8, r17	; 0x08
    40d2:	2e 8c       	ldd	r2, Y+30	; 0x1e
    40d4:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    40d6:	60 93 10 23 	sts	0x2310, r22
    40da:	70 93 11 23 	sts	0x2311, r23
    40de:	80 93 12 23 	sts	0x2312, r24
    40e2:	90 93 13 23 	sts	0x2313, r25
	ma.radius = radius;
    40e6:	e0 92 14 23 	sts	0x2314, r14
    40ea:	f0 92 15 23 	sts	0x2315, r15
    40ee:	00 93 16 23 	sts	0x2316, r16
    40f2:	10 93 17 23 	sts	0x2317, r17
	ma.angular_travel = angular_travel;
    40f6:	20 93 24 23 	sts	0x2324, r18
    40fa:	30 93 25 23 	sts	0x2325, r19
    40fe:	40 93 26 23 	sts	0x2326, r20
    4102:	50 93 27 23 	sts	0x2327, r21
	ma.linear_travel = linear_travel;
    4106:	a0 92 28 23 	sts	0x2328, r10
    410a:	b0 92 29 23 	sts	0x2329, r11
    410e:	c0 92 2a 23 	sts	0x232A, r12
    4112:	d0 92 2b 23 	sts	0x232B, r13
	ma.feed_rate = feed_rate;
    4116:	8a a1       	ldd	r24, Y+34	; 0x22
    4118:	9b a1       	ldd	r25, Y+35	; 0x23
    411a:	ac a1       	ldd	r26, Y+36	; 0x24
    411c:	bd a1       	ldd	r27, Y+37	; 0x25
    411e:	80 93 18 23 	sts	0x2318, r24
    4122:	90 93 19 23 	sts	0x2319, r25
    4126:	a0 93 1a 23 	sts	0x231A, r26
    412a:	b0 93 1b 23 	sts	0x231B, r27
	ma.invert_feed_rate = invert_feed_rate;
    412e:	ae a1       	ldd	r26, Y+38	; 0x26
    4130:	bf a1       	ldd	r27, Y+39	; 0x27
    4132:	a0 93 f0 22 	sts	0x22F0, r26
    4136:	b0 93 f1 22 	sts	0x22F1, r27
	ma.axis_1 = axis_1;
    413a:	80 92 f2 22 	sts	0x22F2, r8
    413e:	90 92 f3 22 	sts	0x22F3, r9
	ma.axis_2 = axis_2;
    4142:	20 92 f4 22 	sts	0x22F4, r2
    4146:	30 92 f5 22 	sts	0x22F5, r3
	ma.axis_linear = axis_linear;
    414a:	e8 a1       	ldd	r30, Y+32	; 0x20
    414c:	f9 a1       	ldd	r31, Y+33	; 0x21
    414e:	e0 93 f6 22 	sts	0x22F6, r30
    4152:	f0 93 f7 22 	sts	0x22F7, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4156:	ca 01       	movw	r24, r20
    4158:	b9 01       	movw	r22, r18
    415a:	a8 01       	movw	r20, r16
    415c:	97 01       	movw	r18, r14
    415e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    4162:	7b 01       	movw	r14, r22
    4164:	8c 01       	movw	r16, r24
    4166:	c6 01       	movw	r24, r12
    4168:	b5 01       	movw	r22, r10
    416a:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    416e:	97 ff       	sbrs	r25, 7
    4170:	07 c0       	rjmp	.+14     	; 0x4180 <mc_arc_blocking+0xf0>
    4172:	90 95       	com	r25
    4174:	80 95       	com	r24
    4176:	70 95       	com	r23
    4178:	61 95       	neg	r22
    417a:	7f 4f       	sbci	r23, 0xFF	; 255
    417c:	8f 4f       	sbci	r24, 0xFF	; 255
    417e:	9f 4f       	sbci	r25, 0xFF	; 255
    4180:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    4184:	9b 01       	movw	r18, r22
    4186:	ac 01       	movw	r20, r24
    4188:	c8 01       	movw	r24, r16
    418a:	b7 01       	movw	r22, r14
    418c:	0e 94 ad 42 	call	0x855a	; 0x855a <hypot>
    4190:	7b 01       	movw	r14, r22
    4192:	8c 01       	movw	r16, r24
    4194:	60 93 04 23 	sts	0x2304, r22
    4198:	70 93 05 23 	sts	0x2305, r23
    419c:	80 93 06 23 	sts	0x2306, r24
    41a0:	90 93 07 23 	sts	0x2307, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41a4:	2a e0       	ldi	r18, 0x0A	; 10
    41a6:	37 ed       	ldi	r19, 0xD7	; 215
    41a8:	43 e2       	ldi	r20, 0x23	; 35
    41aa:	5c e3       	ldi	r21, 0x3C	; 60
    41ac:	0e 94 b0 40 	call	0x8160	; 0x8160 <__cmpsf2>
    41b0:	88 23       	and	r24, r24
    41b2:	1c f4       	brge	.+6      	; 0x41ba <mc_arc_blocking+0x12a>
    41b4:	22 e1       	ldi	r18, 0x12	; 18
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	c7 c1       	rjmp	.+910    	; 0x4548 <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41ba:	c8 01       	movw	r24, r16
    41bc:	b7 01       	movw	r22, r14
    41be:	20 91 7f 22 	lds	r18, 0x227F
    41c2:	30 91 80 22 	lds	r19, 0x2280
    41c6:	40 91 81 22 	lds	r20, 0x2281
    41ca:	50 91 82 22 	lds	r21, 0x2282
    41ce:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    41d2:	0e 94 9d 40 	call	0x813a	; 0x813a <ceil>
    41d6:	0e 94 1f 41 	call	0x823e	; 0x823e <__fixsfsi>
    41da:	8b 01       	movw	r16, r22
    41dc:	60 93 ec 22 	sts	0x22EC, r22
    41e0:	70 93 ed 22 	sts	0x22ED, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    41e4:	2e a1       	ldd	r18, Y+38	; 0x26
    41e6:	3f a1       	ldd	r19, Y+39	; 0x27
    41e8:	23 2b       	or	r18, r19
    41ea:	b9 f0       	breq	.+46     	; 0x421a <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    41ec:	b8 01       	movw	r22, r16
    41ee:	88 27       	eor	r24, r24
    41f0:	77 fd       	sbrc	r23, 7
    41f2:	80 95       	com	r24
    41f4:	98 2f       	mov	r25, r24
    41f6:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    41fa:	9b 01       	movw	r18, r22
    41fc:	ac 01       	movw	r20, r24
    41fe:	6a a1       	ldd	r22, Y+34	; 0x22
    4200:	7b a1       	ldd	r23, Y+35	; 0x23
    4202:	8c a1       	ldd	r24, Y+36	; 0x24
    4204:	9d a1       	ldd	r25, Y+37	; 0x25
    4206:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    420a:	60 93 18 23 	sts	0x2318, r22
    420e:	70 93 19 23 	sts	0x2319, r23
    4212:	80 93 1a 23 	sts	0x231A, r24
    4216:	90 93 1b 23 	sts	0x231B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    421a:	b8 01       	movw	r22, r16
    421c:	88 27       	eor	r24, r24
    421e:	77 fd       	sbrc	r23, 7
    4220:	80 95       	com	r24
    4222:	98 2f       	mov	r25, r24
    4224:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    4228:	7b 01       	movw	r14, r22
    422a:	8c 01       	movw	r16, r24
    422c:	c3 01       	movw	r24, r6
    422e:	b2 01       	movw	r22, r4
    4230:	a8 01       	movw	r20, r16
    4232:	97 01       	movw	r18, r14
    4234:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4238:	60 93 1c 23 	sts	0x231C, r22
    423c:	70 93 1d 23 	sts	0x231D, r23
    4240:	80 93 1e 23 	sts	0x231E, r24
    4244:	90 93 1f 23 	sts	0x231F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4248:	c6 01       	movw	r24, r12
    424a:	b5 01       	movw	r22, r10
    424c:	a8 01       	movw	r20, r16
    424e:	97 01       	movw	r18, r14
    4250:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4254:	60 93 20 23 	sts	0x2320, r22
    4258:	70 93 21 23 	sts	0x2321, r23
    425c:	80 93 22 23 	sts	0x2322, r24
    4260:	90 93 23 23 	sts	0x2323, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4264:	69 81       	ldd	r22, Y+1	; 0x01
    4266:	7a 81       	ldd	r23, Y+2	; 0x02
    4268:	8b 81       	ldd	r24, Y+3	; 0x03
    426a:	9c 81       	ldd	r25, Y+4	; 0x04
    426c:	0e 94 d5 43 	call	0x87aa	; 0x87aa <sin>
    4270:	5b 01       	movw	r10, r22
    4272:	6c 01       	movw	r12, r24
    4274:	f4 01       	movw	r30, r8
    4276:	ee 0f       	add	r30, r30
    4278:	ff 1f       	adc	r31, r31
    427a:	ee 0f       	add	r30, r30
    427c:	ff 1f       	adc	r31, r31
    427e:	ea 5a       	subi	r30, 0xAA	; 170
    4280:	fe 4d       	sbci	r31, 0xDE	; 222
    4282:	61 81       	ldd	r22, Z+1	; 0x01
    4284:	72 81       	ldd	r23, Z+2	; 0x02
    4286:	83 81       	ldd	r24, Z+3	; 0x03
    4288:	94 81       	ldd	r25, Z+4	; 0x04
    428a:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    428e:	f4 01       	movw	r30, r8
    4290:	ee 0f       	add	r30, r30
    4292:	ff 1f       	adc	r31, r31
    4294:	e8 0d       	add	r30, r8
    4296:	f9 1d       	adc	r31, r9
    4298:	13 e0       	ldi	r17, 0x03	; 3
    429a:	ee 0f       	add	r30, r30
    429c:	ff 1f       	adc	r31, r31
    429e:	1a 95       	dec	r17
    42a0:	e1 f7       	brne	.-8      	; 0x429a <mc_arc_blocking+0x20a>
    42a2:	e3 58       	subi	r30, 0x83	; 131
    42a4:	fd 4d       	sbci	r31, 0xDD	; 221
    42a6:	21 a1       	ldd	r18, Z+33	; 0x21
    42a8:	32 a1       	ldd	r19, Z+34	; 0x22
    42aa:	43 a1       	ldd	r20, Z+35	; 0x23
    42ac:	54 a1       	ldd	r21, Z+36	; 0x24
    42ae:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    42b2:	7b 01       	movw	r14, r22
    42b4:	8c 01       	movw	r16, r24
    42b6:	c6 01       	movw	r24, r12
    42b8:	b5 01       	movw	r22, r10
    42ba:	2d 81       	ldd	r18, Y+5	; 0x05
    42bc:	3e 81       	ldd	r19, Y+6	; 0x06
    42be:	4f 81       	ldd	r20, Y+7	; 0x07
    42c0:	58 85       	ldd	r21, Y+8	; 0x08
    42c2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    42c6:	9b 01       	movw	r18, r22
    42c8:	ac 01       	movw	r20, r24
    42ca:	c8 01       	movw	r24, r16
    42cc:	b7 01       	movw	r22, r14
    42ce:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    42d2:	60 93 08 23 	sts	0x2308, r22
    42d6:	70 93 09 23 	sts	0x2309, r23
    42da:	80 93 0a 23 	sts	0x230A, r24
    42de:	90 93 0b 23 	sts	0x230B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    42e2:	69 81       	ldd	r22, Y+1	; 0x01
    42e4:	7a 81       	ldd	r23, Y+2	; 0x02
    42e6:	8b 81       	ldd	r24, Y+3	; 0x03
    42e8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ea:	0e 94 b4 40 	call	0x8168	; 0x8168 <cos>
    42ee:	5b 01       	movw	r10, r22
    42f0:	6c 01       	movw	r12, r24
    42f2:	f1 01       	movw	r30, r2
    42f4:	ee 0f       	add	r30, r30
    42f6:	ff 1f       	adc	r31, r31
    42f8:	ee 0f       	add	r30, r30
    42fa:	ff 1f       	adc	r31, r31
    42fc:	ea 5a       	subi	r30, 0xAA	; 170
    42fe:	fe 4d       	sbci	r31, 0xDE	; 222
    4300:	61 81       	ldd	r22, Z+1	; 0x01
    4302:	72 81       	ldd	r23, Z+2	; 0x02
    4304:	83 81       	ldd	r24, Z+3	; 0x03
    4306:	94 81       	ldd	r25, Z+4	; 0x04
    4308:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    430c:	f1 01       	movw	r30, r2
    430e:	ee 0f       	add	r30, r30
    4310:	ff 1f       	adc	r31, r31
    4312:	e2 0d       	add	r30, r2
    4314:	f3 1d       	adc	r31, r3
    4316:	53 e0       	ldi	r21, 0x03	; 3
    4318:	ee 0f       	add	r30, r30
    431a:	ff 1f       	adc	r31, r31
    431c:	5a 95       	dec	r21
    431e:	e1 f7       	brne	.-8      	; 0x4318 <mc_arc_blocking+0x288>
    4320:	e3 58       	subi	r30, 0x83	; 131
    4322:	fd 4d       	sbci	r31, 0xDD	; 221
    4324:	21 a1       	ldd	r18, Z+33	; 0x21
    4326:	32 a1       	ldd	r19, Z+34	; 0x22
    4328:	43 a1       	ldd	r20, Z+35	; 0x23
    432a:	54 a1       	ldd	r21, Z+36	; 0x24
    432c:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4330:	7b 01       	movw	r14, r22
    4332:	8c 01       	movw	r16, r24
    4334:	c6 01       	movw	r24, r12
    4336:	b5 01       	movw	r22, r10
    4338:	2d 81       	ldd	r18, Y+5	; 0x05
    433a:	3e 81       	ldd	r19, Y+6	; 0x06
    433c:	4f 81       	ldd	r20, Y+7	; 0x07
    433e:	58 85       	ldd	r21, Y+8	; 0x08
    4340:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    4344:	9b 01       	movw	r18, r22
    4346:	ac 01       	movw	r20, r24
    4348:	c8 01       	movw	r24, r16
    434a:	b7 01       	movw	r22, r14
    434c:	0e 94 10 40 	call	0x8020	; 0x8020 <__subsf3>
    4350:	60 93 0c 23 	sts	0x230C, r22
    4354:	70 93 0d 23 	sts	0x230D, r23
    4358:	80 93 0e 23 	sts	0x230E, r24
    435c:	90 93 0f 23 	sts	0x230F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4360:	e8 a1       	ldd	r30, Y+32	; 0x20
    4362:	f9 a1       	ldd	r31, Y+33	; 0x21
    4364:	ee 0f       	add	r30, r30
    4366:	ff 1f       	adc	r31, r31
    4368:	ee 0f       	add	r30, r30
    436a:	ff 1f       	adc	r31, r31
    436c:	8f 01       	movw	r16, r30
    436e:	05 51       	subi	r16, 0x15	; 21
    4370:	1d 4d       	sbci	r17, 0xDD	; 221
    4372:	ea 5a       	subi	r30, 0xAA	; 170
    4374:	fe 4d       	sbci	r31, 0xDE	; 222
    4376:	61 81       	ldd	r22, Z+1	; 0x01
    4378:	72 81       	ldd	r23, Z+2	; 0x02
    437a:	83 81       	ldd	r24, Z+3	; 0x03
    437c:	94 81       	ldd	r25, Z+4	; 0x04
    437e:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    4382:	20 91 ce 22 	lds	r18, 0x22CE
    4386:	30 91 cf 22 	lds	r19, 0x22CF
    438a:	40 91 d0 22 	lds	r20, 0x22D0
    438e:	50 91 d1 22 	lds	r21, 0x22D1
    4392:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4396:	d8 01       	movw	r26, r16
    4398:	1d 96       	adiw	r26, 0x0d	; 13
    439a:	6d 93       	st	X+, r22
    439c:	7d 93       	st	X+, r23
    439e:	8d 93       	st	X+, r24
    43a0:	9c 93       	st	X, r25
    43a2:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43a4:	10 92 ee 22 	sts	0x22EE, r1
    43a8:	10 92 ef 22 	sts	0x22EF, r1
    43ac:	bf c0       	rjmp	.+382    	; 0x452c <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43ae:	60 91 10 23 	lds	r22, 0x2310
    43b2:	70 91 11 23 	lds	r23, 0x2311
    43b6:	80 91 12 23 	lds	r24, 0x2312
    43ba:	90 91 13 23 	lds	r25, 0x2313
    43be:	20 91 1c 23 	lds	r18, 0x231C
    43c2:	30 91 1d 23 	lds	r19, 0x231D
    43c6:	40 91 1e 23 	lds	r20, 0x231E
    43ca:	50 91 1f 23 	lds	r21, 0x231F
    43ce:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    43d2:	7b 01       	movw	r14, r22
    43d4:	8c 01       	movw	r16, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	d8 01       	movw	r26, r16
    43da:	80 93 10 23 	sts	0x2310, r24
    43de:	90 93 11 23 	sts	0x2311, r25
    43e2:	a0 93 12 23 	sts	0x2312, r26
    43e6:	b0 93 13 23 	sts	0x2313, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    43ea:	b7 01       	movw	r22, r14
    43ec:	c8 01       	movw	r24, r16
    43ee:	0e 94 d5 43 	call	0x87aa	; 0x87aa <sin>
    43f2:	80 90 14 23 	lds	r8, 0x2314
    43f6:	90 90 15 23 	lds	r9, 0x2315
    43fa:	a0 90 16 23 	lds	r10, 0x2316
    43fe:	b0 90 17 23 	lds	r11, 0x2317
    4402:	c0 90 f2 22 	lds	r12, 0x22F2
    4406:	d0 90 f3 22 	lds	r13, 0x22F3
    440a:	cc 0c       	add	r12, r12
    440c:	dd 1c       	adc	r13, r13
    440e:	cc 0c       	add	r12, r12
    4410:	dd 1c       	adc	r13, r13
    4412:	eb ee       	ldi	r30, 0xEB	; 235
    4414:	f2 e2       	ldi	r31, 0x22	; 34
    4416:	ce 0e       	add	r12, r30
    4418:	df 1e       	adc	r13, r31
    441a:	a5 01       	movw	r20, r10
    441c:	94 01       	movw	r18, r8
    441e:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    4422:	9b 01       	movw	r18, r22
    4424:	ac 01       	movw	r20, r24
    4426:	60 91 08 23 	lds	r22, 0x2308
    442a:	70 91 09 23 	lds	r23, 0x2309
    442e:	80 91 0a 23 	lds	r24, 0x230A
    4432:	90 91 0b 23 	lds	r25, 0x230B
    4436:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    443a:	d6 01       	movw	r26, r12
    443c:	1d 96       	adiw	r26, 0x0d	; 13
    443e:	6d 93       	st	X+, r22
    4440:	7d 93       	st	X+, r23
    4442:	8d 93       	st	X+, r24
    4444:	9c 93       	st	X, r25
    4446:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4448:	b7 01       	movw	r22, r14
    444a:	c8 01       	movw	r24, r16
    444c:	0e 94 b4 40 	call	0x8168	; 0x8168 <cos>
    4450:	00 91 f4 22 	lds	r16, 0x22F4
    4454:	10 91 f5 22 	lds	r17, 0x22F5
    4458:	00 0f       	add	r16, r16
    445a:	11 1f       	adc	r17, r17
    445c:	00 0f       	add	r16, r16
    445e:	11 1f       	adc	r17, r17
    4460:	05 51       	subi	r16, 0x15	; 21
    4462:	1d 4d       	sbci	r17, 0xDD	; 221
    4464:	a5 01       	movw	r20, r10
    4466:	94 01       	movw	r18, r8
    4468:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    446c:	9b 01       	movw	r18, r22
    446e:	ac 01       	movw	r20, r24
    4470:	60 91 0c 23 	lds	r22, 0x230C
    4474:	70 91 0d 23 	lds	r23, 0x230D
    4478:	80 91 0e 23 	lds	r24, 0x230E
    447c:	90 91 0f 23 	lds	r25, 0x230F
    4480:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    4484:	f8 01       	movw	r30, r16
    4486:	65 87       	std	Z+13, r22	; 0x0d
    4488:	76 87       	std	Z+14, r23	; 0x0e
    448a:	87 87       	std	Z+15, r24	; 0x0f
    448c:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    448e:	00 91 f6 22 	lds	r16, 0x22F6
    4492:	10 91 f7 22 	lds	r17, 0x22F7
    4496:	00 0f       	add	r16, r16
    4498:	11 1f       	adc	r17, r17
    449a:	00 0f       	add	r16, r16
    449c:	11 1f       	adc	r17, r17
    449e:	05 51       	subi	r16, 0x15	; 21
    44a0:	1d 4d       	sbci	r17, 0xDD	; 221
    44a2:	d8 01       	movw	r26, r16
    44a4:	1d 96       	adiw	r26, 0x0d	; 13
    44a6:	6d 91       	ld	r22, X+
    44a8:	7d 91       	ld	r23, X+
    44aa:	8d 91       	ld	r24, X+
    44ac:	9c 91       	ld	r25, X
    44ae:	50 97       	sbiw	r26, 0x10	; 16
    44b0:	20 91 20 23 	lds	r18, 0x2320
    44b4:	30 91 21 23 	lds	r19, 0x2321
    44b8:	40 91 22 23 	lds	r20, 0x2322
    44bc:	50 91 23 23 	lds	r21, 0x2323
    44c0:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    44c4:	f8 01       	movw	r30, r16
    44c6:	65 87       	std	Z+13, r22	; 0x0d
    44c8:	76 87       	std	Z+14, r23	; 0x0e
    44ca:	87 87       	std	Z+15, r24	; 0x0f
    44cc:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44ce:	60 91 f8 22 	lds	r22, 0x22F8
    44d2:	70 91 f9 22 	lds	r23, 0x22F9
    44d6:	80 91 fa 22 	lds	r24, 0x22FA
    44da:	90 91 fb 22 	lds	r25, 0x22FB
    44de:	20 91 fc 22 	lds	r18, 0x22FC
    44e2:	30 91 fd 22 	lds	r19, 0x22FD
    44e6:	40 91 fe 22 	lds	r20, 0x22FE
    44ea:	50 91 ff 22 	lds	r21, 0x22FF
    44ee:	e0 90 00 23 	lds	r14, 0x2300
    44f2:	f0 90 01 23 	lds	r15, 0x2301
    44f6:	00 91 02 23 	lds	r16, 0x2302
    44fa:	10 91 03 23 	lds	r17, 0x2303
    44fe:	a0 90 18 23 	lds	r10, 0x2318
    4502:	b0 90 19 23 	lds	r11, 0x2319
    4506:	c0 90 1a 23 	lds	r12, 0x231A
    450a:	d0 90 1b 23 	lds	r13, 0x231B
    450e:	80 90 f0 22 	lds	r8, 0x22F0
    4512:	90 90 f1 22 	lds	r9, 0x22F1
    4516:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    451a:	80 91 ee 22 	lds	r24, 0x22EE
    451e:	90 91 ef 22 	lds	r25, 0x22EF
    4522:	01 96       	adiw	r24, 0x01	; 1
    4524:	80 93 ee 22 	sts	0x22EE, r24
    4528:	90 93 ef 22 	sts	0x22EF, r25
    452c:	20 91 ee 22 	lds	r18, 0x22EE
    4530:	30 91 ef 22 	lds	r19, 0x22EF
    4534:	80 91 ec 22 	lds	r24, 0x22EC
    4538:	90 91 ed 22 	lds	r25, 0x22ED
    453c:	82 17       	cp	r24, r18
    453e:	93 07       	cpc	r25, r19
    4540:	0c f0       	brlt	.+2      	; 0x4544 <mc_arc_blocking+0x4b4>
    4542:	35 cf       	rjmp	.-406    	; 0x43ae <mc_arc_blocking+0x31e>
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4548:	c9 01       	movw	r24, r18
    454a:	28 96       	adiw	r28, 0x08	; 8
    454c:	cd bf       	out	0x3d, r28	; 61
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	cf 91       	pop	r28
    4552:	df 91       	pop	r29
    4554:	1f 91       	pop	r17
    4556:	0f 91       	pop	r16
    4558:	ff 90       	pop	r15
    455a:	ef 90       	pop	r14
    455c:	df 90       	pop	r13
    455e:	cf 90       	pop	r12
    4560:	bf 90       	pop	r11
    4562:	af 90       	pop	r10
    4564:	9f 90       	pop	r9
    4566:	8f 90       	pop	r8
    4568:	7f 90       	pop	r7
    456a:	6f 90       	pop	r6
    456c:	5f 90       	pop	r5
    456e:	4f 90       	pop	r4
    4570:	3f 90       	pop	r3
    4572:	2f 90       	pop	r2
    4574:	08 95       	ret

00004576 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4576:	2f 92       	push	r2
    4578:	3f 92       	push	r3
    457a:	4f 92       	push	r4
    457c:	5f 92       	push	r5
    457e:	6f 92       	push	r6
    4580:	7f 92       	push	r7
    4582:	8f 92       	push	r8
    4584:	9f 92       	push	r9
    4586:	af 92       	push	r10
    4588:	bf 92       	push	r11
    458a:	cf 92       	push	r12
    458c:	df 92       	push	r13
    458e:	ef 92       	push	r14
    4590:	ff 92       	push	r15
    4592:	0f 93       	push	r16
    4594:	1f 93       	push	r17
    4596:	df 93       	push	r29
    4598:	cf 93       	push	r28
    459a:	cd b7       	in	r28, 0x3d	; 61
    459c:	de b7       	in	r29, 0x3e	; 62
    459e:	6c 97       	sbiw	r28, 0x1c	; 28
    45a0:	cd bf       	out	0x3d, r28	; 61
    45a2:	de bf       	out	0x3e, r29	; 62
    45a4:	2d 8b       	std	Y+21, r18	; 0x15
    45a6:	3e 8b       	std	Y+22, r19	; 0x16
    45a8:	4f 8b       	std	Y+23, r20	; 0x17
    45aa:	58 8f       	std	Y+24, r21	; 0x18
    45ac:	a9 8e       	std	Y+25, r10	; 0x19
    45ae:	ba 8e       	std	Y+26, r11	; 0x1a
    45b0:	cb 8e       	std	Y+27, r12	; 0x1b
    45b2:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45b4:	20 91 9e 22 	lds	r18, 0x229E
    45b8:	30 91 9f 22 	lds	r19, 0x229F
    45bc:	40 91 a0 22 	lds	r20, 0x22A0
    45c0:	50 91 a1 22 	lds	r21, 0x22A1
    45c4:	29 8b       	std	Y+17, r18	; 0x11
    45c6:	3a 8b       	std	Y+18, r19	; 0x12
    45c8:	4b 8b       	std	Y+19, r20	; 0x13
    45ca:	5c 8b       	std	Y+20, r21	; 0x14
    45cc:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    45d0:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    45d4:	2b 01       	movw	r4, r22
    45d6:	3c 01       	movw	r6, r24
    45d8:	40 92 63 21 	sts	0x2163, r4
    45dc:	50 92 64 21 	sts	0x2164, r5
    45e0:	60 92 65 21 	sts	0x2165, r6
    45e4:	70 92 66 21 	sts	0x2166, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    45e8:	80 91 b6 22 	lds	r24, 0x22B6
    45ec:	90 91 b7 22 	lds	r25, 0x22B7
    45f0:	a0 91 b8 22 	lds	r26, 0x22B8
    45f4:	b0 91 b9 22 	lds	r27, 0x22B9
    45f8:	8d 87       	std	Y+13, r24	; 0x0d
    45fa:	9e 87       	std	Y+14, r25	; 0x0e
    45fc:	af 87       	std	Y+15, r26	; 0x0f
    45fe:	b8 8b       	std	Y+16, r27	; 0x10
    4600:	6d 89       	ldd	r22, Y+21	; 0x15
    4602:	7e 89       	ldd	r23, Y+22	; 0x16
    4604:	8f 89       	ldd	r24, Y+23	; 0x17
    4606:	98 8d       	ldd	r25, Y+24	; 0x18
    4608:	2d 85       	ldd	r18, Y+13	; 0x0d
    460a:	3e 85       	ldd	r19, Y+14	; 0x0e
    460c:	4f 85       	ldd	r20, Y+15	; 0x0f
    460e:	58 89       	ldd	r21, Y+16	; 0x10
    4610:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    4614:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    4618:	5b 01       	movw	r10, r22
    461a:	6c 01       	movw	r12, r24
    461c:	a0 92 67 21 	sts	0x2167, r10
    4620:	b0 92 68 21 	sts	0x2168, r11
    4624:	c0 92 69 21 	sts	0x2169, r12
    4628:	d0 92 6a 21 	sts	0x216A, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    462c:	20 91 ce 22 	lds	r18, 0x22CE
    4630:	30 91 cf 22 	lds	r19, 0x22CF
    4634:	40 91 d0 22 	lds	r20, 0x22D0
    4638:	50 91 d1 22 	lds	r21, 0x22D1
    463c:	29 87       	std	Y+9, r18	; 0x09
    463e:	3a 87       	std	Y+10, r19	; 0x0a
    4640:	4b 87       	std	Y+11, r20	; 0x0b
    4642:	5c 87       	std	Y+12, r21	; 0x0c
    4644:	c8 01       	movw	r24, r16
    4646:	b7 01       	movw	r22, r14
    4648:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    464c:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    4650:	9b 01       	movw	r18, r22
    4652:	ac 01       	movw	r20, r24
    4654:	20 93 6b 21 	sts	0x216B, r18
    4658:	30 93 6c 21 	sts	0x216C, r19
    465c:	40 93 6d 21 	sts	0x216D, r20
    4660:	50 93 6e 21 	sts	0x216E, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4664:	80 91 57 21 	lds	r24, 0x2157
    4668:	90 91 58 21 	lds	r25, 0x2158
    466c:	a0 91 59 21 	lds	r26, 0x2159
    4670:	b0 91 5a 21 	lds	r27, 0x215A
    4674:	83 01       	movw	r16, r6
    4676:	72 01       	movw	r14, r4
    4678:	e8 1a       	sub	r14, r24
    467a:	f9 0a       	sbc	r15, r25
    467c:	0a 0b       	sbc	r16, r26
    467e:	1b 0b       	sbc	r17, r27
    4680:	ed 82       	std	Y+5, r14	; 0x05
    4682:	fe 82       	std	Y+6, r15	; 0x06
    4684:	0f 83       	std	Y+7, r16	; 0x07
    4686:	18 87       	std	Y+8, r17	; 0x08
    4688:	e0 92 6f 21 	sts	0x216F, r14
    468c:	f0 92 70 21 	sts	0x2170, r15
    4690:	00 93 71 21 	sts	0x2171, r16
    4694:	10 93 72 21 	sts	0x2172, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4698:	80 91 5b 21 	lds	r24, 0x215B
    469c:	90 91 5c 21 	lds	r25, 0x215C
    46a0:	a0 91 5d 21 	lds	r26, 0x215D
    46a4:	b0 91 5e 21 	lds	r27, 0x215E
    46a8:	86 01       	movw	r16, r12
    46aa:	75 01       	movw	r14, r10
    46ac:	e8 1a       	sub	r14, r24
    46ae:	f9 0a       	sbc	r15, r25
    46b0:	0a 0b       	sbc	r16, r26
    46b2:	1b 0b       	sbc	r17, r27
    46b4:	e9 82       	std	Y+1, r14	; 0x01
    46b6:	fa 82       	std	Y+2, r15	; 0x02
    46b8:	0b 83       	std	Y+3, r16	; 0x03
    46ba:	1c 83       	std	Y+4, r17	; 0x04
    46bc:	e0 92 73 21 	sts	0x2173, r14
    46c0:	f0 92 74 21 	sts	0x2174, r15
    46c4:	00 93 75 21 	sts	0x2175, r16
    46c8:	10 93 76 21 	sts	0x2176, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46cc:	80 91 5f 21 	lds	r24, 0x215F
    46d0:	90 91 60 21 	lds	r25, 0x2160
    46d4:	a0 91 61 21 	lds	r26, 0x2161
    46d8:	b0 91 62 21 	lds	r27, 0x2162
    46dc:	19 01       	movw	r2, r18
    46de:	2a 01       	movw	r4, r20
    46e0:	28 1a       	sub	r2, r24
    46e2:	39 0a       	sbc	r3, r25
    46e4:	4a 0a       	sbc	r4, r26
    46e6:	5b 0a       	sbc	r5, r27
    46e8:	20 92 77 21 	sts	0x2177, r2
    46ec:	30 92 78 21 	sts	0x2178, r3
    46f0:	40 92 79 21 	sts	0x2179, r4
    46f4:	50 92 7a 21 	sts	0x217A, r5

	if (invert_feed_rate) {
    46f8:	89 28       	or	r8, r9
    46fa:	59 f0       	breq	.+22     	; 0x4712 <mc_line_blocking+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    46fc:	60 ec       	ldi	r22, 0xC0	; 192
    46fe:	71 ee       	ldi	r23, 0xE1	; 225
    4700:	84 e6       	ldi	r24, 0x64	; 100
    4702:	9c e4       	ldi	r25, 0x4C	; 76
    4704:	29 8d       	ldd	r18, Y+25	; 0x19
    4706:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4708:	4b 8d       	ldd	r20, Y+27	; 0x1b
    470a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    470c:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4710:	4e c0       	rjmp	.+156    	; 0x47ae <mc_line_blocking+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4712:	6d 81       	ldd	r22, Y+5	; 0x05
    4714:	7e 81       	ldd	r23, Y+6	; 0x06
    4716:	8f 81       	ldd	r24, Y+7	; 0x07
    4718:	98 85       	ldd	r25, Y+8	; 0x08
    471a:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    471e:	29 89       	ldd	r18, Y+17	; 0x11
    4720:	3a 89       	ldd	r19, Y+18	; 0x12
    4722:	4b 89       	ldd	r20, Y+19	; 0x13
    4724:	5c 89       	ldd	r21, Y+20	; 0x14
    4726:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    472a:	0e 94 1d 44 	call	0x883a	; 0x883a <square>
    472e:	3b 01       	movw	r6, r22
    4730:	4c 01       	movw	r8, r24
    4732:	69 81       	ldd	r22, Y+1	; 0x01
    4734:	7a 81       	ldd	r23, Y+2	; 0x02
    4736:	8b 81       	ldd	r24, Y+3	; 0x03
    4738:	9c 81       	ldd	r25, Y+4	; 0x04
    473a:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    473e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4740:	3e 85       	ldd	r19, Y+14	; 0x0e
    4742:	4f 85       	ldd	r20, Y+15	; 0x0f
    4744:	58 89       	ldd	r21, Y+16	; 0x10
    4746:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    474a:	0e 94 1d 44 	call	0x883a	; 0x883a <square>
    474e:	5b 01       	movw	r10, r22
    4750:	6c 01       	movw	r12, r24
    4752:	c2 01       	movw	r24, r4
    4754:	b1 01       	movw	r22, r2
    4756:	0e 94 52 41 	call	0x82a4	; 0x82a4 <__floatsisf>
    475a:	29 85       	ldd	r18, Y+9	; 0x09
    475c:	3a 85       	ldd	r19, Y+10	; 0x0a
    475e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4760:	5c 85       	ldd	r21, Y+12	; 0x0c
    4762:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    4766:	0e 94 1d 44 	call	0x883a	; 0x883a <square>
    476a:	7b 01       	movw	r14, r22
    476c:	8c 01       	movw	r16, r24
    476e:	c4 01       	movw	r24, r8
    4770:	b3 01       	movw	r22, r6
    4772:	a6 01       	movw	r20, r12
    4774:	95 01       	movw	r18, r10
    4776:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    477a:	a8 01       	movw	r20, r16
    477c:	97 01       	movw	r18, r14
    477e:	0e 94 11 40 	call	0x8022	; 0x8022 <__addsf3>
    4782:	0e 94 df 43 	call	0x87be	; 0x87be <sqrt>
    4786:	60 93 7f 21 	sts	0x217F, r22
    478a:	70 93 80 21 	sts	0x2180, r23
    478e:	80 93 81 21 	sts	0x2181, r24
    4792:	90 93 82 21 	sts	0x2182, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4796:	29 8d       	ldd	r18, Y+25	; 0x19
    4798:	3a 8d       	ldd	r19, Y+26	; 0x1a
    479a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    479c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    479e:	0e 94 b7 40 	call	0x816e	; 0x816e <__divsf3>
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	34 e2       	ldi	r19, 0x24	; 36
    47a6:	44 e7       	ldi	r20, 0x74	; 116
    47a8:	59 e4       	ldi	r21, 0x49	; 73
    47aa:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    47ae:	0e 94 42 43 	call	0x8684	; 0x8684 <lround>
    47b2:	60 93 7b 21 	sts	0x217B, r22
    47b6:	70 93 7c 21 	sts	0x217C, r23
    47ba:	80 93 7d 21 	sts	0x217D, r24
    47be:	90 93 7e 21 	sts	0x217E, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    47c2:	a0 90 7b 21 	lds	r10, 0x217B
    47c6:	b0 90 7c 21 	lds	r11, 0x217C
    47ca:	c0 90 7d 21 	lds	r12, 0x217D
    47ce:	d0 90 7e 21 	lds	r13, 0x217E
    47d2:	6d 81       	ldd	r22, Y+5	; 0x05
    47d4:	7e 81       	ldd	r23, Y+6	; 0x06
    47d6:	8f 81       	ldd	r24, Y+7	; 0x07
    47d8:	98 85       	ldd	r25, Y+8	; 0x08
    47da:	29 81       	ldd	r18, Y+1	; 0x01
    47dc:	3a 81       	ldd	r19, Y+2	; 0x02
    47de:	4b 81       	ldd	r20, Y+3	; 0x03
    47e0:	5c 81       	ldd	r21, Y+4	; 0x04
    47e2:	82 01       	movw	r16, r4
    47e4:	71 01       	movw	r14, r2
    47e6:	0e 94 b6 2c 	call	0x596c	; 0x596c <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    47ea:	e7 e5       	ldi	r30, 0x57	; 87
    47ec:	f1 e2       	ldi	r31, 0x21	; 33
    47ee:	df 01       	movw	r26, r30
    47f0:	1c 96       	adiw	r26, 0x0c	; 12
    47f2:	8c e0       	ldi	r24, 0x0C	; 12
    47f4:	0d 90       	ld	r0, X+
    47f6:	01 92       	st	Z+, r0
    47f8:	81 50       	subi	r24, 0x01	; 1
    47fa:	e1 f7       	brne	.-8      	; 0x47f4 <mc_line_blocking+0x27e>
	return (TG_OK);
}
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	6c 96       	adiw	r28, 0x1c	; 28
    4802:	cd bf       	out	0x3d, r28	; 61
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	cf 91       	pop	r28
    4808:	df 91       	pop	r29
    480a:	1f 91       	pop	r17
    480c:	0f 91       	pop	r16
    480e:	ff 90       	pop	r15
    4810:	ef 90       	pop	r14
    4812:	df 90       	pop	r13
    4814:	cf 90       	pop	r12
    4816:	bf 90       	pop	r11
    4818:	af 90       	pop	r10
    481a:	9f 90       	pop	r9
    481c:	8f 90       	pop	r8
    481e:	7f 90       	pop	r7
    4820:	6f 90       	pop	r6
    4822:	5f 90       	pop	r5
    4824:	4f 90       	pop	r4
    4826:	3f 90       	pop	r3
    4828:	2f 90       	pop	r2
    482a:	08 95       	ret

0000482c <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    482c:	e0 e6       	ldi	r30, 0x60	; 96
    482e:	f6 e0       	ldi	r31, 0x06	; 6
    4830:	80 e4       	ldi	r24, 0x40	; 64
    4832:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4834:	80 e8       	ldi	r24, 0x80	; 128
    4836:	81 83       	std	Z+1, r24	; 0x01
}
    4838:	08 95       	ret

0000483a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    483a:	97 fd       	sbrc	r25, 7
    483c:	05 c0       	rjmp	.+10     	; 0x4848 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    483e:	80 e8       	ldi	r24, 0x80	; 128
    4840:	e0 e6       	ldi	r30, 0x60	; 96
    4842:	f6 e0       	ldi	r31, 0x06	; 6
    4844:	85 83       	std	Z+5, r24	; 0x05
    4846:	04 c0       	rjmp	.+8      	; 0x4850 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4848:	80 e8       	ldi	r24, 0x80	; 128
    484a:	e0 e6       	ldi	r30, 0x60	; 96
    484c:	f6 e0       	ldi	r31, 0x06	; 6
    484e:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4850:	80 e4       	ldi	r24, 0x40	; 64
    4852:	e0 e6       	ldi	r30, 0x60	; 96
    4854:	f6 e0       	ldi	r31, 0x06	; 6
    4856:	85 83       	std	Z+5, r24	; 0x05
}
    4858:	08 95       	ret

0000485a <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    485a:	80 e4       	ldi	r24, 0x40	; 64
    485c:	e0 e6       	ldi	r30, 0x60	; 96
    485e:	f6 e0       	ldi	r31, 0x06	; 6
    4860:	86 83       	std	Z+6, r24	; 0x06
}
    4862:	08 95       	ret

00004864 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4864:	cf 93       	push	r28
    4866:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4868:	10 92 3a 22 	sts	0x223A, r1
	ax.exec_mutex = FALSE;
    486c:	10 92 39 22 	sts	0x2239, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	96 e0       	ldi	r25, 0x06	; 6
    4874:	80 93 49 22 	sts	0x2249, r24
    4878:	90 93 4a 22 	sts	0x224A, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    487c:	80 ea       	ldi	r24, 0xA0	; 160
    487e:	96 e0       	ldi	r25, 0x06	; 6
    4880:	80 93 59 22 	sts	0x2259, r24
    4884:	90 93 5a 22 	sts	0x225A, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    4888:	80 e8       	ldi	r24, 0x80	; 128
    488a:	96 e0       	ldi	r25, 0x06	; 6
    488c:	80 93 69 22 	sts	0x2269, r24
    4890:	90 93 6a 22 	sts	0x226A, r25
	ax.a[A].port = &A_MOTOR_PORT;
    4894:	80 e6       	ldi	r24, 0x60	; 96
    4896:	96 e0       	ldi	r25, 0x06	; 6
    4898:	80 93 79 22 	sts	0x2279, r24
    489c:	90 93 7a 22 	sts	0x227A, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	98 e0       	ldi	r25, 0x08	; 8
    48a4:	80 93 4b 22 	sts	0x224B, r24
    48a8:	90 93 4c 22 	sts	0x224C, r25
	ax.a[Y].timer = &Y_TIMER;
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	99 e0       	ldi	r25, 0x09	; 9
    48b0:	80 93 5b 22 	sts	0x225B, r24
    48b4:	90 93 5c 22 	sts	0x225C, r25
	ax.a[Z].timer = &Z_TIMER;
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	9a e0       	ldi	r25, 0x0A	; 10
    48bc:	80 93 6b 22 	sts	0x226B, r24
    48c0:	90 93 6c 22 	sts	0x226C, r25
	ax.a[A].timer = &A_TIMER;
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	9b e0       	ldi	r25, 0x0B	; 11
    48c8:	80 93 7b 22 	sts	0x227B, r24
    48cc:	90 93 7c 22 	sts	0x227C, r25
    48d0:	cd e8       	ldi	r28, 0x8D	; 141
    48d2:	d2 e2       	ldi	r29, 0x22	; 34
    48d4:	a7 e4       	ldi	r26, 0x47	; 71
    48d6:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48d8:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48da:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48dc:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48de:	88 81       	ld	r24, Y
    48e0:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48e2:	12 96       	adiw	r26, 0x02	; 2
    48e4:	ed 91       	ld	r30, X+
    48e6:	fc 91       	ld	r31, X
    48e8:	13 97       	sbiw	r26, 0x03	; 3
    48ea:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    48ec:	12 96       	adiw	r26, 0x02	; 2
    48ee:	ed 91       	ld	r30, X+
    48f0:	fc 91       	ld	r31, X
    48f2:	13 97       	sbiw	r26, 0x03	; 3
    48f4:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    48f6:	12 96       	adiw	r26, 0x02	; 2
    48f8:	ed 91       	ld	r30, X+
    48fa:	fc 91       	ld	r31, X
    48fc:	13 97       	sbiw	r26, 0x03	; 3
    48fe:	84 81       	ldd	r24, Z+4	; 0x04
    4900:	88 61       	ori	r24, 0x18	; 24
    4902:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4904:	12 96       	adiw	r26, 0x02	; 2
    4906:	ed 91       	ld	r30, X+
    4908:	fc 91       	ld	r31, X
    490a:	13 97       	sbiw	r26, 0x03	; 3
    490c:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    490e:	14 96       	adiw	r26, 0x04	; 4
    4910:	ed 91       	ld	r30, X+
    4912:	fc 91       	ld	r31, X
    4914:	15 97       	sbiw	r26, 0x05	; 5
    4916:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4918:	14 96       	adiw	r26, 0x04	; 4
    491a:	ed 91       	ld	r30, X+
    491c:	fc 91       	ld	r31, X
    491e:	15 97       	sbiw	r26, 0x05	; 5
    4920:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4922:	14 96       	adiw	r26, 0x04	; 4
    4924:	ed 91       	ld	r30, X+
    4926:	fc 91       	ld	r31, X
    4928:	15 97       	sbiw	r26, 0x05	; 5
    492a:	96 83       	std	Z+6, r25	; 0x06
    492c:	68 96       	adiw	r28, 0x18	; 24
    492e:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    4930:	82 e2       	ldi	r24, 0x22	; 34
    4932:	cd 3e       	cpi	r28, 0xED	; 237
    4934:	d8 07       	cpc	r29, r24
    4936:	99 f6       	brne	.-90     	; 0x48de <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	08 95       	ret

0000493e <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    493e:	e8 2f       	mov	r30, r24
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	84 e0       	ldi	r24, 0x04	; 4
    4944:	ee 0f       	add	r30, r30
    4946:	ff 1f       	adc	r31, r31
    4948:	8a 95       	dec	r24
    494a:	e1 f7       	brne	.-8      	; 0x4944 <st_set_polarity+0x6>
    494c:	e7 5c       	subi	r30, 0xC7	; 199
    494e:	fd 4d       	sbci	r31, 0xDD	; 221
    4950:	66 87       	std	Z+14, r22	; 0x0e
}
    4952:	08 95       	ret

00004954 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4954:	2d e3       	ldi	r18, 0x3D	; 61
    4956:	32 e2       	ldi	r19, 0x22	; 34
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	90 e1       	ldi	r25, 0x10	; 16
    495c:	a0 e0       	ldi	r26, 0x00	; 0
    495e:	b0 e0       	ldi	r27, 0x00	; 0
    4960:	80 93 3d 22 	sts	0x223D, r24
    4964:	90 93 3e 22 	sts	0x223E, r25
    4968:	a0 93 3f 22 	sts	0x223F, r26
    496c:	b0 93 40 22 	sts	0x2240, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    4970:	e0 91 4b 22 	lds	r30, 0x224B
    4974:	f0 91 4c 22 	lds	r31, 0x224C
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e1       	ldi	r25, 0x10	; 16
    497c:	86 a3       	std	Z+38, r24	; 0x26
    497e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    4980:	41 e0       	ldi	r20, 0x01	; 1
    4982:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	98 e0       	ldi	r25, 0x08	; 8
    4988:	a0 e0       	ldi	r26, 0x00	; 0
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	80 93 4d 22 	sts	0x224D, r24
    4990:	90 93 4e 22 	sts	0x224E, r25
    4994:	a0 93 4f 22 	sts	0x224F, r26
    4998:	b0 93 50 22 	sts	0x2250, r27
	ax.a[Y].timer->PER = 0x2000;
    499c:	e0 91 5b 22 	lds	r30, 0x225B
    49a0:	f0 91 5c 22 	lds	r31, 0x225C
    49a4:	80 e0       	ldi	r24, 0x00	; 0
    49a6:	90 e2       	ldi	r25, 0x20	; 32
    49a8:	86 a3       	std	Z+38, r24	; 0x26
    49aa:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49ac:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	96 e0       	ldi	r25, 0x06	; 6
    49b2:	a0 e0       	ldi	r26, 0x00	; 0
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	80 93 5d 22 	sts	0x225D, r24
    49ba:	90 93 5e 22 	sts	0x225E, r25
    49be:	a0 93 5f 22 	sts	0x225F, r26
    49c2:	b0 93 60 22 	sts	0x2260, r27
	ax.a[Z].timer->PER = 0x3000;
    49c6:	e0 91 6b 22 	lds	r30, 0x226B
    49ca:	f0 91 6c 22 	lds	r31, 0x226C
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	90 e3       	ldi	r25, 0x30	; 48
    49d2:	86 a3       	std	Z+38, r24	; 0x26
    49d4:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49d6:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	94 e0       	ldi	r25, 0x04	; 4
    49dc:	a0 e0       	ldi	r26, 0x00	; 0
    49de:	b0 e0       	ldi	r27, 0x00	; 0
    49e0:	80 93 6d 22 	sts	0x226D, r24
    49e4:	90 93 6e 22 	sts	0x226E, r25
    49e8:	a0 93 6f 22 	sts	0x226F, r26
    49ec:	b0 93 70 22 	sts	0x2270, r27
	ax.a[A].timer->PER = 0x4000;
    49f0:	d9 01       	movw	r26, r18
    49f2:	de 96       	adiw	r26, 0x3e	; 62
    49f4:	ed 91       	ld	r30, X+
    49f6:	fc 91       	ld	r31, X
    49f8:	df 97       	sbiw	r26, 0x3f	; 63
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	90 e4       	ldi	r25, 0x40	; 64
    49fe:	86 a3       	std	Z+38, r24	; 0x26
    4a00:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a02:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a04:	23 50       	subi	r18, 0x03	; 3
    4a06:	30 40       	sbci	r19, 0x00	; 0
    4a08:	f9 01       	movw	r30, r18
    4a0a:	80 81       	ld	r24, Z
    4a0c:	8f 60       	ori	r24, 0x0F	; 15
    4a0e:	80 83       	st	Z, r24
}
    4a10:	08 95       	ret

00004a12 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a12:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a14:	0e 94 ab 2c 	call	0x5956	; 0x5956 <mv_flush>
	sei();
    4a18:	78 94       	sei
}
    4a1a:	08 95       	ret

00004a1c <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a1c:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a1e:	e0 91 4b 22 	lds	r30, 0x224B
    4a22:	f0 91 4c 22 	lds	r31, 0x224C
    4a26:	10 82       	st	Z, r1
    4a28:	e0 91 5b 22 	lds	r30, 0x225B
    4a2c:	f0 91 5c 22 	lds	r31, 0x225C
    4a30:	10 82       	st	Z, r1
    4a32:	e0 91 6b 22 	lds	r30, 0x226B
    4a36:	f0 91 6c 22 	lds	r31, 0x226C
    4a3a:	10 82       	st	Z, r1
    4a3c:	e0 91 7b 22 	lds	r30, 0x227B
    4a40:	f0 91 7c 22 	lds	r31, 0x227C
    4a44:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a46:	0e 94 ab 2c 	call	0x5956	; 0x5956 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a4a:	10 92 3a 22 	sts	0x223A, r1
	sei();
    4a4e:	78 94       	sei
}
    4a50:	08 95       	ret

00004a52 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a52:	cf 92       	push	r12
    4a54:	df 92       	push	r13
    4a56:	ef 92       	push	r14
    4a58:	ff 92       	push	r15
    4a5a:	0f 93       	push	r16
    4a5c:	1f 93       	push	r17
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a62:	80 91 39 22 	lds	r24, 0x2239
    4a66:	88 23       	and	r24, r24
    4a68:	09 f0       	breq	.+2      	; 0x4a6c <st_execute_move+0x1a>
    4a6a:	32 c1       	rjmp	.+612    	; 0x4cd0 <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	80 93 39 22 	sts	0x2239, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a72:	80 91 3a 22 	lds	r24, 0x223A
    4a76:	88 23       	and	r24, r24
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <st_execute_move+0x2a>
    4a7a:	28 c1       	rjmp	.+592    	; 0x4ccc <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a7c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <mv_dequeue_move_buffer>
    4a80:	80 93 3b 22 	sts	0x223B, r24
    4a84:	90 93 3c 22 	sts	0x223C, r25
    4a88:	89 2b       	or	r24, r25
    4a8a:	09 f4       	brne	.+2      	; 0x4a8e <st_execute_move+0x3c>
    4a8c:	1f c1       	rjmp	.+574    	; 0x4ccc <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4a8e:	6d e3       	ldi	r22, 0x3D	; 61
    4a90:	72 e2       	ldi	r23, 0x22	; 34
    4a92:	00 e0       	ldi	r16, 0x00	; 0
    4a94:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a96:	94 e0       	ldi	r25, 0x04	; 4
    4a98:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4a9a:	82 e0       	ldi	r24, 0x02	; 2
    4a9c:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4a9e:	f0 2e       	mov	r15, r16
    4aa0:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4aa2:	db 01       	movw	r26, r22
    4aa4:	1e 96       	adiw	r26, 0x0e	; 14
    4aa6:	ed 91       	ld	r30, X+
    4aa8:	fc 91       	ld	r31, X
    4aaa:	1f 97       	sbiw	r26, 0x0f	; 15
    4aac:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4aae:	c0 91 3b 22 	lds	r28, 0x223B
    4ab2:	d0 91 3c 22 	lds	r29, 0x223C
    4ab6:	c8 01       	movw	r24, r16
    4ab8:	fc 01       	movw	r30, r24
    4aba:	b3 e0       	ldi	r27, 0x03	; 3
    4abc:	ee 0f       	add	r30, r30
    4abe:	ff 1f       	adc	r31, r31
    4ac0:	ba 95       	dec	r27
    4ac2:	e1 f7       	brne	.-8      	; 0x4abc <st_execute_move+0x6a>
    4ac4:	88 0f       	add	r24, r24
    4ac6:	99 1f       	adc	r25, r25
    4ac8:	e8 0f       	add	r30, r24
    4aca:	f9 1f       	adc	r31, r25
    4acc:	ec 0f       	add	r30, r28
    4ace:	fd 1f       	adc	r31, r29
    4ad0:	80 81       	ld	r24, Z
    4ad2:	91 81       	ldd	r25, Z+1	; 0x01
    4ad4:	a2 81       	ldd	r26, Z+2	; 0x02
    4ad6:	b3 81       	ldd	r27, Z+3	; 0x03
    4ad8:	00 97       	sbiw	r24, 0x00	; 0
    4ada:	a1 05       	cpc	r26, r1
    4adc:	b1 05       	cpc	r27, r1
    4ade:	09 f4       	brne	.+2      	; 0x4ae2 <st_execute_move+0x90>
    4ae0:	a6 c0       	rjmp	.+332    	; 0x4c2e <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4ae2:	c8 01       	movw	r24, r16
    4ae4:	9c 01       	movw	r18, r24
    4ae6:	f3 e0       	ldi	r31, 0x03	; 3
    4ae8:	22 0f       	add	r18, r18
    4aea:	33 1f       	adc	r19, r19
    4aec:	fa 95       	dec	r31
    4aee:	e1 f7       	brne	.-8      	; 0x4ae8 <st_execute_move+0x96>
    4af0:	88 0f       	add	r24, r24
    4af2:	99 1f       	adc	r25, r25
    4af4:	28 0f       	add	r18, r24
    4af6:	39 1f       	adc	r19, r25
    4af8:	c2 0f       	add	r28, r18
    4afa:	d3 1f       	adc	r29, r19
    4afc:	89 85       	ldd	r24, Y+9	; 0x09
    4afe:	fb 01       	movw	r30, r22
    4b00:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b02:	e0 91 3b 22 	lds	r30, 0x223B
    4b06:	f0 91 3c 22 	lds	r31, 0x223C
    4b0a:	c8 01       	movw	r24, r16
    4b0c:	9c 01       	movw	r18, r24
    4b0e:	53 e0       	ldi	r21, 0x03	; 3
    4b10:	22 0f       	add	r18, r18
    4b12:	33 1f       	adc	r19, r19
    4b14:	5a 95       	dec	r21
    4b16:	e1 f7       	brne	.-8      	; 0x4b10 <st_execute_move+0xbe>
    4b18:	88 0f       	add	r24, r24
    4b1a:	99 1f       	adc	r25, r25
    4b1c:	28 0f       	add	r18, r24
    4b1e:	39 1f       	adc	r19, r25
    4b20:	e2 0f       	add	r30, r18
    4b22:	f3 1f       	adc	r31, r19
    4b24:	90 85       	ldd	r25, Z+8	; 0x08
    4b26:	db 01       	movw	r26, r22
    4b28:	1a 96       	adiw	r26, 0x0a	; 10
    4b2a:	8c 91       	ld	r24, X
    4b2c:	1a 97       	sbiw	r26, 0x0a	; 10
    4b2e:	1c 96       	adiw	r26, 0x0c	; 12
    4b30:	ed 91       	ld	r30, X+
    4b32:	fc 91       	ld	r31, X
    4b34:	1d 97       	sbiw	r26, 0x0d	; 13
    4b36:	98 17       	cp	r25, r24
    4b38:	11 f0       	breq	.+4      	; 0x4b3e <st_execute_move+0xec>
    4b3a:	d5 82       	std	Z+5, r13	; 0x05
    4b3c:	01 c0       	rjmp	.+2      	; 0x4b40 <st_execute_move+0xee>
    4b3e:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b40:	40 91 3b 22 	lds	r20, 0x223B
    4b44:	50 91 3c 22 	lds	r21, 0x223C
    4b48:	8f 2d       	mov	r24, r15
    4b4a:	9e 2d       	mov	r25, r14
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	33 e0       	ldi	r19, 0x03	; 3
    4b50:	ee 0f       	add	r30, r30
    4b52:	ff 1f       	adc	r31, r31
    4b54:	3a 95       	dec	r19
    4b56:	e1 f7       	brne	.-8      	; 0x4b50 <st_execute_move+0xfe>
    4b58:	88 0f       	add	r24, r24
    4b5a:	99 1f       	adc	r25, r25
    4b5c:	e8 0f       	add	r30, r24
    4b5e:	f9 1f       	adc	r31, r25
    4b60:	e4 0f       	add	r30, r20
    4b62:	f5 1f       	adc	r31, r21
    4b64:	80 81       	ld	r24, Z
    4b66:	91 81       	ldd	r25, Z+1	; 0x01
    4b68:	a2 81       	ldd	r26, Z+2	; 0x02
    4b6a:	b3 81       	ldd	r27, Z+3	; 0x03
    4b6c:	fb 01       	movw	r30, r22
    4b6e:	80 83       	st	Z, r24
    4b70:	91 83       	std	Z+1, r25	; 0x01
    4b72:	a2 83       	std	Z+2, r26	; 0x02
    4b74:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b76:	8f 2d       	mov	r24, r15
    4b78:	9e 2d       	mov	r25, r14
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	b3 e0       	ldi	r27, 0x03	; 3
    4b7e:	ee 0f       	add	r30, r30
    4b80:	ff 1f       	adc	r31, r31
    4b82:	ba 95       	dec	r27
    4b84:	e1 f7       	brne	.-8      	; 0x4b7e <st_execute_move+0x12c>
    4b86:	88 0f       	add	r24, r24
    4b88:	99 1f       	adc	r25, r25
    4b8a:	e8 0f       	add	r30, r24
    4b8c:	f9 1f       	adc	r31, r25
    4b8e:	e4 0f       	add	r30, r20
    4b90:	f5 1f       	adc	r31, r21
    4b92:	86 81       	ldd	r24, Z+6	; 0x06
    4b94:	97 81       	ldd	r25, Z+7	; 0x07
    4b96:	db 01       	movw	r26, r22
    4b98:	16 96       	adiw	r26, 0x06	; 6
    4b9a:	8d 93       	st	X+, r24
    4b9c:	9c 93       	st	X, r25
    4b9e:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4ba0:	8f 2d       	mov	r24, r15
    4ba2:	9e 2d       	mov	r25, r14
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	33 e0       	ldi	r19, 0x03	; 3
    4ba8:	ee 0f       	add	r30, r30
    4baa:	ff 1f       	adc	r31, r31
    4bac:	3a 95       	dec	r19
    4bae:	e1 f7       	brne	.-8      	; 0x4ba8 <st_execute_move+0x156>
    4bb0:	88 0f       	add	r24, r24
    4bb2:	99 1f       	adc	r25, r25
    4bb4:	e8 0f       	add	r30, r24
    4bb6:	f9 1f       	adc	r31, r25
    4bb8:	e4 0f       	add	r30, r20
    4bba:	f5 1f       	adc	r31, r21
    4bbc:	86 81       	ldd	r24, Z+6	; 0x06
    4bbe:	97 81       	ldd	r25, Z+7	; 0x07
    4bc0:	18 96       	adiw	r26, 0x08	; 8
    4bc2:	8d 93       	st	X+, r24
    4bc4:	9c 93       	st	X, r25
    4bc6:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4bc8:	8f 2d       	mov	r24, r15
    4bca:	9e 2d       	mov	r25, r14
    4bcc:	fc 01       	movw	r30, r24
    4bce:	33 e0       	ldi	r19, 0x03	; 3
    4bd0:	ee 0f       	add	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	3a 95       	dec	r19
    4bd6:	e1 f7       	brne	.-8      	; 0x4bd0 <st_execute_move+0x17e>
    4bd8:	88 0f       	add	r24, r24
    4bda:	99 1f       	adc	r25, r25
    4bdc:	e8 0f       	add	r30, r24
    4bde:	f9 1f       	adc	r31, r25
    4be0:	e4 0f       	add	r30, r20
    4be2:	f5 1f       	adc	r31, r21
    4be4:	84 81       	ldd	r24, Z+4	; 0x04
    4be6:	95 81       	ldd	r25, Z+5	; 0x05
    4be8:	14 96       	adiw	r26, 0x04	; 4
    4bea:	8d 93       	st	X+, r24
    4bec:	9c 93       	st	X, r25
    4bee:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4bf0:	1e 96       	adiw	r26, 0x0e	; 14
    4bf2:	ed 91       	ld	r30, X+
    4bf4:	fc 91       	ld	r31, X
    4bf6:	1f 97       	sbiw	r26, 0x0f	; 15
    4bf8:	8f 2d       	mov	r24, r15
    4bfa:	9e 2d       	mov	r25, r14
    4bfc:	9c 01       	movw	r18, r24
    4bfe:	b3 e0       	ldi	r27, 0x03	; 3
    4c00:	22 0f       	add	r18, r18
    4c02:	33 1f       	adc	r19, r19
    4c04:	ba 95       	dec	r27
    4c06:	e1 f7       	brne	.-8      	; 0x4c00 <st_execute_move+0x1ae>
    4c08:	88 0f       	add	r24, r24
    4c0a:	99 1f       	adc	r25, r25
    4c0c:	28 0f       	add	r18, r24
    4c0e:	39 1f       	adc	r19, r25
    4c10:	42 0f       	add	r20, r18
    4c12:	53 1f       	adc	r21, r19
    4c14:	da 01       	movw	r26, r20
    4c16:	14 96       	adiw	r26, 0x04	; 4
    4c18:	8d 91       	ld	r24, X+
    4c1a:	9c 91       	ld	r25, X
    4c1c:	15 97       	sbiw	r26, 0x05	; 5
    4c1e:	86 a3       	std	Z+38, r24	; 0x26
    4c20:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c22:	db 01       	movw	r26, r22
    4c24:	1c 96       	adiw	r26, 0x0c	; 12
    4c26:	ed 91       	ld	r30, X+
    4c28:	fc 91       	ld	r31, X
    4c2a:	1d 97       	sbiw	r26, 0x0d	; 13
    4c2c:	c6 82       	std	Z+6, r12	; 0x06
    4c2e:	0f 5f       	subi	r16, 0xFF	; 255
    4c30:	1f 4f       	sbci	r17, 0xFF	; 255
    4c32:	60 5f       	subi	r22, 0xF0	; 240
    4c34:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c36:	03 30       	cpi	r16, 0x03	; 3
    4c38:	11 05       	cpc	r17, r1
    4c3a:	09 f0       	breq	.+2      	; 0x4c3e <st_execute_move+0x1ec>
    4c3c:	30 cf       	rjmp	.-416    	; 0x4a9e <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c3e:	10 92 3a 22 	sts	0x223A, r1
	if (ax.a[X].step_counter) { 
    4c42:	80 91 3d 22 	lds	r24, 0x223D
    4c46:	90 91 3e 22 	lds	r25, 0x223E
    4c4a:	a0 91 3f 22 	lds	r26, 0x223F
    4c4e:	b0 91 40 22 	lds	r27, 0x2240
    4c52:	00 97       	sbiw	r24, 0x00	; 0
    4c54:	a1 05       	cpc	r26, r1
    4c56:	b1 05       	cpc	r27, r1
    4c58:	59 f0       	breq	.+22     	; 0x4c70 <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c5a:	e0 91 4b 22 	lds	r30, 0x224B
    4c5e:	f0 91 4c 22 	lds	r31, 0x224C
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c66:	80 91 3a 22 	lds	r24, 0x223A
    4c6a:	88 60       	ori	r24, 0x08	; 8
    4c6c:	80 93 3a 22 	sts	0x223A, r24
	}
	if (ax.a[Y].step_counter) {
    4c70:	80 91 4d 22 	lds	r24, 0x224D
    4c74:	90 91 4e 22 	lds	r25, 0x224E
    4c78:	a0 91 4f 22 	lds	r26, 0x224F
    4c7c:	b0 91 50 22 	lds	r27, 0x2250
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	a1 05       	cpc	r26, r1
    4c84:	b1 05       	cpc	r27, r1
    4c86:	59 f0       	breq	.+22     	; 0x4c9e <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4c88:	e0 91 5b 22 	lds	r30, 0x225B
    4c8c:	f0 91 5c 22 	lds	r31, 0x225C
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4c94:	80 91 3a 22 	lds	r24, 0x223A
    4c98:	84 60       	ori	r24, 0x04	; 4
    4c9a:	80 93 3a 22 	sts	0x223A, r24
	}
	if (ax.a[Z].step_counter) {
    4c9e:	80 91 5d 22 	lds	r24, 0x225D
    4ca2:	90 91 5e 22 	lds	r25, 0x225E
    4ca6:	a0 91 5f 22 	lds	r26, 0x225F
    4caa:	b0 91 60 22 	lds	r27, 0x2260
    4cae:	00 97       	sbiw	r24, 0x00	; 0
    4cb0:	a1 05       	cpc	r26, r1
    4cb2:	b1 05       	cpc	r27, r1
    4cb4:	59 f0       	breq	.+22     	; 0x4ccc <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4cb6:	e0 91 6b 22 	lds	r30, 0x226B
    4cba:	f0 91 6c 22 	lds	r31, 0x226C
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cc2:	80 91 3a 22 	lds	r24, 0x223A
    4cc6:	82 60       	ori	r24, 0x02	; 2
    4cc8:	80 93 3a 22 	sts	0x223A, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4ccc:	10 92 39 22 	sts	0x2239, r1
}
    4cd0:	df 91       	pop	r29
    4cd2:	cf 91       	pop	r28
    4cd4:	1f 91       	pop	r17
    4cd6:	0f 91       	pop	r16
    4cd8:	ff 90       	pop	r15
    4cda:	ef 90       	pop	r14
    4cdc:	df 90       	pop	r13
    4cde:	cf 90       	pop	r12
    4ce0:	08 95       	ret

00004ce2 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4ce2:	10 92 39 22 	sts	0x2239, r1
	st_execute_move();		// recursively empty the move queue
    4ce6:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>
	return;
}
    4cea:	08 95       	ret

00004cec <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4cec:	1f 92       	push	r1
    4cee:	0f 92       	push	r0
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	0f 92       	push	r0
    4cf4:	0b b6       	in	r0, 0x3b	; 59
    4cf6:	0f 92       	push	r0
    4cf8:	11 24       	eor	r1, r1
    4cfa:	2f 93       	push	r18
    4cfc:	3f 93       	push	r19
    4cfe:	4f 93       	push	r20
    4d00:	5f 93       	push	r21
    4d02:	6f 93       	push	r22
    4d04:	7f 93       	push	r23
    4d06:	8f 93       	push	r24
    4d08:	9f 93       	push	r25
    4d0a:	af 93       	push	r26
    4d0c:	bf 93       	push	r27
    4d0e:	ef 93       	push	r30
    4d10:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d12:	80 91 75 22 	lds	r24, 0x2275
    4d16:	90 91 76 22 	lds	r25, 0x2276
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	80 93 75 22 	sts	0x2275, r24
    4d20:	90 93 76 22 	sts	0x2276, r25
    4d24:	89 2b       	or	r24, r25
    4d26:	a1 f5       	brne	.+104    	; 0x4d90 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d28:	e0 e6       	ldi	r30, 0x60	; 96
    4d2a:	f6 e0       	ldi	r31, 0x06	; 6
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d30:	80 91 6d 22 	lds	r24, 0x226D
    4d34:	90 91 6e 22 	lds	r25, 0x226E
    4d38:	a0 91 6f 22 	lds	r26, 0x226F
    4d3c:	b0 91 70 22 	lds	r27, 0x2270
    4d40:	01 97       	sbiw	r24, 0x01	; 1
    4d42:	a1 09       	sbc	r26, r1
    4d44:	b1 09       	sbc	r27, r1
    4d46:	80 93 6d 22 	sts	0x226D, r24
    4d4a:	90 93 6e 22 	sts	0x226E, r25
    4d4e:	a0 93 6f 22 	sts	0x226F, r26
    4d52:	b0 93 70 22 	sts	0x2270, r27
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	a1 05       	cpc	r26, r1
    4d5a:	b1 05       	cpc	r27, r1
    4d5c:	69 f4       	brne	.+26     	; 0x4d78 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d5e:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d62:	84 e0       	ldi	r24, 0x04	; 4
    4d64:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d66:	80 91 3a 22 	lds	r24, 0x223A
    4d6a:	8e 7f       	andi	r24, 0xFE	; 254
    4d6c:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {
    4d70:	88 23       	and	r24, r24
    4d72:	11 f4       	brne	.+4      	; 0x4d78 <__vector_108+0x8c>
			st_execute_move();
    4d74:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d78:	80 91 73 22 	lds	r24, 0x2273
    4d7c:	90 91 74 22 	lds	r25, 0x2274
    4d80:	80 93 75 22 	sts	0x2275, r24
    4d84:	90 93 76 22 	sts	0x2276, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	e0 e6       	ldi	r30, 0x60	; 96
    4d8c:	f6 e0       	ldi	r31, 0x06	; 6
    4d8e:	86 83       	std	Z+6, r24	; 0x06
}
    4d90:	ff 91       	pop	r31
    4d92:	ef 91       	pop	r30
    4d94:	bf 91       	pop	r27
    4d96:	af 91       	pop	r26
    4d98:	9f 91       	pop	r25
    4d9a:	8f 91       	pop	r24
    4d9c:	7f 91       	pop	r23
    4d9e:	6f 91       	pop	r22
    4da0:	5f 91       	pop	r21
    4da2:	4f 91       	pop	r20
    4da4:	3f 91       	pop	r19
    4da6:	2f 91       	pop	r18
    4da8:	0f 90       	pop	r0
    4daa:	0b be       	out	0x3b, r0	; 59
    4dac:	0f 90       	pop	r0
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	0f 90       	pop	r0
    4db2:	1f 90       	pop	r1
    4db4:	18 95       	reti

00004db6 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4db6:	1f 92       	push	r1
    4db8:	0f 92       	push	r0
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	0f 92       	push	r0
    4dbe:	0b b6       	in	r0, 0x3b	; 59
    4dc0:	0f 92       	push	r0
    4dc2:	11 24       	eor	r1, r1
    4dc4:	2f 93       	push	r18
    4dc6:	3f 93       	push	r19
    4dc8:	4f 93       	push	r20
    4dca:	5f 93       	push	r21
    4dcc:	6f 93       	push	r22
    4dce:	7f 93       	push	r23
    4dd0:	8f 93       	push	r24
    4dd2:	9f 93       	push	r25
    4dd4:	af 93       	push	r26
    4dd6:	bf 93       	push	r27
    4dd8:	ef 93       	push	r30
    4dda:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4ddc:	80 91 65 22 	lds	r24, 0x2265
    4de0:	90 91 66 22 	lds	r25, 0x2266
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	80 93 65 22 	sts	0x2265, r24
    4dea:	90 93 66 22 	sts	0x2266, r25
    4dee:	89 2b       	or	r24, r25
    4df0:	a1 f5       	brne	.+104    	; 0x4e5a <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4df2:	e0 e8       	ldi	r30, 0x80	; 128
    4df4:	f6 e0       	ldi	r31, 0x06	; 6
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4dfa:	80 91 5d 22 	lds	r24, 0x225D
    4dfe:	90 91 5e 22 	lds	r25, 0x225E
    4e02:	a0 91 5f 22 	lds	r26, 0x225F
    4e06:	b0 91 60 22 	lds	r27, 0x2260
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	a1 09       	sbc	r26, r1
    4e0e:	b1 09       	sbc	r27, r1
    4e10:	80 93 5d 22 	sts	0x225D, r24
    4e14:	90 93 5e 22 	sts	0x225E, r25
    4e18:	a0 93 5f 22 	sts	0x225F, r26
    4e1c:	b0 93 60 22 	sts	0x2260, r27
    4e20:	00 97       	sbiw	r24, 0x00	; 0
    4e22:	a1 05       	cpc	r26, r1
    4e24:	b1 05       	cpc	r27, r1
    4e26:	69 f4       	brne	.+26     	; 0x4e42 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e28:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e2c:	84 e0       	ldi	r24, 0x04	; 4
    4e2e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e30:	80 91 3a 22 	lds	r24, 0x223A
    4e34:	8d 7f       	andi	r24, 0xFD	; 253
    4e36:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {
    4e3a:	88 23       	and	r24, r24
    4e3c:	11 f4       	brne	.+4      	; 0x4e42 <__vector_47+0x8c>
			st_execute_move();
    4e3e:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e42:	80 91 63 22 	lds	r24, 0x2263
    4e46:	90 91 64 22 	lds	r25, 0x2264
    4e4a:	80 93 65 22 	sts	0x2265, r24
    4e4e:	90 93 66 22 	sts	0x2266, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	e0 e8       	ldi	r30, 0x80	; 128
    4e56:	f6 e0       	ldi	r31, 0x06	; 6
    4e58:	86 83       	std	Z+6, r24	; 0x06
}
    4e5a:	ff 91       	pop	r31
    4e5c:	ef 91       	pop	r30
    4e5e:	bf 91       	pop	r27
    4e60:	af 91       	pop	r26
    4e62:	9f 91       	pop	r25
    4e64:	8f 91       	pop	r24
    4e66:	7f 91       	pop	r23
    4e68:	6f 91       	pop	r22
    4e6a:	5f 91       	pop	r21
    4e6c:	4f 91       	pop	r20
    4e6e:	3f 91       	pop	r19
    4e70:	2f 91       	pop	r18
    4e72:	0f 90       	pop	r0
    4e74:	0b be       	out	0x3b, r0	; 59
    4e76:	0f 90       	pop	r0
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	0f 90       	pop	r0
    4e7c:	1f 90       	pop	r1
    4e7e:	18 95       	reti

00004e80 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e80:	1f 92       	push	r1
    4e82:	0f 92       	push	r0
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	0f 92       	push	r0
    4e88:	0b b6       	in	r0, 0x3b	; 59
    4e8a:	0f 92       	push	r0
    4e8c:	11 24       	eor	r1, r1
    4e8e:	2f 93       	push	r18
    4e90:	3f 93       	push	r19
    4e92:	4f 93       	push	r20
    4e94:	5f 93       	push	r21
    4e96:	6f 93       	push	r22
    4e98:	7f 93       	push	r23
    4e9a:	8f 93       	push	r24
    4e9c:	9f 93       	push	r25
    4e9e:	af 93       	push	r26
    4ea0:	bf 93       	push	r27
    4ea2:	ef 93       	push	r30
    4ea4:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4ea6:	80 91 55 22 	lds	r24, 0x2255
    4eaa:	90 91 56 22 	lds	r25, 0x2256
    4eae:	01 97       	sbiw	r24, 0x01	; 1
    4eb0:	80 93 55 22 	sts	0x2255, r24
    4eb4:	90 93 56 22 	sts	0x2256, r25
    4eb8:	89 2b       	or	r24, r25
    4eba:	a1 f5       	brne	.+104    	; 0x4f24 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ebc:	e0 ea       	ldi	r30, 0xA0	; 160
    4ebe:	f6 e0       	ldi	r31, 0x06	; 6
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4ec4:	80 91 4d 22 	lds	r24, 0x224D
    4ec8:	90 91 4e 22 	lds	r25, 0x224E
    4ecc:	a0 91 4f 22 	lds	r26, 0x224F
    4ed0:	b0 91 50 22 	lds	r27, 0x2250
    4ed4:	01 97       	sbiw	r24, 0x01	; 1
    4ed6:	a1 09       	sbc	r26, r1
    4ed8:	b1 09       	sbc	r27, r1
    4eda:	80 93 4d 22 	sts	0x224D, r24
    4ede:	90 93 4e 22 	sts	0x224E, r25
    4ee2:	a0 93 4f 22 	sts	0x224F, r26
    4ee6:	b0 93 50 22 	sts	0x2250, r27
    4eea:	00 97       	sbiw	r24, 0x00	; 0
    4eec:	a1 05       	cpc	r26, r1
    4eee:	b1 05       	cpc	r27, r1
    4ef0:	69 f4       	brne	.+26     	; 0x4f0c <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4ef2:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4ef6:	84 e0       	ldi	r24, 0x04	; 4
    4ef8:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4efa:	80 91 3a 22 	lds	r24, 0x223A
    4efe:	8b 7f       	andi	r24, 0xFB	; 251
    4f00:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {
    4f04:	88 23       	and	r24, r24
    4f06:	11 f4       	brne	.+4      	; 0x4f0c <__vector_77+0x8c>
			st_execute_move();
    4f08:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f0c:	80 91 53 22 	lds	r24, 0x2253
    4f10:	90 91 54 22 	lds	r25, 0x2254
    4f14:	80 93 55 22 	sts	0x2255, r24
    4f18:	90 93 56 22 	sts	0x2256, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	e0 ea       	ldi	r30, 0xA0	; 160
    4f20:	f6 e0       	ldi	r31, 0x06	; 6
    4f22:	86 83       	std	Z+6, r24	; 0x06
}
    4f24:	ff 91       	pop	r31
    4f26:	ef 91       	pop	r30
    4f28:	bf 91       	pop	r27
    4f2a:	af 91       	pop	r26
    4f2c:	9f 91       	pop	r25
    4f2e:	8f 91       	pop	r24
    4f30:	7f 91       	pop	r23
    4f32:	6f 91       	pop	r22
    4f34:	5f 91       	pop	r21
    4f36:	4f 91       	pop	r20
    4f38:	3f 91       	pop	r19
    4f3a:	2f 91       	pop	r18
    4f3c:	0f 90       	pop	r0
    4f3e:	0b be       	out	0x3b, r0	; 59
    4f40:	0f 90       	pop	r0
    4f42:	0f be       	out	0x3f, r0	; 63
    4f44:	0f 90       	pop	r0
    4f46:	1f 90       	pop	r1
    4f48:	18 95       	reti

00004f4a <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f4a:	1f 92       	push	r1
    4f4c:	0f 92       	push	r0
    4f4e:	0f b6       	in	r0, 0x3f	; 63
    4f50:	0f 92       	push	r0
    4f52:	0b b6       	in	r0, 0x3b	; 59
    4f54:	0f 92       	push	r0
    4f56:	11 24       	eor	r1, r1
    4f58:	2f 93       	push	r18
    4f5a:	3f 93       	push	r19
    4f5c:	4f 93       	push	r20
    4f5e:	5f 93       	push	r21
    4f60:	6f 93       	push	r22
    4f62:	7f 93       	push	r23
    4f64:	8f 93       	push	r24
    4f66:	9f 93       	push	r25
    4f68:	af 93       	push	r26
    4f6a:	bf 93       	push	r27
    4f6c:	ef 93       	push	r30
    4f6e:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f70:	80 91 45 22 	lds	r24, 0x2245
    4f74:	90 91 46 22 	lds	r25, 0x2246
    4f78:	01 97       	sbiw	r24, 0x01	; 1
    4f7a:	80 93 45 22 	sts	0x2245, r24
    4f7e:	90 93 46 22 	sts	0x2246, r25
    4f82:	89 2b       	or	r24, r25
    4f84:	d1 f5       	brne	.+116    	; 0x4ffa <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4f86:	80 91 48 22 	lds	r24, 0x2248
    4f8a:	88 23       	and	r24, r24
    4f8c:	21 f4       	brne	.+8      	; 0x4f96 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	e0 e0       	ldi	r30, 0x00	; 0
    4f92:	f6 e0       	ldi	r31, 0x06	; 6
    4f94:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4f96:	80 91 3d 22 	lds	r24, 0x223D
    4f9a:	90 91 3e 22 	lds	r25, 0x223E
    4f9e:	a0 91 3f 22 	lds	r26, 0x223F
    4fa2:	b0 91 40 22 	lds	r27, 0x2240
    4fa6:	01 97       	sbiw	r24, 0x01	; 1
    4fa8:	a1 09       	sbc	r26, r1
    4faa:	b1 09       	sbc	r27, r1
    4fac:	80 93 3d 22 	sts	0x223D, r24
    4fb0:	90 93 3e 22 	sts	0x223E, r25
    4fb4:	a0 93 3f 22 	sts	0x223F, r26
    4fb8:	b0 93 40 22 	sts	0x2240, r27
    4fbc:	00 97       	sbiw	r24, 0x00	; 0
    4fbe:	a1 05       	cpc	r26, r1
    4fc0:	b1 05       	cpc	r27, r1
    4fc2:	79 f4       	brne	.+30     	; 0x4fe2 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fc4:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fc8:	84 e0       	ldi	r24, 0x04	; 4
    4fca:	e0 e0       	ldi	r30, 0x00	; 0
    4fcc:	f6 e0       	ldi	r31, 0x06	; 6
    4fce:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fd0:	80 91 3a 22 	lds	r24, 0x223A
    4fd4:	87 7f       	andi	r24, 0xF7	; 247
    4fd6:	80 93 3a 22 	sts	0x223A, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4fda:	88 23       	and	r24, r24
    4fdc:	11 f4       	brne	.+4      	; 0x4fe2 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4fde:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4fe2:	80 91 43 22 	lds	r24, 0x2243
    4fe6:	90 91 44 22 	lds	r25, 0x2244
    4fea:	80 93 45 22 	sts	0x2245, r24
    4fee:	90 93 46 22 	sts	0x2246, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	e0 e0       	ldi	r30, 0x00	; 0
    4ff6:	f6 e0       	ldi	r31, 0x06	; 6
    4ff8:	86 83       	std	Z+6, r24	; 0x06
}
    4ffa:	ff 91       	pop	r31
    4ffc:	ef 91       	pop	r30
    4ffe:	bf 91       	pop	r27
    5000:	af 91       	pop	r26
    5002:	9f 91       	pop	r25
    5004:	8f 91       	pop	r24
    5006:	7f 91       	pop	r23
    5008:	6f 91       	pop	r22
    500a:	5f 91       	pop	r21
    500c:	4f 91       	pop	r20
    500e:	3f 91       	pop	r19
    5010:	2f 91       	pop	r18
    5012:	0f 90       	pop	r0
    5014:	0b be       	out	0x3b, r0	; 59
    5016:	0f 90       	pop	r0
    5018:	0f be       	out	0x3f, r0	; 63
    501a:	0f 90       	pop	r0
    501c:	1f 90       	pop	r1
    501e:	18 95       	reti

00005020 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    5020:	e0 ea       	ldi	r30, 0xA0	; 160
    5022:	f0 e0       	ldi	r31, 0x00	; 0
    5024:	82 81       	ldd	r24, Z+2	; 0x02
    5026:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5028:	98 ed       	ldi	r25, 0xD8	; 216
    502a:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    502c:	82 83       	std	Z+2, r24	; 0x02
}
    502e:	08 95       	ret

00005030 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    5030:	e0 ea       	ldi	r30, 0xA0	; 160
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	82 81       	ldd	r24, Z+2	; 0x02
    5036:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5038:	98 ed       	ldi	r25, 0xD8	; 216
    503a:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    503c:	82 83       	std	Z+2, r24	; 0x02
}
    503e:	08 95       	ret

00005040 <xio_setflags>:
 * xio_set_control_flags()
 */

void xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    5040:	97 e1       	ldi	r25, 0x17	; 23
    5042:	89 9f       	mul	r24, r25
    5044:	f0 01       	movw	r30, r0
    5046:	11 24       	eor	r1, r1
    5048:	e5 53       	subi	r30, 0x35	; 53
    504a:	fc 4d       	sbci	r31, 0xDC	; 220

	if (control & XIO_RD) {
    504c:	64 ff       	sbrs	r22, 4
    504e:	05 c0       	rjmp	.+10     	; 0x505a <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    5050:	80 81       	ld	r24, Z
    5052:	91 81       	ldd	r25, Z+1	; 0x01
    5054:	81 60       	ori	r24, 0x01	; 1
    5056:	80 83       	st	Z, r24
    5058:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    505a:	65 ff       	sbrs	r22, 5
    505c:	05 c0       	rjmp	.+10     	; 0x5068 <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    505e:	80 81       	ld	r24, Z
    5060:	91 81       	ldd	r25, Z+1	; 0x01
    5062:	82 60       	ori	r24, 0x02	; 2
    5064:	80 83       	st	Z, r24
    5066:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    5068:	66 ff       	sbrs	r22, 6
    506a:	05 c0       	rjmp	.+10     	; 0x5076 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    506c:	80 81       	ld	r24, Z
    506e:	91 81       	ldd	r25, Z+1	; 0x01
    5070:	84 60       	ori	r24, 0x04	; 4
    5072:	80 83       	st	Z, r24
    5074:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    5076:	67 ff       	sbrs	r22, 7
    5078:	05 c0       	rjmp	.+10     	; 0x5084 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    507a:	80 81       	ld	r24, Z
    507c:	91 81       	ldd	r25, Z+1	; 0x01
    507e:	8b 7f       	andi	r24, 0xFB	; 251
    5080:	80 83       	st	Z, r24
    5082:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    5084:	70 ff       	sbrs	r23, 0
    5086:	05 c0       	rjmp	.+10     	; 0x5092 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    5088:	80 81       	ld	r24, Z
    508a:	91 81       	ldd	r25, Z+1	; 0x01
    508c:	80 61       	ori	r24, 0x10	; 16
    508e:	80 83       	st	Z, r24
    5090:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    5092:	71 ff       	sbrs	r23, 1
    5094:	05 c0       	rjmp	.+10     	; 0x50a0 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    5096:	80 81       	ld	r24, Z
    5098:	91 81       	ldd	r25, Z+1	; 0x01
    509a:	8f 7e       	andi	r24, 0xEF	; 239
    509c:	80 83       	st	Z, r24
    509e:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    50a0:	72 ff       	sbrs	r23, 2
    50a2:	05 c0       	rjmp	.+10     	; 0x50ae <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    50a4:	80 81       	ld	r24, Z
    50a6:	91 81       	ldd	r25, Z+1	; 0x01
    50a8:	80 62       	ori	r24, 0x20	; 32
    50aa:	80 83       	st	Z, r24
    50ac:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    50ae:	73 ff       	sbrs	r23, 3
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	8f 7d       	andi	r24, 0xDF	; 223
    50b8:	80 83       	st	Z, r24
    50ba:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    50bc:	74 ff       	sbrs	r23, 4
    50be:	05 c0       	rjmp	.+10     	; 0x50ca <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    50c0:	80 81       	ld	r24, Z
    50c2:	91 81       	ldd	r25, Z+1	; 0x01
    50c4:	80 64       	ori	r24, 0x40	; 64
    50c6:	80 83       	st	Z, r24
    50c8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    50ca:	75 ff       	sbrs	r23, 5
    50cc:	05 c0       	rjmp	.+10     	; 0x50d8 <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    50ce:	80 81       	ld	r24, Z
    50d0:	91 81       	ldd	r25, Z+1	; 0x01
    50d2:	8f 7b       	andi	r24, 0xBF	; 191
    50d4:	80 83       	st	Z, r24
    50d6:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    50d8:	76 ff       	sbrs	r23, 6
    50da:	05 c0       	rjmp	.+10     	; 0x50e6 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    50dc:	80 81       	ld	r24, Z
    50de:	91 81       	ldd	r25, Z+1	; 0x01
    50e0:	80 68       	ori	r24, 0x80	; 128
    50e2:	80 83       	st	Z, r24
    50e4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    50e6:	77 ff       	sbrs	r23, 7
    50e8:	05 c0       	rjmp	.+10     	; 0x50f4 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    50ea:	80 81       	ld	r24, Z
    50ec:	91 81       	ldd	r25, Z+1	; 0x01
    50ee:	8f 77       	andi	r24, 0x7F	; 127
    50f0:	80 83       	st	Z, r24
    50f2:	91 83       	std	Z+1, r25	; 0x01
    50f4:	08 95       	ret

000050f6 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	27 e1       	ldi	r18, 0x17	; 23
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	82 9f       	mul	r24, r18
    50fe:	f0 01       	movw	r30, r0
    5100:	83 9f       	mul	r24, r19
    5102:	f0 0d       	add	r31, r0
    5104:	92 9f       	mul	r25, r18
    5106:	f0 0d       	add	r31, r0
    5108:	11 24       	eor	r1, r1
    510a:	e5 53       	subi	r30, 0x35	; 53
    510c:	fc 4d       	sbci	r31, 0xDC	; 220
    510e:	83 89       	ldd	r24, Z+19	; 0x13
    5110:	94 89       	ldd	r25, Z+20	; 0x14
    5112:	80 93 0a 25 	sts	0x250A, r24
    5116:	90 93 0b 25 	sts	0x250B, r25
}
    511a:	08 95       	ret

0000511c <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	27 e1       	ldi	r18, 0x17	; 23
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	82 9f       	mul	r24, r18
    5124:	f0 01       	movw	r30, r0
    5126:	83 9f       	mul	r24, r19
    5128:	f0 0d       	add	r31, r0
    512a:	92 9f       	mul	r25, r18
    512c:	f0 0d       	add	r31, r0
    512e:	11 24       	eor	r1, r1
    5130:	e5 53       	subi	r30, 0x35	; 53
    5132:	fc 4d       	sbci	r31, 0xDC	; 220
    5134:	83 89       	ldd	r24, Z+19	; 0x13
    5136:	94 89       	ldd	r25, Z+20	; 0x14
    5138:	80 93 0c 25 	sts	0x250C, r24
    513c:	90 93 0d 25 	sts	0x250D, r25
}
    5140:	08 95       	ret

00005142 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	27 e1       	ldi	r18, 0x17	; 23
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	82 9f       	mul	r24, r18
    514a:	f0 01       	movw	r30, r0
    514c:	83 9f       	mul	r24, r19
    514e:	f0 0d       	add	r31, r0
    5150:	92 9f       	mul	r25, r18
    5152:	f0 0d       	add	r31, r0
    5154:	11 24       	eor	r1, r1
    5156:	e5 53       	subi	r30, 0x35	; 53
    5158:	fc 4d       	sbci	r31, 0xDC	; 220
    515a:	83 89       	ldd	r24, Z+19	; 0x13
    515c:	94 89       	ldd	r25, Z+20	; 0x14
    515e:	80 93 0e 25 	sts	0x250E, r24
    5162:	90 93 0f 25 	sts	0x250F, r25
}
    5166:	08 95       	ret

00005168 <xio_readln>:
 */

int xio_readln(uint8_t dev, char *buf, uint8_t len)
{

	switch (dev) {
    5168:	81 30       	cpi	r24, 0x01	; 1
    516a:	61 f0       	breq	.+24     	; 0x5184 <xio_readln+0x1c>
    516c:	81 30       	cpi	r24, 0x01	; 1
    516e:	28 f0       	brcs	.+10     	; 0x517a <xio_readln+0x12>
    5170:	83 30       	cpi	r24, 0x03	; 3
    5172:	69 f0       	breq	.+26     	; 0x518e <xio_readln+0x26>
    5174:	27 e0       	ldi	r18, 0x07	; 7
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	0f c0       	rjmp	.+30     	; 0x5198 <xio_readln+0x30>
		case (XIO_DEV_RS485): return (xio_readln_rs485(buf, len));
    517a:	cb 01       	movw	r24, r22
    517c:	64 2f       	mov	r22, r20
    517e:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <xio_readln_rs485>
    5182:	09 c0       	rjmp	.+18     	; 0x5196 <xio_readln+0x2e>
		case (XIO_DEV_USB): return (xio_readln_usb(buf, len));
    5184:	cb 01       	movw	r24, r22
    5186:	64 2f       	mov	r22, r20
    5188:	0e 94 51 31 	call	0x62a2	; 0x62a2 <xio_readln_usb>
    518c:	04 c0       	rjmp	.+8      	; 0x5196 <xio_readln+0x2e>
//		case (XIO_DEV_TTL): return (xio_readln_aux(buf, len));
		case (XIO_DEV_PGM): return (xio_readln_pgm(buf, len));
    518e:	cb 01       	movw	r24, r22
    5190:	64 2f       	mov	r22, r20
    5192:	0e 94 5e 35 	call	0x6abc	; 0x6abc <xio_readln_pgm>
    5196:	9c 01       	movw	r18, r24
		default: return (XIO_NO_SUCH_DEVICE);
	}
	return (XIO_ERR);		// never should hit this
}
    5198:	c9 01       	movw	r24, r18
    519a:	08 95       	ret

0000519c <xio_init_dev>:
	int (*dev_setflags)(const uint16_t control),// set device control flags
	int (*dev_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*dev_getc)(struct __file *),			// read char (stdio compatible)
	int (*dev_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    519c:	df 92       	push	r13
    519e:	ef 92       	push	r14
    51a0:	ff 92       	push	r15
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	cf 93       	push	r28
    51a8:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	e7 e1       	ldi	r30, 0x17	; 23
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	8e 9f       	mul	r24, r30
    51b2:	d0 01       	movw	r26, r0
    51b4:	8f 9f       	mul	r24, r31
    51b6:	b0 0d       	add	r27, r0
    51b8:	9e 9f       	mul	r25, r30
    51ba:	b0 0d       	add	r27, r0
    51bc:	11 24       	eor	r1, r1
    51be:	a5 53       	subi	r26, 0x35	; 53
    51c0:	bc 4d       	sbci	r27, 0xDC	; 220
    51c2:	0f 2e       	mov	r0, r31
    51c4:	f7 e1       	ldi	r31, 0x17	; 23
    51c6:	df 2e       	mov	r13, r31
    51c8:	f0 2d       	mov	r31, r0
    51ca:	ed 01       	movw	r28, r26
    51cc:	19 92       	st	Y+, r1
    51ce:	da 94       	dec	r13
    51d0:	e9 f7       	brne	.-6      	; 0x51cc <xio_init_dev+0x30>

	// bind functions
	ds[dev].dev_open = dev_open;						
    51d2:	17 96       	adiw	r26, 0x07	; 7
    51d4:	6d 93       	st	X+, r22
    51d6:	7c 93       	st	X, r23
    51d8:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].dev_setflags = dev_setflags;
    51da:	19 96       	adiw	r26, 0x09	; 9
    51dc:	4d 93       	st	X+, r20
    51de:	5c 93       	st	X, r21
    51e0:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].dev_putc = dev_putc;
    51e2:	1b 96       	adiw	r26, 0x0b	; 11
    51e4:	2d 93       	st	X+, r18
    51e6:	3c 93       	st	X, r19
    51e8:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].dev_getc = dev_getc;
    51ea:	1d 96       	adiw	r26, 0x0d	; 13
    51ec:	0d 93       	st	X+, r16
    51ee:	1c 93       	st	X, r17
    51f0:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].dev_readln = dev_readln;
    51f2:	1f 96       	adiw	r26, 0x0f	; 15
    51f4:	ed 92       	st	X+, r14
    51f6:	fc 92       	st	X, r15
    51f8:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    51fa:	88 0f       	add	r24, r24
    51fc:	99 1f       	adc	r25, r25
    51fe:	fc 01       	movw	r30, r24
    5200:	43 e0       	ldi	r20, 0x03	; 3
    5202:	ee 0f       	add	r30, r30
    5204:	ff 1f       	adc	r31, r31
    5206:	4a 95       	dec	r20
    5208:	e1 f7       	brne	.-8      	; 0x5202 <xio_init_dev+0x66>
    520a:	e8 1b       	sub	r30, r24
    520c:	f9 0b       	sbc	r31, r25
    520e:	ed 57       	subi	r30, 0x7D	; 125
    5210:	fb 4d       	sbci	r31, 0xDB	; 219
    5212:	53 96       	adiw	r26, 0x13	; 19
    5214:	ed 93       	st	X+, r30
    5216:	fc 93       	st	X, r31
    5218:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, dev_putc, dev_getc, _FDEV_SETUP_RW);
    521a:	20 87       	std	Z+8, r18	; 0x08
    521c:	31 87       	std	Z+9, r19	; 0x09
    521e:	02 87       	std	Z+10, r16	; 0x0a
    5220:	13 87       	std	Z+11, r17	; 0x0b
    5222:	83 e0       	ldi	r24, 0x03	; 3
    5224:	83 83       	std	Z+3, r24	; 0x03
    5226:	14 86       	std	Z+12, r1	; 0x0c
    5228:	15 86       	std	Z+13, r1	; 0x0d
}
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	1f 91       	pop	r17
    5230:	0f 91       	pop	r16
    5232:	ff 90       	pop	r15
    5234:	ef 90       	pop	r14
    5236:	df 90       	pop	r13
    5238:	08 95       	ret

0000523a <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    523a:	8f 92       	push	r8
    523c:	af 92       	push	r10
    523e:	cf 92       	push	r12
    5240:	ef 92       	push	r14
    5242:	ff 92       	push	r15
    5244:	0f 93       	push	r16
    5246:	1f 93       	push	r17
	// RS485 device setup (brute force!)
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	66 ee       	ldi	r22, 0xE6	; 230
    524c:	72 e3       	ldi	r23, 0x32	; 50
    524e:	42 ea       	ldi	r20, 0xA2	; 162
    5250:	54 e3       	ldi	r21, 0x34	; 52
    5252:	2b ee       	ldi	r18, 0xEB	; 235
    5254:	32 e3       	ldi	r19, 0x32	; 50
    5256:	08 e6       	ldi	r16, 0x68	; 104
    5258:	13 e3       	ldi	r17, 0x33	; 51
    525a:	f3 ee       	ldi	r31, 0xE3	; 227
    525c:	ef 2e       	mov	r14, r31
    525e:	f3 e3       	ldi	r31, 0x33	; 51
    5260:	ff 2e       	mov	r15, r31
    5262:	0e 94 ce 28 	call	0x519c	; 0x519c <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm,RS485_DIRSET_bm,RS485_OUTCLR_bm,RS485_OUTSET_bm);
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	60 e0       	ldi	r22, 0x00	; 0
    526a:	45 e7       	ldi	r20, 0x75	; 117
    526c:	55 e1       	ldi	r21, 0x15	; 21
    526e:	20 eb       	ldi	r18, 0xB0	; 176
    5270:	38 e0       	ldi	r19, 0x08	; 8
    5272:	00 e4       	ldi	r16, 0x40	; 64
    5274:	16 e0       	ldi	r17, 0x06	; 6
    5276:	e0 e4       	ldi	r30, 0x40	; 64
    5278:	ee 2e       	mov	r14, r30
    527a:	70 eb       	ldi	r23, 0xB0	; 176
    527c:	c7 2e       	mov	r12, r23
    527e:	90 e3       	ldi	r25, 0x30	; 48
    5280:	a9 2e       	mov	r10, r25
    5282:	b0 e8       	ldi	r27, 0x80	; 128
    5284:	8b 2e       	mov	r8, r27
    5286:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <xio_init_usart>

	// USB device setup
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	69 e2       	ldi	r22, 0x29	; 41
    528e:	70 e3       	ldi	r23, 0x30	; 48
    5290:	40 e0       	ldi	r20, 0x00	; 0
    5292:	52 e3       	ldi	r21, 0x32	; 50
    5294:	2e e2       	ldi	r18, 0x2E	; 46
    5296:	30 e3       	ldi	r19, 0x30	; 48
    5298:	0b ea       	ldi	r16, 0xAB	; 171
    529a:	10 e3       	ldi	r17, 0x30	; 48
    529c:	a1 e5       	ldi	r26, 0x51	; 81
    529e:	ea 2e       	mov	r14, r26
    52a0:	a1 e3       	ldi	r26, 0x31	; 49
    52a2:	fa 2e       	mov	r15, r26
    52a4:	0e 94 ce 28 	call	0x519c	; 0x519c <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	61 e0       	ldi	r22, 0x01	; 1
    52ac:	45 e7       	ldi	r20, 0x75	; 117
    52ae:	55 e5       	ldi	r21, 0x55	; 85
    52b0:	20 ea       	ldi	r18, 0xA0	; 160
    52b2:	38 e0       	ldi	r19, 0x08	; 8
    52b4:	00 e4       	ldi	r16, 0x40	; 64
    52b6:	16 e0       	ldi	r17, 0x06	; 6
    52b8:	f5 e0       	ldi	r31, 0x05	; 5
    52ba:	ef 2e       	mov	r14, r31
    52bc:	ea e0       	ldi	r30, 0x0A	; 10
    52be:	ce 2e       	mov	r12, r30
    52c0:	aa 24       	eor	r10, r10
    52c2:	7a e0       	ldi	r23, 0x0A	; 10
    52c4:	87 2e       	mov	r8, r23
    52c6:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <xio_init_usart>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    52ca:	83 e0       	ldi	r24, 0x03	; 3
    52cc:	63 e4       	ldi	r22, 0x43	; 67
    52ce:	75 e3       	ldi	r23, 0x35	; 53
    52d0:	41 ed       	ldi	r20, 0xD1	; 209
    52d2:	55 e3       	ldi	r21, 0x35	; 53
    52d4:	2b e5       	ldi	r18, 0x5B	; 91
    52d6:	35 e3       	ldi	r19, 0x35	; 53
    52d8:	05 e8       	ldi	r16, 0x85	; 133
    52da:	15 e3       	ldi	r17, 0x35	; 53
    52dc:	9e e5       	ldi	r25, 0x5E	; 94
    52de:	e9 2e       	mov	r14, r25
    52e0:	95 e3       	ldi	r25, 0x35	; 53
    52e2:	f9 2e       	mov	r15, r25
    52e4:	0e 94 ce 28 	call	0x519c	; 0x519c <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    52e8:	83 e0       	ldi	r24, 0x03	; 3
    52ea:	60 e0       	ldi	r22, 0x00	; 0
    52ec:	40 e5       	ldi	r20, 0x50	; 80
    52ee:	55 e1       	ldi	r21, 0x15	; 21
    52f0:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    52f4:	80 91 f5 23 	lds	r24, 0x23F5
    52f8:	90 91 f6 23 	lds	r25, 0x23F6
    52fc:	80 93 0a 25 	sts	0x250A, r24
    5300:	90 93 0b 25 	sts	0x250B, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5304:	80 93 0c 25 	sts	0x250C, r24
    5308:	90 93 0d 25 	sts	0x250D, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    530c:	80 93 0e 25 	sts	0x250E, r24
    5310:	90 93 0f 25 	sts	0x250F, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5314:	0f 92       	push	r0
    5316:	0f 92       	push	r0
    5318:	84 e2       	ldi	r24, 0x24	; 36
    531a:	97 e0       	ldi	r25, 0x07	; 7
    531c:	ed b7       	in	r30, 0x3d	; 61
    531e:	fe b7       	in	r31, 0x3e	; 62
    5320:	81 83       	std	Z+1, r24	; 0x01
    5322:	92 83       	std	Z+2, r25	; 0x02
    5324:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    5328:	0f 90       	pop	r0
    532a:	0f 90       	pop	r0
}
    532c:	1f 91       	pop	r17
    532e:	0f 91       	pop	r16
    5330:	ff 90       	pop	r15
    5332:	ef 90       	pop	r14
    5334:	cf 90       	pop	r12
    5336:	af 90       	pop	r10
    5338:	8f 90       	pop	r8
    533a:	08 95       	ret

0000533c <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    533c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    533e:	e0 ec       	ldi	r30, 0xC0	; 192
    5340:	f1 e0       	ldi	r31, 0x01	; 1
    5342:	80 91 cf 01 	lds	r24, 0x01CF
    5346:	87 fd       	sbrc	r24, 7
    5348:	fa cf       	rjmp	.-12     	; 0x533e <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    534a:	26 2f       	mov	r18, r22
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	2f 71       	andi	r18, 0x1F	; 31
    5350:	30 70       	andi	r19, 0x00	; 0
    5352:	89 2f       	mov	r24, r25
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	45 e0       	ldi	r20, 0x05	; 5
    5358:	88 0f       	add	r24, r24
    535a:	99 1f       	adc	r25, r25
    535c:	4a 95       	dec	r20
    535e:	e1 f7       	brne	.-8      	; 0x5358 <EEPROM_ReadByte+0x1c>
    5360:	28 2b       	or	r18, r24
    5362:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5364:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5368:	83 2f       	mov	r24, r19
    536a:	8f 71       	andi	r24, 0x1F	; 31
    536c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    536e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5370:	86 e0       	ldi	r24, 0x06	; 6
    5372:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5374:	ef 93       	push	r30
    5376:	ff 93       	push	r31
    5378:	0f 93       	push	r16
    537a:	2f 93       	push	r18
    537c:	eb ec       	ldi	r30, 0xCB	; 203
    537e:	f1 e0       	ldi	r31, 0x01	; 1
    5380:	08 ed       	ldi	r16, 0xD8	; 216
    5382:	21 e0       	ldi	r18, 0x01	; 1
    5384:	04 bf       	out	0x34, r16	; 52
    5386:	20 83       	st	Z, r18
    5388:	2f 91       	pop	r18
    538a:	0f 91       	pop	r16
    538c:	ff 91       	pop	r31
    538e:	ef 91       	pop	r30

	return NVM.DATA0;
    5390:	80 91 c4 01 	lds	r24, 0x01C4
}
    5394:	08 95       	ret

00005396 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    5396:	68 2f       	mov	r22, r24
    5398:	6f 71       	andi	r22, 0x1F	; 31
    539a:	55 e0       	ldi	r21, 0x05	; 5
    539c:	96 95       	lsr	r25
    539e:	87 95       	ror	r24
    53a0:	5a 95       	dec	r21
    53a2:	e1 f7       	brne	.-8      	; 0x539c <eeprom_get_char+0x6>
    53a4:	0e 94 9e 29 	call	0x533c	; 0x533c <EEPROM_ReadByte>
}
    53a8:	08 95       	ret

000053aa <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    53aa:	8f 92       	push	r8
    53ac:	9f 92       	push	r9
    53ae:	af 92       	push	r10
    53b0:	bf 92       	push	r11
    53b2:	cf 92       	push	r12
    53b4:	df 92       	push	r13
    53b6:	ff 92       	push	r15
    53b8:	0f 93       	push	r16
    53ba:	1f 93       	push	r17
    53bc:	cf 93       	push	r28
    53be:	df 93       	push	r29
    53c0:	4c 01       	movw	r8, r24
    53c2:	5b 01       	movw	r10, r22
    53c4:	6a 01       	movw	r12, r20
    53c6:	8b 01       	movw	r16, r22
    53c8:	ea 01       	movw	r28, r20
    53ca:	ff 24       	eor	r15, r15
    53cc:	18 c0       	rjmp	.+48     	; 0x53fe <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    53ce:	c8 01       	movw	r24, r16
    53d0:	0e 94 cb 29 	call	0x5396	; 0x5396 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    53d4:	ff 20       	and	r15, r15
    53d6:	19 f0       	breq	.+6      	; 0x53de <memcpy_from_eeprom_with_checksum+0x34>
    53d8:	21 e0       	ldi	r18, 0x01	; 1
    53da:	30 e0       	ldi	r19, 0x00	; 0
    53dc:	08 c0       	rjmp	.+16     	; 0x53ee <memcpy_from_eeprom_with_checksum+0x44>
    53de:	2f 2d       	mov	r18, r15
    53e0:	33 27       	eor	r19, r19
    53e2:	27 fd       	sbrc	r18, 7
    53e4:	30 95       	com	r19
    53e6:	22 27       	eor	r18, r18
    53e8:	33 0f       	add	r19, r19
    53ea:	22 1f       	adc	r18, r18
    53ec:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    53ee:	0f 5f       	subi	r16, 0xFF	; 255
    53f0:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    53f2:	f8 2e       	mov	r15, r24
    53f4:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    53f6:	f4 01       	movw	r30, r8
    53f8:	81 93       	st	Z+, r24
    53fa:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    53fc:	21 97       	sbiw	r28, 0x01	; 1
    53fe:	20 97       	sbiw	r28, 0x00	; 0
    5400:	31 f7       	brne	.-52     	; 0x53ce <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5402:	c6 01       	movw	r24, r12
    5404:	8a 0d       	add	r24, r10
    5406:	9b 1d       	adc	r25, r11
    5408:	0e 94 cb 29 	call	0x5396	; 0x5396 <eeprom_get_char>
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	f8 16       	cp	r15, r24
    5412:	11 f4       	brne	.+4      	; 0x5418 <memcpy_from_eeprom_with_checksum+0x6e>
    5414:	21 e0       	ldi	r18, 0x01	; 1
    5416:	30 e0       	ldi	r19, 0x00	; 0
}
    5418:	c9 01       	movw	r24, r18
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	ff 90       	pop	r15
    5424:	df 90       	pop	r13
    5426:	cf 90       	pop	r12
    5428:	bf 90       	pop	r11
    542a:	af 90       	pop	r10
    542c:	9f 90       	pop	r9
    542e:	8f 90       	pop	r8
    5430:	08 95       	ret

00005432 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5432:	80 91 cf 01 	lds	r24, 0x01CF
    5436:	87 fd       	sbrc	r24, 7
    5438:	fc cf       	rjmp	.-8      	; 0x5432 <EEPROM_WaitForNVM>
}
    543a:	08 95       	ret

0000543c <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    543c:	80 91 cf 01 	lds	r24, 0x01CF
    5440:	87 fd       	sbrc	r24, 7
    5442:	fc cf       	rjmp	.-8      	; 0x543c <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5444:	80 91 cf 01 	lds	r24, 0x01CF
    5448:	81 ff       	sbrs	r24, 1
    544a:	12 c0       	rjmp	.+36     	; 0x5470 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    544c:	86 e3       	ldi	r24, 0x36	; 54
    544e:	e0 ec       	ldi	r30, 0xC0	; 192
    5450:	f1 e0       	ldi	r31, 0x01	; 1
    5452:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5454:	ef 93       	push	r30
    5456:	ff 93       	push	r31
    5458:	0f 93       	push	r16
    545a:	2f 93       	push	r18
    545c:	eb ec       	ldi	r30, 0xCB	; 203
    545e:	f1 e0       	ldi	r31, 0x01	; 1
    5460:	08 ed       	ldi	r16, 0xD8	; 216
    5462:	21 e0       	ldi	r18, 0x01	; 1
    5464:	04 bf       	out	0x34, r16	; 52
    5466:	20 83       	st	Z, r18
    5468:	2f 91       	pop	r18
    546a:	0f 91       	pop	r16
    546c:	ff 91       	pop	r31
    546e:	ef 91       	pop	r30
    5470:	08 95       	ret

00005472 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5472:	df 92       	push	r13
    5474:	ef 92       	push	r14
    5476:	ff 92       	push	r15
    5478:	0f 93       	push	r16
    547a:	1f 93       	push	r17
    547c:	e8 2e       	mov	r14, r24
    547e:	06 2f       	mov	r16, r22
    5480:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5482:	0e 94 1e 2a 	call	0x543c	; 0x543c <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5486:	e0 ec       	ldi	r30, 0xC0	; 192
    5488:	f1 e0       	ldi	r31, 0x01	; 1
    548a:	83 e3       	ldi	r24, 0x33	; 51
    548c:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    548e:	10 e0       	ldi	r17, 0x00	; 0
    5490:	0f 71       	andi	r16, 0x1F	; 31
    5492:	10 70       	andi	r17, 0x00	; 0
    5494:	ff 24       	eor	r15, r15
    5496:	75 e0       	ldi	r23, 0x05	; 5
    5498:	ee 0c       	add	r14, r14
    549a:	ff 1c       	adc	r15, r15
    549c:	7a 95       	dec	r23
    549e:	e1 f7       	brne	.-8      	; 0x5498 <EEPROM_WriteByte+0x26>
    54a0:	0e 29       	or	r16, r14
    54a2:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    54a4:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54a6:	81 2f       	mov	r24, r17
    54a8:	8f 71       	andi	r24, 0x1F	; 31
    54aa:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54ac:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    54ae:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    54b0:	85 e3       	ldi	r24, 0x35	; 53
    54b2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    54b4:	ef 93       	push	r30
    54b6:	ff 93       	push	r31
    54b8:	0f 93       	push	r16
    54ba:	2f 93       	push	r18
    54bc:	eb ec       	ldi	r30, 0xCB	; 203
    54be:	f1 e0       	ldi	r31, 0x01	; 1
    54c0:	08 ed       	ldi	r16, 0xD8	; 216
    54c2:	21 e0       	ldi	r18, 0x01	; 1
    54c4:	04 bf       	out	0x34, r16	; 52
    54c6:	20 83       	st	Z, r18
    54c8:	2f 91       	pop	r18
    54ca:	0f 91       	pop	r16
    54cc:	ff 91       	pop	r31
    54ce:	ef 91       	pop	r30
}
    54d0:	1f 91       	pop	r17
    54d2:	0f 91       	pop	r16
    54d4:	ff 90       	pop	r15
    54d6:	ef 90       	pop	r14
    54d8:	df 90       	pop	r13
    54da:	08 95       	ret

000054dc <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    54dc:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    54de:	68 2f       	mov	r22, r24
    54e0:	6f 71       	andi	r22, 0x1F	; 31
    54e2:	e5 e0       	ldi	r30, 0x05	; 5
    54e4:	96 95       	lsr	r25
    54e6:	87 95       	ror	r24
    54e8:	ea 95       	dec	r30
    54ea:	e1 f7       	brne	.-8      	; 0x54e4 <eeprom_put_char+0x8>
    54ec:	0e 94 39 2a 	call	0x5472	; 0x5472 <EEPROM_WriteByte>
}
    54f0:	08 95       	ret

000054f2 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    54f2:	8f 92       	push	r8
    54f4:	9f 92       	push	r9
    54f6:	af 92       	push	r10
    54f8:	bf 92       	push	r11
    54fa:	cf 92       	push	r12
    54fc:	df 92       	push	r13
    54fe:	ef 92       	push	r14
    5500:	ff 92       	push	r15
    5502:	0f 93       	push	r16
    5504:	df 93       	push	r29
    5506:	cf 93       	push	r28
    5508:	0f 92       	push	r0
    550a:	0f 92       	push	r0
    550c:	cd b7       	in	r28, 0x3d	; 61
    550e:	de b7       	in	r29, 0x3e	; 62
    5510:	5c 01       	movw	r10, r24
    5512:	6b 01       	movw	r12, r22
    5514:	7a 01       	movw	r14, r20
    5516:	4a 01       	movw	r8, r20
    5518:	00 e0       	ldi	r16, 0x00	; 0
    551a:	1e c0       	rjmp	.+60     	; 0x5558 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    551c:	00 23       	and	r16, r16
    551e:	19 f0       	breq	.+6      	; 0x5526 <memcpy_to_eeprom_with_checksum+0x34>
    5520:	21 e0       	ldi	r18, 0x01	; 1
    5522:	30 e0       	ldi	r19, 0x00	; 0
    5524:	08 c0       	rjmp	.+16     	; 0x5536 <memcpy_to_eeprom_with_checksum+0x44>
    5526:	20 2f       	mov	r18, r16
    5528:	33 27       	eor	r19, r19
    552a:	27 fd       	sbrc	r18, 7
    552c:	30 95       	com	r19
    552e:	22 27       	eor	r18, r18
    5530:	33 0f       	add	r19, r19
    5532:	22 1f       	adc	r18, r18
    5534:	33 27       	eor	r19, r19
    checksum += *source;
    5536:	f6 01       	movw	r30, r12
    5538:	61 91       	ld	r22, Z+
    553a:	6f 01       	movw	r12, r30
    553c:	06 2f       	mov	r16, r22
    553e:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5540:	9c 01       	movw	r18, r24
    5542:	2f 5f       	subi	r18, 0xFF	; 255
    5544:	3f 4f       	sbci	r19, 0xFF	; 255
    5546:	29 83       	std	Y+1, r18	; 0x01
    5548:	3a 83       	std	Y+2, r19	; 0x02
    554a:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    554e:	08 94       	sec
    5550:	81 08       	sbc	r8, r1
    5552:	91 08       	sbc	r9, r1
    5554:	89 81       	ldd	r24, Y+1	; 0x01
    5556:	9a 81       	ldd	r25, Y+2	; 0x02
    5558:	81 14       	cp	r8, r1
    555a:	91 04       	cpc	r9, r1
    555c:	f9 f6       	brne	.-66     	; 0x551c <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    555e:	c7 01       	movw	r24, r14
    5560:	8a 0d       	add	r24, r10
    5562:	9b 1d       	adc	r25, r11
    5564:	60 2f       	mov	r22, r16
    5566:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <eeprom_put_char>
}
    556a:	0f 90       	pop	r0
    556c:	0f 90       	pop	r0
    556e:	cf 91       	pop	r28
    5570:	df 91       	pop	r29
    5572:	0f 91       	pop	r16
    5574:	ff 90       	pop	r15
    5576:	ef 90       	pop	r14
    5578:	df 90       	pop	r13
    557a:	cf 90       	pop	r12
    557c:	bf 90       	pop	r11
    557e:	af 90       	pop	r10
    5580:	9f 90       	pop	r9
    5582:	8f 90       	pop	r8
    5584:	08 95       	ret

00005586 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5586:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5588:	e0 ec       	ldi	r30, 0xC0	; 192
    558a:	f1 e0       	ldi	r31, 0x01	; 1
    558c:	80 91 cf 01 	lds	r24, 0x01CF
    5590:	87 fd       	sbrc	r24, 7
    5592:	fa cf       	rjmp	.-12     	; 0x5588 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5594:	83 e3       	ldi	r24, 0x33	; 51
    5596:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5598:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    559c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    559e:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    55a0:	64 83       	std	Z+4, r22	; 0x04
}
    55a2:	08 95       	ret

000055a4 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    55a4:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55a6:	e0 ec       	ldi	r30, 0xC0	; 192
    55a8:	f1 e0       	ldi	r31, 0x01	; 1
    55aa:	80 91 cf 01 	lds	r24, 0x01CF
    55ae:	87 fd       	sbrc	r24, 7
    55b0:	fa cf       	rjmp	.-12     	; 0x55a6 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55b2:	83 e3       	ldi	r24, 0x33	; 51
    55b4:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    55b6:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    55b8:	12 82       	std	Z+2, r1	; 0x02
    55ba:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    55bc:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    55c0:	8d 91       	ld	r24, X+
    55c2:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    55c4:	9f 5f       	subi	r25, 0xFF	; 255
    55c6:	90 32       	cpi	r25, 0x20	; 32
    55c8:	c9 f7       	brne	.-14     	; 0x55bc <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    55ca:	08 95       	ret

000055cc <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    55cc:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55ce:	e0 ec       	ldi	r30, 0xC0	; 192
    55d0:	f1 e0       	ldi	r31, 0x01	; 1
    55d2:	80 91 cf 01 	lds	r24, 0x01CF
    55d6:	87 fd       	sbrc	r24, 7
    55d8:	fa cf       	rjmp	.-12     	; 0x55ce <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    55da:	89 2f       	mov	r24, r25
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	a5 e0       	ldi	r26, 0x05	; 5
    55e0:	88 0f       	add	r24, r24
    55e2:	99 1f       	adc	r25, r25
    55e4:	aa 95       	dec	r26
    55e6:	e1 f7       	brne	.-8      	; 0x55e0 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    55e8:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    55ec:	89 2f       	mov	r24, r25
    55ee:	8f 71       	andi	r24, 0x1F	; 31
    55f0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    55f2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    55f4:	85 e3       	ldi	r24, 0x35	; 53
    55f6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    55f8:	ef 93       	push	r30
    55fa:	ff 93       	push	r31
    55fc:	0f 93       	push	r16
    55fe:	2f 93       	push	r18
    5600:	eb ec       	ldi	r30, 0xCB	; 203
    5602:	f1 e0       	ldi	r31, 0x01	; 1
    5604:	08 ed       	ldi	r16, 0xD8	; 216
    5606:	21 e0       	ldi	r18, 0x01	; 1
    5608:	04 bf       	out	0x34, r16	; 52
    560a:	20 83       	st	Z, r18
    560c:	2f 91       	pop	r18
    560e:	0f 91       	pop	r16
    5610:	ff 91       	pop	r31
    5612:	ef 91       	pop	r30
}
    5614:	08 95       	ret

00005616 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5616:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5618:	e0 ec       	ldi	r30, 0xC0	; 192
    561a:	f1 e0       	ldi	r31, 0x01	; 1
    561c:	80 91 cf 01 	lds	r24, 0x01CF
    5620:	87 fd       	sbrc	r24, 7
    5622:	fa cf       	rjmp	.-12     	; 0x5618 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5624:	89 2f       	mov	r24, r25
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	b5 e0       	ldi	r27, 0x05	; 5
    562a:	88 0f       	add	r24, r24
    562c:	99 1f       	adc	r25, r25
    562e:	ba 95       	dec	r27
    5630:	e1 f7       	brne	.-8      	; 0x562a <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5632:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5636:	89 2f       	mov	r24, r25
    5638:	8f 71       	andi	r24, 0x1F	; 31
    563a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    563c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    563e:	82 e3       	ldi	r24, 0x32	; 50
    5640:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5642:	ef 93       	push	r30
    5644:	ff 93       	push	r31
    5646:	0f 93       	push	r16
    5648:	2f 93       	push	r18
    564a:	eb ec       	ldi	r30, 0xCB	; 203
    564c:	f1 e0       	ldi	r31, 0x01	; 1
    564e:	08 ed       	ldi	r16, 0xD8	; 216
    5650:	21 e0       	ldi	r18, 0x01	; 1
    5652:	04 bf       	out	0x34, r16	; 52
    5654:	20 83       	st	Z, r18
    5656:	2f 91       	pop	r18
    5658:	0f 91       	pop	r16
    565a:	ff 91       	pop	r31
    565c:	ef 91       	pop	r30
}
    565e:	08 95       	ret

00005660 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5660:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5662:	e0 ec       	ldi	r30, 0xC0	; 192
    5664:	f1 e0       	ldi	r31, 0x01	; 1
    5666:	80 91 cf 01 	lds	r24, 0x01CF
    566a:	87 fd       	sbrc	r24, 7
    566c:	fa cf       	rjmp	.-12     	; 0x5662 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    566e:	89 2f       	mov	r24, r25
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	25 e0       	ldi	r18, 0x05	; 5
    5674:	88 0f       	add	r24, r24
    5676:	99 1f       	adc	r25, r25
    5678:	2a 95       	dec	r18
    567a:	e1 f7       	brne	.-8      	; 0x5674 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    567c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5680:	89 2f       	mov	r24, r25
    5682:	8f 71       	andi	r24, 0x1F	; 31
    5684:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5686:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5688:	84 e3       	ldi	r24, 0x34	; 52
    568a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    568c:	ef 93       	push	r30
    568e:	ff 93       	push	r31
    5690:	0f 93       	push	r16
    5692:	2f 93       	push	r18
    5694:	eb ec       	ldi	r30, 0xCB	; 203
    5696:	f1 e0       	ldi	r31, 0x01	; 1
    5698:	08 ed       	ldi	r16, 0xD8	; 216
    569a:	21 e0       	ldi	r18, 0x01	; 1
    569c:	04 bf       	out	0x34, r16	; 52
    569e:	20 83       	st	Z, r18
    56a0:	2f 91       	pop	r18
    56a2:	0f 91       	pop	r16
    56a4:	ff 91       	pop	r31
    56a6:	ef 91       	pop	r30
}
    56a8:	08 95       	ret

000056aa <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56aa:	80 91 cf 01 	lds	r24, 0x01CF
    56ae:	87 fd       	sbrc	r24, 7
    56b0:	fc cf       	rjmp	.-8      	; 0x56aa <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    56b2:	80 e3       	ldi	r24, 0x30	; 48
    56b4:	e0 ec       	ldi	r30, 0xC0	; 192
    56b6:	f1 e0       	ldi	r31, 0x01	; 1
    56b8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    56ba:	ef 93       	push	r30
    56bc:	ff 93       	push	r31
    56be:	0f 93       	push	r16
    56c0:	2f 93       	push	r18
    56c2:	eb ec       	ldi	r30, 0xCB	; 203
    56c4:	f1 e0       	ldi	r31, 0x01	; 1
    56c6:	08 ed       	ldi	r16, 0xD8	; 216
    56c8:	21 e0       	ldi	r18, 0x01	; 1
    56ca:	04 bf       	out	0x34, r16	; 52
    56cc:	20 83       	st	Z, r18
    56ce:	2f 91       	pop	r18
    56d0:	0f 91       	pop	r16
    56d2:	ff 91       	pop	r31
    56d4:	ef 91       	pop	r30
}
    56d6:	08 95       	ret

000056d8 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    56d8:	80 91 88 21 	lds	r24, 0x2188
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    56dc:	80 93 87 21 	sts	0x2187, r24
	if (tg.src == XIO_DEV_PGM) {
    56e0:	83 30       	cpi	r24, 0x03	; 3
    56e2:	21 f4       	brne	.+8      	; 0x56ec <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    56e4:	80 91 84 21 	lds	r24, 0x2184
    56e8:	8e 7f       	andi	r24, 0xFE	; 254
    56ea:	03 c0       	rjmp	.+6      	; 0x56f2 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    56ec:	80 91 84 21 	lds	r24, 0x2184
    56f0:	81 60       	ori	r24, 0x01	; 1
    56f2:	80 93 84 21 	sts	0x2184, r24
    56f6:	08 95       	ret

000056f8 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    56f8:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    56fa:	80 91 86 21 	lds	r24, 0x2186
    56fe:	88 23       	and	r24, r24
    5700:	a1 f5       	brne	.+104    	; 0x576a <tg_parser+0x72>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5702:	90 81       	ld	r25, Z
    5704:	89 2f       	mov	r24, r25
    5706:	81 56       	subi	r24, 0x61	; 97
    5708:	8a 31       	cpi	r24, 0x1A	; 26
    570a:	10 f4       	brcc	.+4      	; 0x5710 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    570c:	90 52       	subi	r25, 0x20	; 32
    570e:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5710:	80 81       	ld	r24, Z
    5712:	86 34       	cpi	r24, 0x46	; 70
    5714:	b1 f0       	breq	.+44     	; 0x5742 <tg_parser+0x4a>
    5716:	87 34       	cpi	r24, 0x47	; 71
    5718:	38 f4       	brcc	.+14     	; 0x5728 <tg_parser+0x30>
    571a:	83 34       	cpi	r24, 0x43	; 67
    571c:	61 f0       	breq	.+24     	; 0x5736 <tg_parser+0x3e>
    571e:	84 34       	cpi	r24, 0x44	; 68
    5720:	71 f0       	breq	.+28     	; 0x573e <tg_parser+0x46>
    5722:	8f 33       	cpi	r24, 0x3F	; 63
    5724:	01 f5       	brne	.+64     	; 0x5766 <tg_parser+0x6e>
    5726:	07 c0       	rjmp	.+14     	; 0x5736 <tg_parser+0x3e>
    5728:	87 34       	cpi	r24, 0x47	; 71
    572a:	19 f0       	breq	.+6      	; 0x5732 <tg_parser+0x3a>
    572c:	8d 54       	subi	r24, 0x4D	; 77
    572e:	82 30       	cpi	r24, 0x02	; 2
    5730:	d0 f4       	brcc	.+52     	; 0x5766 <tg_parser+0x6e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5732:	82 e0       	ldi	r24, 0x02	; 2
    5734:	01 c0       	rjmp	.+2      	; 0x5738 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	80 93 86 21 	sts	0x2186, r24
    573c:	16 c0       	rjmp	.+44     	; 0x576a <tg_parser+0x72>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    573e:	83 e0       	ldi	r24, 0x03	; 3
    5740:	fb cf       	rjmp	.-10     	; 0x5738 <tg_parser+0x40>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5742:	88 e8       	ldi	r24, 0x88	; 136
    5744:	95 e1       	ldi	r25, 0x15	; 21
    5746:	0e 94 43 35 	call	0x6a86	; 0x6a86 <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    574a:	83 e0       	ldi	r24, 0x03	; 3
    574c:	80 93 87 21 	sts	0x2187, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5750:	80 91 84 21 	lds	r24, 0x2184
    5754:	8e 7f       	andi	r24, 0xFE	; 254
    5756:	80 93 84 21 	sts	0x2184, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    575a:	82 e0       	ldi	r24, 0x02	; 2
    575c:	80 93 86 21 	sts	0x2186, r24
    5760:	20 e0       	ldi	r18, 0x00	; 0
    5762:	30 e0       	ldi	r19, 0x00	; 0
    5764:	1d c0       	rjmp	.+58     	; 0x57a0 <tg_parser+0xa8>
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    5766:	10 92 86 21 	sts	0x2186, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    576a:	10 92 85 21 	sts	0x2185, r1
	switch (tg.mode) {
    576e:	80 91 86 21 	lds	r24, 0x2186
    5772:	82 30       	cpi	r24, 0x02	; 2
    5774:	41 f0       	breq	.+16     	; 0x5786 <tg_parser+0x8e>
    5776:	83 30       	cpi	r24, 0x03	; 3
    5778:	51 f0       	breq	.+20     	; 0x578e <tg_parser+0x96>
    577a:	81 30       	cpi	r24, 0x01	; 1
    577c:	69 f4       	brne	.+26     	; 0x5798 <tg_parser+0xa0>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    577e:	cf 01       	movw	r24, r30
    5780:	0e 94 80 19 	call	0x3300	; 0x3300 <cfg_parse>
    5784:	07 c0       	rjmp	.+14     	; 0x5794 <tg_parser+0x9c>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    5786:	cf 01       	movw	r24, r30
    5788:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <gc_gcode_parser>
    578c:	03 c0       	rjmp	.+6      	; 0x5794 <tg_parser+0x9c>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    578e:	cf 01       	movw	r24, r30
    5790:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <dd_parser>
    5794:	80 93 85 21 	sts	0x2185, r24
	}
	return (tg.status);
    5798:	80 91 85 21 	lds	r24, 0x2185
    579c:	28 2f       	mov	r18, r24
    579e:	30 e0       	ldi	r19, 0x00	; 0
}
    57a0:	c9 01       	movw	r24, r18
    57a2:	08 95       	ret

000057a4 <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    57a4:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    57a8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_line_continue>
    57ac:	80 93 85 21 	sts	0x2185, r24
    57b0:	82 30       	cpi	r24, 0x02	; 2
    57b2:	09 f4       	brne	.+2      	; 0x57b6 <tg_controller+0x12>
    57b4:	5e c0       	rjmp	.+188    	; 0x5872 <tg_controller+0xce>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    57b6:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <mc_arc_continue>
    57ba:	80 93 85 21 	sts	0x2185, r24
    57be:	82 30       	cpi	r24, 0x02	; 2
    57c0:	09 f4       	brne	.+2      	; 0x57c4 <tg_controller+0x20>
    57c2:	57 c0       	rjmp	.+174    	; 0x5872 <tg_controller+0xce>
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, tg.len)) == TG_OK) {
    57c4:	80 91 87 21 	lds	r24, 0x2187
    57c8:	6b e8       	ldi	r22, 0x8B	; 139
    57ca:	71 e2       	ldi	r23, 0x21	; 33
    57cc:	40 91 8a 21 	lds	r20, 0x218A
    57d0:	0e 94 b4 28 	call	0x5168	; 0x5168 <xio_readln>
    57d4:	80 93 85 21 	sts	0x2185, r24
    57d8:	88 23       	and	r24, r24
    57da:	31 f4       	brne	.+12     	; 0x57e8 <tg_controller+0x44>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    57dc:	8b e8       	ldi	r24, 0x8B	; 139
    57de:	91 e2       	ldi	r25, 0x21	; 33
    57e0:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <tg_parser>
    57e4:	80 93 85 21 	sts	0x2185, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    57e8:	80 91 85 21 	lds	r24, 0x2185
    57ec:	84 30       	cpi	r24, 0x04	; 4
    57ee:	18 f4       	brcc	.+6      	; 0x57f6 <tg_controller+0x52>
    57f0:	82 30       	cpi	r24, 0x02	; 2
    57f2:	c0 f4       	brcc	.+48     	; 0x5824 <tg_controller+0x80>
    57f4:	15 c0       	rjmp	.+42     	; 0x5820 <tg_controller+0x7c>
    57f6:	85 30       	cpi	r24, 0x05	; 5
    57f8:	29 f0       	breq	.+10     	; 0x5804 <tg_controller+0x60>
    57fa:	8b 30       	cpi	r24, 0x0B	; 11
    57fc:	89 f4       	brne	.+34     	; 0x5820 <tg_controller+0x7c>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    57fe:	10 92 86 21 	sts	0x2186, r1
    5802:	0e c0       	rjmp	.+28     	; 0x5820 <tg_controller+0x7c>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    5804:	0f 92       	push	r0
    5806:	0f 92       	push	r0
    5808:	82 ea       	ldi	r24, 0xA2	; 162
    580a:	99 e1       	ldi	r25, 0x19	; 25
    580c:	ed b7       	in	r30, 0x3d	; 61
    580e:	fe b7       	in	r31, 0x3e	; 62
    5810:	81 83       	std	Z+1, r24	; 0x01
    5812:	92 83       	std	Z+2, r25	; 0x02
    5814:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
			tg_reset_source();						// reset to default src
    5818:	0f 90       	pop	r0
    581a:	0f 90       	pop	r0
    581c:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    5820:	10 92 83 21 	sts	0x2183, r1
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    5824:	10 92 85 21 	sts	0x2185, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5828:	80 91 83 21 	lds	r24, 0x2183
    582c:	88 23       	and	r24, r24
    582e:	09 f5       	brne	.+66     	; 0x5872 <tg_controller+0xce>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    5830:	80 91 84 21 	lds	r24, 0x2184
    5834:	88 23       	and	r24, r24
    5836:	d1 f0       	breq	.+52     	; 0x586c <tg_controller+0xc8>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5838:	80 91 86 21 	lds	r24, 0x2186
    583c:	e8 2f       	mov	r30, r24
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	ee 0f       	add	r30, r30
    5842:	ff 1f       	adc	r31, r31
    5844:	e6 56       	subi	r30, 0x66	; 102
    5846:	f6 4e       	sbci	r31, 0xE6	; 230
    5848:	25 91       	lpm	r18, Z+
    584a:	34 91       	lpm	r19, Z+
    584c:	00 d0       	rcall	.+0      	; 0x584e <tg_controller+0xaa>
    584e:	0f 92       	push	r0
    5850:	87 eb       	ldi	r24, 0xB7	; 183
    5852:	99 e1       	ldi	r25, 0x19	; 25
    5854:	ed b7       	in	r30, 0x3d	; 61
    5856:	fe b7       	in	r31, 0x3e	; 62
    5858:	81 83       	std	Z+1, r24	; 0x01
    585a:	92 83       	std	Z+2, r25	; 0x02
    585c:	23 83       	std	Z+3, r18	; 0x03
    585e:	34 83       	std	Z+4, r19	; 0x04
    5860:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    5864:	0f 90       	pop	r0
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    586c:	81 e0       	ldi	r24, 0x01	; 1
    586e:	80 93 83 21 	sts	0x2183, r24
    5872:	08 95       	ret

00005874 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    5874:	81 e0       	ldi	r24, 0x01	; 1
    5876:	80 93 88 21 	sts	0x2188, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    587a:	e8 e8       	ldi	r30, 0x88	; 136
    587c:	f1 e2       	ldi	r31, 0x21	; 33
    587e:	80 93 87 21 	sts	0x2187, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    5882:	34 97       	sbiw	r30, 0x04	; 4
    5884:	80 81       	ld	r24, Z
    5886:	81 60       	ori	r24, 0x01	; 1
    5888:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    588a:	10 92 86 21 	sts	0x2186, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    588e:	10 92 83 21 	sts	0x2183, r1
	tg.len = sizeof(tg.buf);
    5892:	80 e5       	ldi	r24, 0x50	; 80
    5894:	80 93 8a 21 	sts	0x218A, r24

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    5898:	00 d0       	rcall	.+0      	; 0x589a <tg_init+0x26>
    589a:	0f 92       	push	r0
    589c:	8f ec       	ldi	r24, 0xCF	; 207
    589e:	99 e1       	ldi	r25, 0x19	; 25
    58a0:	ed b7       	in	r30, 0x3d	; 61
    58a2:	fe b7       	in	r31, 0x3e	; 62
    58a4:	81 83       	std	Z+1, r24	; 0x01
    58a6:	92 83       	std	Z+2, r25	; 0x02
    58a8:	85 ec       	ldi	r24, 0xC5	; 197
    58aa:	99 e1       	ldi	r25, 0x19	; 25
    58ac:	83 83       	std	Z+3, r24	; 0x03
    58ae:	94 83       	std	Z+4, r25	; 0x04
    58b0:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <printf_P>
    58b4:	0f 90       	pop	r0
    58b6:	0f 90       	pop	r0
    58b8:	0f 90       	pop	r0
    58ba:	0f 90       	pop	r0
}
    58bc:	08 95       	ret

000058be <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    58be:	08 95       	ret

000058c0 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	08 95       	ret

000058c6 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    58c6:	10 92 db 21 	sts	0x21DB, r1
	mv.move_buffer_tail = 0;
    58ca:	10 92 dc 21 	sts	0x21DC, r1
}
    58ce:	08 95       	ret

000058d0 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    58d0:	90 91 db 21 	lds	r25, 0x21DB
    58d4:	80 91 dc 21 	lds	r24, 0x21DC
    58d8:	98 17       	cp	r25, r24
    58da:	19 f4       	brne	.+6      	; 0x58e2 <mv_dequeue_move_buffer+0x12>
    58dc:	20 e0       	ldi	r18, 0x00	; 0
    58de:	30 e0       	ldi	r19, 0x00	; 0
    58e0:	17 c0       	rjmp	.+46     	; 0x5910 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    58e2:	90 91 dc 21 	lds	r25, 0x21DC
    58e6:	8e e1       	ldi	r24, 0x1E	; 30
    58e8:	98 9f       	mul	r25, r24
    58ea:	90 01       	movw	r18, r0
    58ec:	11 24       	eor	r1, r1
    58ee:	21 52       	subi	r18, 0x21	; 33
    58f0:	3e 4d       	sbci	r19, 0xDE	; 222
    58f2:	20 93 dd 21 	sts	0x21DD, r18
    58f6:	30 93 de 21 	sts	0x21DE, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    58fa:	80 91 dc 21 	lds	r24, 0x21DC
    58fe:	8f 5f       	subi	r24, 0xFF	; 255
    5900:	80 93 dc 21 	sts	0x21DC, r24
    5904:	80 91 dc 21 	lds	r24, 0x21DC
    5908:	83 30       	cpi	r24, 0x03	; 3
    590a:	10 f0       	brcs	.+4      	; 0x5910 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    590c:	10 92 dc 21 	sts	0x21DC, r1
	}
	return (mv.p); 
}
    5910:	c9 01       	movw	r24, r18
    5912:	08 95       	ret

00005914 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5914:	90 91 db 21 	lds	r25, 0x21DB
    5918:	9f 5f       	subi	r25, 0xFF	; 255
    591a:	93 30       	cpi	r25, 0x03	; 3
    591c:	08 f0       	brcs	.+2      	; 0x5920 <mv_test_move_buffer_full+0xc>
    591e:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    5920:	80 91 dc 21 	lds	r24, 0x21DC
    5924:	20 e0       	ldi	r18, 0x00	; 0
    5926:	89 17       	cp	r24, r25
    5928:	09 f4       	brne	.+2      	; 0x592c <mv_test_move_buffer_full+0x18>
    592a:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    592c:	82 2f       	mov	r24, r18
    592e:	08 95       	ret

00005930 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5930:	0b c0       	rjmp	.+22     	; 0x5948 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    5932:	80 91 48 00 	lds	r24, 0x0048
    5936:	81 60       	ori	r24, 0x01	; 1
    5938:	80 93 48 00 	sts	0x0048, r24
    593c:	88 95       	sleep
    593e:	80 91 48 00 	lds	r24, 0x0048
    5942:	8e 7f       	andi	r24, 0xFE	; 254
    5944:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    5948:	90 91 dc 21 	lds	r25, 0x21DC
    594c:	80 91 db 21 	lds	r24, 0x21DB
    5950:	98 17       	cp	r25, r24
    5952:	79 f7       	brne	.-34     	; 0x5932 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    5954:	08 95       	ret

00005956 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    5956:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    5958:	80 91 db 21 	lds	r24, 0x21DB
    595c:	80 93 dc 21 	sts	0x21DC, r24
	mv.p = NULL;
    5960:	10 92 dd 21 	sts	0x21DD, r1
    5964:	10 92 de 21 	sts	0x21DE, r1
	sei();
    5968:	78 94       	sei
}
    596a:	08 95       	ret

0000596c <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    596c:	2f 92       	push	r2
    596e:	3f 92       	push	r3
    5970:	4f 92       	push	r4
    5972:	5f 92       	push	r5
    5974:	6f 92       	push	r6
    5976:	7f 92       	push	r7
    5978:	8f 92       	push	r8
    597a:	9f 92       	push	r9
    597c:	af 92       	push	r10
    597e:	bf 92       	push	r11
    5980:	cf 92       	push	r12
    5982:	df 92       	push	r13
    5984:	ef 92       	push	r14
    5986:	ff 92       	push	r15
    5988:	0f 93       	push	r16
    598a:	1f 93       	push	r17
    598c:	df 93       	push	r29
    598e:	cf 93       	push	r28
    5990:	cd b7       	in	r28, 0x3d	; 61
    5992:	de b7       	in	r29, 0x3e	; 62
    5994:	2b 97       	sbiw	r28, 0x0b	; 11
    5996:	cd bf       	out	0x3d, r28	; 61
    5998:	de bf       	out	0x3e, r29	; 62
    599a:	3b 01       	movw	r6, r22
    599c:	4c 01       	movw	r8, r24
    599e:	19 01       	movw	r2, r18
    59a0:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    59a2:	20 91 db 21 	lds	r18, 0x21DB
    59a6:	2f 5f       	subi	r18, 0xFF	; 255
    59a8:	29 87       	std	Y+9, r18	; 0x09
    59aa:	23 30       	cpi	r18, 0x03	; 3
    59ac:	08 f0       	brcs	.+2      	; 0x59b0 <mv_queue_move_buffer+0x44>
    59ae:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    59b0:	80 91 dc 21 	lds	r24, 0x21DC
    59b4:	39 85       	ldd	r19, Y+9	; 0x09
    59b6:	83 17       	cp	r24, r19
    59b8:	11 f4       	brne	.+4      	; 0x59be <mv_queue_move_buffer+0x52>
    59ba:	8a e0       	ldi	r24, 0x0A	; 10
    59bc:	92 c1       	rjmp	.+804    	; 0x5ce2 <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    59be:	e0 91 db 21 	lds	r30, 0x21DB
    59c2:	8e e1       	ldi	r24, 0x1E	; 30
    59c4:	e8 9f       	mul	r30, r24
    59c6:	f0 01       	movw	r30, r0
    59c8:	11 24       	eor	r1, r1
    59ca:	e1 52       	subi	r30, 0x21	; 33
    59cc:	fe 4d       	sbci	r31, 0xDE	; 222
    59ce:	e0 93 dd 21 	sts	0x21DD, r30
    59d2:	f0 93 de 21 	sts	0x21DE, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    59d6:	df 01       	movw	r26, r30
    59d8:	1d 92       	st	X+, r1
    59da:	8a 95       	dec	r24
    59dc:	e9 f7       	brne	.-6      	; 0x59d8 <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    59de:	e0 91 dd 21 	lds	r30, 0x21DD
    59e2:	f0 91 de 21 	lds	r31, 0x21DE
    59e6:	ea 87       	std	Y+10, r30	; 0x0a
    59e8:	fb 87       	std	Y+11, r31	; 0x0b
    59ea:	60 82       	st	Z, r6
    59ec:	71 82       	std	Z+1, r7	; 0x01
    59ee:	82 82       	std	Z+2, r8	; 0x02
    59f0:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    59f2:	22 86       	std	Z+10, r2	; 0x0a
    59f4:	33 86       	std	Z+11, r3	; 0x0b
    59f6:	44 86       	std	Z+12, r4	; 0x0c
    59f8:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    59fa:	e4 8a       	std	Z+20, r14	; 0x14
    59fc:	f5 8a       	std	Z+21, r15	; 0x15
    59fe:	06 8b       	std	Z+22, r16	; 0x16
    5a00:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    5a02:	a5 e0       	ldi	r26, 0x05	; 5
    5a04:	aa 0c       	add	r10, r10
    5a06:	bb 1c       	adc	r11, r11
    5a08:	cc 1c       	adc	r12, r12
    5a0a:	dd 1c       	adc	r13, r13
    5a0c:	aa 95       	dec	r26
    5a0e:	d1 f7       	brne	.-12     	; 0x5a04 <mv_queue_move_buffer+0x98>
    5a10:	a6 01       	movw	r20, r12
    5a12:	95 01       	movw	r18, r10
    5a14:	60 e0       	ldi	r22, 0x00	; 0
    5a16:	70 e0       	ldi	r23, 0x00	; 0
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	a9 82       	std	Y+1, r10	; 0x01
    5a1e:	3a 83       	std	Y+2, r19	; 0x02
    5a20:	4b 83       	std	Y+3, r20	; 0x03
    5a22:	5c 83       	std	Y+4, r21	; 0x04
    5a24:	6d 83       	std	Y+5, r22	; 0x05
    5a26:	7e 83       	std	Y+6, r23	; 0x06
    5a28:	8f 83       	std	Y+7, r24	; 0x07
    5a2a:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5a2c:	61 14       	cp	r6, r1
    5a2e:	71 04       	cpc	r7, r1
    5a30:	81 04       	cpc	r8, r1
    5a32:	91 04       	cpc	r9, r1
    5a34:	09 f0       	breq	.+2      	; 0x5a38 <mv_queue_move_buffer+0xcc>
    5a36:	4b c0       	rjmp	.+150    	; 0x5ace <mv_queue_move_buffer+0x162>
    5a38:	21 14       	cp	r2, r1
    5a3a:	31 04       	cpc	r3, r1
    5a3c:	41 04       	cpc	r4, r1
    5a3e:	51 04       	cpc	r5, r1
    5a40:	09 f0       	breq	.+2      	; 0x5a44 <mv_queue_move_buffer+0xd8>
    5a42:	45 c0       	rjmp	.+138    	; 0x5ace <mv_queue_move_buffer+0x162>
    5a44:	e1 14       	cp	r14, r1
    5a46:	f1 04       	cpc	r15, r1
    5a48:	01 05       	cpc	r16, r1
    5a4a:	11 05       	cpc	r17, r1
    5a4c:	09 f0       	breq	.+2      	; 0x5a50 <mv_queue_move_buffer+0xe4>
    5a4e:	3f c0       	rjmp	.+126    	; 0x5ace <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	a0 e0       	ldi	r26, 0x00	; 0
    5a56:	b0 e0       	ldi	r27, 0x00	; 0
    5a58:	80 83       	st	Z, r24
    5a5a:	91 83       	std	Z+1, r25	; 0x01
    5a5c:	a2 83       	std	Z+2, r26	; 0x02
    5a5e:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	86 83       	std	Z+6, r24	; 0x06
    5a66:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    5a68:	60 e0       	ldi	r22, 0x00	; 0
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	90 e0       	ldi	r25, 0x00	; 0
    5a70:	aa 24       	eor	r10, r10
    5a72:	a3 94       	inc	r10
    5a74:	bb 24       	eor	r11, r11
    5a76:	cc 24       	eor	r12, r12
    5a78:	dd 24       	eor	r13, r13
    5a7a:	ee 24       	eor	r14, r14
    5a7c:	ff 24       	eor	r15, r15
    5a7e:	00 e0       	ldi	r16, 0x00	; 0
    5a80:	10 e0       	ldi	r17, 0x00	; 0
    5a82:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__udivdi3>
    5a86:	c9 01       	movw	r24, r18
    5a88:	da 01       	movw	r26, r20
    5a8a:	9c 01       	movw	r18, r24
    5a8c:	ad 01       	movw	r20, r26
    5a8e:	10 c0       	rjmp	.+32     	; 0x5ab0 <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    5a90:	56 95       	lsr	r21
    5a92:	47 95       	ror	r20
    5a94:	37 95       	ror	r19
    5a96:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    5a98:	aa 85       	ldd	r26, Y+10	; 0x0a
    5a9a:	bb 85       	ldd	r27, Y+11	; 0x0b
    5a9c:	16 96       	adiw	r26, 0x06	; 6
    5a9e:	8d 91       	ld	r24, X+
    5aa0:	9c 91       	ld	r25, X
    5aa2:	17 97       	sbiw	r26, 0x07	; 7
    5aa4:	88 0f       	add	r24, r24
    5aa6:	99 1f       	adc	r25, r25
    5aa8:	16 96       	adiw	r26, 0x06	; 6
    5aaa:	8d 93       	st	X+, r24
    5aac:	9c 93       	st	X, r25
    5aae:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    5ab0:	da 01       	movw	r26, r20
    5ab2:	c9 01       	movw	r24, r18
    5ab4:	80 70       	andi	r24, 0x00	; 0
    5ab6:	90 70       	andi	r25, 0x00	; 0
    5ab8:	00 97       	sbiw	r24, 0x00	; 0
    5aba:	a1 05       	cpc	r26, r1
    5abc:	b1 05       	cpc	r27, r1
    5abe:	41 f7       	brne	.-48     	; 0x5a90 <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    5ac0:	ea 85       	ldd	r30, Y+10	; 0x0a
    5ac2:	fb 85       	ldd	r31, Y+11	; 0x0b
    5ac4:	24 83       	std	Z+4, r18	; 0x04
    5ac6:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	81 87       	std	Z+9, r24	; 0x09
    5acc:	04 c1       	rjmp	.+520    	; 0x5cd6 <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5ace:	44 24       	eor	r4, r4
    5ad0:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5ad2:	40 91 dd 21 	lds	r20, 0x21DD
    5ad6:	50 91 de 21 	lds	r21, 0x21DE
    5ada:	34 2c       	mov	r3, r4
    5adc:	25 2c       	mov	r2, r5
    5ade:	c2 01       	movw	r24, r4
    5ae0:	fc 01       	movw	r30, r24
    5ae2:	73 e0       	ldi	r23, 0x03	; 3
    5ae4:	ee 0f       	add	r30, r30
    5ae6:	ff 1f       	adc	r31, r31
    5ae8:	7a 95       	dec	r23
    5aea:	e1 f7       	brne	.-8      	; 0x5ae4 <mv_queue_move_buffer+0x178>
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	e8 0f       	add	r30, r24
    5af2:	f9 1f       	adc	r31, r25
    5af4:	e4 0f       	add	r30, r20
    5af6:	f5 1f       	adc	r31, r21
    5af8:	80 81       	ld	r24, Z
    5afa:	91 81       	ldd	r25, Z+1	; 0x01
    5afc:	a2 81       	ldd	r26, Z+2	; 0x02
    5afe:	b3 81       	ldd	r27, Z+3	; 0x03
    5b00:	00 97       	sbiw	r24, 0x00	; 0
    5b02:	a1 05       	cpc	r26, r1
    5b04:	b1 05       	cpc	r27, r1
    5b06:	09 f4       	brne	.+2      	; 0x5b0a <mv_queue_move_buffer+0x19e>
    5b08:	de c0       	rjmp	.+444    	; 0x5cc6 <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5b0a:	b7 ff       	sbrs	r27, 7
    5b0c:	10 c0       	rjmp	.+32     	; 0x5b2e <mv_queue_move_buffer+0x1c2>
    5b0e:	c2 01       	movw	r24, r4
    5b10:	fc 01       	movw	r30, r24
    5b12:	33 e0       	ldi	r19, 0x03	; 3
    5b14:	ee 0f       	add	r30, r30
    5b16:	ff 1f       	adc	r31, r31
    5b18:	3a 95       	dec	r19
    5b1a:	e1 f7       	brne	.-8      	; 0x5b14 <mv_queue_move_buffer+0x1a8>
    5b1c:	88 0f       	add	r24, r24
    5b1e:	99 1f       	adc	r25, r25
    5b20:	e8 0f       	add	r30, r24
    5b22:	f9 1f       	adc	r31, r25
    5b24:	e4 0f       	add	r30, r20
    5b26:	f5 1f       	adc	r31, r21
    5b28:	21 e0       	ldi	r18, 0x01	; 1
    5b2a:	20 87       	std	Z+8, r18	; 0x08
    5b2c:	0e c0       	rjmp	.+28     	; 0x5b4a <mv_queue_move_buffer+0x1de>
    5b2e:	c2 01       	movw	r24, r4
    5b30:	fc 01       	movw	r30, r24
    5b32:	03 e0       	ldi	r16, 0x03	; 3
    5b34:	ee 0f       	add	r30, r30
    5b36:	ff 1f       	adc	r31, r31
    5b38:	0a 95       	dec	r16
    5b3a:	e1 f7       	brne	.-8      	; 0x5b34 <mv_queue_move_buffer+0x1c8>
    5b3c:	88 0f       	add	r24, r24
    5b3e:	99 1f       	adc	r25, r25
    5b40:	e8 0f       	add	r30, r24
    5b42:	f9 1f       	adc	r31, r25
    5b44:	e4 0f       	add	r30, r20
    5b46:	f5 1f       	adc	r31, r21
    5b48:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5b4a:	83 2d       	mov	r24, r3
    5b4c:	92 2d       	mov	r25, r2
    5b4e:	fc 01       	movw	r30, r24
    5b50:	b3 e0       	ldi	r27, 0x03	; 3
    5b52:	ee 0f       	add	r30, r30
    5b54:	ff 1f       	adc	r31, r31
    5b56:	ba 95       	dec	r27
    5b58:	e1 f7       	brne	.-8      	; 0x5b52 <mv_queue_move_buffer+0x1e6>
    5b5a:	88 0f       	add	r24, r24
    5b5c:	99 1f       	adc	r25, r25
    5b5e:	e8 0f       	add	r30, r24
    5b60:	f9 1f       	adc	r31, r25
    5b62:	e4 0f       	add	r30, r20
    5b64:	f5 1f       	adc	r31, r21
    5b66:	83 2d       	mov	r24, r3
    5b68:	92 2d       	mov	r25, r2
    5b6a:	9c 01       	movw	r18, r24
    5b6c:	73 e0       	ldi	r23, 0x03	; 3
    5b6e:	22 0f       	add	r18, r18
    5b70:	33 1f       	adc	r19, r19
    5b72:	7a 95       	dec	r23
    5b74:	e1 f7       	brne	.-8      	; 0x5b6e <mv_queue_move_buffer+0x202>
    5b76:	88 0f       	add	r24, r24
    5b78:	99 1f       	adc	r25, r25
    5b7a:	28 0f       	add	r18, r24
    5b7c:	39 1f       	adc	r19, r25
    5b7e:	42 0f       	add	r20, r18
    5b80:	53 1f       	adc	r21, r19
    5b82:	da 01       	movw	r26, r20
    5b84:	2d 91       	ld	r18, X+
    5b86:	3d 91       	ld	r19, X+
    5b88:	4d 91       	ld	r20, X+
    5b8a:	5c 91       	ld	r21, X
    5b8c:	57 ff       	sbrs	r21, 7
    5b8e:	07 c0       	rjmp	.+14     	; 0x5b9e <mv_queue_move_buffer+0x232>
    5b90:	50 95       	com	r21
    5b92:	40 95       	com	r20
    5b94:	30 95       	com	r19
    5b96:	21 95       	neg	r18
    5b98:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9a:	4f 4f       	sbci	r20, 0xFF	; 255
    5b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b9e:	20 83       	st	Z, r18
    5ba0:	31 83       	std	Z+1, r19	; 0x01
    5ba2:	42 83       	std	Z+2, r20	; 0x02
    5ba4:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5ba6:	e0 91 dd 21 	lds	r30, 0x21DD
    5baa:	f0 91 de 21 	lds	r31, 0x21DE
    5bae:	ea 87       	std	Y+10, r30	; 0x0a
    5bb0:	fb 87       	std	Y+11, r31	; 0x0b
    5bb2:	83 2d       	mov	r24, r3
    5bb4:	92 2d       	mov	r25, r2
    5bb6:	fc 01       	movw	r30, r24
    5bb8:	03 e0       	ldi	r16, 0x03	; 3
    5bba:	ee 0f       	add	r30, r30
    5bbc:	ff 1f       	adc	r31, r31
    5bbe:	0a 95       	dec	r16
    5bc0:	e1 f7       	brne	.-8      	; 0x5bba <mv_queue_move_buffer+0x24e>
    5bc2:	88 0f       	add	r24, r24
    5bc4:	99 1f       	adc	r25, r25
    5bc6:	e8 0f       	add	r30, r24
    5bc8:	f9 1f       	adc	r31, r25
    5bca:	2a 85       	ldd	r18, Y+10	; 0x0a
    5bcc:	3b 85       	ldd	r19, Y+11	; 0x0b
    5bce:	e2 0f       	add	r30, r18
    5bd0:	f3 1f       	adc	r31, r19
    5bd2:	41 e0       	ldi	r20, 0x01	; 1
    5bd4:	50 e0       	ldi	r21, 0x00	; 0
    5bd6:	46 83       	std	Z+6, r20	; 0x06
    5bd8:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    5bda:	83 2d       	mov	r24, r3
    5bdc:	92 2d       	mov	r25, r2
    5bde:	fc 01       	movw	r30, r24
    5be0:	b3 e0       	ldi	r27, 0x03	; 3
    5be2:	ee 0f       	add	r30, r30
    5be4:	ff 1f       	adc	r31, r31
    5be6:	ba 95       	dec	r27
    5be8:	e1 f7       	brne	.-8      	; 0x5be2 <mv_queue_move_buffer+0x276>
    5bea:	88 0f       	add	r24, r24
    5bec:	99 1f       	adc	r25, r25
    5bee:	e8 0f       	add	r30, r24
    5bf0:	f9 1f       	adc	r31, r25
    5bf2:	e2 0f       	add	r30, r18
    5bf4:	f3 1f       	adc	r31, r19
    5bf6:	e0 80       	ld	r14, Z
    5bf8:	f1 80       	ldd	r15, Z+1	; 0x01
    5bfa:	02 81       	ldd	r16, Z+2	; 0x02
    5bfc:	13 81       	ldd	r17, Z+3	; 0x03
    5bfe:	37 01       	movw	r6, r14
    5c00:	48 01       	movw	r8, r16
    5c02:	99 0c       	add	r9, r9
    5c04:	66 08       	sbc	r6, r6
    5c06:	76 2c       	mov	r7, r6
    5c08:	43 01       	movw	r8, r6
    5c0a:	29 81       	ldd	r18, Y+1	; 0x01
    5c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5c0e:	4b 81       	ldd	r20, Y+3	; 0x03
    5c10:	5c 81       	ldd	r21, Y+4	; 0x04
    5c12:	6d 81       	ldd	r22, Y+5	; 0x05
    5c14:	7e 81       	ldd	r23, Y+6	; 0x06
    5c16:	8f 81       	ldd	r24, Y+7	; 0x07
    5c18:	98 85       	ldd	r25, Y+8	; 0x08
    5c1a:	57 01       	movw	r10, r14
    5c1c:	68 01       	movw	r12, r16
    5c1e:	e6 2c       	mov	r14, r6
    5c20:	f6 2c       	mov	r15, r6
    5c22:	06 2d       	mov	r16, r6
    5c24:	16 2d       	mov	r17, r6
    5c26:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__udivdi3>
    5c2a:	c9 01       	movw	r24, r18
    5c2c:	da 01       	movw	r26, r20
    5c2e:	ac 01       	movw	r20, r24
    5c30:	bd 01       	movw	r22, r26
    5c32:	2c c0       	rjmp	.+88     	; 0x5c8c <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    5c34:	76 95       	lsr	r23
    5c36:	67 95       	ror	r22
    5c38:	57 95       	ror	r21
    5c3a:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    5c3c:	83 2d       	mov	r24, r3
    5c3e:	92 2d       	mov	r25, r2
    5c40:	dc 01       	movw	r26, r24
    5c42:	33 e0       	ldi	r19, 0x03	; 3
    5c44:	aa 0f       	add	r26, r26
    5c46:	bb 1f       	adc	r27, r27
    5c48:	3a 95       	dec	r19
    5c4a:	e1 f7       	brne	.-8      	; 0x5c44 <mv_queue_move_buffer+0x2d8>
    5c4c:	88 0f       	add	r24, r24
    5c4e:	99 1f       	adc	r25, r25
    5c50:	a8 0f       	add	r26, r24
    5c52:	b9 1f       	adc	r27, r25
    5c54:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c56:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c58:	a8 0f       	add	r26, r24
    5c5a:	b9 1f       	adc	r27, r25
    5c5c:	83 2d       	mov	r24, r3
    5c5e:	92 2d       	mov	r25, r2
    5c60:	fc 01       	movw	r30, r24
    5c62:	03 e0       	ldi	r16, 0x03	; 3
    5c64:	ee 0f       	add	r30, r30
    5c66:	ff 1f       	adc	r31, r31
    5c68:	0a 95       	dec	r16
    5c6a:	e1 f7       	brne	.-8      	; 0x5c64 <mv_queue_move_buffer+0x2f8>
    5c6c:	88 0f       	add	r24, r24
    5c6e:	99 1f       	adc	r25, r25
    5c70:	e8 0f       	add	r30, r24
    5c72:	f9 1f       	adc	r31, r25
    5c74:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c76:	3b 85       	ldd	r19, Y+11	; 0x0b
    5c78:	e2 0f       	add	r30, r18
    5c7a:	f3 1f       	adc	r31, r19
    5c7c:	86 81       	ldd	r24, Z+6	; 0x06
    5c7e:	97 81       	ldd	r25, Z+7	; 0x07
    5c80:	88 0f       	add	r24, r24
    5c82:	99 1f       	adc	r25, r25
    5c84:	16 96       	adiw	r26, 0x06	; 6
    5c86:	8d 93       	st	X+, r24
    5c88:	9c 93       	st	X, r25
    5c8a:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    5c8c:	db 01       	movw	r26, r22
    5c8e:	ca 01       	movw	r24, r20
    5c90:	80 70       	andi	r24, 0x00	; 0
    5c92:	90 70       	andi	r25, 0x00	; 0
    5c94:	00 97       	sbiw	r24, 0x00	; 0
    5c96:	a1 05       	cpc	r26, r1
    5c98:	b1 05       	cpc	r27, r1
    5c9a:	61 f6       	brne	.-104    	; 0x5c34 <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    5c9c:	83 2d       	mov	r24, r3
    5c9e:	92 2d       	mov	r25, r2
    5ca0:	9c 01       	movw	r18, r24
    5ca2:	73 e0       	ldi	r23, 0x03	; 3
    5ca4:	22 0f       	add	r18, r18
    5ca6:	33 1f       	adc	r19, r19
    5ca8:	7a 95       	dec	r23
    5caa:	e1 f7       	brne	.-8      	; 0x5ca4 <mv_queue_move_buffer+0x338>
    5cac:	88 0f       	add	r24, r24
    5cae:	99 1f       	adc	r25, r25
    5cb0:	28 0f       	add	r18, r24
    5cb2:	39 1f       	adc	r19, r25
    5cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cb8:	82 0f       	add	r24, r18
    5cba:	93 1f       	adc	r25, r19
    5cbc:	dc 01       	movw	r26, r24
    5cbe:	14 96       	adiw	r26, 0x04	; 4
    5cc0:	4d 93       	st	X+, r20
    5cc2:	5c 93       	st	X, r21
    5cc4:	15 97       	sbiw	r26, 0x05	; 5
    5cc6:	08 94       	sec
    5cc8:	41 1c       	adc	r4, r1
    5cca:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5ccc:	b3 e0       	ldi	r27, 0x03	; 3
    5cce:	4b 16       	cp	r4, r27
    5cd0:	51 04       	cpc	r5, r1
    5cd2:	09 f0       	breq	.+2      	; 0x5cd6 <mv_queue_move_buffer+0x36a>
    5cd4:	fe ce       	rjmp	.-516    	; 0x5ad2 <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5cd6:	e9 85       	ldd	r30, Y+9	; 0x09
    5cd8:	e0 93 db 21 	sts	0x21DB, r30
	st_execute_move();
    5cdc:	0e 94 29 25 	call	0x4a52	; 0x4a52 <st_execute_move>
    5ce0:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5ce2:	2b 96       	adiw	r28, 0x0b	; 11
    5ce4:	cd bf       	out	0x3d, r28	; 61
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	cf 91       	pop	r28
    5cea:	df 91       	pop	r29
    5cec:	1f 91       	pop	r17
    5cee:	0f 91       	pop	r16
    5cf0:	ff 90       	pop	r15
    5cf2:	ef 90       	pop	r14
    5cf4:	df 90       	pop	r13
    5cf6:	cf 90       	pop	r12
    5cf8:	bf 90       	pop	r11
    5cfa:	af 90       	pop	r10
    5cfc:	9f 90       	pop	r9
    5cfe:	8f 90       	pop	r8
    5d00:	7f 90       	pop	r7
    5d02:	6f 90       	pop	r6
    5d04:	5f 90       	pop	r5
    5d06:	4f 90       	pop	r4
    5d08:	3f 90       	pop	r3
    5d0a:	2f 90       	pop	r2
    5d0c:	08 95       	ret

00005d0e <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5d0e:	a9 e4       	ldi	r26, 0x49	; 73
    5d10:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5d12:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5d14:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5d16:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5d18:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5d1a:	ed 91       	ld	r30, X+
    5d1c:	fc 91       	ld	r31, X
    5d1e:	11 97       	sbiw	r26, 0x01	; 1
    5d20:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5d22:	ed 91       	ld	r30, X+
    5d24:	fc 91       	ld	r31, X
    5d26:	11 97       	sbiw	r26, 0x01	; 1
    5d28:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5d2a:	ed 91       	ld	r30, X+
    5d2c:	fc 91       	ld	r31, X
    5d2e:	11 97       	sbiw	r26, 0x01	; 1
    5d30:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5d32:	ed 91       	ld	r30, X+
    5d34:	fc 91       	ld	r31, X
    5d36:	11 97       	sbiw	r26, 0x01	; 1
    5d38:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5d3a:	ed 91       	ld	r30, X+
    5d3c:	fc 91       	ld	r31, X
    5d3e:	11 97       	sbiw	r26, 0x01	; 1
    5d40:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5d42:	ed 91       	ld	r30, X+
    5d44:	fc 91       	ld	r31, X
    5d46:	11 97       	sbiw	r26, 0x01	; 1
    5d48:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5d4a:	ed 91       	ld	r30, X+
    5d4c:	fc 91       	ld	r31, X
    5d4e:	11 97       	sbiw	r26, 0x01	; 1
    5d50:	31 87       	std	Z+9, r19	; 0x09
    5d52:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5d54:	42 e2       	ldi	r20, 0x22	; 34
    5d56:	a9 38       	cpi	r26, 0x89	; 137
    5d58:	b4 07       	cpc	r27, r20
    5d5a:	f9 f6       	brne	.-66     	; 0x5d1a <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5d5c:	08 95       	ret

00005d5e <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5d5e:	1f 92       	push	r1
    5d60:	0f 92       	push	r0
    5d62:	0f b6       	in	r0, 0x3f	; 63
    5d64:	0f 92       	push	r0
    5d66:	11 24       	eor	r1, r1
    5d68:	0f 90       	pop	r0
    5d6a:	0f be       	out	0x3f, r0	; 63
    5d6c:	0f 90       	pop	r0
    5d6e:	1f 90       	pop	r1
    5d70:	18 95       	reti

00005d72 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5d72:	1f 92       	push	r1
    5d74:	0f 92       	push	r0
    5d76:	0f b6       	in	r0, 0x3f	; 63
    5d78:	0f 92       	push	r0
    5d7a:	11 24       	eor	r1, r1
    5d7c:	0f 90       	pop	r0
    5d7e:	0f be       	out	0x3f, r0	; 63
    5d80:	0f 90       	pop	r0
    5d82:	1f 90       	pop	r1
    5d84:	18 95       	reti

00005d86 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5d86:	1f 92       	push	r1
    5d88:	0f 92       	push	r0
    5d8a:	0f b6       	in	r0, 0x3f	; 63
    5d8c:	0f 92       	push	r0
    5d8e:	11 24       	eor	r1, r1
    5d90:	0f 90       	pop	r0
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	0f 90       	pop	r0
    5d96:	1f 90       	pop	r1
    5d98:	18 95       	reti

00005d9a <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5d9a:	1f 92       	push	r1
    5d9c:	0f 92       	push	r0
    5d9e:	0f b6       	in	r0, 0x3f	; 63
    5da0:	0f 92       	push	r0
    5da2:	11 24       	eor	r1, r1
    5da4:	0f 90       	pop	r0
    5da6:	0f be       	out	0x3f, r0	; 63
    5da8:	0f 90       	pop	r0
    5daa:	1f 90       	pop	r1
    5dac:	18 95       	reti

00005dae <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5dae:	1f 92       	push	r1
    5db0:	0f 92       	push	r0
    5db2:	0f b6       	in	r0, 0x3f	; 63
    5db4:	0f 92       	push	r0
    5db6:	11 24       	eor	r1, r1
    5db8:	0f 90       	pop	r0
    5dba:	0f be       	out	0x3f, r0	; 63
    5dbc:	0f 90       	pop	r0
    5dbe:	1f 90       	pop	r1
    5dc0:	18 95       	reti

00005dc2 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5dc2:	1f 92       	push	r1
    5dc4:	0f 92       	push	r0
    5dc6:	0f b6       	in	r0, 0x3f	; 63
    5dc8:	0f 92       	push	r0
    5dca:	11 24       	eor	r1, r1
    5dcc:	0f 90       	pop	r0
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	0f 90       	pop	r0
    5dd2:	1f 90       	pop	r1
    5dd4:	18 95       	reti

00005dd6 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5dd6:	1f 92       	push	r1
    5dd8:	0f 92       	push	r0
    5dda:	0f b6       	in	r0, 0x3f	; 63
    5ddc:	0f 92       	push	r0
    5dde:	11 24       	eor	r1, r1
    5de0:	0f 90       	pop	r0
    5de2:	0f be       	out	0x3f, r0	; 63
    5de4:	0f 90       	pop	r0
    5de6:	1f 90       	pop	r1
    5de8:	18 95       	reti

00005dea <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5dea:	1f 92       	push	r1
    5dec:	0f 92       	push	r0
    5dee:	0f b6       	in	r0, 0x3f	; 63
    5df0:	0f 92       	push	r0
    5df2:	11 24       	eor	r1, r1
    5df4:	0f 90       	pop	r0
    5df6:	0f be       	out	0x3f, r0	; 63
    5df8:	0f 90       	pop	r0
    5dfa:	1f 90       	pop	r1
    5dfc:	18 95       	reti

00005dfe <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5dfe:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5e02:	0e 94 cb 1b 	call	0x3796	; 0x3796 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5e06:	0e 94 ab 2c 	call	0x5956	; 0x5956 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5e0a:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5e0e:	08 95       	ret

00005e10 <xio_set_baud_usart>:
	USX->port->OUTCLR = outclr;
	USX->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5e10:	cf 93       	push	r28
    5e12:	df 93       	push	r29
	USX->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	27 e1       	ldi	r18, 0x17	; 23
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	82 9f       	mul	r24, r18
    5e1c:	d0 01       	movw	r26, r0
    5e1e:	83 9f       	mul	r24, r19
    5e20:	b0 0d       	add	r27, r0
    5e22:	92 9f       	mul	r25, r18
    5e24:	b0 0d       	add	r27, r0
    5e26:	11 24       	eor	r1, r1
    5e28:	a5 53       	subi	r26, 0x35	; 53
    5e2a:	bc 4d       	sbci	r27, 0xDC	; 220
    5e2c:	51 96       	adiw	r26, 0x11	; 17
    5e2e:	ed 91       	ld	r30, X+
    5e30:	fc 91       	ld	r31, X
    5e32:	52 97       	sbiw	r26, 0x12	; 18
    5e34:	87 81       	ldd	r24, Z+7	; 0x07
    5e36:	90 85       	ldd	r25, Z+8	; 0x08
    5e38:	26 2f       	mov	r18, r22
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	f9 01       	movw	r30, r18
    5e3e:	ed 51       	subi	r30, 0x1D	; 29
    5e40:	f6 4e       	sbci	r31, 0xE6	; 230
    5e42:	e4 91       	lpm	r30, Z+
    5e44:	ec 01       	movw	r28, r24
    5e46:	ee 83       	std	Y+6, r30	; 0x06
	USX->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5e48:	51 96       	adiw	r26, 0x11	; 17
    5e4a:	ed 91       	ld	r30, X+
    5e4c:	fc 91       	ld	r31, X
    5e4e:	52 97       	sbiw	r26, 0x12	; 18
    5e50:	a7 81       	ldd	r26, Z+7	; 0x07
    5e52:	b0 85       	ldd	r27, Z+8	; 0x08
    5e54:	22 51       	subi	r18, 0x12	; 18
    5e56:	36 4e       	sbci	r19, 0xE6	; 230
    5e58:	f9 01       	movw	r30, r18
    5e5a:	64 91       	lpm	r22, Z+
    5e5c:	17 96       	adiw	r26, 0x07	; 7
    5e5e:	6c 93       	st	X, r22
}
    5e60:	df 91       	pop	r29
    5e62:	cf 91       	pop	r28
    5e64:	08 95       	ret

00005e66 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    5e66:	7f 92       	push	r7
    5e68:	8f 92       	push	r8
    5e6a:	9f 92       	push	r9
    5e6c:	af 92       	push	r10
    5e6e:	bf 92       	push	r11
    5e70:	cf 92       	push	r12
    5e72:	df 92       	push	r13
    5e74:	ef 92       	push	r14
    5e76:	ff 92       	push	r15
    5e78:	0f 93       	push	r16
    5e7a:	1f 93       	push	r17
    5e7c:	df 93       	push	r29
    5e7e:	cf 93       	push	r28
    5e80:	cd b7       	in	r28, 0x3d	; 61
    5e82:	de b7       	in	r29, 0x3e	; 62
    5e84:	d4 2e       	mov	r13, r20
    5e86:	9e 2c       	mov	r9, r14
    5e88:	7a 2c       	mov	r7, r10
//	struct xioUSART *u = (struct xioUSART *)ds[dev].x; // example of a cast for FILEs
//	struct xioUSART *u = ds[dev].x;

	// bind USARt extended struct to device struct
	ds[dev].x = &us[offset];
    5e8a:	a8 2e       	mov	r10, r24
    5e8c:	bb 24       	eor	r11, r11
    5e8e:	9f e2       	ldi	r25, 0x2F	; 47
    5e90:	69 9f       	mul	r22, r25
    5e92:	f0 01       	movw	r30, r0
    5e94:	11 24       	eor	r1, r1
    5e96:	e4 5d       	subi	r30, 0xD4	; 212
    5e98:	fc 4d       	sbci	r31, 0xDC	; 220
    5e9a:	67 e1       	ldi	r22, 0x17	; 23
    5e9c:	70 e0       	ldi	r23, 0x00	; 0
    5e9e:	a6 9e       	mul	r10, r22
    5ea0:	70 01       	movw	r14, r0
    5ea2:	a7 9e       	mul	r10, r23
    5ea4:	f0 0c       	add	r15, r0
    5ea6:	b6 9e       	mul	r11, r22
    5ea8:	f0 0c       	add	r15, r0
    5eaa:	11 24       	eor	r1, r1
    5eac:	6b ec       	ldi	r22, 0xCB	; 203
    5eae:	73 e2       	ldi	r23, 0x23	; 35
    5eb0:	e6 0e       	add	r14, r22
    5eb2:	f7 1e       	adc	r15, r23
    5eb4:	d7 01       	movw	r26, r14
    5eb6:	51 96       	adiw	r26, 0x11	; 17
    5eb8:	ed 93       	st	X+, r30
    5eba:	fc 93       	st	X, r31
    5ebc:	52 97       	sbiw	r26, 0x12	; 18

	// bind USART and PORT structures - do this first
	USX->usart = (struct USART_struct *)usart_addr;
    5ebe:	27 83       	std	Z+7, r18	; 0x07
    5ec0:	30 87       	std	Z+8, r19	; 0x08
	USX->port = (struct PORT_struct *)port_addr;
    5ec2:	01 87       	std	Z+9, r16	; 0x09
    5ec4:	12 87       	std	Z+10, r17	; 0x0a

	// set flags
	xio_setflags(dev, control);			// generic version. does not validate flags
    5ec6:	64 2f       	mov	r22, r20
    5ec8:	75 2f       	mov	r23, r21
    5eca:	0e 94 20 28 	call	0x5040	; 0x5040 <xio_setflags>

	// setup internal RX/TX buffers
	USX->rx_buf_head = 1;					// can't use location 0
    5ece:	d7 01       	movw	r26, r14
    5ed0:	51 96       	adiw	r26, 0x11	; 17
    5ed2:	ed 91       	ld	r30, X+
    5ed4:	fc 91       	ld	r31, X
    5ed6:	52 97       	sbiw	r26, 0x12	; 18
    5ed8:	81 e0       	ldi	r24, 0x01	; 1
    5eda:	83 83       	std	Z+3, r24	; 0x03
	USX->rx_buf_tail = 1;
    5edc:	51 96       	adiw	r26, 0x11	; 17
    5ede:	ed 91       	ld	r30, X+
    5ee0:	fc 91       	ld	r31, X
    5ee2:	52 97       	sbiw	r26, 0x12	; 18
    5ee4:	82 83       	std	Z+2, r24	; 0x02
	USX->tx_buf_head = 1;
    5ee6:	51 96       	adiw	r26, 0x11	; 17
    5ee8:	ed 91       	ld	r30, X+
    5eea:	fc 91       	ld	r31, X
    5eec:	52 97       	sbiw	r26, 0x12	; 18
    5eee:	85 83       	std	Z+5, r24	; 0x05
	USX->tx_buf_tail = 1;
    5ef0:	51 96       	adiw	r26, 0x11	; 17
    5ef2:	ed 91       	ld	r30, X+
    5ef4:	fc 91       	ld	r31, X
    5ef6:	52 97       	sbiw	r26, 0x12	; 18
    5ef8:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    5efa:	2d 2d       	mov	r18, r13
    5efc:	2f 70       	andi	r18, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    5efe:	09 f4       	brne	.+2      	; 0x5f02 <xio_init_usart+0x9c>
    5f00:	25 e0       	ldi	r18, 0x05	; 5
	USX->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	USX->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5f02:	87 e1       	ldi	r24, 0x17	; 23
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	a8 9e       	mul	r10, r24
    5f08:	d0 01       	movw	r26, r0
    5f0a:	a9 9e       	mul	r10, r25
    5f0c:	b0 0d       	add	r27, r0
    5f0e:	b8 9e       	mul	r11, r24
    5f10:	b0 0d       	add	r27, r0
    5f12:	11 24       	eor	r1, r1
    5f14:	a5 53       	subi	r26, 0x35	; 53
    5f16:	bc 4d       	sbci	r27, 0xDC	; 220
    5f18:	51 96       	adiw	r26, 0x11	; 17
    5f1a:	ed 91       	ld	r30, X+
    5f1c:	fc 91       	ld	r31, X
    5f1e:	52 97       	sbiw	r26, 0x12	; 18
    5f20:	87 81       	ldd	r24, Z+7	; 0x07
    5f22:	90 85       	ldd	r25, Z+8	; 0x08
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	f9 01       	movw	r30, r18
    5f28:	ed 51       	subi	r30, 0x1D	; 29
    5f2a:	f6 4e       	sbci	r31, 0xE6	; 230
    5f2c:	44 91       	lpm	r20, Z+
    5f2e:	fc 01       	movw	r30, r24
    5f30:	46 83       	std	Z+6, r20	; 0x06
	USX->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5f32:	51 96       	adiw	r26, 0x11	; 17
    5f34:	ed 91       	ld	r30, X+
    5f36:	fc 91       	ld	r31, X
    5f38:	52 97       	sbiw	r26, 0x12	; 18
    5f3a:	87 81       	ldd	r24, Z+7	; 0x07
    5f3c:	90 85       	ldd	r25, Z+8	; 0x08
    5f3e:	22 51       	subi	r18, 0x12	; 18
    5f40:	36 4e       	sbci	r19, 0xE6	; 230
    5f42:	f9 01       	movw	r30, r18
    5f44:	d4 90       	lpm	r13, Z+
    5f46:	fc 01       	movw	r30, r24
    5f48:	d7 82       	std	Z+7, r13	; 0x07
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	USX->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    5f4a:	51 96       	adiw	r26, 0x11	; 17
    5f4c:	ed 91       	ld	r30, X+
    5f4e:	fc 91       	ld	r31, X
    5f50:	52 97       	sbiw	r26, 0x12	; 18
    5f52:	07 80       	ldd	r0, Z+7	; 0x07
    5f54:	f0 85       	ldd	r31, Z+8	; 0x08
    5f56:	e0 2d       	mov	r30, r0
    5f58:	88 e1       	ldi	r24, 0x18	; 24
    5f5a:	84 83       	std	Z+4, r24	; 0x04
	USX->usart->CTRLA = CTRLA_RXON_TXON;				// enable tx and rx interrupts
    5f5c:	51 96       	adiw	r26, 0x11	; 17
    5f5e:	ed 91       	ld	r30, X+
    5f60:	fc 91       	ld	r31, X
    5f62:	52 97       	sbiw	r26, 0x12	; 18
    5f64:	07 80       	ldd	r0, Z+7	; 0x07
    5f66:	f0 85       	ldd	r31, Z+8	; 0x08
    5f68:	e0 2d       	mov	r30, r0
    5f6a:	81 e2       	ldi	r24, 0x21	; 33
    5f6c:	83 83       	std	Z+3, r24	; 0x03

	USX->port->DIRCLR = dirclr;
    5f6e:	51 96       	adiw	r26, 0x11	; 17
    5f70:	ed 91       	ld	r30, X+
    5f72:	fc 91       	ld	r31, X
    5f74:	52 97       	sbiw	r26, 0x12	; 18
    5f76:	01 84       	ldd	r0, Z+9	; 0x09
    5f78:	f2 85       	ldd	r31, Z+10	; 0x0a
    5f7a:	e0 2d       	mov	r30, r0
    5f7c:	92 82       	std	Z+2, r9	; 0x02
	USX->port->DIRSET = dirset;
    5f7e:	51 96       	adiw	r26, 0x11	; 17
    5f80:	ed 91       	ld	r30, X+
    5f82:	fc 91       	ld	r31, X
    5f84:	52 97       	sbiw	r26, 0x12	; 18
    5f86:	01 84       	ldd	r0, Z+9	; 0x09
    5f88:	f2 85       	ldd	r31, Z+10	; 0x0a
    5f8a:	e0 2d       	mov	r30, r0
    5f8c:	c1 82       	std	Z+1, r12	; 0x01
	USX->port->OUTCLR = outclr;
    5f8e:	51 96       	adiw	r26, 0x11	; 17
    5f90:	ed 91       	ld	r30, X+
    5f92:	fc 91       	ld	r31, X
    5f94:	52 97       	sbiw	r26, 0x12	; 18
    5f96:	01 84       	ldd	r0, Z+9	; 0x09
    5f98:	f2 85       	ldd	r31, Z+10	; 0x0a
    5f9a:	e0 2d       	mov	r30, r0
    5f9c:	76 82       	std	Z+6, r7	; 0x06
	USX->port->OUTSET = outset;
    5f9e:	51 96       	adiw	r26, 0x11	; 17
    5fa0:	ed 91       	ld	r30, X+
    5fa2:	fc 91       	ld	r31, X
    5fa4:	52 97       	sbiw	r26, 0x12	; 18
    5fa6:	01 84       	ldd	r0, Z+9	; 0x09
    5fa8:	f2 85       	ldd	r31, Z+10	; 0x0a
    5faa:	e0 2d       	mov	r30, r0
    5fac:	85 82       	std	Z+5, r8	; 0x05
}
    5fae:	cf 91       	pop	r28
    5fb0:	df 91       	pop	r29
    5fb2:	1f 91       	pop	r17
    5fb4:	0f 91       	pop	r16
    5fb6:	ff 90       	pop	r15
    5fb8:	ef 90       	pop	r14
    5fba:	df 90       	pop	r13
    5fbc:	cf 90       	pop	r12
    5fbe:	bf 90       	pop	r11
    5fc0:	af 90       	pop	r10
    5fc2:	9f 90       	pop	r9
    5fc4:	8f 90       	pop	r8
    5fc6:	7f 90       	pop	r7
    5fc8:	08 95       	ret

00005fca <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    5fca:	1f 92       	push	r1
    5fcc:	0f 92       	push	r0
    5fce:	0f b6       	in	r0, 0x3f	; 63
    5fd0:	0f 92       	push	r0
    5fd2:	0b b6       	in	r0, 0x3b	; 59
    5fd4:	0f 92       	push	r0
    5fd6:	11 24       	eor	r1, r1
    5fd8:	8f 93       	push	r24
    5fda:	9f 93       	push	r25
    5fdc:	af 93       	push	r26
    5fde:	bf 93       	push	r27
    5fe0:	ef 93       	push	r30
    5fe2:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    5fe4:	90 91 60 23 	lds	r25, 0x2360
    5fe8:	80 91 5f 23 	lds	r24, 0x235F
    5fec:	98 17       	cp	r25, r24
    5fee:	39 f4       	brne	.+14     	; 0x5ffe <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    5ff0:	e0 91 62 23 	lds	r30, 0x2362
    5ff4:	f0 91 63 23 	lds	r31, 0x2363
    5ff8:	80 e2       	ldi	r24, 0x20	; 32
    5ffa:	83 83       	std	Z+3, r24	; 0x03
    5ffc:	1d c0       	rjmp	.+58     	; 0x6038 <__stack+0x39>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    5ffe:	80 91 e2 23 	lds	r24, 0x23E2
    6002:	90 91 e3 23 	lds	r25, 0x23E3
    6006:	93 fd       	sbrc	r25, 3
    6008:	17 c0       	rjmp	.+46     	; 0x6038 <__stack+0x39>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    600a:	80 91 5f 23 	lds	r24, 0x235F
    600e:	81 50       	subi	r24, 0x01	; 1
    6010:	80 93 5f 23 	sts	0x235F, r24
    6014:	80 91 5f 23 	lds	r24, 0x235F
    6018:	88 23       	and	r24, r24
    601a:	19 f4       	brne	.+6      	; 0x6022 <__stack+0x23>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    601c:	81 e1       	ldi	r24, 0x11	; 17
    601e:	80 93 5f 23 	sts	0x235F, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    6022:	e0 91 62 23 	lds	r30, 0x2362
    6026:	f0 91 63 23 	lds	r31, 0x2363
    602a:	a0 91 5f 23 	lds	r26, 0x235F
    602e:	b0 e0       	ldi	r27, 0x00	; 0
    6030:	a8 58       	subi	r26, 0x88	; 136
    6032:	bc 4d       	sbci	r27, 0xDC	; 220
    6034:	8c 91       	ld	r24, X
    6036:	80 83       	st	Z, r24
	}
}
    6038:	ff 91       	pop	r31
    603a:	ef 91       	pop	r30
    603c:	bf 91       	pop	r27
    603e:	af 91       	pop	r26
    6040:	9f 91       	pop	r25
    6042:	8f 91       	pop	r24
    6044:	0f 90       	pop	r0
    6046:	0b be       	out	0x3b, r0	; 59
    6048:	0f 90       	pop	r0
    604a:	0f be       	out	0x3f, r0	; 63
    604c:	0f 90       	pop	r0
    604e:	1f 90       	pop	r1
    6050:	18 95       	reti

00006052 <xio_open_usb>:
 */

struct __file * xio_open_usb()
{
	return(USB.fdev);
}
    6052:	80 91 f5 23 	lds	r24, 0x23F5
    6056:	90 91 f6 23 	lds	r25, 0x23F6
    605a:	08 95       	ret

0000605c <xio_putc_usb>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
    605c:	48 2f       	mov	r20, r24
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    605e:	20 91 e2 23 	lds	r18, 0x23E2
    6062:	30 91 e3 23 	lds	r19, 0x23E3
    6066:	d9 01       	movw	r26, r18
    6068:	a4 70       	andi	r26, 0x04	; 4
    606a:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	USBu.tx_buf_head = USBu.next_tx_buf_head;	// accept the next buffer head value
	USBu.tx_buf[USBu.tx_buf_head] = c;			// ...and write char to buffer

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    606c:	b9 01       	movw	r22, r18
    606e:	60 72       	andi	r22, 0x20	; 32
    6070:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
    6072:	90 91 60 23 	lds	r25, 0x2360
    6076:	91 50       	subi	r25, 0x01	; 1
    6078:	c1 f4       	brne	.+48     	; 0x60aa <xio_putc_usb+0x4e>
    607a:	91 e1       	ldi	r25, 0x11	; 17
    607c:	16 c0       	rjmp	.+44     	; 0x60aa <xio_putc_usb+0x4e>
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    607e:	10 97       	sbiw	r26, 0x00	; 0
    6080:	61 f0       	breq	.+24     	; 0x609a <xio_putc_usb+0x3e>
			sleep_mode();
    6082:	80 91 48 00 	lds	r24, 0x0048
    6086:	81 60       	ori	r24, 0x01	; 1
    6088:	80 93 48 00 	sts	0x0048, r24
    608c:	88 95       	sleep
    608e:	80 91 48 00 	lds	r24, 0x0048
    6092:	8e 7f       	andi	r24, 0xFE	; 254
    6094:	80 93 48 00 	sts	0x0048, r24
    6098:	08 c0       	rjmp	.+16     	; 0x60aa <xio_putc_usb+0x4e>
    609a:	90 93 61 23 	sts	0x2361, r25
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    609e:	81 e0       	ldi	r24, 0x01	; 1
    60a0:	80 93 e5 23 	sts	0x23E5, r24
    60a4:	2f ef       	ldi	r18, 0xFF	; 255
    60a6:	3f ef       	ldi	r19, 0xFF	; 255
    60a8:	54 c0       	rjmp	.+168    	; 0x6152 <xio_putc_usb+0xf6>
int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
    60aa:	80 91 5f 23 	lds	r24, 0x235F
    60ae:	98 17       	cp	r25, r24
    60b0:	31 f3       	breq	.-52     	; 0x607e <xio_putc_usb+0x22>
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	USBu.tx_buf_head = USBu.next_tx_buf_head;	// accept the next buffer head value
    60b2:	90 93 60 23 	sts	0x2360, r25
	USBu.tx_buf[USBu.tx_buf_head] = c;			// ...and write char to buffer
    60b6:	e0 91 60 23 	lds	r30, 0x2360
    60ba:	f0 e0       	ldi	r31, 0x00	; 0
    60bc:	e8 58       	subi	r30, 0x88	; 136
    60be:	fc 4d       	sbci	r31, 0xDC	; 220
    60c0:	40 83       	st	Z, r20

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    60c2:	61 15       	cp	r22, r1
    60c4:	71 05       	cpc	r23, r1
    60c6:	21 f0       	breq	.+8      	; 0x60d0 <xio_putc_usb+0x74>
    60c8:	4a 30       	cpi	r20, 0x0A	; 10
    60ca:	11 f4       	brne	.+4      	; 0x60d0 <xio_putc_usb+0x74>
    60cc:	4d e0       	ldi	r20, 0x0D	; 13
    60ce:	d1 cf       	rjmp	.-94     	; 0x6072 <xio_putc_usb+0x16>
    60d0:	90 93 61 23 	sts	0x2361, r25
		return xio_putc_usb('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (USBu.usart->STATUS & 0x20) {
    60d4:	a0 91 62 23 	lds	r26, 0x2362
    60d8:	b0 91 63 23 	lds	r27, 0x2363
    60dc:	11 96       	adiw	r26, 0x01	; 1
    60de:	8c 91       	ld	r24, X
    60e0:	11 97       	sbiw	r26, 0x01	; 1
    60e2:	85 ff       	sbrs	r24, 5
    60e4:	27 c0       	rjmp	.+78     	; 0x6134 <xio_putc_usb+0xd8>
		if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buf might be empty if IRQ got it
    60e6:	90 91 60 23 	lds	r25, 0x2360
    60ea:	80 91 5f 23 	lds	r24, 0x235F
    60ee:	98 17       	cp	r25, r24
    60f0:	71 f1       	breq	.+92     	; 0x614e <xio_putc_usb+0xf2>
			return (0);
		}
		USB.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    60f2:	38 60       	ori	r19, 0x08	; 8
    60f4:	20 93 e2 23 	sts	0x23E2, r18
    60f8:	30 93 e3 23 	sts	0x23E3, r19
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap if needed
    60fc:	80 91 5f 23 	lds	r24, 0x235F
    6100:	81 50       	subi	r24, 0x01	; 1
    6102:	80 93 5f 23 	sts	0x235F, r24
    6106:	80 91 5f 23 	lds	r24, 0x235F
    610a:	88 23       	and	r24, r24
    610c:	19 f4       	brne	.+6      	; 0x6114 <xio_putc_usb+0xb8>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one error (OBOE)
    610e:	81 e1       	ldi	r24, 0x11	; 17
    6110:	80 93 5f 23 	sts	0x235F, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail];// write char to TX DATA reg
    6114:	e0 91 5f 23 	lds	r30, 0x235F
    6118:	f0 e0       	ldi	r31, 0x00	; 0
    611a:	e8 58       	subi	r30, 0x88	; 136
    611c:	fc 4d       	sbci	r31, 0xDC	; 220
    611e:	80 81       	ld	r24, Z
    6120:	8c 93       	st	X, r24
		USB.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6122:	80 91 e2 23 	lds	r24, 0x23E2
    6126:	90 91 e3 23 	lds	r25, 0x23E3
    612a:	97 7f       	andi	r25, 0xF7	; 247
    612c:	80 93 e2 23 	sts	0x23E2, r24
    6130:	90 93 e3 23 	sts	0x23E3, r25
	}
	// enable interrupts regardless
	USBu.usart->CTRLA = CTRLA_RXON_TXON;		// doesn't work if you just |= it
    6134:	e0 91 62 23 	lds	r30, 0x2362
    6138:	f0 91 63 23 	lds	r31, 0x2363
    613c:	81 e2       	ldi	r24, 0x21	; 33
    613e:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6140:	80 91 a2 00 	lds	r24, 0x00A2
    6144:	81 60       	ori	r24, 0x01	; 1
    6146:	e0 ea       	ldi	r30, 0xA0	; 160
    6148:	f0 e0       	ldi	r31, 0x00	; 0
    614a:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    614c:	78 94       	sei
    614e:	20 e0       	ldi	r18, 0x00	; 0
    6150:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6152:	c9 01       	movw	r24, r18
    6154:	08 95       	ret

00006156 <xio_getc_usb>:
 */

int xio_getc_usb(FILE *stream)
{
	while (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(USB.flags)) {
    6156:	20 91 e2 23 	lds	r18, 0x23E2
    615a:	30 91 e3 23 	lds	r19, 0x23E3
    615e:	24 70       	andi	r18, 0x04	; 4
    6160:	30 70       	andi	r19, 0x00	; 0
    6162:	15 c0       	rjmp	.+42     	; 0x618e <xio_getc_usb+0x38>
    6164:	21 15       	cp	r18, r1
    6166:	31 05       	cpc	r19, r1
    6168:	61 f0       	breq	.+24     	; 0x6182 <xio_getc_usb+0x2c>
			sleep_mode();
    616a:	80 91 48 00 	lds	r24, 0x0048
    616e:	81 60       	ori	r24, 0x01	; 1
    6170:	80 93 48 00 	sts	0x0048, r24
    6174:	88 95       	sleep
    6176:	80 91 48 00 	lds	r24, 0x0048
    617a:	8e 7f       	andi	r24, 0xFE	; 254
    617c:	80 93 48 00 	sts	0x0048, r24
    6180:	06 c0       	rjmp	.+12     	; 0x618e <xio_getc_usb+0x38>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    6182:	81 e0       	ldi	r24, 0x01	; 1
    6184:	80 93 e5 23 	sts	0x23E5, r24
    6188:	2f ef       	ldi	r18, 0xFF	; 255
    618a:	3f ef       	ldi	r19, 0xFF	; 255
    618c:	26 c0       	rjmp	.+76     	; 0x61da <xio_getc_usb+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usb(FILE *stream)
{
	while (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
    618e:	90 91 5e 23 	lds	r25, 0x235E
    6192:	80 91 5d 23 	lds	r24, 0x235D
    6196:	98 17       	cp	r25, r24
    6198:	29 f3       	breq	.-54     	; 0x6164 <xio_getc_usb+0xe>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(USBu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    619a:	80 91 5d 23 	lds	r24, 0x235D
    619e:	81 50       	subi	r24, 0x01	; 1
    61a0:	80 93 5d 23 	sts	0x235D, r24
    61a4:	80 91 5d 23 	lds	r24, 0x235D
    61a8:	88 23       	and	r24, r24
    61aa:	19 f4       	brne	.+6      	; 0x61b2 <xio_getc_usb+0x5c>
		USBu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    61ac:	81 e1       	ldi	r24, 0x11	; 17
    61ae:	80 93 5d 23 	sts	0x235D, r24
	}
	USB.c = (USBu.rx_buf[USBu.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    61b2:	e0 91 5d 23 	lds	r30, 0x235D
    61b6:	f0 e0       	ldi	r31, 0x00	; 0
    61b8:	e4 5d       	subi	r30, 0xD4	; 212
    61ba:	fc 4d       	sbci	r31, 0xDC	; 220
    61bc:	82 ad       	ldd	r24, Z+58	; 0x3a
    61be:	8f 77       	andi	r24, 0x7F	; 127
    61c0:	80 93 e6 23 	sts	0x23E6, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[USB.c])))());
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	88 0f       	add	r24, r24
    61c8:	99 1f       	adc	r25, r25
    61ca:	87 50       	subi	r24, 0x07	; 7
    61cc:	95 4e       	sbci	r25, 0xE5	; 229
    61ce:	fc 01       	movw	r30, r24
    61d0:	25 91       	lpm	r18, Z+
    61d2:	34 91       	lpm	r19, Z+
    61d4:	f9 01       	movw	r30, r18
    61d6:	19 95       	eicall
    61d8:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    61da:	c9 01       	movw	r24, r18
    61dc:	08 95       	ret

000061de <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    61de:	80 91 e2 23 	lds	r24, 0x23E2
    61e2:	84 ff       	sbrs	r24, 4
    61e4:	08 c0       	rjmp	.+16     	; 0x61f6 <_getc_char+0x18>
    61e6:	60 91 0c 25 	lds	r22, 0x250C
    61ea:	70 91 0d 25 	lds	r23, 0x250D
    61ee:	80 91 e6 23 	lds	r24, 0x23E6
    61f2:	0e 94 2e 30 	call	0x605c	; 0x605c <xio_putc_usb>
	return(USB.c);
}
    61f6:	80 91 e6 23 	lds	r24, 0x23E6
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	08 95       	ret

000061fe <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(USB.flags)) USB.c = '\n';
    61fe:	80 91 e2 23 	lds	r24, 0x23E2
    6202:	86 ff       	sbrs	r24, 6
    6204:	03 c0       	rjmp	.+6      	; 0x620c <_getc_NEWLINE+0xe>
    6206:	8a e0       	ldi	r24, 0x0A	; 10
    6208:	80 93 e6 23 	sts	0x23E6, r24
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    620c:	80 91 e2 23 	lds	r24, 0x23E2
    6210:	84 ff       	sbrs	r24, 4
    6212:	08 c0       	rjmp	.+16     	; 0x6224 <_getc_NEWLINE+0x26>
    6214:	60 91 0c 25 	lds	r22, 0x250C
    6218:	70 91 0d 25 	lds	r23, 0x250D
    621c:	80 91 e6 23 	lds	r24, 0x23E6
    6220:	0e 94 2e 30 	call	0x605c	; 0x605c <xio_putc_usb>
	return(USB.c);
}
    6224:	80 91 e6 23 	lds	r24, 0x23E6
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	08 95       	ret

0000622c <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(USB.flags)) {
    622c:	80 91 e2 23 	lds	r24, 0x23E2
    6230:	87 ff       	sbrs	r24, 7
    6232:	03 c0       	rjmp	.+6      	; 0x623a <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6234:	0e 94 ff 30 	call	0x61fe	; 0x61fe <_getc_NEWLINE>
    6238:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    623a:	0e 94 ef 30 	call	0x61de	; 0x61de <_getc_char>
}
    623e:	08 95       	ret

00006240 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	USB.sig = XIO_SIG_DELETE;
    6240:	89 e0       	ldi	r24, 0x09	; 9
    6242:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    6246:	8f ef       	ldi	r24, 0xFF	; 255
    6248:	9f ef       	ldi	r25, 0xFF	; 255
    624a:	08 95       	ret

0000624c <_xio_usb_readchar>:
	}
}

int _xio_usb_readchar(char *buf, uint8_t len)
{
	if (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
    624c:	90 91 5e 23 	lds	r25, 0x235E
    6250:	80 91 5d 23 	lds	r24, 0x235D
    6254:	98 17       	cp	r25, r24
    6256:	19 f4       	brne	.+6      	; 0x625e <_xio_usb_readchar+0x12>
    6258:	28 e0       	ldi	r18, 0x08	; 8
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	20 c0       	rjmp	.+64     	; 0x629e <_xio_usb_readchar+0x52>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(USBu.rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    625e:	80 91 5d 23 	lds	r24, 0x235D
    6262:	81 50       	subi	r24, 0x01	; 1
    6264:	80 93 5d 23 	sts	0x235D, r24
    6268:	80 91 5d 23 	lds	r24, 0x235D
    626c:	88 23       	and	r24, r24
    626e:	19 f4       	brne	.+6      	; 0x6276 <_xio_usb_readchar+0x2a>
		USBu.rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6270:	81 e1       	ldi	r24, 0x11	; 17
    6272:	80 93 5d 23 	sts	0x235D, r24
	}
	USB.c = (USBu.rx_buf[USBu.rx_buf_tail] & 0x007F); // get char from RX Q & mask MSB
    6276:	e0 91 5d 23 	lds	r30, 0x235D
    627a:	f0 e0       	ldi	r31, 0x00	; 0
    627c:	e4 5d       	subi	r30, 0xD4	; 212
    627e:	fc 4d       	sbci	r31, 0xDC	; 220
    6280:	82 ad       	ldd	r24, Z+58	; 0x3a
    6282:	8f 77       	andi	r24, 0x7F	; 127
    6284:	80 93 e6 23 	sts	0x23E6, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[USB.c])))()); // dispatch char
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	88 0f       	add	r24, r24
    628c:	99 1f       	adc	r25, r25
    628e:	87 50       	subi	r24, 0x07	; 7
    6290:	96 4e       	sbci	r25, 0xE6	; 230
    6292:	fc 01       	movw	r30, r24
    6294:	25 91       	lpm	r18, Z+
    6296:	34 91       	lpm	r19, Z+
    6298:	f9 01       	movw	r30, r18
    629a:	19 95       	eicall
    629c:	9c 01       	movw	r18, r24
}
    629e:	c9 01       	movw	r24, r18
    62a0:	08 95       	ret

000062a2 <xio_readln_usb>:

int xio_readln_usb(char *buf, uint8_t size)
{
//	uint8_t status = 0;

	if (!IN_LINE(USB.flags)) {					// first time thru initializations
    62a2:	20 91 e2 23 	lds	r18, 0x23E2
    62a6:	30 91 e3 23 	lds	r19, 0x23E3
    62aa:	36 fd       	sbrc	r19, 6
    62ac:	11 c0       	rjmp	.+34     	; 0x62d0 <xio_readln_usb+0x2e>
		USB.len = 0;							// zero buffer
    62ae:	10 92 e7 23 	sts	0x23E7, r1
		USB.status = 0;
    62b2:	10 92 e4 23 	sts	0x23E4, r1
		USB.size = size;
    62b6:	60 93 e8 23 	sts	0x23E8, r22
		USB.buf = buf;
    62ba:	80 93 f7 23 	sts	0x23F7, r24
    62be:	90 93 f8 23 	sts	0x23F8, r25
		USB.sig = XIO_SIG_OK;					// reset signal register
    62c2:	10 92 e5 23 	sts	0x23E5, r1
		USB.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    62c6:	30 64       	ori	r19, 0x40	; 64
    62c8:	20 93 e2 23 	sts	0x23E2, r18
    62cc:	30 93 e3 23 	sts	0x23E3, r19
	}
	while (TRUE) { 
		switch (USB.status = _xio_usb_readchar(USB.buf, USB.size)) {
    62d0:	80 91 f7 23 	lds	r24, 0x23F7
    62d4:	90 91 f8 23 	lds	r25, 0x23F8
    62d8:	60 91 e8 23 	lds	r22, 0x23E8
    62dc:	0e 94 26 31 	call	0x624c	; 0x624c <_xio_usb_readchar>
    62e0:	80 93 e4 23 	sts	0x23E4, r24
    62e4:	88 30       	cpi	r24, 0x08	; 8
    62e6:	41 f0       	breq	.+16     	; 0x62f8 <xio_readln_usb+0x56>
    62e8:	8a 30       	cpi	r24, 0x0A	; 10
    62ea:	19 f0       	breq	.+6      	; 0x62f2 <xio_readln_usb+0x50>
    62ec:	84 30       	cpi	r24, 0x04	; 4
    62ee:	81 f7       	brne	.-32     	; 0x62d0 <xio_readln_usb+0x2e>
    62f0:	06 c0       	rjmp	.+12     	; 0x62fe <xio_readln_usb+0x5c>
    62f2:	2a e0       	ldi	r18, 0x0A	; 10
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	05 c0       	rjmp	.+10     	; 0x6302 <xio_readln_usb+0x60>
    62f8:	22 e0       	ldi	r18, 0x02	; 2
    62fa:	30 e0       	ldi	r19, 0x00	; 0
    62fc:	02 c0       	rjmp	.+4      	; 0x6302 <xio_readln_usb+0x60>
    62fe:	20 e0       	ldi	r18, 0x00	; 0
    6300:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_BUFFER_FULL_NON_FATAL): return (USB.status); break;	// overrun error
			case (XIO_EOL): return (XIO_OK); break;				// got completed line
			case (XIO_EAGAIN): break;							// loop
		}
	}
}
    6302:	c9 01       	movw	r24, r18
    6304:	08 95       	ret

00006306 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (USB.len > USB.size) {						// trap buffer overflow
    6306:	90 91 e7 23 	lds	r25, 0x23E7
    630a:	20 91 e8 23 	lds	r18, 0x23E8
    630e:	e0 91 f7 23 	lds	r30, 0x23F7
    6312:	f0 91 f8 23 	lds	r31, 0x23F8
    6316:	29 17       	cp	r18, r25
    6318:	48 f4       	brcc	.+18     	; 0x632c <_readln_char+0x26>
		USB.sig = XIO_SIG_EOL;
    631a:	82 e0       	ldi	r24, 0x02	; 2
    631c:	80 93 e5 23 	sts	0x23E5, r24
		USB.buf[USB.size] = NUL;					// size is zero based
    6320:	e2 0f       	add	r30, r18
    6322:	f1 1d       	adc	r31, r1
    6324:	10 82       	st	Z, r1
    6326:	2a e0       	ldi	r18, 0x0A	; 10
    6328:	30 e0       	ldi	r19, 0x00	; 0
    632a:	16 c0       	rjmp	.+44     	; 0x6358 <_readln_char+0x52>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	USB.buf[USB.len++] = USB.c;
    632c:	e9 0f       	add	r30, r25
    632e:	f1 1d       	adc	r31, r1
    6330:	80 91 e6 23 	lds	r24, 0x23E6
    6334:	80 83       	st	Z, r24
    6336:	9f 5f       	subi	r25, 0xFF	; 255
    6338:	90 93 e7 23 	sts	0x23E7, r25
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);// conditional echo
    633c:	80 91 e2 23 	lds	r24, 0x23E2
    6340:	84 ff       	sbrs	r24, 4
    6342:	08 c0       	rjmp	.+16     	; 0x6354 <_readln_char+0x4e>
    6344:	60 91 0c 25 	lds	r22, 0x250C
    6348:	70 91 0d 25 	lds	r23, 0x250D
    634c:	80 91 e6 23 	lds	r24, 0x23E6
    6350:	0e 94 2e 30 	call	0x605c	; 0x605c <xio_putc_usb>
    6354:	22 e0       	ldi	r18, 0x02	; 2
    6356:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);							// line is still in process
}
    6358:	c9 01       	movw	r24, r18
    635a:	08 95       	ret

0000635c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	USB.sig = XIO_SIG_EOL;
    635c:	82 e0       	ldi	r24, 0x02	; 2
    635e:	80 93 e5 23 	sts	0x23E5, r24
	USB.buf[USB.len] = NUL;
    6362:	80 91 e7 23 	lds	r24, 0x23E7
    6366:	e0 91 f7 23 	lds	r30, 0x23F7
    636a:	f0 91 f8 23 	lds	r31, 0x23F8
    636e:	e8 0f       	add	r30, r24
    6370:	f1 1d       	adc	r31, r1
    6372:	10 82       	st	Z, r1
	USB.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6374:	20 91 e2 23 	lds	r18, 0x23E2
    6378:	30 91 e3 23 	lds	r19, 0x23E3
    637c:	c9 01       	movw	r24, r18
    637e:	9f 7b       	andi	r25, 0xBF	; 191
    6380:	80 93 e2 23 	sts	0x23E2, r24
    6384:	90 93 e3 23 	sts	0x23E3, r25
	if (ECHO(USB.flags)) xio_putc_usb('\n',stdout);// echo a newline
    6388:	24 ff       	sbrs	r18, 4
    638a:	07 c0       	rjmp	.+14     	; 0x639a <_readln_NEWLINE+0x3e>
    638c:	60 91 0c 25 	lds	r22, 0x250C
    6390:	70 91 0d 25 	lds	r23, 0x250D
    6394:	8a e0       	ldi	r24, 0x0A	; 10
    6396:	0e 94 2e 30 	call	0x605c	; 0x605c <xio_putc_usb>
	return (XIO_EOL);							// return for end-of-line
}
    639a:	84 e0       	ldi	r24, 0x04	; 4
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	08 95       	ret

000063a0 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(USB.flags)) {
    63a0:	80 91 e2 23 	lds	r24, 0x23E2
    63a4:	87 ff       	sbrs	r24, 7
    63a6:	03 c0       	rjmp	.+6      	; 0x63ae <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    63a8:	0e 94 ae 31 	call	0x635c	; 0x635c <_readln_NEWLINE>
    63ac:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    63ae:	0e 94 83 31 	call	0x6306	; 0x6306 <_readln_char>
	}
}
    63b2:	08 95       	ret

000063b4 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--USB.len >= 0) {
    63b4:	80 91 e7 23 	lds	r24, 0x23E7
    63b8:	81 50       	subi	r24, 0x01	; 1
    63ba:	80 93 e7 23 	sts	0x23E7, r24
		if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    63be:	80 91 e2 23 	lds	r24, 0x23E2
    63c2:	84 ff       	sbrs	r24, 4
    63c4:	08 c0       	rjmp	.+16     	; 0x63d6 <_readln_DELETE+0x22>
    63c6:	60 91 0c 25 	lds	r22, 0x250C
    63ca:	70 91 0d 25 	lds	r23, 0x250D
    63ce:	80 91 e6 23 	lds	r24, 0x23E6
    63d2:	0e 94 2e 30 	call	0x605c	; 0x605c <xio_putc_usb>
	} else {
		USB.len = 0;
	}
	return (XIO_EAGAIN);							// line is still in process
}
    63d6:	82 e0       	ldi	r24, 0x02	; 2
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	08 95       	ret

000063dc <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	USB.sig = XIO_SIG_KILL;
    63dc:	84 e0       	ldi	r24, 0x04	; 4
    63de:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    63e2:	8f ef       	ldi	r24, 0xFF	; 255
    63e4:	9f ef       	ldi	r25, 0xFF	; 255
    63e6:	08 95       	ret

000063e8 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	USB.sig = XIO_SIG_PAUSE;
    63e8:	86 e0       	ldi	r24, 0x06	; 6
    63ea:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    63ee:	8f ef       	ldi	r24, 0xFF	; 255
    63f0:	9f ef       	ldi	r25, 0xFF	; 255
    63f2:	08 95       	ret

000063f4 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	USB.sig = XIO_SIG_RESUME;
    63f4:	87 e0       	ldi	r24, 0x07	; 7
    63f6:	80 93 e5 23 	sts	0x23E5, r24
	return(_FDEV_ERR);
}
    63fa:	8f ef       	ldi	r24, 0xFF	; 255
    63fc:	9f ef       	ldi	r25, 0xFF	; 255
    63fe:	08 95       	ret

00006400 <xio_setflags_usb>:
/*
 *	xio_setflags_usb() - check and set control flags for device
 */

int xio_setflags_usb(const uint16_t control)
{
    6400:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_USB, control);
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	0e 94 20 28 	call	0x5040	; 0x5040 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6408:	80 e0       	ldi	r24, 0x00	; 0
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	08 95       	ret

0000640e <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    640e:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6410:	83 30       	cpi	r24, 0x03	; 3
    6412:	31 f4       	brne	.+12     	; 0x6420 <xio_usb_queue_RX_char+0x12>
		USB.sig = XIO_SIG_KILL;					// set signal value
    6414:	84 e0       	ldi	r24, 0x04	; 4
    6416:	80 93 e5 23 	sts	0x23E5, r24
		signal_etx();							// call app-specific signal handler
    641a:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <signal_etx>
    641e:	08 95       	ret
		return;
	}

	// normal path
	if ((--USBu.rx_buf_head) == 0) { 			// wrap condition
    6420:	80 91 5e 23 	lds	r24, 0x235E
    6424:	81 50       	subi	r24, 0x01	; 1
    6426:	80 93 5e 23 	sts	0x235E, r24
    642a:	80 91 5e 23 	lds	r24, 0x235E
    642e:	88 23       	and	r24, r24
    6430:	19 f4       	brne	.+6      	; 0x6438 <xio_usb_queue_RX_char+0x2a>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6432:	81 e1       	ldi	r24, 0x11	; 17
    6434:	80 93 5e 23 	sts	0x235E, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6438:	90 91 5e 23 	lds	r25, 0x235E
    643c:	80 91 5d 23 	lds	r24, 0x235D
    6440:	98 17       	cp	r25, r24
    6442:	39 f0       	breq	.+14     	; 0x6452 <xio_usb_queue_RX_char+0x44>
		USBu.rx_buf[USBu.rx_buf_head] = c;		// FAKE INPUT DATA
    6444:	e0 91 5e 23 	lds	r30, 0x235E
    6448:	f0 e0       	ldi	r31, 0x00	; 0
    644a:	e4 5d       	subi	r30, 0xD4	; 212
    644c:	fc 4d       	sbci	r31, 0xDC	; 220
    644e:	22 af       	std	Z+58, r18	; 0x3a
    6450:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6452:	80 91 5e 23 	lds	r24, 0x235E
    6456:	8f 5f       	subi	r24, 0xFF	; 255
    6458:	80 93 5e 23 	sts	0x235E, r24
    645c:	80 91 5e 23 	lds	r24, 0x235E
    6460:	82 31       	cpi	r24, 0x12	; 18
    6462:	18 f0       	brcs	.+6      	; 0x646a <xio_usb_queue_RX_char+0x5c>
		USBu.rx_buf_head = 1;
    6464:	81 e0       	ldi	r24, 0x01	; 1
    6466:	80 93 5e 23 	sts	0x235E, r24
    646a:	08 95       	ret

0000646c <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    646c:	1f 93       	push	r17
    646e:	cf 93       	push	r28
    6470:	df 93       	push	r29
    6472:	ec 01       	movw	r28, r24
    6474:	10 e0       	ldi	r17, 0x00	; 0
    6476:	02 c0       	rjmp	.+4      	; 0x647c <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    6478:	0e 94 07 32 	call	0x640e	; 0x640e <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    647c:	fe 01       	movw	r30, r28
    647e:	e1 0f       	add	r30, r17
    6480:	f1 1d       	adc	r31, r1
    6482:	80 81       	ld	r24, Z
    6484:	1f 5f       	subi	r17, 0xFF	; 255
    6486:	88 23       	and	r24, r24
    6488:	b9 f7       	brne	.-18     	; 0x6478 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    648a:	df 91       	pop	r29
    648c:	cf 91       	pop	r28
    648e:	1f 91       	pop	r17
    6490:	08 95       	ret

00006492 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    6492:	1f 92       	push	r1
    6494:	0f 92       	push	r0
    6496:	0f b6       	in	r0, 0x3f	; 63
    6498:	0f 92       	push	r0
    649a:	0b b6       	in	r0, 0x3b	; 59
    649c:	0f 92       	push	r0
    649e:	11 24       	eor	r1, r1
    64a0:	2f 93       	push	r18
    64a2:	3f 93       	push	r19
    64a4:	4f 93       	push	r20
    64a6:	5f 93       	push	r21
    64a8:	6f 93       	push	r22
    64aa:	7f 93       	push	r23
    64ac:	8f 93       	push	r24
    64ae:	9f 93       	push	r25
    64b0:	af 93       	push	r26
    64b2:	bf 93       	push	r27
    64b4:	ef 93       	push	r30
    64b6:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    64b8:	e0 91 62 23 	lds	r30, 0x2362
    64bc:	f0 91 63 23 	lds	r31, 0x2363
    64c0:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    64c2:	23 30       	cpi	r18, 0x03	; 3
    64c4:	31 f4       	brne	.+12     	; 0x64d2 <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    64c6:	84 e0       	ldi	r24, 0x04	; 4
    64c8:	80 93 e5 23 	sts	0x23E5, r24
		signal_etx();							// call app-specific signal handler
    64cc:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <signal_etx>
    64d0:	25 c0       	rjmp	.+74     	; 0x651c <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    64d2:	80 91 5e 23 	lds	r24, 0x235E
    64d6:	81 50       	subi	r24, 0x01	; 1
    64d8:	80 93 5e 23 	sts	0x235E, r24
    64dc:	80 91 5e 23 	lds	r24, 0x235E
    64e0:	88 23       	and	r24, r24
    64e2:	19 f4       	brne	.+6      	; 0x64ea <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    64e4:	81 e1       	ldi	r24, 0x11	; 17
    64e6:	80 93 5e 23 	sts	0x235E, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    64ea:	90 91 5e 23 	lds	r25, 0x235E
    64ee:	80 91 5d 23 	lds	r24, 0x235D
    64f2:	98 17       	cp	r25, r24
    64f4:	39 f0       	breq	.+14     	; 0x6504 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    64f6:	e0 91 5e 23 	lds	r30, 0x235E
    64fa:	f0 e0       	ldi	r31, 0x00	; 0
    64fc:	e4 5d       	subi	r30, 0xD4	; 212
    64fe:	fc 4d       	sbci	r31, 0xDC	; 220
    6500:	22 af       	std	Z+58, r18	; 0x3a
    6502:	0c c0       	rjmp	.+24     	; 0x651c <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6504:	80 91 5e 23 	lds	r24, 0x235E
    6508:	8f 5f       	subi	r24, 0xFF	; 255
    650a:	80 93 5e 23 	sts	0x235E, r24
    650e:	80 91 5e 23 	lds	r24, 0x235E
    6512:	82 31       	cpi	r24, 0x12	; 18
    6514:	18 f0       	brcs	.+6      	; 0x651c <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	80 93 5e 23 	sts	0x235E, r24
	}
	// activate flow control here or before it gets to this level
}
    651c:	ff 91       	pop	r31
    651e:	ef 91       	pop	r30
    6520:	bf 91       	pop	r27
    6522:	af 91       	pop	r26
    6524:	9f 91       	pop	r25
    6526:	8f 91       	pop	r24
    6528:	7f 91       	pop	r23
    652a:	6f 91       	pop	r22
    652c:	5f 91       	pop	r21
    652e:	4f 91       	pop	r20
    6530:	3f 91       	pop	r19
    6532:	2f 91       	pop	r18
    6534:	0f 90       	pop	r0
    6536:	0b be       	out	0x3b, r0	; 59
    6538:	0f 90       	pop	r0
    653a:	0f be       	out	0x3f, r0	; 63
    653c:	0f 90       	pop	r0
    653e:	1f 90       	pop	r1
    6540:	18 95       	reti

00006542 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6542:	1f 92       	push	r1
    6544:	0f 92       	push	r0
    6546:	0f b6       	in	r0, 0x3f	; 63
    6548:	0f 92       	push	r0
    654a:	0b b6       	in	r0, 0x3b	; 59
    654c:	0f 92       	push	r0
    654e:	11 24       	eor	r1, r1
    6550:	8f 93       	push	r24
    6552:	9f 93       	push	r25
    6554:	af 93       	push	r26
    6556:	bf 93       	push	r27
    6558:	ef 93       	push	r30
    655a:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints
    655c:	90 91 31 23 	lds	r25, 0x2331
    6560:	80 91 30 23 	lds	r24, 0x2330
    6564:	98 17       	cp	r25, r24
    6566:	39 f4       	brne	.+14     	; 0x6576 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6568:	e0 91 33 23 	lds	r30, 0x2333
    656c:	f0 91 34 23 	lds	r31, 0x2334
    6570:	80 e2       	ldi	r24, 0x20	; 32
    6572:	83 83       	std	Z+3, r24	; 0x03
    6574:	1e c0       	rjmp	.+60     	; 0x65b2 <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    6576:	80 91 cb 23 	lds	r24, 0x23CB
    657a:	90 91 cc 23 	lds	r25, 0x23CC
    657e:	93 fd       	sbrc	r25, 3
    6580:	18 c0       	rjmp	.+48     	; 0x65b2 <__vector_29+0x70>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6582:	80 91 30 23 	lds	r24, 0x2330
    6586:	81 50       	subi	r24, 0x01	; 1
    6588:	80 93 30 23 	sts	0x2330, r24
    658c:	80 91 30 23 	lds	r24, 0x2330
    6590:	88 23       	and	r24, r24
    6592:	19 f4       	brne	.+6      	; 0x659a <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6594:	81 e1       	ldi	r24, 0x11	; 17
    6596:	80 93 30 23 	sts	0x2330, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    659a:	e0 91 33 23 	lds	r30, 0x2333
    659e:	f0 91 34 23 	lds	r31, 0x2334
    65a2:	a0 91 30 23 	lds	r26, 0x2330
    65a6:	b0 e0       	ldi	r27, 0x00	; 0
    65a8:	a4 5d       	subi	r26, 0xD4	; 212
    65aa:	bc 4d       	sbci	r27, 0xDC	; 220
    65ac:	5d 96       	adiw	r26, 0x1d	; 29
    65ae:	8c 91       	ld	r24, X
    65b0:	80 83       	st	Z, r24
	}
}
    65b2:	ff 91       	pop	r31
    65b4:	ef 91       	pop	r30
    65b6:	bf 91       	pop	r27
    65b8:	af 91       	pop	r26
    65ba:	9f 91       	pop	r25
    65bc:	8f 91       	pop	r24
    65be:	0f 90       	pop	r0
    65c0:	0b be       	out	0x3b, r0	; 59
    65c2:	0f 90       	pop	r0
    65c4:	0f be       	out	0x3f, r0	; 63
    65c6:	0f 90       	pop	r0
    65c8:	1f 90       	pop	r1
    65ca:	18 95       	reti

000065cc <xio_open_rs485>:
 */

struct __file * xio_open_rs485()
{
	return(RS.fdev);
}
    65cc:	80 91 de 23 	lds	r24, 0x23DE
    65d0:	90 91 df 23 	lds	r25, 0x23DF
    65d4:	08 95       	ret

000065d6 <xio_putc_rs485>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
    65d6:	48 2f       	mov	r20, r24
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    65d8:	20 91 cb 23 	lds	r18, 0x23CB
    65dc:	30 91 cc 23 	lds	r19, 0x23CC
    65e0:	d9 01       	movw	r26, r18
    65e2:	a4 70       	andi	r26, 0x04	; 4
    65e4:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	RSu.tx_buf_head = RSu.next_tx_buf_head;			// accept next buffer head value
	RSu.tx_buf[RSu.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    65e6:	b9 01       	movw	r22, r18
    65e8:	60 72       	andi	r22, 0x20	; 32
    65ea:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
    65ec:	90 91 31 23 	lds	r25, 0x2331
    65f0:	91 50       	subi	r25, 0x01	; 1
    65f2:	c1 f4       	brne	.+48     	; 0x6624 <xio_putc_rs485+0x4e>
    65f4:	91 e1       	ldi	r25, 0x11	; 17
    65f6:	16 c0       	rjmp	.+44     	; 0x6624 <xio_putc_rs485+0x4e>
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    65f8:	10 97       	sbiw	r26, 0x00	; 0
    65fa:	61 f0       	breq	.+24     	; 0x6614 <xio_putc_rs485+0x3e>
			sleep_mode();
    65fc:	80 91 48 00 	lds	r24, 0x0048
    6600:	81 60       	ori	r24, 0x01	; 1
    6602:	80 93 48 00 	sts	0x0048, r24
    6606:	88 95       	sleep
    6608:	80 91 48 00 	lds	r24, 0x0048
    660c:	8e 7f       	andi	r24, 0xFE	; 254
    660e:	80 93 48 00 	sts	0x0048, r24
    6612:	08 c0       	rjmp	.+16     	; 0x6624 <xio_putc_rs485+0x4e>
    6614:	90 93 32 23 	sts	0x2332, r25
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    6618:	81 e0       	ldi	r24, 0x01	; 1
    661a:	80 93 ce 23 	sts	0x23CE, r24
    661e:	2f ef       	ldi	r18, 0xFF	; 255
    6620:	3f ef       	ldi	r19, 0xFF	; 255
    6622:	54 c0       	rjmp	.+168    	; 0x66cc <xio_putc_rs485+0xf6>
int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
    6624:	80 91 30 23 	lds	r24, 0x2330
    6628:	98 17       	cp	r25, r24
    662a:	31 f3       	breq	.-52     	; 0x65f8 <xio_putc_rs485+0x22>
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	RSu.tx_buf_head = RSu.next_tx_buf_head;			// accept next buffer head value
    662c:	90 93 31 23 	sts	0x2331, r25
	RSu.tx_buf[RSu.tx_buf_head] = c;				// ...and write char to buffer
    6630:	e0 91 31 23 	lds	r30, 0x2331
    6634:	f0 e0       	ldi	r31, 0x00	; 0
    6636:	e4 5d       	subi	r30, 0xD4	; 212
    6638:	fc 4d       	sbci	r31, 0xDC	; 220
    663a:	45 8f       	std	Z+29, r20	; 0x1d

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    663c:	61 15       	cp	r22, r1
    663e:	71 05       	cpc	r23, r1
    6640:	21 f0       	breq	.+8      	; 0x664a <xio_putc_rs485+0x74>
    6642:	4a 30       	cpi	r20, 0x0A	; 10
    6644:	11 f4       	brne	.+4      	; 0x664a <xio_putc_rs485+0x74>
    6646:	4d e0       	ldi	r20, 0x0D	; 13
    6648:	d1 cf       	rjmp	.-94     	; 0x65ec <xio_putc_rs485+0x16>
    664a:	90 93 32 23 	sts	0x2332, r25
		return xio_putc_rs485('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (RSu.usart->STATUS & 0x20) {
    664e:	a0 91 33 23 	lds	r26, 0x2333
    6652:	b0 91 34 23 	lds	r27, 0x2334
    6656:	11 96       	adiw	r26, 0x01	; 1
    6658:	8c 91       	ld	r24, X
    665a:	11 97       	sbiw	r26, 0x01	; 1
    665c:	85 ff       	sbrs	r24, 5
    665e:	27 c0       	rjmp	.+78     	; 0x66ae <xio_putc_rs485+0xd8>
		if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buf may be empty if IRQ got it
    6660:	90 91 31 23 	lds	r25, 0x2331
    6664:	80 91 30 23 	lds	r24, 0x2330
    6668:	98 17       	cp	r25, r24
    666a:	71 f1       	breq	.+92     	; 0x66c8 <xio_putc_rs485+0xf2>
			return (0);
		}
		RS.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    666c:	38 60       	ori	r19, 0x08	; 8
    666e:	20 93 cb 23 	sts	0x23CB, r18
    6672:	30 93 cc 23 	sts	0x23CC, r19
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6676:	80 91 30 23 	lds	r24, 0x2330
    667a:	81 50       	subi	r24, 0x01	; 1
    667c:	80 93 30 23 	sts	0x2330, r24
    6680:	80 91 30 23 	lds	r24, 0x2330
    6684:	88 23       	and	r24, r24
    6686:	19 f4       	brne	.+6      	; 0x668e <xio_putc_rs485+0xb8>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6688:	81 e1       	ldi	r24, 0x11	; 17
    668a:	80 93 30 23 	sts	0x2330, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];// write char to TX DATA reg
    668e:	e0 91 30 23 	lds	r30, 0x2330
    6692:	f0 e0       	ldi	r31, 0x00	; 0
    6694:	e4 5d       	subi	r30, 0xD4	; 212
    6696:	fc 4d       	sbci	r31, 0xDC	; 220
    6698:	85 8d       	ldd	r24, Z+29	; 0x1d
    669a:	8c 93       	st	X, r24
		RS.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    669c:	80 91 cb 23 	lds	r24, 0x23CB
    66a0:	90 91 cc 23 	lds	r25, 0x23CC
    66a4:	97 7f       	andi	r25, 0xF7	; 247
    66a6:	80 93 cb 23 	sts	0x23CB, r24
    66aa:	90 93 cc 23 	sts	0x23CC, r25
	}
	// enable interrupts regardless
	RSu.usart->CTRLA = CTRLA_RXON_TXON;			// won't work if you just |= it
    66ae:	e0 91 33 23 	lds	r30, 0x2333
    66b2:	f0 91 34 23 	lds	r31, 0x2334
    66b6:	81 e2       	ldi	r24, 0x21	; 33
    66b8:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    66ba:	80 91 a2 00 	lds	r24, 0x00A2
    66be:	81 60       	ori	r24, 0x01	; 1
    66c0:	e0 ea       	ldi	r30, 0xA0	; 160
    66c2:	f0 e0       	ldi	r31, 0x00	; 0
    66c4:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    66c6:	78 94       	sei
    66c8:	20 e0       	ldi	r18, 0x00	; 0
    66ca:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    66cc:	c9 01       	movw	r24, r18
    66ce:	08 95       	ret

000066d0 <xio_getc_rs485>:
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSu.rx_buf_head == RSu.rx_buf_tail) {// RX ISR buffer empty
		if (BLOCKING(RS.flags)) {
    66d0:	20 91 cb 23 	lds	r18, 0x23CB
    66d4:	30 91 cc 23 	lds	r19, 0x23CC
    66d8:	24 70       	andi	r18, 0x04	; 4
    66da:	30 70       	andi	r19, 0x00	; 0
    66dc:	15 c0       	rjmp	.+42     	; 0x6708 <xio_getc_rs485+0x38>
    66de:	21 15       	cp	r18, r1
    66e0:	31 05       	cpc	r19, r1
    66e2:	61 f0       	breq	.+24     	; 0x66fc <xio_getc_rs485+0x2c>
			sleep_mode();
    66e4:	80 91 48 00 	lds	r24, 0x0048
    66e8:	81 60       	ori	r24, 0x01	; 1
    66ea:	80 93 48 00 	sts	0x0048, r24
    66ee:	88 95       	sleep
    66f0:	80 91 48 00 	lds	r24, 0x0048
    66f4:	8e 7f       	andi	r24, 0xFE	; 254
    66f6:	80 93 48 00 	sts	0x0048, r24
    66fa:	06 c0       	rjmp	.+12     	; 0x6708 <xio_getc_rs485+0x38>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    66fc:	81 e0       	ldi	r24, 0x01	; 1
    66fe:	80 93 ce 23 	sts	0x23CE, r24
    6702:	2f ef       	ldi	r18, 0xFF	; 255
    6704:	3f ef       	ldi	r19, 0xFF	; 255
    6706:	26 c0       	rjmp	.+76     	; 0x6754 <xio_getc_rs485+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSu.rx_buf_head == RSu.rx_buf_tail) {// RX ISR buffer empty
    6708:	90 91 2f 23 	lds	r25, 0x232F
    670c:	80 91 2e 23 	lds	r24, 0x232E
    6710:	98 17       	cp	r25, r24
    6712:	29 f3       	breq	.-54     	; 0x66de <xio_getc_rs485+0xe>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(RSu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6714:	80 91 2e 23 	lds	r24, 0x232E
    6718:	81 50       	subi	r24, 0x01	; 1
    671a:	80 93 2e 23 	sts	0x232E, r24
    671e:	80 91 2e 23 	lds	r24, 0x232E
    6722:	88 23       	and	r24, r24
    6724:	19 f4       	brne	.+6      	; 0x672c <xio_getc_rs485+0x5c>
		RSu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6726:	81 e1       	ldi	r24, 0x11	; 17
    6728:	80 93 2e 23 	sts	0x232E, r24
	}
	RS.c = (RSu.rx_buf[RSu.rx_buf_tail] & 0x007F);	// get char from RX & mask MSB
    672c:	e0 91 2e 23 	lds	r30, 0x232E
    6730:	f0 e0       	ldi	r31, 0x00	; 0
    6732:	e4 5d       	subi	r30, 0xD4	; 212
    6734:	fc 4d       	sbci	r31, 0xDC	; 220
    6736:	83 85       	ldd	r24, Z+11	; 0x0b
    6738:	8f 77       	andi	r24, 0x7F	; 127
    673a:	80 93 cf 23 	sts	0x23CF, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[RS.c])))());
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	88 0f       	add	r24, r24
    6742:	99 1f       	adc	r25, r25
    6744:	87 50       	subi	r24, 0x07	; 7
    6746:	93 4e       	sbci	r25, 0xE3	; 227
    6748:	fc 01       	movw	r30, r24
    674a:	25 91       	lpm	r18, Z+
    674c:	34 91       	lpm	r19, Z+
    674e:	f9 01       	movw	r30, r18
    6750:	19 95       	eicall
    6752:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6754:	c9 01       	movw	r24, r18
    6756:	08 95       	ret

00006758 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    6758:	80 91 cb 23 	lds	r24, 0x23CB
    675c:	84 ff       	sbrs	r24, 4
    675e:	08 c0       	rjmp	.+16     	; 0x6770 <_getc_char+0x18>
    6760:	60 91 0c 25 	lds	r22, 0x250C
    6764:	70 91 0d 25 	lds	r23, 0x250D
    6768:	80 91 cf 23 	lds	r24, 0x23CF
    676c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <xio_putc_rs485>
	return(RS.c);
}
    6770:	80 91 cf 23 	lds	r24, 0x23CF
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	08 95       	ret

00006778 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(RS.flags)) RS.c = '\n';
    6778:	80 91 cb 23 	lds	r24, 0x23CB
    677c:	86 ff       	sbrs	r24, 6
    677e:	03 c0       	rjmp	.+6      	; 0x6786 <_getc_NEWLINE+0xe>
    6780:	8a e0       	ldi	r24, 0x0A	; 10
    6782:	80 93 cf 23 	sts	0x23CF, r24
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    6786:	80 91 cb 23 	lds	r24, 0x23CB
    678a:	84 ff       	sbrs	r24, 4
    678c:	08 c0       	rjmp	.+16     	; 0x679e <_getc_NEWLINE+0x26>
    678e:	60 91 0c 25 	lds	r22, 0x250C
    6792:	70 91 0d 25 	lds	r23, 0x250D
    6796:	80 91 cf 23 	lds	r24, 0x23CF
    679a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <xio_putc_rs485>
	return(RS.c);
}
    679e:	80 91 cf 23 	lds	r24, 0x23CF
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	08 95       	ret

000067a6 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(RS.flags)) {
    67a6:	80 91 cb 23 	lds	r24, 0x23CB
    67aa:	87 ff       	sbrs	r24, 7
    67ac:	03 c0       	rjmp	.+6      	; 0x67b4 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    67ae:	0e 94 bc 33 	call	0x6778	; 0x6778 <_getc_NEWLINE>
    67b2:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    67b4:	0e 94 ac 33 	call	0x6758	; 0x6758 <_getc_char>
}
    67b8:	08 95       	ret

000067ba <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	RS.sig = XIO_SIG_DELETE;
    67ba:	89 e0       	ldi	r24, 0x09	; 9
    67bc:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    67c0:	8f ef       	ldi	r24, 0xFF	; 255
    67c2:	9f ef       	ldi	r25, 0xFF	; 255
    67c4:	08 95       	ret

000067c6 <xio_readln_rs485>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_rs485(char *buf, uint8_t size)
{
	if (!IN_LINE(RS.flags)) {					// first time thru initializations
    67c6:	20 91 cb 23 	lds	r18, 0x23CB
    67ca:	30 91 cc 23 	lds	r19, 0x23CC
    67ce:	36 fd       	sbrc	r19, 6
    67d0:	11 c0       	rjmp	.+34     	; 0x67f4 <xio_readln_rs485+0x2e>
		RS.len = 0;								// zero buffer
    67d2:	10 92 d0 23 	sts	0x23D0, r1
		RS.status = 0;
    67d6:	10 92 cd 23 	sts	0x23CD, r1
		RS.size = size;
    67da:	60 93 d1 23 	sts	0x23D1, r22
		RS.buf = buf;
    67de:	80 93 e0 23 	sts	0x23E0, r24
    67e2:	90 93 e1 23 	sts	0x23E1, r25
		RS.sig = XIO_SIG_OK;					// no signal action
    67e6:	10 92 ce 23 	sts	0x23CE, r1
		RS.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    67ea:	30 64       	ori	r19, 0x40	; 64
    67ec:	20 93 cb 23 	sts	0x23CB, r18
    67f0:	30 93 cc 23 	sts	0x23CC, r19
	}
	if (RSu.rx_buf_head == RSu.rx_buf_tail) {	// RX ISR buffer empty
    67f4:	90 91 2f 23 	lds	r25, 0x232F
    67f8:	80 91 2e 23 	lds	r24, 0x232E
    67fc:	98 17       	cp	r25, r24
    67fe:	19 f4       	brne	.+6      	; 0x6806 <xio_readln_rs485+0x40>
    6800:	22 e0       	ldi	r18, 0x02	; 2
    6802:	30 e0       	ldi	r19, 0x00	; 0
    6804:	20 c0       	rjmp	.+64     	; 0x6846 <xio_readln_rs485+0x80>
//		RS.sig = XIO_SIG_EAGAIN;
		return(XIO_EAGAIN);
	}
	if (--(RSu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6806:	80 91 2e 23 	lds	r24, 0x232E
    680a:	81 50       	subi	r24, 0x01	; 1
    680c:	80 93 2e 23 	sts	0x232E, r24
    6810:	80 91 2e 23 	lds	r24, 0x232E
    6814:	88 23       	and	r24, r24
    6816:	19 f4       	brne	.+6      	; 0x681e <xio_readln_rs485+0x58>
		RSu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6818:	81 e1       	ldi	r24, 0x11	; 17
    681a:	80 93 2e 23 	sts	0x232E, r24
	}
	RS.c = (RSu.rx_buf[RSu.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    681e:	e0 91 2e 23 	lds	r30, 0x232E
    6822:	f0 e0       	ldi	r31, 0x00	; 0
    6824:	e4 5d       	subi	r30, 0xD4	; 212
    6826:	fc 4d       	sbci	r31, 0xDC	; 220
    6828:	83 85       	ldd	r24, Z+11	; 0x0b
    682a:	8f 77       	andi	r24, 0x7F	; 127
    682c:	80 93 cf 23 	sts	0x23CF, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[RS.c])))()); // dispatch char
    6830:	90 e0       	ldi	r25, 0x00	; 0
    6832:	88 0f       	add	r24, r24
    6834:	99 1f       	adc	r25, r25
    6836:	87 50       	subi	r24, 0x07	; 7
    6838:	94 4e       	sbci	r25, 0xE4	; 228
    683a:	fc 01       	movw	r30, r24
    683c:	25 91       	lpm	r18, Z+
    683e:	34 91       	lpm	r19, Z+
    6840:	f9 01       	movw	r30, r18
    6842:	19 95       	eicall
    6844:	9c 01       	movw	r18, r24
}
    6846:	c9 01       	movw	r24, r18
    6848:	08 95       	ret

0000684a <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (RS.len > RS.size) {						// trap buffer overflow
    684a:	90 91 d0 23 	lds	r25, 0x23D0
    684e:	20 91 d1 23 	lds	r18, 0x23D1
    6852:	e0 91 e0 23 	lds	r30, 0x23E0
    6856:	f0 91 e1 23 	lds	r31, 0x23E1
    685a:	29 17       	cp	r18, r25
    685c:	48 f4       	brcc	.+18     	; 0x6870 <_readln_char+0x26>
		RS.sig = XIO_SIG_EOL;
    685e:	82 e0       	ldi	r24, 0x02	; 2
    6860:	80 93 ce 23 	sts	0x23CE, r24
		RS.buf[RS.size] = NUL;					// RS.len is zero based
    6864:	e2 0f       	add	r30, r18
    6866:	f1 1d       	adc	r31, r1
    6868:	10 82       	st	Z, r1
    686a:	2a e0       	ldi	r18, 0x0A	; 10
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	16 c0       	rjmp	.+44     	; 0x689c <_readln_char+0x52>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	RS.buf[RS.len++] = RS.c;
    6870:	e9 0f       	add	r30, r25
    6872:	f1 1d       	adc	r31, r1
    6874:	80 91 cf 23 	lds	r24, 0x23CF
    6878:	80 83       	st	Z, r24
    687a:	9f 5f       	subi	r25, 0xFF	; 255
    687c:	90 93 d0 23 	sts	0x23D0, r25
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);// conditional echo
    6880:	80 91 cb 23 	lds	r24, 0x23CB
    6884:	84 ff       	sbrs	r24, 4
    6886:	08 c0       	rjmp	.+16     	; 0x6898 <_readln_char+0x4e>
    6888:	60 91 0c 25 	lds	r22, 0x250C
    688c:	70 91 0d 25 	lds	r23, 0x250D
    6890:	80 91 cf 23 	lds	r24, 0x23CF
    6894:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <xio_putc_rs485>
    6898:	22 e0       	ldi	r18, 0x02	; 2
    689a:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);							// line is still in process
}
    689c:	c9 01       	movw	r24, r18
    689e:	08 95       	ret

000068a0 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handle valid newline char
{
	RS.sig = XIO_SIG_EOL;
    68a0:	82 e0       	ldi	r24, 0x02	; 2
    68a2:	80 93 ce 23 	sts	0x23CE, r24
	RS.buf[RS.len] = NUL;
    68a6:	80 91 d0 23 	lds	r24, 0x23D0
    68aa:	e0 91 e0 23 	lds	r30, 0x23E0
    68ae:	f0 91 e1 23 	lds	r31, 0x23E1
    68b2:	e8 0f       	add	r30, r24
    68b4:	f1 1d       	adc	r31, r1
    68b6:	10 82       	st	Z, r1
	RS.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    68b8:	20 91 cb 23 	lds	r18, 0x23CB
    68bc:	30 91 cc 23 	lds	r19, 0x23CC
    68c0:	c9 01       	movw	r24, r18
    68c2:	9f 7b       	andi	r25, 0xBF	; 191
    68c4:	80 93 cb 23 	sts	0x23CB, r24
    68c8:	90 93 cc 23 	sts	0x23CC, r25
	if (ECHO(RS.flags)) xio_putc_rs485('\n',stdout);// echo a newline
    68cc:	24 ff       	sbrs	r18, 4
    68ce:	07 c0       	rjmp	.+14     	; 0x68de <_readln_NEWLINE+0x3e>
    68d0:	60 91 0c 25 	lds	r22, 0x250C
    68d4:	70 91 0d 25 	lds	r23, 0x250D
    68d8:	8a e0       	ldi	r24, 0x0A	; 10
    68da:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <xio_putc_rs485>
	return 0;
}
    68de:	80 e0       	ldi	r24, 0x00	; 0
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	08 95       	ret

000068e4 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(RS.flags)) {
    68e4:	80 91 cb 23 	lds	r24, 0x23CB
    68e8:	87 ff       	sbrs	r24, 7
    68ea:	03 c0       	rjmp	.+6      	; 0x68f2 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi-mode treat as an EOL
    68ec:	0e 94 50 34 	call	0x68a0	; 0x68a0 <_readln_NEWLINE>
    68f0:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    68f2:	0e 94 25 34 	call	0x684a	; 0x684a <_readln_char>
	}
}
    68f6:	08 95       	ret

000068f8 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--RS.len >= 0) {
    68f8:	80 91 d0 23 	lds	r24, 0x23D0
    68fc:	81 50       	subi	r24, 0x01	; 1
    68fe:	80 93 d0 23 	sts	0x23D0, r24
		if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    6902:	80 91 cb 23 	lds	r24, 0x23CB
    6906:	84 ff       	sbrs	r24, 4
    6908:	08 c0       	rjmp	.+16     	; 0x691a <_readln_DELETE+0x22>
    690a:	60 91 0c 25 	lds	r22, 0x250C
    690e:	70 91 0d 25 	lds	r23, 0x250D
    6912:	80 91 cf 23 	lds	r24, 0x23CF
    6916:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <xio_putc_rs485>
	} else {
		RS.len = 0;
	}
	return (XIO_EAGAIN);							// line is still in process
}
    691a:	82 e0       	ldi	r24, 0x02	; 2
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	08 95       	ret

00006920 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	RS.sig = XIO_SIG_KILL;
    6920:	84 e0       	ldi	r24, 0x04	; 4
    6922:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    6926:	8f ef       	ldi	r24, 0xFF	; 255
    6928:	9f ef       	ldi	r25, 0xFF	; 255
    692a:	08 95       	ret

0000692c <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	RS.sig = XIO_SIG_PAUSE;
    692c:	86 e0       	ldi	r24, 0x06	; 6
    692e:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    6932:	8f ef       	ldi	r24, 0xFF	; 255
    6934:	9f ef       	ldi	r25, 0xFF	; 255
    6936:	08 95       	ret

00006938 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	RS.sig = XIO_SIG_RESUME;
    6938:	87 e0       	ldi	r24, 0x07	; 7
    693a:	80 93 ce 23 	sts	0x23CE, r24
	return(_FDEV_ERR);
}
    693e:	8f ef       	ldi	r24, 0xFF	; 255
    6940:	9f ef       	ldi	r25, 0xFF	; 255
    6942:	08 95       	ret

00006944 <xio_setflags_rs485>:
/*
 *	xio_setflags_rs485() - check and set control flags for device
 */

int xio_setflags_rs485(const uint16_t control)
{
    6944:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_RS485, control);
    6946:	80 e0       	ldi	r24, 0x00	; 0
    6948:	0e 94 20 28 	call	0x5040	; 0x5040 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    694c:	80 e0       	ldi	r24, 0x00	; 0
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	08 95       	ret

00006952 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6952:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6954:	83 30       	cpi	r24, 0x03	; 3
    6956:	31 f4       	brne	.+12     	; 0x6964 <xio_rs485_queue_RX_char+0x12>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6958:	84 e0       	ldi	r24, 0x04	; 4
    695a:	80 93 ce 23 	sts	0x23CE, r24
		signal_etx();							// call app-specific signal handler
    695e:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <signal_etx>
    6962:	08 95       	ret
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// wrap condition
    6964:	80 91 2f 23 	lds	r24, 0x232F
    6968:	81 50       	subi	r24, 0x01	; 1
    696a:	80 93 2f 23 	sts	0x232F, r24
    696e:	80 91 2f 23 	lds	r24, 0x232F
    6972:	88 23       	and	r24, r24
    6974:	19 f4       	brne	.+6      	; 0x697c <xio_rs485_queue_RX_char+0x2a>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6976:	81 e1       	ldi	r24, 0x11	; 17
    6978:	80 93 2f 23 	sts	0x232F, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    697c:	90 91 2f 23 	lds	r25, 0x232F
    6980:	80 91 2e 23 	lds	r24, 0x232E
    6984:	98 17       	cp	r25, r24
    6986:	39 f0       	breq	.+14     	; 0x6996 <xio_rs485_queue_RX_char+0x44>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// FAKE INPUT DATA
    6988:	e0 91 2f 23 	lds	r30, 0x232F
    698c:	f0 e0       	ldi	r31, 0x00	; 0
    698e:	e4 5d       	subi	r30, 0xD4	; 212
    6990:	fc 4d       	sbci	r31, 0xDC	; 220
    6992:	23 87       	std	Z+11, r18	; 0x0b
    6994:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6996:	80 91 2f 23 	lds	r24, 0x232F
    699a:	8f 5f       	subi	r24, 0xFF	; 255
    699c:	80 93 2f 23 	sts	0x232F, r24
    69a0:	80 91 2f 23 	lds	r24, 0x232F
    69a4:	82 31       	cpi	r24, 0x12	; 18
    69a6:	18 f0       	brcs	.+6      	; 0x69ae <xio_rs485_queue_RX_char+0x5c>
		RSu.rx_buf_head = 1;
    69a8:	81 e0       	ldi	r24, 0x01	; 1
    69aa:	80 93 2f 23 	sts	0x232F, r24
    69ae:	08 95       	ret

000069b0 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    69b0:	1f 93       	push	r17
    69b2:	cf 93       	push	r28
    69b4:	df 93       	push	r29
    69b6:	ec 01       	movw	r28, r24
    69b8:	10 e0       	ldi	r17, 0x00	; 0
    69ba:	02 c0       	rjmp	.+4      	; 0x69c0 <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    69bc:	0e 94 a9 34 	call	0x6952	; 0x6952 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    69c0:	fe 01       	movw	r30, r28
    69c2:	e1 0f       	add	r30, r17
    69c4:	f1 1d       	adc	r31, r1
    69c6:	80 81       	ld	r24, Z
    69c8:	1f 5f       	subi	r17, 0xFF	; 255
    69ca:	88 23       	and	r24, r24
    69cc:	b9 f7       	brne	.-18     	; 0x69bc <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    69ce:	df 91       	pop	r29
    69d0:	cf 91       	pop	r28
    69d2:	1f 91       	pop	r17
    69d4:	08 95       	ret

000069d6 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    69d6:	1f 92       	push	r1
    69d8:	0f 92       	push	r0
    69da:	0f b6       	in	r0, 0x3f	; 63
    69dc:	0f 92       	push	r0
    69de:	0b b6       	in	r0, 0x3b	; 59
    69e0:	0f 92       	push	r0
    69e2:	11 24       	eor	r1, r1
    69e4:	2f 93       	push	r18
    69e6:	3f 93       	push	r19
    69e8:	4f 93       	push	r20
    69ea:	5f 93       	push	r21
    69ec:	6f 93       	push	r22
    69ee:	7f 93       	push	r23
    69f0:	8f 93       	push	r24
    69f2:	9f 93       	push	r25
    69f4:	af 93       	push	r26
    69f6:	bf 93       	push	r27
    69f8:	ef 93       	push	r30
    69fa:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    69fc:	e0 91 33 23 	lds	r30, 0x2333
    6a00:	f0 91 34 23 	lds	r31, 0x2334
    6a04:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6a06:	23 30       	cpi	r18, 0x03	; 3
    6a08:	31 f4       	brne	.+12     	; 0x6a16 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6a0a:	84 e0       	ldi	r24, 0x04	; 4
    6a0c:	80 93 ce 23 	sts	0x23CE, r24
		signal_etx();							// call app-specific signal handler
    6a10:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <signal_etx>
    6a14:	25 c0       	rjmp	.+74     	; 0x6a60 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6a16:	80 91 2f 23 	lds	r24, 0x232F
    6a1a:	81 50       	subi	r24, 0x01	; 1
    6a1c:	80 93 2f 23 	sts	0x232F, r24
    6a20:	80 91 2f 23 	lds	r24, 0x232F
    6a24:	88 23       	and	r24, r24
    6a26:	19 f4       	brne	.+6      	; 0x6a2e <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6a28:	81 e1       	ldi	r24, 0x11	; 17
    6a2a:	80 93 2f 23 	sts	0x232F, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6a2e:	90 91 2f 23 	lds	r25, 0x232F
    6a32:	80 91 2e 23 	lds	r24, 0x232E
    6a36:	98 17       	cp	r25, r24
    6a38:	39 f0       	breq	.+14     	; 0x6a48 <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    6a3a:	e0 91 2f 23 	lds	r30, 0x232F
    6a3e:	f0 e0       	ldi	r31, 0x00	; 0
    6a40:	e4 5d       	subi	r30, 0xD4	; 212
    6a42:	fc 4d       	sbci	r31, 0xDC	; 220
    6a44:	23 87       	std	Z+11, r18	; 0x0b
    6a46:	0c c0       	rjmp	.+24     	; 0x6a60 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6a48:	80 91 2f 23 	lds	r24, 0x232F
    6a4c:	8f 5f       	subi	r24, 0xFF	; 255
    6a4e:	80 93 2f 23 	sts	0x232F, r24
    6a52:	80 91 2f 23 	lds	r24, 0x232F
    6a56:	82 31       	cpi	r24, 0x12	; 18
    6a58:	18 f0       	brcs	.+6      	; 0x6a60 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    6a5a:	81 e0       	ldi	r24, 0x01	; 1
    6a5c:	80 93 2f 23 	sts	0x232F, r24
	}
	// activate flow control here or before it gets to this level
}
    6a60:	ff 91       	pop	r31
    6a62:	ef 91       	pop	r30
    6a64:	bf 91       	pop	r27
    6a66:	af 91       	pop	r26
    6a68:	9f 91       	pop	r25
    6a6a:	8f 91       	pop	r24
    6a6c:	7f 91       	pop	r23
    6a6e:	6f 91       	pop	r22
    6a70:	5f 91       	pop	r21
    6a72:	4f 91       	pop	r20
    6a74:	3f 91       	pop	r19
    6a76:	2f 91       	pop	r18
    6a78:	0f 90       	pop	r0
    6a7a:	0b be       	out	0x3b, r0	; 59
    6a7c:	0f 90       	pop	r0
    6a7e:	0f be       	out	0x3f, r0	; 63
    6a80:	0f 90       	pop	r0
    6a82:	1f 90       	pop	r1
    6a84:	18 95       	reti

00006a86 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    6a86:	20 91 10 24 	lds	r18, 0x2410
    6a8a:	30 91 11 24 	lds	r19, 0x2411
    6a8e:	3f 70       	andi	r19, 0x0F	; 15
    6a90:	20 93 10 24 	sts	0x2410, r18
    6a94:	30 93 11 24 	sts	0x2411, r19
	PGM.sig = 0;							// reset signal
    6a98:	10 92 13 24 	sts	0x2413, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6a9c:	80 93 bd 23 	sts	0x23BD, r24
    6aa0:	90 93 be 23 	sts	0x23BE, r25
	PGMf.len = 0;							// initialize buffer pointer
    6aa4:	10 92 bb 23 	sts	0x23BB, r1
    6aa8:	10 92 bc 23 	sts	0x23BC, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6aac:	80 91 23 24 	lds	r24, 0x2423
    6ab0:	90 91 24 24 	lds	r25, 0x2424
    6ab4:	08 95       	ret

00006ab6 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6ab6:	8f ef       	ldi	r24, 0xFF	; 255
    6ab8:	9f ef       	ldi	r25, 0xFF	; 255
    6aba:	08 95       	ret

00006abc <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6abc:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6abe:	80 91 bd 23 	lds	r24, 0x23BD
    6ac2:	90 91 be 23 	lds	r25, 0x23BE
    6ac6:	89 2b       	or	r24, r25
    6ac8:	19 f4       	brne	.+6      	; 0x6ad0 <xio_readln_pgm+0x14>
    6aca:	26 e0       	ldi	r18, 0x06	; 6
    6acc:	30 e0       	ldi	r19, 0x00	; 0
    6ace:	1b c0       	rjmp	.+54     	; 0x6b06 <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6ad0:	10 92 13 24 	sts	0x2413, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6ad4:	40 91 23 24 	lds	r20, 0x2423
    6ad8:	50 91 24 24 	lds	r21, 0x2424
    6adc:	c9 01       	movw	r24, r18
    6ade:	70 e0       	ldi	r23, 0x00	; 0
    6ae0:	0e 94 62 47 	call	0x8ec4	; 0x8ec4 <fgets>
    6ae4:	89 2b       	or	r24, r25
    6ae6:	19 f0       	breq	.+6      	; 0x6aee <xio_readln_pgm+0x32>
    6ae8:	20 e0       	ldi	r18, 0x00	; 0
    6aea:	30 e0       	ldi	r19, 0x00	; 0
    6aec:	0c c0       	rjmp	.+24     	; 0x6b06 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6aee:	10 92 bd 23 	sts	0x23BD, r1
    6af2:	10 92 be 23 	sts	0x23BE, r1
		clearerr(PGM.fdev);
    6af6:	80 91 23 24 	lds	r24, 0x2423
    6afa:	90 91 24 24 	lds	r25, 0x2424
    6afe:	0e 94 5d 47 	call	0x8eba	; 0x8eba <clearerr>
    6b02:	25 e0       	ldi	r18, 0x05	; 5
    6b04:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6b06:	c9 01       	movw	r24, r18
    6b08:	08 95       	ret

00006b0a <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6b0a:	20 91 10 24 	lds	r18, 0x2410
    6b0e:	30 91 11 24 	lds	r19, 0x2411
    6b12:	35 ff       	sbrs	r19, 5
    6b14:	06 c0       	rjmp	.+12     	; 0x6b22 <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6b16:	83 e0       	ldi	r24, 0x03	; 3
    6b18:	80 93 13 24 	sts	0x2413, r24
    6b1c:	2e ef       	ldi	r18, 0xFE	; 254
    6b1e:	3f ef       	ldi	r19, 0xFF	; 255
    6b20:	3e c0       	rjmp	.+124    	; 0x6b9e <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6b22:	80 91 bb 23 	lds	r24, 0x23BB
    6b26:	90 91 bc 23 	lds	r25, 0x23BC
    6b2a:	e0 91 bd 23 	lds	r30, 0x23BD
    6b2e:	f0 91 be 23 	lds	r31, 0x23BE
    6b32:	e8 0f       	add	r30, r24
    6b34:	f9 1f       	adc	r31, r25
    6b36:	e4 91       	lpm	r30, Z+
    6b38:	e0 93 14 24 	sts	0x2414, r30
    6b3c:	ee 23       	and	r30, r30
    6b3e:	29 f4       	brne	.+10     	; 0x6b4a <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6b40:	30 62       	ori	r19, 0x20	; 32
    6b42:	20 93 10 24 	sts	0x2410, r18
    6b46:	30 93 11 24 	sts	0x2411, r19
	}
	++PGMf.len;
    6b4a:	01 96       	adiw	r24, 0x01	; 1
    6b4c:	80 93 bb 23 	sts	0x23BB, r24
    6b50:	90 93 bc 23 	sts	0x23BC, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6b54:	90 91 10 24 	lds	r25, 0x2410
    6b58:	96 fd       	sbrc	r25, 6
    6b5a:	03 c0       	rjmp	.+6      	; 0x6b62 <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6b5c:	94 ff       	sbrs	r25, 4
    6b5e:	1b c0       	rjmp	.+54     	; 0x6b96 <xio_getc_pgm+0x8c>
    6b60:	11 c0       	rjmp	.+34     	; 0x6b84 <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6b62:	80 91 14 24 	lds	r24, 0x2414
    6b66:	88 23       	and	r24, r24
    6b68:	31 f0       	breq	.+12     	; 0x6b76 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6b6a:	8d 30       	cpi	r24, 0x0D	; 13
    6b6c:	21 f0       	breq	.+8      	; 0x6b76 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6b6e:	97 ff       	sbrs	r25, 7
    6b70:	05 c0       	rjmp	.+10     	; 0x6b7c <xio_getc_pgm+0x72>
    6b72:	8b 33       	cpi	r24, 0x3B	; 59
    6b74:	19 f4       	brne	.+6      	; 0x6b7c <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6b76:	8a e0       	ldi	r24, 0x0A	; 10
    6b78:	80 93 14 24 	sts	0x2414, r24
	}
	if (ECHO(PGM.flags)) {
    6b7c:	80 91 10 24 	lds	r24, 0x2410
    6b80:	84 ff       	sbrs	r24, 4
    6b82:	09 c0       	rjmp	.+18     	; 0x6b96 <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6b84:	60 91 0c 25 	lds	r22, 0x250C
    6b88:	70 91 0d 25 	lds	r23, 0x250D
    6b8c:	80 91 14 24 	lds	r24, 0x2414
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
	}
	return (PGM.c);
    6b96:	80 91 14 24 	lds	r24, 0x2414
    6b9a:	28 2f       	mov	r18, r24
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
}
    6b9e:	c9 01       	movw	r24, r18
    6ba0:	08 95       	ret

00006ba2 <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6ba2:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6ba4:	83 e0       	ldi	r24, 0x03	; 3
    6ba6:	0e 94 20 28 	call	0x5040	; 0x5040 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6baa:	80 e0       	ldi	r24, 0x00	; 0
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	08 95       	ret

00006bb0 <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	27 e1       	ldi	r18, 0x17	; 23
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	82 9f       	mul	r24, r18
    6bb8:	f0 01       	movw	r30, r0
    6bba:	83 9f       	mul	r24, r19
    6bbc:	f0 0d       	add	r31, r0
    6bbe:	92 9f       	mul	r25, r18
    6bc0:	f0 0d       	add	r31, r0
    6bc2:	11 24       	eor	r1, r1
    6bc4:	e5 53       	subi	r30, 0x35	; 53
    6bc6:	fc 4d       	sbci	r31, 0xDC	; 220
    6bc8:	86 e0       	ldi	r24, 0x06	; 6
    6bca:	68 9f       	mul	r22, r24
    6bcc:	b0 01       	movw	r22, r0
    6bce:	11 24       	eor	r1, r1
    6bd0:	67 54       	subi	r22, 0x47	; 71
    6bd2:	7c 4d       	sbci	r23, 0xDC	; 220
    6bd4:	61 8b       	std	Z+17, r22	; 0x11
    6bd6:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6bd8:	83 e0       	ldi	r24, 0x03	; 3
    6bda:	ba 01       	movw	r22, r20
    6bdc:	0e 94 20 28 	call	0x5040	; 0x5040 <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6be0:	08 95       	ret

00006be2 <__udivdi3>:
    6be2:	ae e5       	ldi	r26, 0x5E	; 94
    6be4:	b0 e0       	ldi	r27, 0x00	; 0
    6be6:	e7 ef       	ldi	r30, 0xF7	; 247
    6be8:	f5 e3       	ldi	r31, 0x35	; 53
    6bea:	0c 94 84 44 	jmp	0x8908	; 0x8908 <__prologue_saves__>
    6bee:	a8 e0       	ldi	r26, 0x08	; 8
    6bf0:	4e 01       	movw	r8, r28
    6bf2:	08 94       	sec
    6bf4:	81 1c       	adc	r8, r1
    6bf6:	91 1c       	adc	r9, r1
    6bf8:	f4 01       	movw	r30, r8
    6bfa:	6a 2e       	mov	r6, r26
    6bfc:	11 92       	st	Z+, r1
    6bfe:	6a 94       	dec	r6
    6c00:	e9 f7       	brne	.-6      	; 0x6bfc <__udivdi3+0x1a>
    6c02:	29 83       	std	Y+1, r18	; 0x01
    6c04:	3a 83       	std	Y+2, r19	; 0x02
    6c06:	4b 83       	std	Y+3, r20	; 0x03
    6c08:	5c 83       	std	Y+4, r21	; 0x04
    6c0a:	6d 83       	std	Y+5, r22	; 0x05
    6c0c:	7e 83       	std	Y+6, r23	; 0x06
    6c0e:	8f 83       	std	Y+7, r24	; 0x07
    6c10:	98 87       	std	Y+8, r25	; 0x08
    6c12:	ce 01       	movw	r24, r28
    6c14:	09 96       	adiw	r24, 0x09	; 9
    6c16:	fc 01       	movw	r30, r24
    6c18:	11 92       	st	Z+, r1
    6c1a:	aa 95       	dec	r26
    6c1c:	e9 f7       	brne	.-6      	; 0x6c18 <__udivdi3+0x36>
    6c1e:	a9 86       	std	Y+9, r10	; 0x09
    6c20:	ba 86       	std	Y+10, r11	; 0x0a
    6c22:	cb 86       	std	Y+11, r12	; 0x0b
    6c24:	dc 86       	std	Y+12, r13	; 0x0c
    6c26:	ed 86       	std	Y+13, r14	; 0x0d
    6c28:	fe 86       	std	Y+14, r15	; 0x0e
    6c2a:	0f 87       	std	Y+15, r16	; 0x0f
    6c2c:	18 8b       	std	Y+16, r17	; 0x10
    6c2e:	29 84       	ldd	r2, Y+9	; 0x09
    6c30:	3a 84       	ldd	r3, Y+10	; 0x0a
    6c32:	4b 84       	ldd	r4, Y+11	; 0x0b
    6c34:	5c 84       	ldd	r5, Y+12	; 0x0c
    6c36:	ed 84       	ldd	r14, Y+13	; 0x0d
    6c38:	fe 84       	ldd	r15, Y+14	; 0x0e
    6c3a:	0f 85       	ldd	r16, Y+15	; 0x0f
    6c3c:	18 89       	ldd	r17, Y+16	; 0x10
    6c3e:	69 80       	ldd	r6, Y+1	; 0x01
    6c40:	7a 80       	ldd	r7, Y+2	; 0x02
    6c42:	8b 80       	ldd	r8, Y+3	; 0x03
    6c44:	9c 80       	ldd	r9, Y+4	; 0x04
    6c46:	6d a6       	std	Y+45, r6	; 0x2d
    6c48:	7e a6       	std	Y+46, r7	; 0x2e
    6c4a:	8f a6       	std	Y+47, r8	; 0x2f
    6c4c:	98 aa       	std	Y+48, r9	; 0x30
    6c4e:	6d 80       	ldd	r6, Y+5	; 0x05
    6c50:	7e 80       	ldd	r7, Y+6	; 0x06
    6c52:	8f 80       	ldd	r8, Y+7	; 0x07
    6c54:	98 84       	ldd	r9, Y+8	; 0x08
    6c56:	e1 14       	cp	r14, r1
    6c58:	f1 04       	cpc	r15, r1
    6c5a:	01 05       	cpc	r16, r1
    6c5c:	11 05       	cpc	r17, r1
    6c5e:	09 f0       	breq	.+2      	; 0x6c62 <__udivdi3+0x80>
    6c60:	b3 c3       	rjmp	.+1894   	; 0x73c8 <__udivdi3+0x7e6>
    6c62:	62 14       	cp	r6, r2
    6c64:	73 04       	cpc	r7, r3
    6c66:	84 04       	cpc	r8, r4
    6c68:	95 04       	cpc	r9, r5
    6c6a:	08 f0       	brcs	.+2      	; 0x6c6e <__udivdi3+0x8c>
    6c6c:	3d c1       	rjmp	.+634    	; 0x6ee8 <__udivdi3+0x306>
    6c6e:	00 e0       	ldi	r16, 0x00	; 0
    6c70:	20 16       	cp	r2, r16
    6c72:	00 e0       	ldi	r16, 0x00	; 0
    6c74:	30 06       	cpc	r3, r16
    6c76:	01 e0       	ldi	r16, 0x01	; 1
    6c78:	40 06       	cpc	r4, r16
    6c7a:	00 e0       	ldi	r16, 0x00	; 0
    6c7c:	50 06       	cpc	r5, r16
    6c7e:	88 f4       	brcc	.+34     	; 0x6ca2 <__udivdi3+0xc0>
    6c80:	1f ef       	ldi	r17, 0xFF	; 255
    6c82:	21 16       	cp	r2, r17
    6c84:	31 04       	cpc	r3, r1
    6c86:	41 04       	cpc	r4, r1
    6c88:	51 04       	cpc	r5, r1
    6c8a:	39 f0       	breq	.+14     	; 0x6c9a <__udivdi3+0xb8>
    6c8c:	30 f0       	brcs	.+12     	; 0x6c9a <__udivdi3+0xb8>
    6c8e:	48 e0       	ldi	r20, 0x08	; 8
    6c90:	e4 2e       	mov	r14, r20
    6c92:	f1 2c       	mov	r15, r1
    6c94:	01 2d       	mov	r16, r1
    6c96:	11 2d       	mov	r17, r1
    6c98:	18 c0       	rjmp	.+48     	; 0x6cca <__udivdi3+0xe8>
    6c9a:	ee 24       	eor	r14, r14
    6c9c:	ff 24       	eor	r15, r15
    6c9e:	87 01       	movw	r16, r14
    6ca0:	14 c0       	rjmp	.+40     	; 0x6cca <__udivdi3+0xe8>
    6ca2:	20 e0       	ldi	r18, 0x00	; 0
    6ca4:	22 16       	cp	r2, r18
    6ca6:	20 e0       	ldi	r18, 0x00	; 0
    6ca8:	32 06       	cpc	r3, r18
    6caa:	20 e0       	ldi	r18, 0x00	; 0
    6cac:	42 06       	cpc	r4, r18
    6cae:	21 e0       	ldi	r18, 0x01	; 1
    6cb0:	52 06       	cpc	r5, r18
    6cb2:	30 f0       	brcs	.+12     	; 0x6cc0 <__udivdi3+0xde>
    6cb4:	38 e1       	ldi	r19, 0x18	; 24
    6cb6:	e3 2e       	mov	r14, r19
    6cb8:	f1 2c       	mov	r15, r1
    6cba:	01 2d       	mov	r16, r1
    6cbc:	11 2d       	mov	r17, r1
    6cbe:	05 c0       	rjmp	.+10     	; 0x6cca <__udivdi3+0xe8>
    6cc0:	20 e1       	ldi	r18, 0x10	; 16
    6cc2:	e2 2e       	mov	r14, r18
    6cc4:	f1 2c       	mov	r15, r1
    6cc6:	01 2d       	mov	r16, r1
    6cc8:	11 2d       	mov	r17, r1
    6cca:	d2 01       	movw	r26, r4
    6ccc:	c1 01       	movw	r24, r2
    6cce:	0e 2c       	mov	r0, r14
    6cd0:	04 c0       	rjmp	.+8      	; 0x6cda <__udivdi3+0xf8>
    6cd2:	b6 95       	lsr	r27
    6cd4:	a7 95       	ror	r26
    6cd6:	97 95       	ror	r25
    6cd8:	87 95       	ror	r24
    6cda:	0a 94       	dec	r0
    6cdc:	d2 f7       	brpl	.-12     	; 0x6cd2 <__udivdi3+0xf0>
    6cde:	80 50       	subi	r24, 0x00	; 0
    6ce0:	90 4e       	sbci	r25, 0xE0	; 224
    6ce2:	dc 01       	movw	r26, r24
    6ce4:	2c 91       	ld	r18, X
    6ce6:	80 e2       	ldi	r24, 0x20	; 32
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	a0 e0       	ldi	r26, 0x00	; 0
    6cec:	b0 e0       	ldi	r27, 0x00	; 0
    6cee:	8e 19       	sub	r24, r14
    6cf0:	9f 09       	sbc	r25, r15
    6cf2:	a0 0b       	sbc	r26, r16
    6cf4:	b1 0b       	sbc	r27, r17
    6cf6:	7c 01       	movw	r14, r24
    6cf8:	8d 01       	movw	r16, r26
    6cfa:	e2 1a       	sub	r14, r18
    6cfc:	f1 08       	sbc	r15, r1
    6cfe:	01 09       	sbc	r16, r1
    6d00:	11 09       	sbc	r17, r1
    6d02:	e1 14       	cp	r14, r1
    6d04:	f1 04       	cpc	r15, r1
    6d06:	01 05       	cpc	r16, r1
    6d08:	11 05       	cpc	r17, r1
    6d0a:	a1 f1       	breq	.+104    	; 0x6d74 <__udivdi3+0x192>
    6d0c:	0e 2c       	mov	r0, r14
    6d0e:	04 c0       	rjmp	.+8      	; 0x6d18 <__udivdi3+0x136>
    6d10:	22 0c       	add	r2, r2
    6d12:	33 1c       	adc	r3, r3
    6d14:	44 1c       	adc	r4, r4
    6d16:	55 1c       	adc	r5, r5
    6d18:	0a 94       	dec	r0
    6d1a:	d2 f7       	brpl	.-12     	; 0x6d10 <__udivdi3+0x12e>
    6d1c:	a4 01       	movw	r20, r8
    6d1e:	93 01       	movw	r18, r6
    6d20:	0e 2c       	mov	r0, r14
    6d22:	04 c0       	rjmp	.+8      	; 0x6d2c <__udivdi3+0x14a>
    6d24:	22 0f       	add	r18, r18
    6d26:	33 1f       	adc	r19, r19
    6d28:	44 1f       	adc	r20, r20
    6d2a:	55 1f       	adc	r21, r21
    6d2c:	0a 94       	dec	r0
    6d2e:	d2 f7       	brpl	.-12     	; 0x6d24 <__udivdi3+0x142>
    6d30:	80 e2       	ldi	r24, 0x20	; 32
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	8e 19       	sub	r24, r14
    6d36:	9f 09       	sbc	r25, r15
    6d38:	6d a4       	ldd	r6, Y+45	; 0x2d
    6d3a:	7e a4       	ldd	r7, Y+46	; 0x2e
    6d3c:	8f a4       	ldd	r8, Y+47	; 0x2f
    6d3e:	98 a8       	ldd	r9, Y+48	; 0x30
    6d40:	04 c0       	rjmp	.+8      	; 0x6d4a <__udivdi3+0x168>
    6d42:	96 94       	lsr	r9
    6d44:	87 94       	ror	r8
    6d46:	77 94       	ror	r7
    6d48:	67 94       	ror	r6
    6d4a:	8a 95       	dec	r24
    6d4c:	d2 f7       	brpl	.-12     	; 0x6d42 <__udivdi3+0x160>
    6d4e:	62 2a       	or	r6, r18
    6d50:	73 2a       	or	r7, r19
    6d52:	84 2a       	or	r8, r20
    6d54:	95 2a       	or	r9, r21
    6d56:	ad a4       	ldd	r10, Y+45	; 0x2d
    6d58:	be a4       	ldd	r11, Y+46	; 0x2e
    6d5a:	cf a4       	ldd	r12, Y+47	; 0x2f
    6d5c:	d8 a8       	ldd	r13, Y+48	; 0x30
    6d5e:	04 c0       	rjmp	.+8      	; 0x6d68 <__udivdi3+0x186>
    6d60:	aa 0c       	add	r10, r10
    6d62:	bb 1c       	adc	r11, r11
    6d64:	cc 1c       	adc	r12, r12
    6d66:	dd 1c       	adc	r13, r13
    6d68:	ea 94       	dec	r14
    6d6a:	d2 f7       	brpl	.-12     	; 0x6d60 <__udivdi3+0x17e>
    6d6c:	ad a6       	std	Y+45, r10	; 0x2d
    6d6e:	be a6       	std	Y+46, r11	; 0x2e
    6d70:	cf a6       	std	Y+47, r12	; 0x2f
    6d72:	d8 aa       	std	Y+48, r13	; 0x30
    6d74:	62 01       	movw	r12, r4
    6d76:	ee 24       	eor	r14, r14
    6d78:	ff 24       	eor	r15, r15
    6d7a:	cd aa       	std	Y+53, r12	; 0x35
    6d7c:	de aa       	std	Y+54, r13	; 0x36
    6d7e:	ef aa       	std	Y+55, r14	; 0x37
    6d80:	f8 ae       	std	Y+56, r15	; 0x38
    6d82:	92 01       	movw	r18, r4
    6d84:	81 01       	movw	r16, r2
    6d86:	20 70       	andi	r18, 0x00	; 0
    6d88:	30 70       	andi	r19, 0x00	; 0
    6d8a:	09 af       	std	Y+57, r16	; 0x39
    6d8c:	1a af       	std	Y+58, r17	; 0x3a
    6d8e:	2b af       	std	Y+59, r18	; 0x3b
    6d90:	3c af       	std	Y+60, r19	; 0x3c
    6d92:	c4 01       	movw	r24, r8
    6d94:	b3 01       	movw	r22, r6
    6d96:	a7 01       	movw	r20, r14
    6d98:	96 01       	movw	r18, r12
    6d9a:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    6d9e:	7b 01       	movw	r14, r22
    6da0:	8c 01       	movw	r16, r24
    6da2:	c4 01       	movw	r24, r8
    6da4:	b3 01       	movw	r22, r6
    6da6:	2d a9       	ldd	r18, Y+53	; 0x35
    6da8:	3e a9       	ldd	r19, Y+54	; 0x36
    6daa:	4f a9       	ldd	r20, Y+55	; 0x37
    6dac:	58 ad       	ldd	r21, Y+56	; 0x38
    6dae:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    6db2:	c9 01       	movw	r24, r18
    6db4:	da 01       	movw	r26, r20
    6db6:	3c 01       	movw	r6, r24
    6db8:	4d 01       	movw	r8, r26
    6dba:	c4 01       	movw	r24, r8
    6dbc:	b3 01       	movw	r22, r6
    6dbe:	29 ad       	ldd	r18, Y+57	; 0x39
    6dc0:	3a ad       	ldd	r19, Y+58	; 0x3a
    6dc2:	4b ad       	ldd	r20, Y+59	; 0x3b
    6dc4:	5c ad       	ldd	r21, Y+60	; 0x3c
    6dc6:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    6dca:	9b 01       	movw	r18, r22
    6dcc:	ac 01       	movw	r20, r24
    6dce:	87 01       	movw	r16, r14
    6dd0:	ff 24       	eor	r15, r15
    6dd2:	ee 24       	eor	r14, r14
    6dd4:	ad a4       	ldd	r10, Y+45	; 0x2d
    6dd6:	be a4       	ldd	r11, Y+46	; 0x2e
    6dd8:	cf a4       	ldd	r12, Y+47	; 0x2f
    6dda:	d8 a8       	ldd	r13, Y+48	; 0x30
    6ddc:	c6 01       	movw	r24, r12
    6dde:	aa 27       	eor	r26, r26
    6de0:	bb 27       	eor	r27, r27
    6de2:	57 01       	movw	r10, r14
    6de4:	68 01       	movw	r12, r16
    6de6:	a8 2a       	or	r10, r24
    6de8:	b9 2a       	or	r11, r25
    6dea:	ca 2a       	or	r12, r26
    6dec:	db 2a       	or	r13, r27
    6dee:	a2 16       	cp	r10, r18
    6df0:	b3 06       	cpc	r11, r19
    6df2:	c4 06       	cpc	r12, r20
    6df4:	d5 06       	cpc	r13, r21
    6df6:	e0 f4       	brcc	.+56     	; 0x6e30 <__udivdi3+0x24e>
    6df8:	08 94       	sec
    6dfa:	61 08       	sbc	r6, r1
    6dfc:	71 08       	sbc	r7, r1
    6dfe:	81 08       	sbc	r8, r1
    6e00:	91 08       	sbc	r9, r1
    6e02:	a2 0c       	add	r10, r2
    6e04:	b3 1c       	adc	r11, r3
    6e06:	c4 1c       	adc	r12, r4
    6e08:	d5 1c       	adc	r13, r5
    6e0a:	a2 14       	cp	r10, r2
    6e0c:	b3 04       	cpc	r11, r3
    6e0e:	c4 04       	cpc	r12, r4
    6e10:	d5 04       	cpc	r13, r5
    6e12:	70 f0       	brcs	.+28     	; 0x6e30 <__udivdi3+0x24e>
    6e14:	a2 16       	cp	r10, r18
    6e16:	b3 06       	cpc	r11, r19
    6e18:	c4 06       	cpc	r12, r20
    6e1a:	d5 06       	cpc	r13, r21
    6e1c:	48 f4       	brcc	.+18     	; 0x6e30 <__udivdi3+0x24e>
    6e1e:	08 94       	sec
    6e20:	61 08       	sbc	r6, r1
    6e22:	71 08       	sbc	r7, r1
    6e24:	81 08       	sbc	r8, r1
    6e26:	91 08       	sbc	r9, r1
    6e28:	a2 0c       	add	r10, r2
    6e2a:	b3 1c       	adc	r11, r3
    6e2c:	c4 1c       	adc	r12, r4
    6e2e:	d5 1c       	adc	r13, r5
    6e30:	a2 1a       	sub	r10, r18
    6e32:	b3 0a       	sbc	r11, r19
    6e34:	c4 0a       	sbc	r12, r20
    6e36:	d5 0a       	sbc	r13, r21
    6e38:	c6 01       	movw	r24, r12
    6e3a:	b5 01       	movw	r22, r10
    6e3c:	2d a9       	ldd	r18, Y+53	; 0x35
    6e3e:	3e a9       	ldd	r19, Y+54	; 0x36
    6e40:	4f a9       	ldd	r20, Y+55	; 0x37
    6e42:	58 ad       	ldd	r21, Y+56	; 0x38
    6e44:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    6e48:	7b 01       	movw	r14, r22
    6e4a:	8c 01       	movw	r16, r24
    6e4c:	c6 01       	movw	r24, r12
    6e4e:	b5 01       	movw	r22, r10
    6e50:	2d a9       	ldd	r18, Y+53	; 0x35
    6e52:	3e a9       	ldd	r19, Y+54	; 0x36
    6e54:	4f a9       	ldd	r20, Y+55	; 0x37
    6e56:	58 ad       	ldd	r21, Y+56	; 0x38
    6e58:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    6e5c:	c9 01       	movw	r24, r18
    6e5e:	da 01       	movw	r26, r20
    6e60:	5c 01       	movw	r10, r24
    6e62:	6d 01       	movw	r12, r26
    6e64:	c6 01       	movw	r24, r12
    6e66:	b5 01       	movw	r22, r10
    6e68:	29 ad       	ldd	r18, Y+57	; 0x39
    6e6a:	3a ad       	ldd	r19, Y+58	; 0x3a
    6e6c:	4b ad       	ldd	r20, Y+59	; 0x3b
    6e6e:	5c ad       	ldd	r21, Y+60	; 0x3c
    6e70:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    6e74:	9b 01       	movw	r18, r22
    6e76:	ac 01       	movw	r20, r24
    6e78:	87 01       	movw	r16, r14
    6e7a:	ff 24       	eor	r15, r15
    6e7c:	ee 24       	eor	r14, r14
    6e7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    6e80:	9e a5       	ldd	r25, Y+46	; 0x2e
    6e82:	af a5       	ldd	r26, Y+47	; 0x2f
    6e84:	b8 a9       	ldd	r27, Y+48	; 0x30
    6e86:	a0 70       	andi	r26, 0x00	; 0
    6e88:	b0 70       	andi	r27, 0x00	; 0
    6e8a:	e8 2a       	or	r14, r24
    6e8c:	f9 2a       	or	r15, r25
    6e8e:	0a 2b       	or	r16, r26
    6e90:	1b 2b       	or	r17, r27
    6e92:	e2 16       	cp	r14, r18
    6e94:	f3 06       	cpc	r15, r19
    6e96:	04 07       	cpc	r16, r20
    6e98:	15 07       	cpc	r17, r21
    6e9a:	c0 f4       	brcc	.+48     	; 0x6ecc <__udivdi3+0x2ea>
    6e9c:	08 94       	sec
    6e9e:	a1 08       	sbc	r10, r1
    6ea0:	b1 08       	sbc	r11, r1
    6ea2:	c1 08       	sbc	r12, r1
    6ea4:	d1 08       	sbc	r13, r1
    6ea6:	e2 0c       	add	r14, r2
    6ea8:	f3 1c       	adc	r15, r3
    6eaa:	04 1d       	adc	r16, r4
    6eac:	15 1d       	adc	r17, r5
    6eae:	e2 14       	cp	r14, r2
    6eb0:	f3 04       	cpc	r15, r3
    6eb2:	04 05       	cpc	r16, r4
    6eb4:	15 05       	cpc	r17, r5
    6eb6:	50 f0       	brcs	.+20     	; 0x6ecc <__udivdi3+0x2ea>
    6eb8:	e2 16       	cp	r14, r18
    6eba:	f3 06       	cpc	r15, r19
    6ebc:	04 07       	cpc	r16, r20
    6ebe:	15 07       	cpc	r17, r21
    6ec0:	28 f4       	brcc	.+10     	; 0x6ecc <__udivdi3+0x2ea>
    6ec2:	08 94       	sec
    6ec4:	a1 08       	sbc	r10, r1
    6ec6:	b1 08       	sbc	r11, r1
    6ec8:	c1 08       	sbc	r12, r1
    6eca:	d1 08       	sbc	r13, r1
    6ecc:	d3 01       	movw	r26, r6
    6ece:	99 27       	eor	r25, r25
    6ed0:	88 27       	eor	r24, r24
    6ed2:	86 01       	movw	r16, r12
    6ed4:	75 01       	movw	r14, r10
    6ed6:	e8 2a       	or	r14, r24
    6ed8:	f9 2a       	or	r15, r25
    6eda:	0a 2b       	or	r16, r26
    6edc:	1b 2b       	or	r17, r27
    6ede:	e9 aa       	std	Y+49, r14	; 0x31
    6ee0:	fa aa       	std	Y+50, r15	; 0x32
    6ee2:	0b ab       	std	Y+51, r16	; 0x33
    6ee4:	1c ab       	std	Y+52, r17	; 0x34
    6ee6:	cf c4       	rjmp	.+2462   	; 0x7886 <__udivdi3+0xca4>
    6ee8:	21 14       	cp	r2, r1
    6eea:	31 04       	cpc	r3, r1
    6eec:	41 04       	cpc	r4, r1
    6eee:	51 04       	cpc	r5, r1
    6ef0:	71 f4       	brne	.+28     	; 0x6f0e <__udivdi3+0x32c>
    6ef2:	61 e0       	ldi	r22, 0x01	; 1
    6ef4:	70 e0       	ldi	r23, 0x00	; 0
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	20 e0       	ldi	r18, 0x00	; 0
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	40 e0       	ldi	r20, 0x00	; 0
    6f00:	50 e0       	ldi	r21, 0x00	; 0
    6f02:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    6f06:	c9 01       	movw	r24, r18
    6f08:	da 01       	movw	r26, r20
    6f0a:	1c 01       	movw	r2, r24
    6f0c:	2d 01       	movw	r4, r26
    6f0e:	00 e0       	ldi	r16, 0x00	; 0
    6f10:	20 16       	cp	r2, r16
    6f12:	00 e0       	ldi	r16, 0x00	; 0
    6f14:	30 06       	cpc	r3, r16
    6f16:	01 e0       	ldi	r16, 0x01	; 1
    6f18:	40 06       	cpc	r4, r16
    6f1a:	00 e0       	ldi	r16, 0x00	; 0
    6f1c:	50 06       	cpc	r5, r16
    6f1e:	88 f4       	brcc	.+34     	; 0x6f42 <__udivdi3+0x360>
    6f20:	1f ef       	ldi	r17, 0xFF	; 255
    6f22:	21 16       	cp	r2, r17
    6f24:	31 04       	cpc	r3, r1
    6f26:	41 04       	cpc	r4, r1
    6f28:	51 04       	cpc	r5, r1
    6f2a:	31 f0       	breq	.+12     	; 0x6f38 <__udivdi3+0x356>
    6f2c:	28 f0       	brcs	.+10     	; 0x6f38 <__udivdi3+0x356>
    6f2e:	48 e0       	ldi	r20, 0x08	; 8
    6f30:	50 e0       	ldi	r21, 0x00	; 0
    6f32:	60 e0       	ldi	r22, 0x00	; 0
    6f34:	70 e0       	ldi	r23, 0x00	; 0
    6f36:	17 c0       	rjmp	.+46     	; 0x6f66 <__udivdi3+0x384>
    6f38:	40 e0       	ldi	r20, 0x00	; 0
    6f3a:	50 e0       	ldi	r21, 0x00	; 0
    6f3c:	60 e0       	ldi	r22, 0x00	; 0
    6f3e:	70 e0       	ldi	r23, 0x00	; 0
    6f40:	12 c0       	rjmp	.+36     	; 0x6f66 <__udivdi3+0x384>
    6f42:	20 e0       	ldi	r18, 0x00	; 0
    6f44:	22 16       	cp	r2, r18
    6f46:	20 e0       	ldi	r18, 0x00	; 0
    6f48:	32 06       	cpc	r3, r18
    6f4a:	20 e0       	ldi	r18, 0x00	; 0
    6f4c:	42 06       	cpc	r4, r18
    6f4e:	21 e0       	ldi	r18, 0x01	; 1
    6f50:	52 06       	cpc	r5, r18
    6f52:	28 f0       	brcs	.+10     	; 0x6f5e <__udivdi3+0x37c>
    6f54:	48 e1       	ldi	r20, 0x18	; 24
    6f56:	50 e0       	ldi	r21, 0x00	; 0
    6f58:	60 e0       	ldi	r22, 0x00	; 0
    6f5a:	70 e0       	ldi	r23, 0x00	; 0
    6f5c:	04 c0       	rjmp	.+8      	; 0x6f66 <__udivdi3+0x384>
    6f5e:	40 e1       	ldi	r20, 0x10	; 16
    6f60:	50 e0       	ldi	r21, 0x00	; 0
    6f62:	60 e0       	ldi	r22, 0x00	; 0
    6f64:	70 e0       	ldi	r23, 0x00	; 0
    6f66:	d2 01       	movw	r26, r4
    6f68:	c1 01       	movw	r24, r2
    6f6a:	04 2e       	mov	r0, r20
    6f6c:	04 c0       	rjmp	.+8      	; 0x6f76 <__udivdi3+0x394>
    6f6e:	b6 95       	lsr	r27
    6f70:	a7 95       	ror	r26
    6f72:	97 95       	ror	r25
    6f74:	87 95       	ror	r24
    6f76:	0a 94       	dec	r0
    6f78:	d2 f7       	brpl	.-12     	; 0x6f6e <__udivdi3+0x38c>
    6f7a:	80 50       	subi	r24, 0x00	; 0
    6f7c:	90 4e       	sbci	r25, 0xE0	; 224
    6f7e:	dc 01       	movw	r26, r24
    6f80:	2c 91       	ld	r18, X
    6f82:	e0 e2       	ldi	r30, 0x20	; 32
    6f84:	ee 2e       	mov	r14, r30
    6f86:	f1 2c       	mov	r15, r1
    6f88:	01 2d       	mov	r16, r1
    6f8a:	11 2d       	mov	r17, r1
    6f8c:	d8 01       	movw	r26, r16
    6f8e:	c7 01       	movw	r24, r14
    6f90:	84 1b       	sub	r24, r20
    6f92:	95 0b       	sbc	r25, r21
    6f94:	a6 0b       	sbc	r26, r22
    6f96:	b7 0b       	sbc	r27, r23
    6f98:	82 1b       	sub	r24, r18
    6f9a:	91 09       	sbc	r25, r1
    6f9c:	a1 09       	sbc	r26, r1
    6f9e:	b1 09       	sbc	r27, r1
    6fa0:	00 97       	sbiw	r24, 0x00	; 0
    6fa2:	a1 05       	cpc	r26, r1
    6fa4:	b1 05       	cpc	r27, r1
    6fa6:	61 f4       	brne	.+24     	; 0x6fc0 <__udivdi3+0x3de>
    6fa8:	64 01       	movw	r12, r8
    6faa:	53 01       	movw	r10, r6
    6fac:	a2 18       	sub	r10, r2
    6fae:	b3 08       	sbc	r11, r3
    6fb0:	c4 08       	sbc	r12, r4
    6fb2:	d5 08       	sbc	r13, r5
    6fb4:	31 e0       	ldi	r19, 0x01	; 1
    6fb6:	63 2e       	mov	r6, r19
    6fb8:	71 2c       	mov	r7, r1
    6fba:	81 2c       	mov	r8, r1
    6fbc:	91 2c       	mov	r9, r1
    6fbe:	1e c1       	rjmp	.+572    	; 0x71fc <__udivdi3+0x61a>
    6fc0:	6f 96       	adiw	r28, 0x1f	; 31
    6fc2:	8f af       	std	Y+63, r24	; 0x3f
    6fc4:	6f 97       	sbiw	r28, 0x1f	; 31
    6fc6:	08 2e       	mov	r0, r24
    6fc8:	04 c0       	rjmp	.+8      	; 0x6fd2 <__udivdi3+0x3f0>
    6fca:	22 0c       	add	r2, r2
    6fcc:	33 1c       	adc	r3, r3
    6fce:	44 1c       	adc	r4, r4
    6fd0:	55 1c       	adc	r5, r5
    6fd2:	0a 94       	dec	r0
    6fd4:	d2 f7       	brpl	.-12     	; 0x6fca <__udivdi3+0x3e8>
    6fd6:	ee 2d       	mov	r30, r14
    6fd8:	e8 1b       	sub	r30, r24
    6fda:	64 01       	movw	r12, r8
    6fdc:	53 01       	movw	r10, r6
    6fde:	0e 2e       	mov	r0, r30
    6fe0:	04 c0       	rjmp	.+8      	; 0x6fea <__udivdi3+0x408>
    6fe2:	d6 94       	lsr	r13
    6fe4:	c7 94       	ror	r12
    6fe6:	b7 94       	ror	r11
    6fe8:	a7 94       	ror	r10
    6fea:	0a 94       	dec	r0
    6fec:	d2 f7       	brpl	.-12     	; 0x6fe2 <__udivdi3+0x400>
    6fee:	a4 01       	movw	r20, r8
    6ff0:	93 01       	movw	r18, r6
    6ff2:	6f 96       	adiw	r28, 0x1f	; 31
    6ff4:	0f ac       	ldd	r0, Y+63	; 0x3f
    6ff6:	6f 97       	sbiw	r28, 0x1f	; 31
    6ff8:	04 c0       	rjmp	.+8      	; 0x7002 <__udivdi3+0x420>
    6ffa:	22 0f       	add	r18, r18
    6ffc:	33 1f       	adc	r19, r19
    6ffe:	44 1f       	adc	r20, r20
    7000:	55 1f       	adc	r21, r21
    7002:	0a 94       	dec	r0
    7004:	d2 f7       	brpl	.-12     	; 0x6ffa <__udivdi3+0x418>
    7006:	6d a4       	ldd	r6, Y+45	; 0x2d
    7008:	7e a4       	ldd	r7, Y+46	; 0x2e
    700a:	8f a4       	ldd	r8, Y+47	; 0x2f
    700c:	98 a8       	ldd	r9, Y+48	; 0x30
    700e:	0e 2e       	mov	r0, r30
    7010:	04 c0       	rjmp	.+8      	; 0x701a <__udivdi3+0x438>
    7012:	96 94       	lsr	r9
    7014:	87 94       	ror	r8
    7016:	77 94       	ror	r7
    7018:	67 94       	ror	r6
    701a:	0a 94       	dec	r0
    701c:	d2 f7       	brpl	.-12     	; 0x7012 <__udivdi3+0x430>
    701e:	84 01       	movw	r16, r8
    7020:	73 01       	movw	r14, r6
    7022:	e2 2a       	or	r14, r18
    7024:	f3 2a       	or	r15, r19
    7026:	04 2b       	or	r16, r20
    7028:	15 2b       	or	r17, r21
    702a:	e9 a6       	std	Y+41, r14	; 0x29
    702c:	fa a6       	std	Y+42, r15	; 0x2a
    702e:	0b a7       	std	Y+43, r16	; 0x2b
    7030:	1c a7       	std	Y+44, r17	; 0x2c
    7032:	32 01       	movw	r6, r4
    7034:	88 24       	eor	r8, r8
    7036:	99 24       	eor	r9, r9
    7038:	92 01       	movw	r18, r4
    703a:	81 01       	movw	r16, r2
    703c:	20 70       	andi	r18, 0x00	; 0
    703e:	30 70       	andi	r19, 0x00	; 0
    7040:	21 96       	adiw	r28, 0x01	; 1
    7042:	0c af       	std	Y+60, r16	; 0x3c
    7044:	1d af       	std	Y+61, r17	; 0x3d
    7046:	2e af       	std	Y+62, r18	; 0x3e
    7048:	3f af       	std	Y+63, r19	; 0x3f
    704a:	21 97       	sbiw	r28, 0x01	; 1
    704c:	c6 01       	movw	r24, r12
    704e:	b5 01       	movw	r22, r10
    7050:	a4 01       	movw	r20, r8
    7052:	93 01       	movw	r18, r6
    7054:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7058:	7b 01       	movw	r14, r22
    705a:	8c 01       	movw	r16, r24
    705c:	c6 01       	movw	r24, r12
    705e:	b5 01       	movw	r22, r10
    7060:	a4 01       	movw	r20, r8
    7062:	93 01       	movw	r18, r6
    7064:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7068:	c9 01       	movw	r24, r18
    706a:	da 01       	movw	r26, r20
    706c:	25 96       	adiw	r28, 0x05	; 5
    706e:	8c af       	std	Y+60, r24	; 0x3c
    7070:	9d af       	std	Y+61, r25	; 0x3d
    7072:	ae af       	std	Y+62, r26	; 0x3e
    7074:	bf af       	std	Y+63, r27	; 0x3f
    7076:	25 97       	sbiw	r28, 0x05	; 5
    7078:	bc 01       	movw	r22, r24
    707a:	cd 01       	movw	r24, r26
    707c:	21 96       	adiw	r28, 0x01	; 1
    707e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7080:	3d ad       	ldd	r19, Y+61	; 0x3d
    7082:	4e ad       	ldd	r20, Y+62	; 0x3e
    7084:	5f ad       	ldd	r21, Y+63	; 0x3f
    7086:	21 97       	sbiw	r28, 0x01	; 1
    7088:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    708c:	9b 01       	movw	r18, r22
    708e:	ac 01       	movw	r20, r24
    7090:	87 01       	movw	r16, r14
    7092:	ff 24       	eor	r15, r15
    7094:	ee 24       	eor	r14, r14
    7096:	a9 a4       	ldd	r10, Y+41	; 0x29
    7098:	ba a4       	ldd	r11, Y+42	; 0x2a
    709a:	cb a4       	ldd	r12, Y+43	; 0x2b
    709c:	dc a4       	ldd	r13, Y+44	; 0x2c
    709e:	c6 01       	movw	r24, r12
    70a0:	aa 27       	eor	r26, r26
    70a2:	bb 27       	eor	r27, r27
    70a4:	5c 01       	movw	r10, r24
    70a6:	6d 01       	movw	r12, r26
    70a8:	ae 28       	or	r10, r14
    70aa:	bf 28       	or	r11, r15
    70ac:	c0 2a       	or	r12, r16
    70ae:	d1 2a       	or	r13, r17
    70b0:	a2 16       	cp	r10, r18
    70b2:	b3 06       	cpc	r11, r19
    70b4:	c4 06       	cpc	r12, r20
    70b6:	d5 06       	cpc	r13, r21
    70b8:	60 f5       	brcc	.+88     	; 0x7112 <__udivdi3+0x530>
    70ba:	25 96       	adiw	r28, 0x05	; 5
    70bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    70be:	7d ad       	ldd	r23, Y+61	; 0x3d
    70c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    70c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    70c4:	25 97       	sbiw	r28, 0x05	; 5
    70c6:	61 50       	subi	r22, 0x01	; 1
    70c8:	70 40       	sbci	r23, 0x00	; 0
    70ca:	80 40       	sbci	r24, 0x00	; 0
    70cc:	90 40       	sbci	r25, 0x00	; 0
    70ce:	25 96       	adiw	r28, 0x05	; 5
    70d0:	6c af       	std	Y+60, r22	; 0x3c
    70d2:	7d af       	std	Y+61, r23	; 0x3d
    70d4:	8e af       	std	Y+62, r24	; 0x3e
    70d6:	9f af       	std	Y+63, r25	; 0x3f
    70d8:	25 97       	sbiw	r28, 0x05	; 5
    70da:	a2 0c       	add	r10, r2
    70dc:	b3 1c       	adc	r11, r3
    70de:	c4 1c       	adc	r12, r4
    70e0:	d5 1c       	adc	r13, r5
    70e2:	a2 14       	cp	r10, r2
    70e4:	b3 04       	cpc	r11, r3
    70e6:	c4 04       	cpc	r12, r4
    70e8:	d5 04       	cpc	r13, r5
    70ea:	98 f0       	brcs	.+38     	; 0x7112 <__udivdi3+0x530>
    70ec:	a2 16       	cp	r10, r18
    70ee:	b3 06       	cpc	r11, r19
    70f0:	c4 06       	cpc	r12, r20
    70f2:	d5 06       	cpc	r13, r21
    70f4:	70 f4       	brcc	.+28     	; 0x7112 <__udivdi3+0x530>
    70f6:	61 50       	subi	r22, 0x01	; 1
    70f8:	70 40       	sbci	r23, 0x00	; 0
    70fa:	80 40       	sbci	r24, 0x00	; 0
    70fc:	90 40       	sbci	r25, 0x00	; 0
    70fe:	25 96       	adiw	r28, 0x05	; 5
    7100:	6c af       	std	Y+60, r22	; 0x3c
    7102:	7d af       	std	Y+61, r23	; 0x3d
    7104:	8e af       	std	Y+62, r24	; 0x3e
    7106:	9f af       	std	Y+63, r25	; 0x3f
    7108:	25 97       	sbiw	r28, 0x05	; 5
    710a:	a2 0c       	add	r10, r2
    710c:	b3 1c       	adc	r11, r3
    710e:	c4 1c       	adc	r12, r4
    7110:	d5 1c       	adc	r13, r5
    7112:	a2 1a       	sub	r10, r18
    7114:	b3 0a       	sbc	r11, r19
    7116:	c4 0a       	sbc	r12, r20
    7118:	d5 0a       	sbc	r13, r21
    711a:	c6 01       	movw	r24, r12
    711c:	b5 01       	movw	r22, r10
    711e:	a4 01       	movw	r20, r8
    7120:	93 01       	movw	r18, r6
    7122:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7126:	7b 01       	movw	r14, r22
    7128:	8c 01       	movw	r16, r24
    712a:	c6 01       	movw	r24, r12
    712c:	b5 01       	movw	r22, r10
    712e:	a4 01       	movw	r20, r8
    7130:	93 01       	movw	r18, r6
    7132:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7136:	c9 01       	movw	r24, r18
    7138:	da 01       	movw	r26, r20
    713a:	3c 01       	movw	r6, r24
    713c:	4d 01       	movw	r8, r26
    713e:	c4 01       	movw	r24, r8
    7140:	b3 01       	movw	r22, r6
    7142:	21 96       	adiw	r28, 0x01	; 1
    7144:	2c ad       	ldd	r18, Y+60	; 0x3c
    7146:	3d ad       	ldd	r19, Y+61	; 0x3d
    7148:	4e ad       	ldd	r20, Y+62	; 0x3e
    714a:	5f ad       	ldd	r21, Y+63	; 0x3f
    714c:	21 97       	sbiw	r28, 0x01	; 1
    714e:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    7152:	9b 01       	movw	r18, r22
    7154:	ac 01       	movw	r20, r24
    7156:	87 01       	movw	r16, r14
    7158:	ff 24       	eor	r15, r15
    715a:	ee 24       	eor	r14, r14
    715c:	89 a5       	ldd	r24, Y+41	; 0x29
    715e:	9a a5       	ldd	r25, Y+42	; 0x2a
    7160:	ab a5       	ldd	r26, Y+43	; 0x2b
    7162:	bc a5       	ldd	r27, Y+44	; 0x2c
    7164:	a0 70       	andi	r26, 0x00	; 0
    7166:	b0 70       	andi	r27, 0x00	; 0
    7168:	57 01       	movw	r10, r14
    716a:	68 01       	movw	r12, r16
    716c:	a8 2a       	or	r10, r24
    716e:	b9 2a       	or	r11, r25
    7170:	ca 2a       	or	r12, r26
    7172:	db 2a       	or	r13, r27
    7174:	a2 16       	cp	r10, r18
    7176:	b3 06       	cpc	r11, r19
    7178:	c4 06       	cpc	r12, r20
    717a:	d5 06       	cpc	r13, r21
    717c:	e0 f4       	brcc	.+56     	; 0x71b6 <__udivdi3+0x5d4>
    717e:	08 94       	sec
    7180:	61 08       	sbc	r6, r1
    7182:	71 08       	sbc	r7, r1
    7184:	81 08       	sbc	r8, r1
    7186:	91 08       	sbc	r9, r1
    7188:	a2 0c       	add	r10, r2
    718a:	b3 1c       	adc	r11, r3
    718c:	c4 1c       	adc	r12, r4
    718e:	d5 1c       	adc	r13, r5
    7190:	a2 14       	cp	r10, r2
    7192:	b3 04       	cpc	r11, r3
    7194:	c4 04       	cpc	r12, r4
    7196:	d5 04       	cpc	r13, r5
    7198:	70 f0       	brcs	.+28     	; 0x71b6 <__udivdi3+0x5d4>
    719a:	a2 16       	cp	r10, r18
    719c:	b3 06       	cpc	r11, r19
    719e:	c4 06       	cpc	r12, r20
    71a0:	d5 06       	cpc	r13, r21
    71a2:	48 f4       	brcc	.+18     	; 0x71b6 <__udivdi3+0x5d4>
    71a4:	08 94       	sec
    71a6:	61 08       	sbc	r6, r1
    71a8:	71 08       	sbc	r7, r1
    71aa:	81 08       	sbc	r8, r1
    71ac:	91 08       	sbc	r9, r1
    71ae:	a2 0c       	add	r10, r2
    71b0:	b3 1c       	adc	r11, r3
    71b2:	c4 1c       	adc	r12, r4
    71b4:	d5 1c       	adc	r13, r5
    71b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    71b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    71ba:	af a5       	ldd	r26, Y+47	; 0x2f
    71bc:	b8 a9       	ldd	r27, Y+48	; 0x30
    71be:	6f 96       	adiw	r28, 0x1f	; 31
    71c0:	0f ac       	ldd	r0, Y+63	; 0x3f
    71c2:	6f 97       	sbiw	r28, 0x1f	; 31
    71c4:	04 c0       	rjmp	.+8      	; 0x71ce <__udivdi3+0x5ec>
    71c6:	88 0f       	add	r24, r24
    71c8:	99 1f       	adc	r25, r25
    71ca:	aa 1f       	adc	r26, r26
    71cc:	bb 1f       	adc	r27, r27
    71ce:	0a 94       	dec	r0
    71d0:	d2 f7       	brpl	.-12     	; 0x71c6 <__udivdi3+0x5e4>
    71d2:	8d a7       	std	Y+45, r24	; 0x2d
    71d4:	9e a7       	std	Y+46, r25	; 0x2e
    71d6:	af a7       	std	Y+47, r26	; 0x2f
    71d8:	b8 ab       	std	Y+48, r27	; 0x30
    71da:	a2 1a       	sub	r10, r18
    71dc:	b3 0a       	sbc	r11, r19
    71de:	c4 0a       	sbc	r12, r20
    71e0:	d5 0a       	sbc	r13, r21
    71e2:	25 96       	adiw	r28, 0x05	; 5
    71e4:	ec ac       	ldd	r14, Y+60	; 0x3c
    71e6:	fd ac       	ldd	r15, Y+61	; 0x3d
    71e8:	0e ad       	ldd	r16, Y+62	; 0x3e
    71ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    71ec:	25 97       	sbiw	r28, 0x05	; 5
    71ee:	d7 01       	movw	r26, r14
    71f0:	99 27       	eor	r25, r25
    71f2:	88 27       	eor	r24, r24
    71f4:	68 2a       	or	r6, r24
    71f6:	79 2a       	or	r7, r25
    71f8:	8a 2a       	or	r8, r26
    71fa:	9b 2a       	or	r9, r27
    71fc:	82 01       	movw	r16, r4
    71fe:	22 27       	eor	r18, r18
    7200:	33 27       	eor	r19, r19
    7202:	29 96       	adiw	r28, 0x09	; 9
    7204:	0c af       	std	Y+60, r16	; 0x3c
    7206:	1d af       	std	Y+61, r17	; 0x3d
    7208:	2e af       	std	Y+62, r18	; 0x3e
    720a:	3f af       	std	Y+63, r19	; 0x3f
    720c:	29 97       	sbiw	r28, 0x09	; 9
    720e:	a2 01       	movw	r20, r4
    7210:	91 01       	movw	r18, r2
    7212:	40 70       	andi	r20, 0x00	; 0
    7214:	50 70       	andi	r21, 0x00	; 0
    7216:	2d 96       	adiw	r28, 0x0d	; 13
    7218:	2c af       	std	Y+60, r18	; 0x3c
    721a:	3d af       	std	Y+61, r19	; 0x3d
    721c:	4e af       	std	Y+62, r20	; 0x3e
    721e:	5f af       	std	Y+63, r21	; 0x3f
    7220:	2d 97       	sbiw	r28, 0x0d	; 13
    7222:	c6 01       	movw	r24, r12
    7224:	b5 01       	movw	r22, r10
    7226:	29 96       	adiw	r28, 0x09	; 9
    7228:	2c ad       	ldd	r18, Y+60	; 0x3c
    722a:	3d ad       	ldd	r19, Y+61	; 0x3d
    722c:	4e ad       	ldd	r20, Y+62	; 0x3e
    722e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7230:	29 97       	sbiw	r28, 0x09	; 9
    7232:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7236:	7b 01       	movw	r14, r22
    7238:	8c 01       	movw	r16, r24
    723a:	c6 01       	movw	r24, r12
    723c:	b5 01       	movw	r22, r10
    723e:	29 96       	adiw	r28, 0x09	; 9
    7240:	2c ad       	ldd	r18, Y+60	; 0x3c
    7242:	3d ad       	ldd	r19, Y+61	; 0x3d
    7244:	4e ad       	ldd	r20, Y+62	; 0x3e
    7246:	5f ad       	ldd	r21, Y+63	; 0x3f
    7248:	29 97       	sbiw	r28, 0x09	; 9
    724a:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    724e:	c9 01       	movw	r24, r18
    7250:	da 01       	movw	r26, r20
    7252:	61 96       	adiw	r28, 0x11	; 17
    7254:	8c af       	std	Y+60, r24	; 0x3c
    7256:	9d af       	std	Y+61, r25	; 0x3d
    7258:	ae af       	std	Y+62, r26	; 0x3e
    725a:	bf af       	std	Y+63, r27	; 0x3f
    725c:	61 97       	sbiw	r28, 0x11	; 17
    725e:	bc 01       	movw	r22, r24
    7260:	cd 01       	movw	r24, r26
    7262:	2d 96       	adiw	r28, 0x0d	; 13
    7264:	2c ad       	ldd	r18, Y+60	; 0x3c
    7266:	3d ad       	ldd	r19, Y+61	; 0x3d
    7268:	4e ad       	ldd	r20, Y+62	; 0x3e
    726a:	5f ad       	ldd	r21, Y+63	; 0x3f
    726c:	2d 97       	sbiw	r28, 0x0d	; 13
    726e:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    7272:	9b 01       	movw	r18, r22
    7274:	ac 01       	movw	r20, r24
    7276:	87 01       	movw	r16, r14
    7278:	ff 24       	eor	r15, r15
    727a:	ee 24       	eor	r14, r14
    727c:	ad a4       	ldd	r10, Y+45	; 0x2d
    727e:	be a4       	ldd	r11, Y+46	; 0x2e
    7280:	cf a4       	ldd	r12, Y+47	; 0x2f
    7282:	d8 a8       	ldd	r13, Y+48	; 0x30
    7284:	c6 01       	movw	r24, r12
    7286:	aa 27       	eor	r26, r26
    7288:	bb 27       	eor	r27, r27
    728a:	57 01       	movw	r10, r14
    728c:	68 01       	movw	r12, r16
    728e:	a8 2a       	or	r10, r24
    7290:	b9 2a       	or	r11, r25
    7292:	ca 2a       	or	r12, r26
    7294:	db 2a       	or	r13, r27
    7296:	a2 16       	cp	r10, r18
    7298:	b3 06       	cpc	r11, r19
    729a:	c4 06       	cpc	r12, r20
    729c:	d5 06       	cpc	r13, r21
    729e:	60 f5       	brcc	.+88     	; 0x72f8 <__udivdi3+0x716>
    72a0:	61 96       	adiw	r28, 0x11	; 17
    72a2:	6c ad       	ldd	r22, Y+60	; 0x3c
    72a4:	7d ad       	ldd	r23, Y+61	; 0x3d
    72a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    72a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    72aa:	61 97       	sbiw	r28, 0x11	; 17
    72ac:	61 50       	subi	r22, 0x01	; 1
    72ae:	70 40       	sbci	r23, 0x00	; 0
    72b0:	80 40       	sbci	r24, 0x00	; 0
    72b2:	90 40       	sbci	r25, 0x00	; 0
    72b4:	61 96       	adiw	r28, 0x11	; 17
    72b6:	6c af       	std	Y+60, r22	; 0x3c
    72b8:	7d af       	std	Y+61, r23	; 0x3d
    72ba:	8e af       	std	Y+62, r24	; 0x3e
    72bc:	9f af       	std	Y+63, r25	; 0x3f
    72be:	61 97       	sbiw	r28, 0x11	; 17
    72c0:	a2 0c       	add	r10, r2
    72c2:	b3 1c       	adc	r11, r3
    72c4:	c4 1c       	adc	r12, r4
    72c6:	d5 1c       	adc	r13, r5
    72c8:	a2 14       	cp	r10, r2
    72ca:	b3 04       	cpc	r11, r3
    72cc:	c4 04       	cpc	r12, r4
    72ce:	d5 04       	cpc	r13, r5
    72d0:	98 f0       	brcs	.+38     	; 0x72f8 <__udivdi3+0x716>
    72d2:	a2 16       	cp	r10, r18
    72d4:	b3 06       	cpc	r11, r19
    72d6:	c4 06       	cpc	r12, r20
    72d8:	d5 06       	cpc	r13, r21
    72da:	70 f4       	brcc	.+28     	; 0x72f8 <__udivdi3+0x716>
    72dc:	61 50       	subi	r22, 0x01	; 1
    72de:	70 40       	sbci	r23, 0x00	; 0
    72e0:	80 40       	sbci	r24, 0x00	; 0
    72e2:	90 40       	sbci	r25, 0x00	; 0
    72e4:	61 96       	adiw	r28, 0x11	; 17
    72e6:	6c af       	std	Y+60, r22	; 0x3c
    72e8:	7d af       	std	Y+61, r23	; 0x3d
    72ea:	8e af       	std	Y+62, r24	; 0x3e
    72ec:	9f af       	std	Y+63, r25	; 0x3f
    72ee:	61 97       	sbiw	r28, 0x11	; 17
    72f0:	a2 0c       	add	r10, r2
    72f2:	b3 1c       	adc	r11, r3
    72f4:	c4 1c       	adc	r12, r4
    72f6:	d5 1c       	adc	r13, r5
    72f8:	a2 1a       	sub	r10, r18
    72fa:	b3 0a       	sbc	r11, r19
    72fc:	c4 0a       	sbc	r12, r20
    72fe:	d5 0a       	sbc	r13, r21
    7300:	c6 01       	movw	r24, r12
    7302:	b5 01       	movw	r22, r10
    7304:	29 96       	adiw	r28, 0x09	; 9
    7306:	2c ad       	ldd	r18, Y+60	; 0x3c
    7308:	3d ad       	ldd	r19, Y+61	; 0x3d
    730a:	4e ad       	ldd	r20, Y+62	; 0x3e
    730c:	5f ad       	ldd	r21, Y+63	; 0x3f
    730e:	29 97       	sbiw	r28, 0x09	; 9
    7310:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7314:	7b 01       	movw	r14, r22
    7316:	8c 01       	movw	r16, r24
    7318:	c6 01       	movw	r24, r12
    731a:	b5 01       	movw	r22, r10
    731c:	29 96       	adiw	r28, 0x09	; 9
    731e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7320:	3d ad       	ldd	r19, Y+61	; 0x3d
    7322:	4e ad       	ldd	r20, Y+62	; 0x3e
    7324:	5f ad       	ldd	r21, Y+63	; 0x3f
    7326:	29 97       	sbiw	r28, 0x09	; 9
    7328:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    732c:	c9 01       	movw	r24, r18
    732e:	da 01       	movw	r26, r20
    7330:	5c 01       	movw	r10, r24
    7332:	6d 01       	movw	r12, r26
    7334:	c6 01       	movw	r24, r12
    7336:	b5 01       	movw	r22, r10
    7338:	2d 96       	adiw	r28, 0x0d	; 13
    733a:	2c ad       	ldd	r18, Y+60	; 0x3c
    733c:	3d ad       	ldd	r19, Y+61	; 0x3d
    733e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7340:	5f ad       	ldd	r21, Y+63	; 0x3f
    7342:	2d 97       	sbiw	r28, 0x0d	; 13
    7344:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    7348:	9b 01       	movw	r18, r22
    734a:	ac 01       	movw	r20, r24
    734c:	87 01       	movw	r16, r14
    734e:	ff 24       	eor	r15, r15
    7350:	ee 24       	eor	r14, r14
    7352:	8d a5       	ldd	r24, Y+45	; 0x2d
    7354:	9e a5       	ldd	r25, Y+46	; 0x2e
    7356:	af a5       	ldd	r26, Y+47	; 0x2f
    7358:	b8 a9       	ldd	r27, Y+48	; 0x30
    735a:	a0 70       	andi	r26, 0x00	; 0
    735c:	b0 70       	andi	r27, 0x00	; 0
    735e:	e8 2a       	or	r14, r24
    7360:	f9 2a       	or	r15, r25
    7362:	0a 2b       	or	r16, r26
    7364:	1b 2b       	or	r17, r27
    7366:	e2 16       	cp	r14, r18
    7368:	f3 06       	cpc	r15, r19
    736a:	04 07       	cpc	r16, r20
    736c:	15 07       	cpc	r17, r21
    736e:	c0 f4       	brcc	.+48     	; 0x73a0 <__udivdi3+0x7be>
    7370:	08 94       	sec
    7372:	a1 08       	sbc	r10, r1
    7374:	b1 08       	sbc	r11, r1
    7376:	c1 08       	sbc	r12, r1
    7378:	d1 08       	sbc	r13, r1
    737a:	e2 0c       	add	r14, r2
    737c:	f3 1c       	adc	r15, r3
    737e:	04 1d       	adc	r16, r4
    7380:	15 1d       	adc	r17, r5
    7382:	e2 14       	cp	r14, r2
    7384:	f3 04       	cpc	r15, r3
    7386:	04 05       	cpc	r16, r4
    7388:	15 05       	cpc	r17, r5
    738a:	50 f0       	brcs	.+20     	; 0x73a0 <__udivdi3+0x7be>
    738c:	e2 16       	cp	r14, r18
    738e:	f3 06       	cpc	r15, r19
    7390:	04 07       	cpc	r16, r20
    7392:	15 07       	cpc	r17, r21
    7394:	28 f4       	brcc	.+10     	; 0x73a0 <__udivdi3+0x7be>
    7396:	08 94       	sec
    7398:	a1 08       	sbc	r10, r1
    739a:	b1 08       	sbc	r11, r1
    739c:	c1 08       	sbc	r12, r1
    739e:	d1 08       	sbc	r13, r1
    73a0:	61 96       	adiw	r28, 0x11	; 17
    73a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    73a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    73a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    73a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    73aa:	61 97       	sbiw	r28, 0x11	; 17
    73ac:	d7 01       	movw	r26, r14
    73ae:	99 27       	eor	r25, r25
    73b0:	88 27       	eor	r24, r24
    73b2:	96 01       	movw	r18, r12
    73b4:	85 01       	movw	r16, r10
    73b6:	08 2b       	or	r16, r24
    73b8:	19 2b       	or	r17, r25
    73ba:	2a 2b       	or	r18, r26
    73bc:	3b 2b       	or	r19, r27
    73be:	09 ab       	std	Y+49, r16	; 0x31
    73c0:	1a ab       	std	Y+50, r17	; 0x32
    73c2:	2b ab       	std	Y+51, r18	; 0x33
    73c4:	3c ab       	std	Y+52, r19	; 0x34
    73c6:	62 c2       	rjmp	.+1220   	; 0x788c <__udivdi3+0xcaa>
    73c8:	6e 14       	cp	r6, r14
    73ca:	7f 04       	cpc	r7, r15
    73cc:	80 06       	cpc	r8, r16
    73ce:	91 06       	cpc	r9, r17
    73d0:	08 f4       	brcc	.+2      	; 0x73d4 <__udivdi3+0x7f2>
    73d2:	51 c2       	rjmp	.+1186   	; 0x7876 <__udivdi3+0xc94>
    73d4:	20 e0       	ldi	r18, 0x00	; 0
    73d6:	e2 16       	cp	r14, r18
    73d8:	20 e0       	ldi	r18, 0x00	; 0
    73da:	f2 06       	cpc	r15, r18
    73dc:	21 e0       	ldi	r18, 0x01	; 1
    73de:	02 07       	cpc	r16, r18
    73e0:	20 e0       	ldi	r18, 0x00	; 0
    73e2:	12 07       	cpc	r17, r18
    73e4:	88 f4       	brcc	.+34     	; 0x7408 <__udivdi3+0x826>
    73e6:	3f ef       	ldi	r19, 0xFF	; 255
    73e8:	e3 16       	cp	r14, r19
    73ea:	f1 04       	cpc	r15, r1
    73ec:	01 05       	cpc	r16, r1
    73ee:	11 05       	cpc	r17, r1
    73f0:	31 f0       	breq	.+12     	; 0x73fe <__udivdi3+0x81c>
    73f2:	28 f0       	brcs	.+10     	; 0x73fe <__udivdi3+0x81c>
    73f4:	48 e0       	ldi	r20, 0x08	; 8
    73f6:	50 e0       	ldi	r21, 0x00	; 0
    73f8:	60 e0       	ldi	r22, 0x00	; 0
    73fa:	70 e0       	ldi	r23, 0x00	; 0
    73fc:	17 c0       	rjmp	.+46     	; 0x742c <__udivdi3+0x84a>
    73fe:	40 e0       	ldi	r20, 0x00	; 0
    7400:	50 e0       	ldi	r21, 0x00	; 0
    7402:	60 e0       	ldi	r22, 0x00	; 0
    7404:	70 e0       	ldi	r23, 0x00	; 0
    7406:	12 c0       	rjmp	.+36     	; 0x742c <__udivdi3+0x84a>
    7408:	40 e0       	ldi	r20, 0x00	; 0
    740a:	e4 16       	cp	r14, r20
    740c:	40 e0       	ldi	r20, 0x00	; 0
    740e:	f4 06       	cpc	r15, r20
    7410:	40 e0       	ldi	r20, 0x00	; 0
    7412:	04 07       	cpc	r16, r20
    7414:	41 e0       	ldi	r20, 0x01	; 1
    7416:	14 07       	cpc	r17, r20
    7418:	28 f0       	brcs	.+10     	; 0x7424 <__udivdi3+0x842>
    741a:	48 e1       	ldi	r20, 0x18	; 24
    741c:	50 e0       	ldi	r21, 0x00	; 0
    741e:	60 e0       	ldi	r22, 0x00	; 0
    7420:	70 e0       	ldi	r23, 0x00	; 0
    7422:	04 c0       	rjmp	.+8      	; 0x742c <__udivdi3+0x84a>
    7424:	40 e1       	ldi	r20, 0x10	; 16
    7426:	50 e0       	ldi	r21, 0x00	; 0
    7428:	60 e0       	ldi	r22, 0x00	; 0
    742a:	70 e0       	ldi	r23, 0x00	; 0
    742c:	d8 01       	movw	r26, r16
    742e:	c7 01       	movw	r24, r14
    7430:	04 2e       	mov	r0, r20
    7432:	04 c0       	rjmp	.+8      	; 0x743c <__udivdi3+0x85a>
    7434:	b6 95       	lsr	r27
    7436:	a7 95       	ror	r26
    7438:	97 95       	ror	r25
    743a:	87 95       	ror	r24
    743c:	0a 94       	dec	r0
    743e:	d2 f7       	brpl	.-12     	; 0x7434 <__udivdi3+0x852>
    7440:	80 50       	subi	r24, 0x00	; 0
    7442:	90 4e       	sbci	r25, 0xE0	; 224
    7444:	dc 01       	movw	r26, r24
    7446:	2c 91       	ld	r18, X
    7448:	30 e2       	ldi	r19, 0x20	; 32
    744a:	a3 2e       	mov	r10, r19
    744c:	b1 2c       	mov	r11, r1
    744e:	c1 2c       	mov	r12, r1
    7450:	d1 2c       	mov	r13, r1
    7452:	d6 01       	movw	r26, r12
    7454:	c5 01       	movw	r24, r10
    7456:	84 1b       	sub	r24, r20
    7458:	95 0b       	sbc	r25, r21
    745a:	a6 0b       	sbc	r26, r22
    745c:	b7 0b       	sbc	r27, r23
    745e:	82 1b       	sub	r24, r18
    7460:	91 09       	sbc	r25, r1
    7462:	a1 09       	sbc	r26, r1
    7464:	b1 09       	sbc	r27, r1
    7466:	00 97       	sbiw	r24, 0x00	; 0
    7468:	a1 05       	cpc	r26, r1
    746a:	b1 05       	cpc	r27, r1
    746c:	89 f4       	brne	.+34     	; 0x7490 <__udivdi3+0x8ae>
    746e:	e6 14       	cp	r14, r6
    7470:	f7 04       	cpc	r15, r7
    7472:	08 05       	cpc	r16, r8
    7474:	19 05       	cpc	r17, r9
    7476:	08 f4       	brcc	.+2      	; 0x747a <__udivdi3+0x898>
    7478:	f2 c1       	rjmp	.+996    	; 0x785e <__udivdi3+0xc7c>
    747a:	6d a4       	ldd	r6, Y+45	; 0x2d
    747c:	7e a4       	ldd	r7, Y+46	; 0x2e
    747e:	8f a4       	ldd	r8, Y+47	; 0x2f
    7480:	98 a8       	ldd	r9, Y+48	; 0x30
    7482:	62 14       	cp	r6, r2
    7484:	73 04       	cpc	r7, r3
    7486:	84 04       	cpc	r8, r4
    7488:	95 04       	cpc	r9, r5
    748a:	08 f0       	brcs	.+2      	; 0x748e <__udivdi3+0x8ac>
    748c:	e8 c1       	rjmp	.+976    	; 0x785e <__udivdi3+0xc7c>
    748e:	f3 c1       	rjmp	.+998    	; 0x7876 <__udivdi3+0xc94>
    7490:	6e 96       	adiw	r28, 0x1e	; 30
    7492:	8f af       	std	Y+63, r24	; 0x3f
    7494:	6e 97       	sbiw	r28, 0x1e	; 30
    7496:	08 2e       	mov	r0, r24
    7498:	04 c0       	rjmp	.+8      	; 0x74a2 <__udivdi3+0x8c0>
    749a:	ee 0c       	add	r14, r14
    749c:	ff 1c       	adc	r15, r15
    749e:	00 1f       	adc	r16, r16
    74a0:	11 1f       	adc	r17, r17
    74a2:	0a 94       	dec	r0
    74a4:	d2 f7       	brpl	.-12     	; 0x749a <__udivdi3+0x8b8>
    74a6:	6a 2d       	mov	r22, r10
    74a8:	68 1b       	sub	r22, r24
    74aa:	d2 01       	movw	r26, r4
    74ac:	c1 01       	movw	r24, r2
    74ae:	06 2e       	mov	r0, r22
    74b0:	04 c0       	rjmp	.+8      	; 0x74ba <__udivdi3+0x8d8>
    74b2:	b6 95       	lsr	r27
    74b4:	a7 95       	ror	r26
    74b6:	97 95       	ror	r25
    74b8:	87 95       	ror	r24
    74ba:	0a 94       	dec	r0
    74bc:	d2 f7       	brpl	.-12     	; 0x74b2 <__udivdi3+0x8d0>
    74be:	5c 01       	movw	r10, r24
    74c0:	6d 01       	movw	r12, r26
    74c2:	ae 28       	or	r10, r14
    74c4:	bf 28       	or	r11, r15
    74c6:	c0 2a       	or	r12, r16
    74c8:	d1 2a       	or	r13, r17
    74ca:	ad a2       	std	Y+37, r10	; 0x25
    74cc:	be a2       	std	Y+38, r11	; 0x26
    74ce:	cf a2       	std	Y+39, r12	; 0x27
    74d0:	d8 a6       	std	Y+40, r13	; 0x28
    74d2:	72 01       	movw	r14, r4
    74d4:	61 01       	movw	r12, r2
    74d6:	6e 96       	adiw	r28, 0x1e	; 30
    74d8:	0f ac       	ldd	r0, Y+63	; 0x3f
    74da:	6e 97       	sbiw	r28, 0x1e	; 30
    74dc:	04 c0       	rjmp	.+8      	; 0x74e6 <__udivdi3+0x904>
    74de:	cc 0c       	add	r12, r12
    74e0:	dd 1c       	adc	r13, r13
    74e2:	ee 1c       	adc	r14, r14
    74e4:	ff 1c       	adc	r15, r15
    74e6:	0a 94       	dec	r0
    74e8:	d2 f7       	brpl	.-12     	; 0x74de <__udivdi3+0x8fc>
    74ea:	c9 a2       	std	Y+33, r12	; 0x21
    74ec:	da a2       	std	Y+34, r13	; 0x22
    74ee:	eb a2       	std	Y+35, r14	; 0x23
    74f0:	fc a2       	std	Y+36, r15	; 0x24
    74f2:	64 01       	movw	r12, r8
    74f4:	53 01       	movw	r10, r6
    74f6:	06 2e       	mov	r0, r22
    74f8:	04 c0       	rjmp	.+8      	; 0x7502 <__udivdi3+0x920>
    74fa:	d6 94       	lsr	r13
    74fc:	c7 94       	ror	r12
    74fe:	b7 94       	ror	r11
    7500:	a7 94       	ror	r10
    7502:	0a 94       	dec	r0
    7504:	d2 f7       	brpl	.-12     	; 0x74fa <__udivdi3+0x918>
    7506:	d4 01       	movw	r26, r8
    7508:	c3 01       	movw	r24, r6
    750a:	6e 96       	adiw	r28, 0x1e	; 30
    750c:	0f ac       	ldd	r0, Y+63	; 0x3f
    750e:	6e 97       	sbiw	r28, 0x1e	; 30
    7510:	04 c0       	rjmp	.+8      	; 0x751a <__udivdi3+0x938>
    7512:	88 0f       	add	r24, r24
    7514:	99 1f       	adc	r25, r25
    7516:	aa 1f       	adc	r26, r26
    7518:	bb 1f       	adc	r27, r27
    751a:	0a 94       	dec	r0
    751c:	d2 f7       	brpl	.-12     	; 0x7512 <__udivdi3+0x930>
    751e:	ed a4       	ldd	r14, Y+45	; 0x2d
    7520:	fe a4       	ldd	r15, Y+46	; 0x2e
    7522:	0f a5       	ldd	r16, Y+47	; 0x2f
    7524:	18 a9       	ldd	r17, Y+48	; 0x30
    7526:	04 c0       	rjmp	.+8      	; 0x7530 <__udivdi3+0x94e>
    7528:	16 95       	lsr	r17
    752a:	07 95       	ror	r16
    752c:	f7 94       	ror	r15
    752e:	e7 94       	ror	r14
    7530:	6a 95       	dec	r22
    7532:	d2 f7       	brpl	.-12     	; 0x7528 <__udivdi3+0x946>
    7534:	37 01       	movw	r6, r14
    7536:	48 01       	movw	r8, r16
    7538:	68 2a       	or	r6, r24
    753a:	79 2a       	or	r7, r25
    753c:	8a 2a       	or	r8, r26
    753e:	9b 2a       	or	r9, r27
    7540:	6d 8e       	std	Y+29, r6	; 0x1d
    7542:	7e 8e       	std	Y+30, r7	; 0x1e
    7544:	8f 8e       	std	Y+31, r8	; 0x1f
    7546:	98 a2       	std	Y+32, r9	; 0x20
    7548:	ed a0       	ldd	r14, Y+37	; 0x25
    754a:	fe a0       	ldd	r15, Y+38	; 0x26
    754c:	0f a1       	ldd	r16, Y+39	; 0x27
    754e:	18 a5       	ldd	r17, Y+40	; 0x28
    7550:	38 01       	movw	r6, r16
    7552:	88 24       	eor	r8, r8
    7554:	99 24       	eor	r9, r9
    7556:	98 01       	movw	r18, r16
    7558:	87 01       	movw	r16, r14
    755a:	20 70       	andi	r18, 0x00	; 0
    755c:	30 70       	andi	r19, 0x00	; 0
    755e:	65 96       	adiw	r28, 0x15	; 21
    7560:	0c af       	std	Y+60, r16	; 0x3c
    7562:	1d af       	std	Y+61, r17	; 0x3d
    7564:	2e af       	std	Y+62, r18	; 0x3e
    7566:	3f af       	std	Y+63, r19	; 0x3f
    7568:	65 97       	sbiw	r28, 0x15	; 21
    756a:	c6 01       	movw	r24, r12
    756c:	b5 01       	movw	r22, r10
    756e:	a4 01       	movw	r20, r8
    7570:	93 01       	movw	r18, r6
    7572:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7576:	7b 01       	movw	r14, r22
    7578:	8c 01       	movw	r16, r24
    757a:	c6 01       	movw	r24, r12
    757c:	b5 01       	movw	r22, r10
    757e:	a4 01       	movw	r20, r8
    7580:	93 01       	movw	r18, r6
    7582:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7586:	c9 01       	movw	r24, r18
    7588:	da 01       	movw	r26, r20
    758a:	1c 01       	movw	r2, r24
    758c:	2d 01       	movw	r4, r26
    758e:	c2 01       	movw	r24, r4
    7590:	b1 01       	movw	r22, r2
    7592:	65 96       	adiw	r28, 0x15	; 21
    7594:	2c ad       	ldd	r18, Y+60	; 0x3c
    7596:	3d ad       	ldd	r19, Y+61	; 0x3d
    7598:	4e ad       	ldd	r20, Y+62	; 0x3e
    759a:	5f ad       	ldd	r21, Y+63	; 0x3f
    759c:	65 97       	sbiw	r28, 0x15	; 21
    759e:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    75a2:	9b 01       	movw	r18, r22
    75a4:	ac 01       	movw	r20, r24
    75a6:	87 01       	movw	r16, r14
    75a8:	ff 24       	eor	r15, r15
    75aa:	ee 24       	eor	r14, r14
    75ac:	ad 8c       	ldd	r10, Y+29	; 0x1d
    75ae:	be 8c       	ldd	r11, Y+30	; 0x1e
    75b0:	cf 8c       	ldd	r12, Y+31	; 0x1f
    75b2:	d8 a0       	ldd	r13, Y+32	; 0x20
    75b4:	c6 01       	movw	r24, r12
    75b6:	aa 27       	eor	r26, r26
    75b8:	bb 27       	eor	r27, r27
    75ba:	57 01       	movw	r10, r14
    75bc:	68 01       	movw	r12, r16
    75be:	a8 2a       	or	r10, r24
    75c0:	b9 2a       	or	r11, r25
    75c2:	ca 2a       	or	r12, r26
    75c4:	db 2a       	or	r13, r27
    75c6:	a2 16       	cp	r10, r18
    75c8:	b3 06       	cpc	r11, r19
    75ca:	c4 06       	cpc	r12, r20
    75cc:	d5 06       	cpc	r13, r21
    75ce:	00 f5       	brcc	.+64     	; 0x7610 <__udivdi3+0xa2e>
    75d0:	08 94       	sec
    75d2:	21 08       	sbc	r2, r1
    75d4:	31 08       	sbc	r3, r1
    75d6:	41 08       	sbc	r4, r1
    75d8:	51 08       	sbc	r5, r1
    75da:	ed a0       	ldd	r14, Y+37	; 0x25
    75dc:	fe a0       	ldd	r15, Y+38	; 0x26
    75de:	0f a1       	ldd	r16, Y+39	; 0x27
    75e0:	18 a5       	ldd	r17, Y+40	; 0x28
    75e2:	ae 0c       	add	r10, r14
    75e4:	bf 1c       	adc	r11, r15
    75e6:	c0 1e       	adc	r12, r16
    75e8:	d1 1e       	adc	r13, r17
    75ea:	ae 14       	cp	r10, r14
    75ec:	bf 04       	cpc	r11, r15
    75ee:	c0 06       	cpc	r12, r16
    75f0:	d1 06       	cpc	r13, r17
    75f2:	70 f0       	brcs	.+28     	; 0x7610 <__udivdi3+0xa2e>
    75f4:	a2 16       	cp	r10, r18
    75f6:	b3 06       	cpc	r11, r19
    75f8:	c4 06       	cpc	r12, r20
    75fa:	d5 06       	cpc	r13, r21
    75fc:	48 f4       	brcc	.+18     	; 0x7610 <__udivdi3+0xa2e>
    75fe:	08 94       	sec
    7600:	21 08       	sbc	r2, r1
    7602:	31 08       	sbc	r3, r1
    7604:	41 08       	sbc	r4, r1
    7606:	51 08       	sbc	r5, r1
    7608:	ae 0c       	add	r10, r14
    760a:	bf 1c       	adc	r11, r15
    760c:	c0 1e       	adc	r12, r16
    760e:	d1 1e       	adc	r13, r17
    7610:	a2 1a       	sub	r10, r18
    7612:	b3 0a       	sbc	r11, r19
    7614:	c4 0a       	sbc	r12, r20
    7616:	d5 0a       	sbc	r13, r21
    7618:	c6 01       	movw	r24, r12
    761a:	b5 01       	movw	r22, r10
    761c:	a4 01       	movw	r20, r8
    761e:	93 01       	movw	r18, r6
    7620:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7624:	7b 01       	movw	r14, r22
    7626:	8c 01       	movw	r16, r24
    7628:	c6 01       	movw	r24, r12
    762a:	b5 01       	movw	r22, r10
    762c:	a4 01       	movw	r20, r8
    762e:	93 01       	movw	r18, r6
    7630:	0e 94 62 44 	call	0x88c4	; 0x88c4 <__udivmodsi4>
    7634:	c9 01       	movw	r24, r18
    7636:	da 01       	movw	r26, r20
    7638:	3c 01       	movw	r6, r24
    763a:	4d 01       	movw	r8, r26
    763c:	c4 01       	movw	r24, r8
    763e:	b3 01       	movw	r22, r6
    7640:	65 96       	adiw	r28, 0x15	; 21
    7642:	2c ad       	ldd	r18, Y+60	; 0x3c
    7644:	3d ad       	ldd	r19, Y+61	; 0x3d
    7646:	4e ad       	ldd	r20, Y+62	; 0x3e
    7648:	5f ad       	ldd	r21, Y+63	; 0x3f
    764a:	65 97       	sbiw	r28, 0x15	; 21
    764c:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    7650:	9b 01       	movw	r18, r22
    7652:	ac 01       	movw	r20, r24
    7654:	87 01       	movw	r16, r14
    7656:	ff 24       	eor	r15, r15
    7658:	ee 24       	eor	r14, r14
    765a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    765c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    765e:	af 8d       	ldd	r26, Y+31	; 0x1f
    7660:	b8 a1       	ldd	r27, Y+32	; 0x20
    7662:	a0 70       	andi	r26, 0x00	; 0
    7664:	b0 70       	andi	r27, 0x00	; 0
    7666:	57 01       	movw	r10, r14
    7668:	68 01       	movw	r12, r16
    766a:	a8 2a       	or	r10, r24
    766c:	b9 2a       	or	r11, r25
    766e:	ca 2a       	or	r12, r26
    7670:	db 2a       	or	r13, r27
    7672:	a2 16       	cp	r10, r18
    7674:	b3 06       	cpc	r11, r19
    7676:	c4 06       	cpc	r12, r20
    7678:	d5 06       	cpc	r13, r21
    767a:	00 f5       	brcc	.+64     	; 0x76bc <__udivdi3+0xada>
    767c:	08 94       	sec
    767e:	61 08       	sbc	r6, r1
    7680:	71 08       	sbc	r7, r1
    7682:	81 08       	sbc	r8, r1
    7684:	91 08       	sbc	r9, r1
    7686:	6d a1       	ldd	r22, Y+37	; 0x25
    7688:	7e a1       	ldd	r23, Y+38	; 0x26
    768a:	8f a1       	ldd	r24, Y+39	; 0x27
    768c:	98 a5       	ldd	r25, Y+40	; 0x28
    768e:	a6 0e       	add	r10, r22
    7690:	b7 1e       	adc	r11, r23
    7692:	c8 1e       	adc	r12, r24
    7694:	d9 1e       	adc	r13, r25
    7696:	a6 16       	cp	r10, r22
    7698:	b7 06       	cpc	r11, r23
    769a:	c8 06       	cpc	r12, r24
    769c:	d9 06       	cpc	r13, r25
    769e:	70 f0       	brcs	.+28     	; 0x76bc <__udivdi3+0xada>
    76a0:	a2 16       	cp	r10, r18
    76a2:	b3 06       	cpc	r11, r19
    76a4:	c4 06       	cpc	r12, r20
    76a6:	d5 06       	cpc	r13, r21
    76a8:	48 f4       	brcc	.+18     	; 0x76bc <__udivdi3+0xada>
    76aa:	08 94       	sec
    76ac:	61 08       	sbc	r6, r1
    76ae:	71 08       	sbc	r7, r1
    76b0:	81 08       	sbc	r8, r1
    76b2:	91 08       	sbc	r9, r1
    76b4:	a6 0e       	add	r10, r22
    76b6:	b7 1e       	adc	r11, r23
    76b8:	c8 1e       	adc	r12, r24
    76ba:	d9 1e       	adc	r13, r25
    76bc:	d6 01       	movw	r26, r12
    76be:	c5 01       	movw	r24, r10
    76c0:	82 1b       	sub	r24, r18
    76c2:	93 0b       	sbc	r25, r19
    76c4:	a4 0b       	sbc	r26, r20
    76c6:	b5 0b       	sbc	r27, r21
    76c8:	89 8f       	std	Y+25, r24	; 0x19
    76ca:	9a 8f       	std	Y+26, r25	; 0x1a
    76cc:	ab 8f       	std	Y+27, r26	; 0x1b
    76ce:	bc 8f       	std	Y+28, r27	; 0x1c
    76d0:	d1 01       	movw	r26, r2
    76d2:	99 27       	eor	r25, r25
    76d4:	88 27       	eor	r24, r24
    76d6:	64 01       	movw	r12, r8
    76d8:	53 01       	movw	r10, r6
    76da:	a8 2a       	or	r10, r24
    76dc:	b9 2a       	or	r11, r25
    76de:	ca 2a       	or	r12, r26
    76e0:	db 2a       	or	r13, r27
    76e2:	a9 aa       	std	Y+49, r10	; 0x31
    76e4:	ba aa       	std	Y+50, r11	; 0x32
    76e6:	cb aa       	std	Y+51, r12	; 0x33
    76e8:	dc aa       	std	Y+52, r13	; 0x34
    76ea:	86 01       	movw	r16, r12
    76ec:	75 01       	movw	r14, r10
    76ee:	2f ef       	ldi	r18, 0xFF	; 255
    76f0:	3f ef       	ldi	r19, 0xFF	; 255
    76f2:	40 e0       	ldi	r20, 0x00	; 0
    76f4:	50 e0       	ldi	r21, 0x00	; 0
    76f6:	e2 22       	and	r14, r18
    76f8:	f3 22       	and	r15, r19
    76fa:	04 23       	and	r16, r20
    76fc:	15 23       	and	r17, r21
    76fe:	a6 01       	movw	r20, r12
    7700:	66 27       	eor	r22, r22
    7702:	77 27       	eor	r23, r23
    7704:	6d 96       	adiw	r28, 0x1d	; 29
    7706:	4c af       	std	Y+60, r20	; 0x3c
    7708:	5d af       	std	Y+61, r21	; 0x3d
    770a:	6e af       	std	Y+62, r22	; 0x3e
    770c:	7f af       	std	Y+63, r23	; 0x3f
    770e:	6d 97       	sbiw	r28, 0x1d	; 29
    7710:	a9 a0       	ldd	r10, Y+33	; 0x21
    7712:	ba a0       	ldd	r11, Y+34	; 0x22
    7714:	cb a0       	ldd	r12, Y+35	; 0x23
    7716:	dc a0       	ldd	r13, Y+36	; 0x24
    7718:	6f ef       	ldi	r22, 0xFF	; 255
    771a:	7f ef       	ldi	r23, 0xFF	; 255
    771c:	80 e0       	ldi	r24, 0x00	; 0
    771e:	90 e0       	ldi	r25, 0x00	; 0
    7720:	a6 22       	and	r10, r22
    7722:	b7 22       	and	r11, r23
    7724:	c8 22       	and	r12, r24
    7726:	d9 22       	and	r13, r25
    7728:	89 a1       	ldd	r24, Y+33	; 0x21
    772a:	9a a1       	ldd	r25, Y+34	; 0x22
    772c:	ab a1       	ldd	r26, Y+35	; 0x23
    772e:	bc a1       	ldd	r27, Y+36	; 0x24
    7730:	1d 01       	movw	r2, r26
    7732:	44 24       	eor	r4, r4
    7734:	55 24       	eor	r5, r5
    7736:	c8 01       	movw	r24, r16
    7738:	b7 01       	movw	r22, r14
    773a:	a6 01       	movw	r20, r12
    773c:	95 01       	movw	r18, r10
    773e:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    7742:	69 96       	adiw	r28, 0x19	; 25
    7744:	6c af       	std	Y+60, r22	; 0x3c
    7746:	7d af       	std	Y+61, r23	; 0x3d
    7748:	8e af       	std	Y+62, r24	; 0x3e
    774a:	9f af       	std	Y+63, r25	; 0x3f
    774c:	69 97       	sbiw	r28, 0x19	; 25
    774e:	c8 01       	movw	r24, r16
    7750:	b7 01       	movw	r22, r14
    7752:	a2 01       	movw	r20, r4
    7754:	91 01       	movw	r18, r2
    7756:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    775a:	3b 01       	movw	r6, r22
    775c:	4c 01       	movw	r8, r24
    775e:	6d 96       	adiw	r28, 0x1d	; 29
    7760:	6c ad       	ldd	r22, Y+60	; 0x3c
    7762:	7d ad       	ldd	r23, Y+61	; 0x3d
    7764:	8e ad       	ldd	r24, Y+62	; 0x3e
    7766:	9f ad       	ldd	r25, Y+63	; 0x3f
    7768:	6d 97       	sbiw	r28, 0x1d	; 29
    776a:	a6 01       	movw	r20, r12
    776c:	95 01       	movw	r18, r10
    776e:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    7772:	7b 01       	movw	r14, r22
    7774:	8c 01       	movw	r16, r24
    7776:	6d 96       	adiw	r28, 0x1d	; 29
    7778:	6c ad       	ldd	r22, Y+60	; 0x3c
    777a:	7d ad       	ldd	r23, Y+61	; 0x3d
    777c:	8e ad       	ldd	r24, Y+62	; 0x3e
    777e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7780:	6d 97       	sbiw	r28, 0x1d	; 29
    7782:	a2 01       	movw	r20, r4
    7784:	91 01       	movw	r18, r2
    7786:	0e 94 43 44 	call	0x8886	; 0x8886 <__mulsi3>
    778a:	5b 01       	movw	r10, r22
    778c:	6c 01       	movw	r12, r24
    778e:	a8 01       	movw	r20, r16
    7790:	97 01       	movw	r18, r14
    7792:	26 0d       	add	r18, r6
    7794:	37 1d       	adc	r19, r7
    7796:	48 1d       	adc	r20, r8
    7798:	59 1d       	adc	r21, r9
    779a:	69 96       	adiw	r28, 0x19	; 25
    779c:	6c ac       	ldd	r6, Y+60	; 0x3c
    779e:	7d ac       	ldd	r7, Y+61	; 0x3d
    77a0:	8e ac       	ldd	r8, Y+62	; 0x3e
    77a2:	9f ac       	ldd	r9, Y+63	; 0x3f
    77a4:	69 97       	sbiw	r28, 0x19	; 25
    77a6:	c4 01       	movw	r24, r8
    77a8:	aa 27       	eor	r26, r26
    77aa:	bb 27       	eor	r27, r27
    77ac:	28 0f       	add	r18, r24
    77ae:	39 1f       	adc	r19, r25
    77b0:	4a 1f       	adc	r20, r26
    77b2:	5b 1f       	adc	r21, r27
    77b4:	2e 15       	cp	r18, r14
    77b6:	3f 05       	cpc	r19, r15
    77b8:	40 07       	cpc	r20, r16
    77ba:	51 07       	cpc	r21, r17
    77bc:	48 f4       	brcc	.+18     	; 0x77d0 <__udivdi3+0xbee>
    77be:	e1 2c       	mov	r14, r1
    77c0:	f1 2c       	mov	r15, r1
    77c2:	61 e0       	ldi	r22, 0x01	; 1
    77c4:	06 2f       	mov	r16, r22
    77c6:	11 2d       	mov	r17, r1
    77c8:	ae 0c       	add	r10, r14
    77ca:	bf 1c       	adc	r11, r15
    77cc:	c0 1e       	adc	r12, r16
    77ce:	d1 1e       	adc	r13, r17
    77d0:	ca 01       	movw	r24, r20
    77d2:	aa 27       	eor	r26, r26
    77d4:	bb 27       	eor	r27, r27
    77d6:	bc 01       	movw	r22, r24
    77d8:	cd 01       	movw	r24, r26
    77da:	6a 0d       	add	r22, r10
    77dc:	7b 1d       	adc	r23, r11
    77de:	8c 1d       	adc	r24, r12
    77e0:	9d 1d       	adc	r25, r13
    77e2:	69 8c       	ldd	r6, Y+25	; 0x19
    77e4:	7a 8c       	ldd	r7, Y+26	; 0x1a
    77e6:	8b 8c       	ldd	r8, Y+27	; 0x1b
    77e8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    77ea:	66 16       	cp	r6, r22
    77ec:	77 06       	cpc	r7, r23
    77ee:	88 06       	cpc	r8, r24
    77f0:	99 06       	cpc	r9, r25
    77f2:	40 f1       	brcs	.+80     	; 0x7844 <__udivdi3+0xc62>
    77f4:	66 15       	cp	r22, r6
    77f6:	77 05       	cpc	r23, r7
    77f8:	88 05       	cpc	r24, r8
    77fa:	99 05       	cpc	r25, r9
    77fc:	09 f0       	breq	.+2      	; 0x7800 <__udivdi3+0xc1e>
    77fe:	43 c0       	rjmp	.+134    	; 0x7886 <__udivdi3+0xca4>
    7800:	d9 01       	movw	r26, r18
    7802:	99 27       	eor	r25, r25
    7804:	88 27       	eor	r24, r24
    7806:	69 96       	adiw	r28, 0x19	; 25
    7808:	2c ad       	ldd	r18, Y+60	; 0x3c
    780a:	3d ad       	ldd	r19, Y+61	; 0x3d
    780c:	4e ad       	ldd	r20, Y+62	; 0x3e
    780e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7810:	69 97       	sbiw	r28, 0x19	; 25
    7812:	40 70       	andi	r20, 0x00	; 0
    7814:	50 70       	andi	r21, 0x00	; 0
    7816:	82 0f       	add	r24, r18
    7818:	93 1f       	adc	r25, r19
    781a:	a4 1f       	adc	r26, r20
    781c:	b5 1f       	adc	r27, r21
    781e:	2d a5       	ldd	r18, Y+45	; 0x2d
    7820:	3e a5       	ldd	r19, Y+46	; 0x2e
    7822:	4f a5       	ldd	r20, Y+47	; 0x2f
    7824:	58 a9       	ldd	r21, Y+48	; 0x30
    7826:	6e 96       	adiw	r28, 0x1e	; 30
    7828:	0f ac       	ldd	r0, Y+63	; 0x3f
    782a:	6e 97       	sbiw	r28, 0x1e	; 30
    782c:	04 c0       	rjmp	.+8      	; 0x7836 <__udivdi3+0xc54>
    782e:	22 0f       	add	r18, r18
    7830:	33 1f       	adc	r19, r19
    7832:	44 1f       	adc	r20, r20
    7834:	55 1f       	adc	r21, r21
    7836:	0a 94       	dec	r0
    7838:	d2 f7       	brpl	.-12     	; 0x782e <__udivdi3+0xc4c>
    783a:	28 17       	cp	r18, r24
    783c:	39 07       	cpc	r19, r25
    783e:	4a 07       	cpc	r20, r26
    7840:	5b 07       	cpc	r21, r27
    7842:	08 f5       	brcc	.+66     	; 0x7886 <__udivdi3+0xca4>
    7844:	09 a9       	ldd	r16, Y+49	; 0x31
    7846:	1a a9       	ldd	r17, Y+50	; 0x32
    7848:	2b a9       	ldd	r18, Y+51	; 0x33
    784a:	3c a9       	ldd	r19, Y+52	; 0x34
    784c:	01 50       	subi	r16, 0x01	; 1
    784e:	10 40       	sbci	r17, 0x00	; 0
    7850:	20 40       	sbci	r18, 0x00	; 0
    7852:	30 40       	sbci	r19, 0x00	; 0
    7854:	09 ab       	std	Y+49, r16	; 0x31
    7856:	1a ab       	std	Y+50, r17	; 0x32
    7858:	2b ab       	std	Y+51, r18	; 0x33
    785a:	3c ab       	std	Y+52, r19	; 0x34
    785c:	14 c0       	rjmp	.+40     	; 0x7886 <__udivdi3+0xca4>
    785e:	66 24       	eor	r6, r6
    7860:	77 24       	eor	r7, r7
    7862:	43 01       	movw	r8, r6
    7864:	21 e0       	ldi	r18, 0x01	; 1
    7866:	30 e0       	ldi	r19, 0x00	; 0
    7868:	40 e0       	ldi	r20, 0x00	; 0
    786a:	50 e0       	ldi	r21, 0x00	; 0
    786c:	29 ab       	std	Y+49, r18	; 0x31
    786e:	3a ab       	std	Y+50, r19	; 0x32
    7870:	4b ab       	std	Y+51, r20	; 0x33
    7872:	5c ab       	std	Y+52, r21	; 0x34
    7874:	0b c0       	rjmp	.+22     	; 0x788c <__udivdi3+0xcaa>
    7876:	66 24       	eor	r6, r6
    7878:	77 24       	eor	r7, r7
    787a:	43 01       	movw	r8, r6
    787c:	19 aa       	std	Y+49, r1	; 0x31
    787e:	1a aa       	std	Y+50, r1	; 0x32
    7880:	1b aa       	std	Y+51, r1	; 0x33
    7882:	1c aa       	std	Y+52, r1	; 0x34
    7884:	03 c0       	rjmp	.+6      	; 0x788c <__udivdi3+0xcaa>
    7886:	66 24       	eor	r6, r6
    7888:	77 24       	eor	r7, r7
    788a:	43 01       	movw	r8, r6
    788c:	fe 01       	movw	r30, r28
    788e:	71 96       	adiw	r30, 0x11	; 17
    7890:	88 e0       	ldi	r24, 0x08	; 8
    7892:	df 01       	movw	r26, r30
    7894:	1d 92       	st	X+, r1
    7896:	8a 95       	dec	r24
    7898:	e9 f7       	brne	.-6      	; 0x7894 <__udivdi3+0xcb2>
    789a:	a9 a8       	ldd	r10, Y+49	; 0x31
    789c:	ba a8       	ldd	r11, Y+50	; 0x32
    789e:	cb a8       	ldd	r12, Y+51	; 0x33
    78a0:	dc a8       	ldd	r13, Y+52	; 0x34
    78a2:	a9 8a       	std	Y+17, r10	; 0x11
    78a4:	ba 8a       	std	Y+18, r11	; 0x12
    78a6:	cb 8a       	std	Y+19, r12	; 0x13
    78a8:	dc 8a       	std	Y+20, r13	; 0x14
    78aa:	6d 8a       	std	Y+21, r6	; 0x15
    78ac:	7e 8a       	std	Y+22, r7	; 0x16
    78ae:	8f 8a       	std	Y+23, r8	; 0x17
    78b0:	98 8e       	std	Y+24, r9	; 0x18
    78b2:	29 a9       	ldd	r18, Y+49	; 0x31
    78b4:	3a 89       	ldd	r19, Y+18	; 0x12
    78b6:	4b 89       	ldd	r20, Y+19	; 0x13
    78b8:	5c 89       	ldd	r21, Y+20	; 0x14
    78ba:	66 2d       	mov	r22, r6
    78bc:	7e 89       	ldd	r23, Y+22	; 0x16
    78be:	8f 89       	ldd	r24, Y+23	; 0x17
    78c0:	98 8d       	ldd	r25, Y+24	; 0x18
    78c2:	c2 5a       	subi	r28, 0xA2	; 162
    78c4:	df 4f       	sbci	r29, 0xFF	; 255
    78c6:	e2 e1       	ldi	r30, 0x12	; 18
    78c8:	0c 94 a0 44 	jmp	0x8940	; 0x8940 <__epilogue_restores__>

000078cc <vfprintf>:
    78cc:	2f 92       	push	r2
    78ce:	3f 92       	push	r3
    78d0:	4f 92       	push	r4
    78d2:	5f 92       	push	r5
    78d4:	6f 92       	push	r6
    78d6:	7f 92       	push	r7
    78d8:	8f 92       	push	r8
    78da:	9f 92       	push	r9
    78dc:	af 92       	push	r10
    78de:	bf 92       	push	r11
    78e0:	cf 92       	push	r12
    78e2:	df 92       	push	r13
    78e4:	ef 92       	push	r14
    78e6:	ff 92       	push	r15
    78e8:	0f 93       	push	r16
    78ea:	1f 93       	push	r17
    78ec:	df 93       	push	r29
    78ee:	cf 93       	push	r28
    78f0:	cd b7       	in	r28, 0x3d	; 61
    78f2:	de b7       	in	r29, 0x3e	; 62
    78f4:	61 97       	sbiw	r28, 0x11	; 17
    78f6:	cd bf       	out	0x3d, r28	; 61
    78f8:	de bf       	out	0x3e, r29	; 62
    78fa:	3c 01       	movw	r6, r24
    78fc:	6e 87       	std	Y+14, r22	; 0x0e
    78fe:	7f 87       	std	Y+15, r23	; 0x0f
    7900:	6a 01       	movw	r12, r20
    7902:	fc 01       	movw	r30, r24
    7904:	16 82       	std	Z+6, r1	; 0x06
    7906:	17 82       	std	Z+7, r1	; 0x07
    7908:	83 81       	ldd	r24, Z+3	; 0x03
    790a:	81 fd       	sbrc	r24, 1
    790c:	03 c0       	rjmp	.+6      	; 0x7914 <vfprintf+0x48>
    790e:	6f ef       	ldi	r22, 0xFF	; 255
    7910:	7f ef       	ldi	r23, 0xFF	; 255
    7912:	6f c3       	rjmp	.+1758   	; 0x7ff2 <vfprintf+0x726>
    7914:	9e 01       	movw	r18, r28
    7916:	2f 5f       	subi	r18, 0xFF	; 255
    7918:	3f 4f       	sbci	r19, 0xFF	; 255
    791a:	28 8b       	std	Y+16, r18	; 0x10
    791c:	39 8b       	std	Y+17, r19	; 0x11
    791e:	f3 01       	movw	r30, r6
    7920:	23 81       	ldd	r18, Z+3	; 0x03
    7922:	ee 85       	ldd	r30, Y+14	; 0x0e
    7924:	ff 85       	ldd	r31, Y+15	; 0x0f
    7926:	23 fd       	sbrc	r18, 3
    7928:	85 91       	lpm	r24, Z+
    792a:	23 ff       	sbrs	r18, 3
    792c:	81 91       	ld	r24, Z+
    792e:	ee 87       	std	Y+14, r30	; 0x0e
    7930:	ff 87       	std	Y+15, r31	; 0x0f
    7932:	88 23       	and	r24, r24
    7934:	09 f4       	brne	.+2      	; 0x7938 <vfprintf+0x6c>
    7936:	5a c3       	rjmp	.+1716   	; 0x7fec <vfprintf+0x720>
    7938:	85 32       	cpi	r24, 0x25	; 37
    793a:	51 f4       	brne	.+20     	; 0x7950 <vfprintf+0x84>
    793c:	ee 85       	ldd	r30, Y+14	; 0x0e
    793e:	ff 85       	ldd	r31, Y+15	; 0x0f
    7940:	23 fd       	sbrc	r18, 3
    7942:	85 91       	lpm	r24, Z+
    7944:	23 ff       	sbrs	r18, 3
    7946:	81 91       	ld	r24, Z+
    7948:	ee 87       	std	Y+14, r30	; 0x0e
    794a:	ff 87       	std	Y+15, r31	; 0x0f
    794c:	85 32       	cpi	r24, 0x25	; 37
    794e:	29 f4       	brne	.+10     	; 0x795a <vfprintf+0x8e>
    7950:	90 e0       	ldi	r25, 0x00	; 0
    7952:	b3 01       	movw	r22, r6
    7954:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7958:	e2 cf       	rjmp	.-60     	; 0x791e <vfprintf+0x52>
    795a:	98 2f       	mov	r25, r24
    795c:	10 e0       	ldi	r17, 0x00	; 0
    795e:	88 24       	eor	r8, r8
    7960:	99 24       	eor	r9, r9
    7962:	10 32       	cpi	r17, 0x20	; 32
    7964:	b0 f4       	brcc	.+44     	; 0x7992 <vfprintf+0xc6>
    7966:	9b 32       	cpi	r25, 0x2B	; 43
    7968:	69 f0       	breq	.+26     	; 0x7984 <vfprintf+0xb8>
    796a:	9c 32       	cpi	r25, 0x2C	; 44
    796c:	28 f4       	brcc	.+10     	; 0x7978 <vfprintf+0xac>
    796e:	90 32       	cpi	r25, 0x20	; 32
    7970:	51 f0       	breq	.+20     	; 0x7986 <vfprintf+0xba>
    7972:	93 32       	cpi	r25, 0x23	; 35
    7974:	71 f4       	brne	.+28     	; 0x7992 <vfprintf+0xc6>
    7976:	0b c0       	rjmp	.+22     	; 0x798e <vfprintf+0xc2>
    7978:	9d 32       	cpi	r25, 0x2D	; 45
    797a:	39 f0       	breq	.+14     	; 0x798a <vfprintf+0xbe>
    797c:	90 33       	cpi	r25, 0x30	; 48
    797e:	49 f4       	brne	.+18     	; 0x7992 <vfprintf+0xc6>
    7980:	11 60       	ori	r17, 0x01	; 1
    7982:	28 c0       	rjmp	.+80     	; 0x79d4 <vfprintf+0x108>
    7984:	12 60       	ori	r17, 0x02	; 2
    7986:	14 60       	ori	r17, 0x04	; 4
    7988:	25 c0       	rjmp	.+74     	; 0x79d4 <vfprintf+0x108>
    798a:	18 60       	ori	r17, 0x08	; 8
    798c:	23 c0       	rjmp	.+70     	; 0x79d4 <vfprintf+0x108>
    798e:	10 61       	ori	r17, 0x10	; 16
    7990:	21 c0       	rjmp	.+66     	; 0x79d4 <vfprintf+0x108>
    7992:	17 fd       	sbrc	r17, 7
    7994:	2a c0       	rjmp	.+84     	; 0x79ea <vfprintf+0x11e>
    7996:	89 2f       	mov	r24, r25
    7998:	80 53       	subi	r24, 0x30	; 48
    799a:	8a 30       	cpi	r24, 0x0A	; 10
    799c:	78 f4       	brcc	.+30     	; 0x79bc <vfprintf+0xf0>
    799e:	16 ff       	sbrs	r17, 6
    79a0:	06 c0       	rjmp	.+12     	; 0x79ae <vfprintf+0xe2>
    79a2:	fa e0       	ldi	r31, 0x0A	; 10
    79a4:	9f 9e       	mul	r9, r31
    79a6:	90 2c       	mov	r9, r0
    79a8:	11 24       	eor	r1, r1
    79aa:	98 0e       	add	r9, r24
    79ac:	13 c0       	rjmp	.+38     	; 0x79d4 <vfprintf+0x108>
    79ae:	3a e0       	ldi	r19, 0x0A	; 10
    79b0:	83 9e       	mul	r8, r19
    79b2:	80 2c       	mov	r8, r0
    79b4:	11 24       	eor	r1, r1
    79b6:	88 0e       	add	r8, r24
    79b8:	10 62       	ori	r17, 0x20	; 32
    79ba:	0c c0       	rjmp	.+24     	; 0x79d4 <vfprintf+0x108>
    79bc:	9e 32       	cpi	r25, 0x2E	; 46
    79be:	21 f4       	brne	.+8      	; 0x79c8 <vfprintf+0xfc>
    79c0:	16 fd       	sbrc	r17, 6
    79c2:	14 c3       	rjmp	.+1576   	; 0x7fec <vfprintf+0x720>
    79c4:	10 64       	ori	r17, 0x40	; 64
    79c6:	06 c0       	rjmp	.+12     	; 0x79d4 <vfprintf+0x108>
    79c8:	9c 36       	cpi	r25, 0x6C	; 108
    79ca:	11 f4       	brne	.+4      	; 0x79d0 <vfprintf+0x104>
    79cc:	10 68       	ori	r17, 0x80	; 128
    79ce:	02 c0       	rjmp	.+4      	; 0x79d4 <vfprintf+0x108>
    79d0:	98 36       	cpi	r25, 0x68	; 104
    79d2:	59 f4       	brne	.+22     	; 0x79ea <vfprintf+0x11e>
    79d4:	ee 85       	ldd	r30, Y+14	; 0x0e
    79d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    79d8:	23 fd       	sbrc	r18, 3
    79da:	95 91       	lpm	r25, Z+
    79dc:	23 ff       	sbrs	r18, 3
    79de:	91 91       	ld	r25, Z+
    79e0:	ee 87       	std	Y+14, r30	; 0x0e
    79e2:	ff 87       	std	Y+15, r31	; 0x0f
    79e4:	99 23       	and	r25, r25
    79e6:	09 f0       	breq	.+2      	; 0x79ea <vfprintf+0x11e>
    79e8:	bc cf       	rjmp	.-136    	; 0x7962 <vfprintf+0x96>
    79ea:	89 2f       	mov	r24, r25
    79ec:	85 54       	subi	r24, 0x45	; 69
    79ee:	83 30       	cpi	r24, 0x03	; 3
    79f0:	20 f4       	brcc	.+8      	; 0x79fa <vfprintf+0x12e>
    79f2:	81 2f       	mov	r24, r17
    79f4:	80 61       	ori	r24, 0x10	; 16
    79f6:	90 5e       	subi	r25, 0xE0	; 224
    79f8:	07 c0       	rjmp	.+14     	; 0x7a08 <vfprintf+0x13c>
    79fa:	89 2f       	mov	r24, r25
    79fc:	85 56       	subi	r24, 0x65	; 101
    79fe:	83 30       	cpi	r24, 0x03	; 3
    7a00:	08 f0       	brcs	.+2      	; 0x7a04 <vfprintf+0x138>
    7a02:	9f c1       	rjmp	.+830    	; 0x7d42 <vfprintf+0x476>
    7a04:	81 2f       	mov	r24, r17
    7a06:	8f 7e       	andi	r24, 0xEF	; 239
    7a08:	86 fd       	sbrc	r24, 6
    7a0a:	02 c0       	rjmp	.+4      	; 0x7a10 <vfprintf+0x144>
    7a0c:	76 e0       	ldi	r23, 0x06	; 6
    7a0e:	97 2e       	mov	r9, r23
    7a10:	6f e3       	ldi	r22, 0x3F	; 63
    7a12:	f6 2e       	mov	r15, r22
    7a14:	f8 22       	and	r15, r24
    7a16:	95 36       	cpi	r25, 0x65	; 101
    7a18:	19 f4       	brne	.+6      	; 0x7a20 <vfprintf+0x154>
    7a1a:	f0 e4       	ldi	r31, 0x40	; 64
    7a1c:	ff 2a       	or	r15, r31
    7a1e:	07 c0       	rjmp	.+14     	; 0x7a2e <vfprintf+0x162>
    7a20:	96 36       	cpi	r25, 0x66	; 102
    7a22:	19 f4       	brne	.+6      	; 0x7a2a <vfprintf+0x15e>
    7a24:	20 e8       	ldi	r18, 0x80	; 128
    7a26:	f2 2a       	or	r15, r18
    7a28:	02 c0       	rjmp	.+4      	; 0x7a2e <vfprintf+0x162>
    7a2a:	91 10       	cpse	r9, r1
    7a2c:	9a 94       	dec	r9
    7a2e:	f7 fe       	sbrs	r15, 7
    7a30:	0a c0       	rjmp	.+20     	; 0x7a46 <vfprintf+0x17a>
    7a32:	3b e3       	ldi	r19, 0x3B	; 59
    7a34:	39 15       	cp	r19, r9
    7a36:	18 f4       	brcc	.+6      	; 0x7a3e <vfprintf+0x172>
    7a38:	5c e3       	ldi	r21, 0x3C	; 60
    7a3a:	b5 2e       	mov	r11, r21
    7a3c:	02 c0       	rjmp	.+4      	; 0x7a42 <vfprintf+0x176>
    7a3e:	b9 2c       	mov	r11, r9
    7a40:	b3 94       	inc	r11
    7a42:	27 e0       	ldi	r18, 0x07	; 7
    7a44:	09 c0       	rjmp	.+18     	; 0x7a58 <vfprintf+0x18c>
    7a46:	47 e0       	ldi	r20, 0x07	; 7
    7a48:	49 15       	cp	r20, r9
    7a4a:	20 f4       	brcc	.+8      	; 0x7a54 <vfprintf+0x188>
    7a4c:	bb 24       	eor	r11, r11
    7a4e:	47 e0       	ldi	r20, 0x07	; 7
    7a50:	94 2e       	mov	r9, r20
    7a52:	f7 cf       	rjmp	.-18     	; 0x7a42 <vfprintf+0x176>
    7a54:	29 2d       	mov	r18, r9
    7a56:	bb 24       	eor	r11, r11
    7a58:	c6 01       	movw	r24, r12
    7a5a:	04 96       	adiw	r24, 0x04	; 4
    7a5c:	8c 87       	std	Y+12, r24	; 0x0c
    7a5e:	9d 87       	std	Y+13, r25	; 0x0d
    7a60:	f6 01       	movw	r30, r12
    7a62:	60 81       	ld	r22, Z
    7a64:	71 81       	ldd	r23, Z+1	; 0x01
    7a66:	82 81       	ldd	r24, Z+2	; 0x02
    7a68:	93 81       	ldd	r25, Z+3	; 0x03
    7a6a:	ae 01       	movw	r20, r28
    7a6c:	4f 5f       	subi	r20, 0xFF	; 255
    7a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7a70:	0b 2d       	mov	r16, r11
    7a72:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <__ftoa_engine>
    7a76:	6c 01       	movw	r12, r24
    7a78:	09 81       	ldd	r16, Y+1	; 0x01
    7a7a:	20 2e       	mov	r2, r16
    7a7c:	33 24       	eor	r3, r3
    7a7e:	00 ff       	sbrs	r16, 0
    7a80:	04 c0       	rjmp	.+8      	; 0x7a8a <vfprintf+0x1be>
    7a82:	03 fd       	sbrc	r16, 3
    7a84:	02 c0       	rjmp	.+4      	; 0x7a8a <vfprintf+0x1be>
    7a86:	1d e2       	ldi	r17, 0x2D	; 45
    7a88:	09 c0       	rjmp	.+18     	; 0x7a9c <vfprintf+0x1d0>
    7a8a:	f1 fe       	sbrs	r15, 1
    7a8c:	02 c0       	rjmp	.+4      	; 0x7a92 <vfprintf+0x1c6>
    7a8e:	1b e2       	ldi	r17, 0x2B	; 43
    7a90:	05 c0       	rjmp	.+10     	; 0x7a9c <vfprintf+0x1d0>
    7a92:	f2 fc       	sbrc	r15, 2
    7a94:	02 c0       	rjmp	.+4      	; 0x7a9a <vfprintf+0x1ce>
    7a96:	10 e0       	ldi	r17, 0x00	; 0
    7a98:	01 c0       	rjmp	.+2      	; 0x7a9c <vfprintf+0x1d0>
    7a9a:	10 e2       	ldi	r17, 0x20	; 32
    7a9c:	c1 01       	movw	r24, r2
    7a9e:	8c 70       	andi	r24, 0x0C	; 12
    7aa0:	90 70       	andi	r25, 0x00	; 0
    7aa2:	89 2b       	or	r24, r25
    7aa4:	b9 f1       	breq	.+110    	; 0x7b14 <vfprintf+0x248>
    7aa6:	11 23       	and	r17, r17
    7aa8:	11 f4       	brne	.+4      	; 0x7aae <vfprintf+0x1e2>
    7aaa:	83 e0       	ldi	r24, 0x03	; 3
    7aac:	01 c0       	rjmp	.+2      	; 0x7ab0 <vfprintf+0x1e4>
    7aae:	84 e0       	ldi	r24, 0x04	; 4
    7ab0:	88 15       	cp	r24, r8
    7ab2:	10 f0       	brcs	.+4      	; 0x7ab8 <vfprintf+0x1ec>
    7ab4:	88 24       	eor	r8, r8
    7ab6:	0a c0       	rjmp	.+20     	; 0x7acc <vfprintf+0x200>
    7ab8:	88 1a       	sub	r8, r24
    7aba:	f3 fc       	sbrc	r15, 3
    7abc:	07 c0       	rjmp	.+14     	; 0x7acc <vfprintf+0x200>
    7abe:	80 e2       	ldi	r24, 0x20	; 32
    7ac0:	90 e0       	ldi	r25, 0x00	; 0
    7ac2:	b3 01       	movw	r22, r6
    7ac4:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7ac8:	8a 94       	dec	r8
    7aca:	c9 f7       	brne	.-14     	; 0x7abe <vfprintf+0x1f2>
    7acc:	11 23       	and	r17, r17
    7ace:	29 f0       	breq	.+10     	; 0x7ada <vfprintf+0x20e>
    7ad0:	81 2f       	mov	r24, r17
    7ad2:	90 e0       	ldi	r25, 0x00	; 0
    7ad4:	b3 01       	movw	r22, r6
    7ad6:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7ada:	23 fe       	sbrs	r2, 3
    7adc:	03 c0       	rjmp	.+6      	; 0x7ae4 <vfprintf+0x218>
    7ade:	03 e3       	ldi	r16, 0x33	; 51
    7ae0:	12 e0       	ldi	r17, 0x02	; 2
    7ae2:	0e c0       	rjmp	.+28     	; 0x7b00 <vfprintf+0x234>
    7ae4:	07 e3       	ldi	r16, 0x37	; 55
    7ae6:	12 e0       	ldi	r17, 0x02	; 2
    7ae8:	0b c0       	rjmp	.+22     	; 0x7b00 <vfprintf+0x234>
    7aea:	e1 14       	cp	r14, r1
    7aec:	f1 04       	cpc	r15, r1
    7aee:	09 f0       	breq	.+2      	; 0x7af2 <vfprintf+0x226>
    7af0:	80 52       	subi	r24, 0x20	; 32
    7af2:	90 e0       	ldi	r25, 0x00	; 0
    7af4:	b3 01       	movw	r22, r6
    7af6:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7afa:	0f 5f       	subi	r16, 0xFF	; 255
    7afc:	1f 4f       	sbci	r17, 0xFF	; 255
    7afe:	05 c0       	rjmp	.+10     	; 0x7b0a <vfprintf+0x23e>
    7b00:	ef 2c       	mov	r14, r15
    7b02:	ff 24       	eor	r15, r15
    7b04:	f0 e1       	ldi	r31, 0x10	; 16
    7b06:	ef 22       	and	r14, r31
    7b08:	ff 24       	eor	r15, r15
    7b0a:	f8 01       	movw	r30, r16
    7b0c:	84 91       	lpm	r24, Z+
    7b0e:	88 23       	and	r24, r24
    7b10:	61 f7       	brne	.-40     	; 0x7aea <vfprintf+0x21e>
    7b12:	14 c1       	rjmp	.+552    	; 0x7d3c <vfprintf+0x470>
    7b14:	f7 fe       	sbrs	r15, 7
    7b16:	12 c0       	rjmp	.+36     	; 0x7b3c <vfprintf+0x270>
    7b18:	bc 0c       	add	r11, r12
    7b1a:	24 fe       	sbrs	r2, 4
    7b1c:	04 c0       	rjmp	.+8      	; 0x7b26 <vfprintf+0x25a>
    7b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b20:	81 33       	cpi	r24, 0x31	; 49
    7b22:	09 f4       	brne	.+2      	; 0x7b26 <vfprintf+0x25a>
    7b24:	ba 94       	dec	r11
    7b26:	1b 14       	cp	r1, r11
    7b28:	1c f0       	brlt	.+6      	; 0x7b30 <vfprintf+0x264>
    7b2a:	bb 24       	eor	r11, r11
    7b2c:	b3 94       	inc	r11
    7b2e:	2d c0       	rjmp	.+90     	; 0x7b8a <vfprintf+0x2be>
    7b30:	f8 e0       	ldi	r31, 0x08	; 8
    7b32:	fb 15       	cp	r31, r11
    7b34:	50 f5       	brcc	.+84     	; 0x7b8a <vfprintf+0x2be>
    7b36:	38 e0       	ldi	r19, 0x08	; 8
    7b38:	b3 2e       	mov	r11, r19
    7b3a:	27 c0       	rjmp	.+78     	; 0x7b8a <vfprintf+0x2be>
    7b3c:	f6 fc       	sbrc	r15, 6
    7b3e:	25 c0       	rjmp	.+74     	; 0x7b8a <vfprintf+0x2be>
    7b40:	89 2d       	mov	r24, r9
    7b42:	90 e0       	ldi	r25, 0x00	; 0
    7b44:	8c 15       	cp	r24, r12
    7b46:	9d 05       	cpc	r25, r13
    7b48:	4c f0       	brlt	.+18     	; 0x7b5c <vfprintf+0x290>
    7b4a:	2c ef       	ldi	r18, 0xFC	; 252
    7b4c:	c2 16       	cp	r12, r18
    7b4e:	2f ef       	ldi	r18, 0xFF	; 255
    7b50:	d2 06       	cpc	r13, r18
    7b52:	24 f0       	brlt	.+8      	; 0x7b5c <vfprintf+0x290>
    7b54:	30 e8       	ldi	r19, 0x80	; 128
    7b56:	f3 2a       	or	r15, r19
    7b58:	01 c0       	rjmp	.+2      	; 0x7b5c <vfprintf+0x290>
    7b5a:	9a 94       	dec	r9
    7b5c:	99 20       	and	r9, r9
    7b5e:	49 f0       	breq	.+18     	; 0x7b72 <vfprintf+0x2a6>
    7b60:	e2 e0       	ldi	r30, 0x02	; 2
    7b62:	f0 e0       	ldi	r31, 0x00	; 0
    7b64:	ec 0f       	add	r30, r28
    7b66:	fd 1f       	adc	r31, r29
    7b68:	e9 0d       	add	r30, r9
    7b6a:	f1 1d       	adc	r31, r1
    7b6c:	80 81       	ld	r24, Z
    7b6e:	80 33       	cpi	r24, 0x30	; 48
    7b70:	a1 f3       	breq	.-24     	; 0x7b5a <vfprintf+0x28e>
    7b72:	f7 fe       	sbrs	r15, 7
    7b74:	0a c0       	rjmp	.+20     	; 0x7b8a <vfprintf+0x2be>
    7b76:	b9 2c       	mov	r11, r9
    7b78:	b3 94       	inc	r11
    7b7a:	89 2d       	mov	r24, r9
    7b7c:	90 e0       	ldi	r25, 0x00	; 0
    7b7e:	c8 16       	cp	r12, r24
    7b80:	d9 06       	cpc	r13, r25
    7b82:	14 f0       	brlt	.+4      	; 0x7b88 <vfprintf+0x2bc>
    7b84:	99 24       	eor	r9, r9
    7b86:	01 c0       	rjmp	.+2      	; 0x7b8a <vfprintf+0x2be>
    7b88:	9c 18       	sub	r9, r12
    7b8a:	f7 fc       	sbrc	r15, 7
    7b8c:	03 c0       	rjmp	.+6      	; 0x7b94 <vfprintf+0x2c8>
    7b8e:	25 e0       	ldi	r18, 0x05	; 5
    7b90:	30 e0       	ldi	r19, 0x00	; 0
    7b92:	09 c0       	rjmp	.+18     	; 0x7ba6 <vfprintf+0x2da>
    7b94:	1c 14       	cp	r1, r12
    7b96:	1d 04       	cpc	r1, r13
    7b98:	1c f0       	brlt	.+6      	; 0x7ba0 <vfprintf+0x2d4>
    7b9a:	21 e0       	ldi	r18, 0x01	; 1
    7b9c:	30 e0       	ldi	r19, 0x00	; 0
    7b9e:	03 c0       	rjmp	.+6      	; 0x7ba6 <vfprintf+0x2da>
    7ba0:	96 01       	movw	r18, r12
    7ba2:	2f 5f       	subi	r18, 0xFF	; 255
    7ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba6:	11 23       	and	r17, r17
    7ba8:	11 f0       	breq	.+4      	; 0x7bae <vfprintf+0x2e2>
    7baa:	2f 5f       	subi	r18, 0xFF	; 255
    7bac:	3f 4f       	sbci	r19, 0xFF	; 255
    7bae:	99 20       	and	r9, r9
    7bb0:	29 f0       	breq	.+10     	; 0x7bbc <vfprintf+0x2f0>
    7bb2:	89 2d       	mov	r24, r9
    7bb4:	90 e0       	ldi	r25, 0x00	; 0
    7bb6:	01 96       	adiw	r24, 0x01	; 1
    7bb8:	28 0f       	add	r18, r24
    7bba:	39 1f       	adc	r19, r25
    7bbc:	88 2d       	mov	r24, r8
    7bbe:	90 e0       	ldi	r25, 0x00	; 0
    7bc0:	28 17       	cp	r18, r24
    7bc2:	39 07       	cpc	r19, r25
    7bc4:	14 f0       	brlt	.+4      	; 0x7bca <vfprintf+0x2fe>
    7bc6:	88 24       	eor	r8, r8
    7bc8:	01 c0       	rjmp	.+2      	; 0x7bcc <vfprintf+0x300>
    7bca:	82 1a       	sub	r8, r18
    7bcc:	4f 2c       	mov	r4, r15
    7bce:	55 24       	eor	r5, r5
    7bd0:	c2 01       	movw	r24, r4
    7bd2:	89 70       	andi	r24, 0x09	; 9
    7bd4:	90 70       	andi	r25, 0x00	; 0
    7bd6:	89 2b       	or	r24, r25
    7bd8:	39 f0       	breq	.+14     	; 0x7be8 <vfprintf+0x31c>
    7bda:	08 c0       	rjmp	.+16     	; 0x7bec <vfprintf+0x320>
    7bdc:	80 e2       	ldi	r24, 0x20	; 32
    7bde:	90 e0       	ldi	r25, 0x00	; 0
    7be0:	b3 01       	movw	r22, r6
    7be2:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7be6:	8a 94       	dec	r8
    7be8:	88 20       	and	r8, r8
    7bea:	c1 f7       	brne	.-16     	; 0x7bdc <vfprintf+0x310>
    7bec:	11 23       	and	r17, r17
    7bee:	29 f0       	breq	.+10     	; 0x7bfa <vfprintf+0x32e>
    7bf0:	81 2f       	mov	r24, r17
    7bf2:	90 e0       	ldi	r25, 0x00	; 0
    7bf4:	b3 01       	movw	r22, r6
    7bf6:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7bfa:	43 fe       	sbrs	r4, 3
    7bfc:	07 c0       	rjmp	.+14     	; 0x7c0c <vfprintf+0x340>
    7bfe:	08 c0       	rjmp	.+16     	; 0x7c10 <vfprintf+0x344>
    7c00:	80 e3       	ldi	r24, 0x30	; 48
    7c02:	90 e0       	ldi	r25, 0x00	; 0
    7c04:	b3 01       	movw	r22, r6
    7c06:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7c0a:	8a 94       	dec	r8
    7c0c:	88 20       	and	r8, r8
    7c0e:	c1 f7       	brne	.-16     	; 0x7c00 <vfprintf+0x334>
    7c10:	f7 fe       	sbrs	r15, 7
    7c12:	46 c0       	rjmp	.+140    	; 0x7ca0 <vfprintf+0x3d4>
    7c14:	86 01       	movw	r16, r12
    7c16:	d7 fe       	sbrs	r13, 7
    7c18:	02 c0       	rjmp	.+4      	; 0x7c1e <vfprintf+0x352>
    7c1a:	00 e0       	ldi	r16, 0x00	; 0
    7c1c:	10 e0       	ldi	r17, 0x00	; 0
    7c1e:	76 01       	movw	r14, r12
    7c20:	08 94       	sec
    7c22:	e1 1c       	adc	r14, r1
    7c24:	f1 1c       	adc	r15, r1
    7c26:	e0 1a       	sub	r14, r16
    7c28:	f1 0a       	sbc	r15, r17
    7c2a:	41 e0       	ldi	r20, 0x01	; 1
    7c2c:	50 e0       	ldi	r21, 0x00	; 0
    7c2e:	4c 0f       	add	r20, r28
    7c30:	5d 1f       	adc	r21, r29
    7c32:	e4 0e       	add	r14, r20
    7c34:	f5 1e       	adc	r15, r21
    7c36:	26 01       	movw	r4, r12
    7c38:	4b 18       	sub	r4, r11
    7c3a:	51 08       	sbc	r5, r1
    7c3c:	89 2d       	mov	r24, r9
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	aa 24       	eor	r10, r10
    7c42:	bb 24       	eor	r11, r11
    7c44:	a8 1a       	sub	r10, r24
    7c46:	b9 0a       	sbc	r11, r25
    7c48:	5f ef       	ldi	r21, 0xFF	; 255
    7c4a:	0f 3f       	cpi	r16, 0xFF	; 255
    7c4c:	15 07       	cpc	r17, r21
    7c4e:	29 f4       	brne	.+10     	; 0x7c5a <vfprintf+0x38e>
    7c50:	8e e2       	ldi	r24, 0x2E	; 46
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	b3 01       	movw	r22, r6
    7c56:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7c5a:	c0 16       	cp	r12, r16
    7c5c:	d1 06       	cpc	r13, r17
    7c5e:	34 f0       	brlt	.+12     	; 0x7c6c <vfprintf+0x3a0>
    7c60:	40 16       	cp	r4, r16
    7c62:	51 06       	cpc	r5, r17
    7c64:	1c f4       	brge	.+6      	; 0x7c6c <vfprintf+0x3a0>
    7c66:	f7 01       	movw	r30, r14
    7c68:	80 81       	ld	r24, Z
    7c6a:	01 c0       	rjmp	.+2      	; 0x7c6e <vfprintf+0x3a2>
    7c6c:	80 e3       	ldi	r24, 0x30	; 48
    7c6e:	01 50       	subi	r16, 0x01	; 1
    7c70:	10 40       	sbci	r17, 0x00	; 0
    7c72:	08 94       	sec
    7c74:	e1 1c       	adc	r14, r1
    7c76:	f1 1c       	adc	r15, r1
    7c78:	0a 15       	cp	r16, r10
    7c7a:	1b 05       	cpc	r17, r11
    7c7c:	2c f0       	brlt	.+10     	; 0x7c88 <vfprintf+0x3bc>
    7c7e:	90 e0       	ldi	r25, 0x00	; 0
    7c80:	b3 01       	movw	r22, r6
    7c82:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7c86:	e0 cf       	rjmp	.-64     	; 0x7c48 <vfprintf+0x37c>
    7c88:	0c 15       	cp	r16, r12
    7c8a:	1d 05       	cpc	r17, r13
    7c8c:	39 f4       	brne	.+14     	; 0x7c9c <vfprintf+0x3d0>
    7c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c90:	96 33       	cpi	r25, 0x36	; 54
    7c92:	18 f4       	brcc	.+6      	; 0x7c9a <vfprintf+0x3ce>
    7c94:	95 33       	cpi	r25, 0x35	; 53
    7c96:	11 f4       	brne	.+4      	; 0x7c9c <vfprintf+0x3d0>
    7c98:	24 fe       	sbrs	r2, 4
    7c9a:	81 e3       	ldi	r24, 0x31	; 49
    7c9c:	90 e0       	ldi	r25, 0x00	; 0
    7c9e:	4b c0       	rjmp	.+150    	; 0x7d36 <vfprintf+0x46a>
    7ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    7ca2:	81 33       	cpi	r24, 0x31	; 49
    7ca4:	09 f0       	breq	.+2      	; 0x7ca8 <vfprintf+0x3dc>
    7ca6:	0f 7e       	andi	r16, 0xEF	; 239
    7ca8:	90 e0       	ldi	r25, 0x00	; 0
    7caa:	b3 01       	movw	r22, r6
    7cac:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7cb0:	99 20       	and	r9, r9
    7cb2:	a1 f0       	breq	.+40     	; 0x7cdc <vfprintf+0x410>
    7cb4:	8e e2       	ldi	r24, 0x2E	; 46
    7cb6:	90 e0       	ldi	r25, 0x00	; 0
    7cb8:	b3 01       	movw	r22, r6
    7cba:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7cbe:	12 e0       	ldi	r17, 0x02	; 2
    7cc0:	e1 e0       	ldi	r30, 0x01	; 1
    7cc2:	f0 e0       	ldi	r31, 0x00	; 0
    7cc4:	ec 0f       	add	r30, r28
    7cc6:	fd 1f       	adc	r31, r29
    7cc8:	e1 0f       	add	r30, r17
    7cca:	f1 1d       	adc	r31, r1
    7ccc:	1f 5f       	subi	r17, 0xFF	; 255
    7cce:	80 81       	ld	r24, Z
    7cd0:	90 e0       	ldi	r25, 0x00	; 0
    7cd2:	b3 01       	movw	r22, r6
    7cd4:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7cd8:	9a 94       	dec	r9
    7cda:	91 f7       	brne	.-28     	; 0x7cc0 <vfprintf+0x3f4>
    7cdc:	44 fc       	sbrc	r4, 4
    7cde:	03 c0       	rjmp	.+6      	; 0x7ce6 <vfprintf+0x41a>
    7ce0:	85 e6       	ldi	r24, 0x65	; 101
    7ce2:	90 e0       	ldi	r25, 0x00	; 0
    7ce4:	02 c0       	rjmp	.+4      	; 0x7cea <vfprintf+0x41e>
    7ce6:	85 e4       	ldi	r24, 0x45	; 69
    7ce8:	90 e0       	ldi	r25, 0x00	; 0
    7cea:	b3 01       	movw	r22, r6
    7cec:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7cf0:	d7 fc       	sbrc	r13, 7
    7cf2:	05 c0       	rjmp	.+10     	; 0x7cfe <vfprintf+0x432>
    7cf4:	c1 14       	cp	r12, r1
    7cf6:	d1 04       	cpc	r13, r1
    7cf8:	41 f4       	brne	.+16     	; 0x7d0a <vfprintf+0x43e>
    7cfa:	04 ff       	sbrs	r16, 4
    7cfc:	06 c0       	rjmp	.+12     	; 0x7d0a <vfprintf+0x43e>
    7cfe:	d0 94       	com	r13
    7d00:	c1 94       	neg	r12
    7d02:	d1 08       	sbc	r13, r1
    7d04:	d3 94       	inc	r13
    7d06:	8d e2       	ldi	r24, 0x2D	; 45
    7d08:	01 c0       	rjmp	.+2      	; 0x7d0c <vfprintf+0x440>
    7d0a:	8b e2       	ldi	r24, 0x2B	; 43
    7d0c:	90 e0       	ldi	r25, 0x00	; 0
    7d0e:	b3 01       	movw	r22, r6
    7d10:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7d14:	80 e3       	ldi	r24, 0x30	; 48
    7d16:	05 c0       	rjmp	.+10     	; 0x7d22 <vfprintf+0x456>
    7d18:	8f 5f       	subi	r24, 0xFF	; 255
    7d1a:	26 ef       	ldi	r18, 0xF6	; 246
    7d1c:	3f ef       	ldi	r19, 0xFF	; 255
    7d1e:	c2 0e       	add	r12, r18
    7d20:	d3 1e       	adc	r13, r19
    7d22:	3a e0       	ldi	r19, 0x0A	; 10
    7d24:	c3 16       	cp	r12, r19
    7d26:	d1 04       	cpc	r13, r1
    7d28:	bc f7       	brge	.-18     	; 0x7d18 <vfprintf+0x44c>
    7d2a:	90 e0       	ldi	r25, 0x00	; 0
    7d2c:	b3 01       	movw	r22, r6
    7d2e:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7d32:	c6 01       	movw	r24, r12
    7d34:	c0 96       	adiw	r24, 0x30	; 48
    7d36:	b3 01       	movw	r22, r6
    7d38:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7d3c:	cc 84       	ldd	r12, Y+12	; 0x0c
    7d3e:	dd 84       	ldd	r13, Y+13	; 0x0d
    7d40:	52 c1       	rjmp	.+676    	; 0x7fe6 <vfprintf+0x71a>
    7d42:	93 36       	cpi	r25, 0x63	; 99
    7d44:	31 f0       	breq	.+12     	; 0x7d52 <vfprintf+0x486>
    7d46:	93 37       	cpi	r25, 0x73	; 115
    7d48:	99 f0       	breq	.+38     	; 0x7d70 <vfprintf+0x4a4>
    7d4a:	93 35       	cpi	r25, 0x53	; 83
    7d4c:	09 f0       	breq	.+2      	; 0x7d50 <vfprintf+0x484>
    7d4e:	59 c0       	rjmp	.+178    	; 0x7e02 <vfprintf+0x536>
    7d50:	23 c0       	rjmp	.+70     	; 0x7d98 <vfprintf+0x4cc>
    7d52:	f6 01       	movw	r30, r12
    7d54:	80 81       	ld	r24, Z
    7d56:	89 83       	std	Y+1, r24	; 0x01
    7d58:	5e 01       	movw	r10, r28
    7d5a:	08 94       	sec
    7d5c:	a1 1c       	adc	r10, r1
    7d5e:	b1 1c       	adc	r11, r1
    7d60:	22 e0       	ldi	r18, 0x02	; 2
    7d62:	30 e0       	ldi	r19, 0x00	; 0
    7d64:	c2 0e       	add	r12, r18
    7d66:	d3 1e       	adc	r13, r19
    7d68:	21 e0       	ldi	r18, 0x01	; 1
    7d6a:	e2 2e       	mov	r14, r18
    7d6c:	f1 2c       	mov	r15, r1
    7d6e:	12 c0       	rjmp	.+36     	; 0x7d94 <vfprintf+0x4c8>
    7d70:	f6 01       	movw	r30, r12
    7d72:	a0 80       	ld	r10, Z
    7d74:	b1 80       	ldd	r11, Z+1	; 0x01
    7d76:	16 fd       	sbrc	r17, 6
    7d78:	03 c0       	rjmp	.+6      	; 0x7d80 <vfprintf+0x4b4>
    7d7a:	6f ef       	ldi	r22, 0xFF	; 255
    7d7c:	7f ef       	ldi	r23, 0xFF	; 255
    7d7e:	02 c0       	rjmp	.+4      	; 0x7d84 <vfprintf+0x4b8>
    7d80:	69 2d       	mov	r22, r9
    7d82:	70 e0       	ldi	r23, 0x00	; 0
    7d84:	22 e0       	ldi	r18, 0x02	; 2
    7d86:	30 e0       	ldi	r19, 0x00	; 0
    7d88:	c2 0e       	add	r12, r18
    7d8a:	d3 1e       	adc	r13, r19
    7d8c:	c5 01       	movw	r24, r10
    7d8e:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <strnlen>
    7d92:	7c 01       	movw	r14, r24
    7d94:	1f 77       	andi	r17, 0x7F	; 127
    7d96:	13 c0       	rjmp	.+38     	; 0x7dbe <vfprintf+0x4f2>
    7d98:	f6 01       	movw	r30, r12
    7d9a:	a0 80       	ld	r10, Z
    7d9c:	b1 80       	ldd	r11, Z+1	; 0x01
    7d9e:	16 fd       	sbrc	r17, 6
    7da0:	03 c0       	rjmp	.+6      	; 0x7da8 <vfprintf+0x4dc>
    7da2:	6f ef       	ldi	r22, 0xFF	; 255
    7da4:	7f ef       	ldi	r23, 0xFF	; 255
    7da6:	02 c0       	rjmp	.+4      	; 0x7dac <vfprintf+0x4e0>
    7da8:	69 2d       	mov	r22, r9
    7daa:	70 e0       	ldi	r23, 0x00	; 0
    7dac:	22 e0       	ldi	r18, 0x02	; 2
    7dae:	30 e0       	ldi	r19, 0x00	; 0
    7db0:	c2 0e       	add	r12, r18
    7db2:	d3 1e       	adc	r13, r19
    7db4:	c5 01       	movw	r24, r10
    7db6:	0e 94 3f 47 	call	0x8e7e	; 0x8e7e <strnlen_P>
    7dba:	7c 01       	movw	r14, r24
    7dbc:	10 68       	ori	r17, 0x80	; 128
    7dbe:	13 ff       	sbrs	r17, 3
    7dc0:	07 c0       	rjmp	.+14     	; 0x7dd0 <vfprintf+0x504>
    7dc2:	1b c0       	rjmp	.+54     	; 0x7dfa <vfprintf+0x52e>
    7dc4:	80 e2       	ldi	r24, 0x20	; 32
    7dc6:	90 e0       	ldi	r25, 0x00	; 0
    7dc8:	b3 01       	movw	r22, r6
    7dca:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7dce:	8a 94       	dec	r8
    7dd0:	88 2d       	mov	r24, r8
    7dd2:	90 e0       	ldi	r25, 0x00	; 0
    7dd4:	e8 16       	cp	r14, r24
    7dd6:	f9 06       	cpc	r15, r25
    7dd8:	a8 f3       	brcs	.-22     	; 0x7dc4 <vfprintf+0x4f8>
    7dda:	0f c0       	rjmp	.+30     	; 0x7dfa <vfprintf+0x52e>
    7ddc:	f5 01       	movw	r30, r10
    7dde:	17 fd       	sbrc	r17, 7
    7de0:	85 91       	lpm	r24, Z+
    7de2:	17 ff       	sbrs	r17, 7
    7de4:	81 91       	ld	r24, Z+
    7de6:	5f 01       	movw	r10, r30
    7de8:	90 e0       	ldi	r25, 0x00	; 0
    7dea:	b3 01       	movw	r22, r6
    7dec:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7df0:	81 10       	cpse	r8, r1
    7df2:	8a 94       	dec	r8
    7df4:	08 94       	sec
    7df6:	e1 08       	sbc	r14, r1
    7df8:	f1 08       	sbc	r15, r1
    7dfa:	e1 14       	cp	r14, r1
    7dfc:	f1 04       	cpc	r15, r1
    7dfe:	71 f7       	brne	.-36     	; 0x7ddc <vfprintf+0x510>
    7e00:	f2 c0       	rjmp	.+484    	; 0x7fe6 <vfprintf+0x71a>
    7e02:	94 36       	cpi	r25, 0x64	; 100
    7e04:	11 f0       	breq	.+4      	; 0x7e0a <vfprintf+0x53e>
    7e06:	99 36       	cpi	r25, 0x69	; 105
    7e08:	89 f5       	brne	.+98     	; 0x7e6c <vfprintf+0x5a0>
    7e0a:	17 ff       	sbrs	r17, 7
    7e0c:	08 c0       	rjmp	.+16     	; 0x7e1e <vfprintf+0x552>
    7e0e:	f6 01       	movw	r30, r12
    7e10:	20 81       	ld	r18, Z
    7e12:	31 81       	ldd	r19, Z+1	; 0x01
    7e14:	42 81       	ldd	r20, Z+2	; 0x02
    7e16:	53 81       	ldd	r21, Z+3	; 0x03
    7e18:	84 e0       	ldi	r24, 0x04	; 4
    7e1a:	90 e0       	ldi	r25, 0x00	; 0
    7e1c:	0a c0       	rjmp	.+20     	; 0x7e32 <vfprintf+0x566>
    7e1e:	f6 01       	movw	r30, r12
    7e20:	80 81       	ld	r24, Z
    7e22:	91 81       	ldd	r25, Z+1	; 0x01
    7e24:	9c 01       	movw	r18, r24
    7e26:	44 27       	eor	r20, r20
    7e28:	37 fd       	sbrc	r19, 7
    7e2a:	40 95       	com	r20
    7e2c:	54 2f       	mov	r21, r20
    7e2e:	82 e0       	ldi	r24, 0x02	; 2
    7e30:	90 e0       	ldi	r25, 0x00	; 0
    7e32:	c8 0e       	add	r12, r24
    7e34:	d9 1e       	adc	r13, r25
    7e36:	9f e6       	ldi	r25, 0x6F	; 111
    7e38:	f9 2e       	mov	r15, r25
    7e3a:	f1 22       	and	r15, r17
    7e3c:	57 ff       	sbrs	r21, 7
    7e3e:	09 c0       	rjmp	.+18     	; 0x7e52 <vfprintf+0x586>
    7e40:	50 95       	com	r21
    7e42:	40 95       	com	r20
    7e44:	30 95       	com	r19
    7e46:	21 95       	neg	r18
    7e48:	3f 4f       	sbci	r19, 0xFF	; 255
    7e4a:	4f 4f       	sbci	r20, 0xFF	; 255
    7e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    7e4e:	90 e8       	ldi	r25, 0x80	; 128
    7e50:	f9 2a       	or	r15, r25
    7e52:	ca 01       	movw	r24, r20
    7e54:	b9 01       	movw	r22, r18
    7e56:	ae 01       	movw	r20, r28
    7e58:	4f 5f       	subi	r20, 0xFF	; 255
    7e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    7e5c:	2a e0       	ldi	r18, 0x0A	; 10
    7e5e:	30 e0       	ldi	r19, 0x00	; 0
    7e60:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__ultoa_invert>
    7e64:	e8 2e       	mov	r14, r24
    7e66:	e8 89       	ldd	r30, Y+16	; 0x10
    7e68:	ee 1a       	sub	r14, r30
    7e6a:	41 c0       	rjmp	.+130    	; 0x7eee <vfprintf+0x622>
    7e6c:	95 37       	cpi	r25, 0x75	; 117
    7e6e:	21 f4       	brne	.+8      	; 0x7e78 <vfprintf+0x5ac>
    7e70:	1f 7e       	andi	r17, 0xEF	; 239
    7e72:	2a e0       	ldi	r18, 0x0A	; 10
    7e74:	30 e0       	ldi	r19, 0x00	; 0
    7e76:	1c c0       	rjmp	.+56     	; 0x7eb0 <vfprintf+0x5e4>
    7e78:	19 7f       	andi	r17, 0xF9	; 249
    7e7a:	9f 36       	cpi	r25, 0x6F	; 111
    7e7c:	61 f0       	breq	.+24     	; 0x7e96 <vfprintf+0x5ca>
    7e7e:	90 37       	cpi	r25, 0x70	; 112
    7e80:	20 f4       	brcc	.+8      	; 0x7e8a <vfprintf+0x5be>
    7e82:	98 35       	cpi	r25, 0x58	; 88
    7e84:	09 f0       	breq	.+2      	; 0x7e88 <vfprintf+0x5bc>
    7e86:	b2 c0       	rjmp	.+356    	; 0x7fec <vfprintf+0x720>
    7e88:	0f c0       	rjmp	.+30     	; 0x7ea8 <vfprintf+0x5dc>
    7e8a:	90 37       	cpi	r25, 0x70	; 112
    7e8c:	39 f0       	breq	.+14     	; 0x7e9c <vfprintf+0x5d0>
    7e8e:	98 37       	cpi	r25, 0x78	; 120
    7e90:	09 f0       	breq	.+2      	; 0x7e94 <vfprintf+0x5c8>
    7e92:	ac c0       	rjmp	.+344    	; 0x7fec <vfprintf+0x720>
    7e94:	04 c0       	rjmp	.+8      	; 0x7e9e <vfprintf+0x5d2>
    7e96:	28 e0       	ldi	r18, 0x08	; 8
    7e98:	30 e0       	ldi	r19, 0x00	; 0
    7e9a:	0a c0       	rjmp	.+20     	; 0x7eb0 <vfprintf+0x5e4>
    7e9c:	10 61       	ori	r17, 0x10	; 16
    7e9e:	14 fd       	sbrc	r17, 4
    7ea0:	14 60       	ori	r17, 0x04	; 4
    7ea2:	20 e1       	ldi	r18, 0x10	; 16
    7ea4:	30 e0       	ldi	r19, 0x00	; 0
    7ea6:	04 c0       	rjmp	.+8      	; 0x7eb0 <vfprintf+0x5e4>
    7ea8:	14 fd       	sbrc	r17, 4
    7eaa:	16 60       	ori	r17, 0x06	; 6
    7eac:	20 e1       	ldi	r18, 0x10	; 16
    7eae:	32 e0       	ldi	r19, 0x02	; 2
    7eb0:	17 ff       	sbrs	r17, 7
    7eb2:	08 c0       	rjmp	.+16     	; 0x7ec4 <vfprintf+0x5f8>
    7eb4:	f6 01       	movw	r30, r12
    7eb6:	60 81       	ld	r22, Z
    7eb8:	71 81       	ldd	r23, Z+1	; 0x01
    7eba:	82 81       	ldd	r24, Z+2	; 0x02
    7ebc:	93 81       	ldd	r25, Z+3	; 0x03
    7ebe:	44 e0       	ldi	r20, 0x04	; 4
    7ec0:	50 e0       	ldi	r21, 0x00	; 0
    7ec2:	08 c0       	rjmp	.+16     	; 0x7ed4 <vfprintf+0x608>
    7ec4:	f6 01       	movw	r30, r12
    7ec6:	80 81       	ld	r24, Z
    7ec8:	91 81       	ldd	r25, Z+1	; 0x01
    7eca:	bc 01       	movw	r22, r24
    7ecc:	80 e0       	ldi	r24, 0x00	; 0
    7ece:	90 e0       	ldi	r25, 0x00	; 0
    7ed0:	42 e0       	ldi	r20, 0x02	; 2
    7ed2:	50 e0       	ldi	r21, 0x00	; 0
    7ed4:	c4 0e       	add	r12, r20
    7ed6:	d5 1e       	adc	r13, r21
    7ed8:	ae 01       	movw	r20, r28
    7eda:	4f 5f       	subi	r20, 0xFF	; 255
    7edc:	5f 4f       	sbci	r21, 0xFF	; 255
    7ede:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__ultoa_invert>
    7ee2:	e8 2e       	mov	r14, r24
    7ee4:	58 89       	ldd	r21, Y+16	; 0x10
    7ee6:	e5 1a       	sub	r14, r21
    7ee8:	8f e7       	ldi	r24, 0x7F	; 127
    7eea:	f8 2e       	mov	r15, r24
    7eec:	f1 22       	and	r15, r17
    7eee:	f6 fe       	sbrs	r15, 6
    7ef0:	0b c0       	rjmp	.+22     	; 0x7f08 <vfprintf+0x63c>
    7ef2:	8e ef       	ldi	r24, 0xFE	; 254
    7ef4:	f8 22       	and	r15, r24
    7ef6:	e9 14       	cp	r14, r9
    7ef8:	38 f4       	brcc	.+14     	; 0x7f08 <vfprintf+0x63c>
    7efa:	f4 fe       	sbrs	r15, 4
    7efc:	07 c0       	rjmp	.+14     	; 0x7f0c <vfprintf+0x640>
    7efe:	f2 fc       	sbrc	r15, 2
    7f00:	05 c0       	rjmp	.+10     	; 0x7f0c <vfprintf+0x640>
    7f02:	9f ee       	ldi	r25, 0xEF	; 239
    7f04:	f9 22       	and	r15, r25
    7f06:	02 c0       	rjmp	.+4      	; 0x7f0c <vfprintf+0x640>
    7f08:	1e 2d       	mov	r17, r14
    7f0a:	01 c0       	rjmp	.+2      	; 0x7f0e <vfprintf+0x642>
    7f0c:	19 2d       	mov	r17, r9
    7f0e:	f4 fe       	sbrs	r15, 4
    7f10:	0d c0       	rjmp	.+26     	; 0x7f2c <vfprintf+0x660>
    7f12:	fe 01       	movw	r30, r28
    7f14:	ee 0d       	add	r30, r14
    7f16:	f1 1d       	adc	r31, r1
    7f18:	80 81       	ld	r24, Z
    7f1a:	80 33       	cpi	r24, 0x30	; 48
    7f1c:	19 f4       	brne	.+6      	; 0x7f24 <vfprintf+0x658>
    7f1e:	e9 ee       	ldi	r30, 0xE9	; 233
    7f20:	fe 22       	and	r15, r30
    7f22:	08 c0       	rjmp	.+16     	; 0x7f34 <vfprintf+0x668>
    7f24:	1f 5f       	subi	r17, 0xFF	; 255
    7f26:	f2 fe       	sbrs	r15, 2
    7f28:	05 c0       	rjmp	.+10     	; 0x7f34 <vfprintf+0x668>
    7f2a:	03 c0       	rjmp	.+6      	; 0x7f32 <vfprintf+0x666>
    7f2c:	8f 2d       	mov	r24, r15
    7f2e:	86 78       	andi	r24, 0x86	; 134
    7f30:	09 f0       	breq	.+2      	; 0x7f34 <vfprintf+0x668>
    7f32:	1f 5f       	subi	r17, 0xFF	; 255
    7f34:	0f 2d       	mov	r16, r15
    7f36:	f3 fc       	sbrc	r15, 3
    7f38:	14 c0       	rjmp	.+40     	; 0x7f62 <vfprintf+0x696>
    7f3a:	f0 fe       	sbrs	r15, 0
    7f3c:	0f c0       	rjmp	.+30     	; 0x7f5c <vfprintf+0x690>
    7f3e:	18 15       	cp	r17, r8
    7f40:	10 f0       	brcs	.+4      	; 0x7f46 <vfprintf+0x67a>
    7f42:	9e 2c       	mov	r9, r14
    7f44:	0b c0       	rjmp	.+22     	; 0x7f5c <vfprintf+0x690>
    7f46:	9e 2c       	mov	r9, r14
    7f48:	98 0c       	add	r9, r8
    7f4a:	91 1a       	sub	r9, r17
    7f4c:	18 2d       	mov	r17, r8
    7f4e:	06 c0       	rjmp	.+12     	; 0x7f5c <vfprintf+0x690>
    7f50:	80 e2       	ldi	r24, 0x20	; 32
    7f52:	90 e0       	ldi	r25, 0x00	; 0
    7f54:	b3 01       	movw	r22, r6
    7f56:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7f5a:	1f 5f       	subi	r17, 0xFF	; 255
    7f5c:	18 15       	cp	r17, r8
    7f5e:	c0 f3       	brcs	.-16     	; 0x7f50 <vfprintf+0x684>
    7f60:	04 c0       	rjmp	.+8      	; 0x7f6a <vfprintf+0x69e>
    7f62:	18 15       	cp	r17, r8
    7f64:	10 f4       	brcc	.+4      	; 0x7f6a <vfprintf+0x69e>
    7f66:	81 1a       	sub	r8, r17
    7f68:	01 c0       	rjmp	.+2      	; 0x7f6c <vfprintf+0x6a0>
    7f6a:	88 24       	eor	r8, r8
    7f6c:	04 ff       	sbrs	r16, 4
    7f6e:	0f c0       	rjmp	.+30     	; 0x7f8e <vfprintf+0x6c2>
    7f70:	80 e3       	ldi	r24, 0x30	; 48
    7f72:	90 e0       	ldi	r25, 0x00	; 0
    7f74:	b3 01       	movw	r22, r6
    7f76:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7f7a:	02 ff       	sbrs	r16, 2
    7f7c:	1d c0       	rjmp	.+58     	; 0x7fb8 <vfprintf+0x6ec>
    7f7e:	01 fd       	sbrc	r16, 1
    7f80:	03 c0       	rjmp	.+6      	; 0x7f88 <vfprintf+0x6bc>
    7f82:	88 e7       	ldi	r24, 0x78	; 120
    7f84:	90 e0       	ldi	r25, 0x00	; 0
    7f86:	0e c0       	rjmp	.+28     	; 0x7fa4 <vfprintf+0x6d8>
    7f88:	88 e5       	ldi	r24, 0x58	; 88
    7f8a:	90 e0       	ldi	r25, 0x00	; 0
    7f8c:	0b c0       	rjmp	.+22     	; 0x7fa4 <vfprintf+0x6d8>
    7f8e:	80 2f       	mov	r24, r16
    7f90:	86 78       	andi	r24, 0x86	; 134
    7f92:	91 f0       	breq	.+36     	; 0x7fb8 <vfprintf+0x6ec>
    7f94:	01 ff       	sbrs	r16, 1
    7f96:	02 c0       	rjmp	.+4      	; 0x7f9c <vfprintf+0x6d0>
    7f98:	8b e2       	ldi	r24, 0x2B	; 43
    7f9a:	01 c0       	rjmp	.+2      	; 0x7f9e <vfprintf+0x6d2>
    7f9c:	80 e2       	ldi	r24, 0x20	; 32
    7f9e:	f7 fc       	sbrc	r15, 7
    7fa0:	8d e2       	ldi	r24, 0x2D	; 45
    7fa2:	90 e0       	ldi	r25, 0x00	; 0
    7fa4:	b3 01       	movw	r22, r6
    7fa6:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7faa:	06 c0       	rjmp	.+12     	; 0x7fb8 <vfprintf+0x6ec>
    7fac:	80 e3       	ldi	r24, 0x30	; 48
    7fae:	90 e0       	ldi	r25, 0x00	; 0
    7fb0:	b3 01       	movw	r22, r6
    7fb2:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7fb6:	9a 94       	dec	r9
    7fb8:	e9 14       	cp	r14, r9
    7fba:	c0 f3       	brcs	.-16     	; 0x7fac <vfprintf+0x6e0>
    7fbc:	ea 94       	dec	r14
    7fbe:	e1 e0       	ldi	r30, 0x01	; 1
    7fc0:	f0 e0       	ldi	r31, 0x00	; 0
    7fc2:	ec 0f       	add	r30, r28
    7fc4:	fd 1f       	adc	r31, r29
    7fc6:	ee 0d       	add	r30, r14
    7fc8:	f1 1d       	adc	r31, r1
    7fca:	80 81       	ld	r24, Z
    7fcc:	90 e0       	ldi	r25, 0x00	; 0
    7fce:	b3 01       	movw	r22, r6
    7fd0:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7fd4:	ee 20       	and	r14, r14
    7fd6:	91 f7       	brne	.-28     	; 0x7fbc <vfprintf+0x6f0>
    7fd8:	06 c0       	rjmp	.+12     	; 0x7fe6 <vfprintf+0x71a>
    7fda:	80 e2       	ldi	r24, 0x20	; 32
    7fdc:	90 e0       	ldi	r25, 0x00	; 0
    7fde:	b3 01       	movw	r22, r6
    7fe0:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <fputc>
    7fe4:	8a 94       	dec	r8
    7fe6:	88 20       	and	r8, r8
    7fe8:	c1 f7       	brne	.-16     	; 0x7fda <vfprintf+0x70e>
    7fea:	99 cc       	rjmp	.-1742   	; 0x791e <vfprintf+0x52>
    7fec:	f3 01       	movw	r30, r6
    7fee:	66 81       	ldd	r22, Z+6	; 0x06
    7ff0:	77 81       	ldd	r23, Z+7	; 0x07
    7ff2:	cb 01       	movw	r24, r22
    7ff4:	61 96       	adiw	r28, 0x11	; 17
    7ff6:	cd bf       	out	0x3d, r28	; 61
    7ff8:	de bf       	out	0x3e, r29	; 62
    7ffa:	cf 91       	pop	r28
    7ffc:	df 91       	pop	r29
    7ffe:	1f 91       	pop	r17
    8000:	0f 91       	pop	r16
    8002:	ff 90       	pop	r15
    8004:	ef 90       	pop	r14
    8006:	df 90       	pop	r13
    8008:	cf 90       	pop	r12
    800a:	bf 90       	pop	r11
    800c:	af 90       	pop	r10
    800e:	9f 90       	pop	r9
    8010:	8f 90       	pop	r8
    8012:	7f 90       	pop	r7
    8014:	6f 90       	pop	r6
    8016:	5f 90       	pop	r5
    8018:	4f 90       	pop	r4
    801a:	3f 90       	pop	r3
    801c:	2f 90       	pop	r2
    801e:	08 95       	ret

00008020 <__subsf3>:
    8020:	50 58       	subi	r21, 0x80	; 128

00008022 <__addsf3>:
    8022:	bb 27       	eor	r27, r27
    8024:	aa 27       	eor	r26, r26
    8026:	0e d0       	rcall	.+28     	; 0x8044 <__addsf3x>
    8028:	29 c2       	rjmp	.+1106   	; 0x847c <__fp_round>
    802a:	f2 d1       	rcall	.+996    	; 0x8410 <__fp_pscA>
    802c:	30 f0       	brcs	.+12     	; 0x803a <__addsf3+0x18>
    802e:	f7 d1       	rcall	.+1006   	; 0x841e <__fp_pscB>
    8030:	20 f0       	brcs	.+8      	; 0x803a <__addsf3+0x18>
    8032:	31 f4       	brne	.+12     	; 0x8040 <__addsf3+0x1e>
    8034:	9f 3f       	cpi	r25, 0xFF	; 255
    8036:	11 f4       	brne	.+4      	; 0x803c <__addsf3+0x1a>
    8038:	1e f4       	brtc	.+6      	; 0x8040 <__addsf3+0x1e>
    803a:	c2 c1       	rjmp	.+900    	; 0x83c0 <__fp_nan>
    803c:	0e f4       	brtc	.+2      	; 0x8040 <__addsf3+0x1e>
    803e:	e0 95       	com	r30
    8040:	e7 fb       	bst	r30, 7
    8042:	8f c1       	rjmp	.+798    	; 0x8362 <__fp_inf>

00008044 <__addsf3x>:
    8044:	e9 2f       	mov	r30, r25
    8046:	3c d2       	rcall	.+1144   	; 0x84c0 <__fp_split3>
    8048:	80 f3       	brcs	.-32     	; 0x802a <__addsf3+0x8>
    804a:	ba 17       	cp	r27, r26
    804c:	62 07       	cpc	r22, r18
    804e:	73 07       	cpc	r23, r19
    8050:	84 07       	cpc	r24, r20
    8052:	95 07       	cpc	r25, r21
    8054:	18 f0       	brcs	.+6      	; 0x805c <__addsf3x+0x18>
    8056:	71 f4       	brne	.+28     	; 0x8074 <__addsf3x+0x30>
    8058:	9e f5       	brtc	.+102    	; 0x80c0 <__addsf3x+0x7c>
    805a:	6b c2       	rjmp	.+1238   	; 0x8532 <__fp_zero>
    805c:	0e f4       	brtc	.+2      	; 0x8060 <__addsf3x+0x1c>
    805e:	e0 95       	com	r30
    8060:	0b 2e       	mov	r0, r27
    8062:	ba 2f       	mov	r27, r26
    8064:	a0 2d       	mov	r26, r0
    8066:	0b 01       	movw	r0, r22
    8068:	b9 01       	movw	r22, r18
    806a:	90 01       	movw	r18, r0
    806c:	0c 01       	movw	r0, r24
    806e:	ca 01       	movw	r24, r20
    8070:	a0 01       	movw	r20, r0
    8072:	11 24       	eor	r1, r1
    8074:	ff 27       	eor	r31, r31
    8076:	59 1b       	sub	r21, r25
    8078:	99 f0       	breq	.+38     	; 0x80a0 <__addsf3x+0x5c>
    807a:	59 3f       	cpi	r21, 0xF9	; 249
    807c:	50 f4       	brcc	.+20     	; 0x8092 <__addsf3x+0x4e>
    807e:	50 3e       	cpi	r21, 0xE0	; 224
    8080:	68 f1       	brcs	.+90     	; 0x80dc <__addsf3x+0x98>
    8082:	1a 16       	cp	r1, r26
    8084:	f0 40       	sbci	r31, 0x00	; 0
    8086:	a2 2f       	mov	r26, r18
    8088:	23 2f       	mov	r18, r19
    808a:	34 2f       	mov	r19, r20
    808c:	44 27       	eor	r20, r20
    808e:	58 5f       	subi	r21, 0xF8	; 248
    8090:	f3 cf       	rjmp	.-26     	; 0x8078 <__addsf3x+0x34>
    8092:	46 95       	lsr	r20
    8094:	37 95       	ror	r19
    8096:	27 95       	ror	r18
    8098:	a7 95       	ror	r26
    809a:	f0 40       	sbci	r31, 0x00	; 0
    809c:	53 95       	inc	r21
    809e:	c9 f7       	brne	.-14     	; 0x8092 <__addsf3x+0x4e>
    80a0:	7e f4       	brtc	.+30     	; 0x80c0 <__addsf3x+0x7c>
    80a2:	1f 16       	cp	r1, r31
    80a4:	ba 0b       	sbc	r27, r26
    80a6:	62 0b       	sbc	r22, r18
    80a8:	73 0b       	sbc	r23, r19
    80aa:	84 0b       	sbc	r24, r20
    80ac:	ba f0       	brmi	.+46     	; 0x80dc <__addsf3x+0x98>
    80ae:	91 50       	subi	r25, 0x01	; 1
    80b0:	a1 f0       	breq	.+40     	; 0x80da <__addsf3x+0x96>
    80b2:	ff 0f       	add	r31, r31
    80b4:	bb 1f       	adc	r27, r27
    80b6:	66 1f       	adc	r22, r22
    80b8:	77 1f       	adc	r23, r23
    80ba:	88 1f       	adc	r24, r24
    80bc:	c2 f7       	brpl	.-16     	; 0x80ae <__addsf3x+0x6a>
    80be:	0e c0       	rjmp	.+28     	; 0x80dc <__addsf3x+0x98>
    80c0:	ba 0f       	add	r27, r26
    80c2:	62 1f       	adc	r22, r18
    80c4:	73 1f       	adc	r23, r19
    80c6:	84 1f       	adc	r24, r20
    80c8:	48 f4       	brcc	.+18     	; 0x80dc <__addsf3x+0x98>
    80ca:	87 95       	ror	r24
    80cc:	77 95       	ror	r23
    80ce:	67 95       	ror	r22
    80d0:	b7 95       	ror	r27
    80d2:	f7 95       	ror	r31
    80d4:	9e 3f       	cpi	r25, 0xFE	; 254
    80d6:	08 f0       	brcs	.+2      	; 0x80da <__addsf3x+0x96>
    80d8:	b3 cf       	rjmp	.-154    	; 0x8040 <__addsf3+0x1e>
    80da:	93 95       	inc	r25
    80dc:	88 0f       	add	r24, r24
    80de:	08 f0       	brcs	.+2      	; 0x80e2 <__addsf3x+0x9e>
    80e0:	99 27       	eor	r25, r25
    80e2:	ee 0f       	add	r30, r30
    80e4:	97 95       	ror	r25
    80e6:	87 95       	ror	r24
    80e8:	08 95       	ret

000080ea <atan>:
    80ea:	df 93       	push	r29
    80ec:	dd 27       	eor	r29, r29
    80ee:	b9 2f       	mov	r27, r25
    80f0:	bf 77       	andi	r27, 0x7F	; 127
    80f2:	40 e8       	ldi	r20, 0x80	; 128
    80f4:	5f e3       	ldi	r21, 0x3F	; 63
    80f6:	16 16       	cp	r1, r22
    80f8:	17 06       	cpc	r1, r23
    80fa:	48 07       	cpc	r20, r24
    80fc:	5b 07       	cpc	r21, r27
    80fe:	10 f4       	brcc	.+4      	; 0x8104 <atan+0x1a>
    8100:	d9 2f       	mov	r29, r25
    8102:	83 d2       	rcall	.+1286   	; 0x860a <inverse>
    8104:	9f 93       	push	r25
    8106:	8f 93       	push	r24
    8108:	7f 93       	push	r23
    810a:	6f 93       	push	r22
    810c:	96 d3       	rcall	.+1836   	; 0x883a <square>
    810e:	e8 ee       	ldi	r30, 0xE8	; 232
    8110:	f1 e0       	ldi	r31, 0x01	; 1
    8112:	59 d1       	rcall	.+690    	; 0x83c6 <__fp_powser>
    8114:	b3 d1       	rcall	.+870    	; 0x847c <__fp_round>
    8116:	2f 91       	pop	r18
    8118:	3f 91       	pop	r19
    811a:	4f 91       	pop	r20
    811c:	5f 91       	pop	r21
    811e:	ee d2       	rcall	.+1500   	; 0x86fc <__mulsf3x>
    8120:	dd 23       	and	r29, r29
    8122:	49 f0       	breq	.+18     	; 0x8136 <atan+0x4c>
    8124:	90 58       	subi	r25, 0x80	; 128
    8126:	a2 ea       	ldi	r26, 0xA2	; 162
    8128:	2a ed       	ldi	r18, 0xDA	; 218
    812a:	3f e0       	ldi	r19, 0x0F	; 15
    812c:	49 ec       	ldi	r20, 0xC9	; 201
    812e:	5f e3       	ldi	r21, 0x3F	; 63
    8130:	d0 78       	andi	r29, 0x80	; 128
    8132:	5d 27       	eor	r21, r29
    8134:	87 df       	rcall	.-242    	; 0x8044 <__addsf3x>
    8136:	df 91       	pop	r29
    8138:	a1 c1       	rjmp	.+834    	; 0x847c <__fp_round>

0000813a <ceil>:
    813a:	e4 d1       	rcall	.+968    	; 0x8504 <__fp_trunc>
    813c:	80 f0       	brcs	.+32     	; 0x815e <ceil+0x24>
    813e:	9f 37       	cpi	r25, 0x7F	; 127
    8140:	40 f4       	brcc	.+16     	; 0x8152 <ceil+0x18>
    8142:	91 11       	cpse	r25, r1
    8144:	0e f4       	brtc	.+2      	; 0x8148 <ceil+0xe>
    8146:	f6 c1       	rjmp	.+1004   	; 0x8534 <__fp_szero>
    8148:	60 e0       	ldi	r22, 0x00	; 0
    814a:	70 e0       	ldi	r23, 0x00	; 0
    814c:	80 e8       	ldi	r24, 0x80	; 128
    814e:	9f e3       	ldi	r25, 0x3F	; 63
    8150:	08 95       	ret
    8152:	26 f0       	brts	.+8      	; 0x815c <ceil+0x22>
    8154:	1b 16       	cp	r1, r27
    8156:	61 1d       	adc	r22, r1
    8158:	71 1d       	adc	r23, r1
    815a:	81 1d       	adc	r24, r1
    815c:	08 c1       	rjmp	.+528    	; 0x836e <__fp_mintl>
    815e:	22 c1       	rjmp	.+580    	; 0x83a4 <__fp_mpack>

00008160 <__cmpsf2>:
    8160:	dc d0       	rcall	.+440    	; 0x831a <__fp_cmp>
    8162:	08 f4       	brcc	.+2      	; 0x8166 <__cmpsf2+0x6>
    8164:	81 e0       	ldi	r24, 0x01	; 1
    8166:	08 95       	ret

00008168 <cos>:
    8168:	62 d1       	rcall	.+708    	; 0x842e <__fp_rempio2>
    816a:	e3 95       	inc	r30
    816c:	98 c1       	rjmp	.+816    	; 0x849e <__fp_sinus>

0000816e <__divsf3>:
    816e:	0c d0       	rcall	.+24     	; 0x8188 <__divsf3x>
    8170:	85 c1       	rjmp	.+778    	; 0x847c <__fp_round>
    8172:	55 d1       	rcall	.+682    	; 0x841e <__fp_pscB>
    8174:	40 f0       	brcs	.+16     	; 0x8186 <__divsf3+0x18>
    8176:	4c d1       	rcall	.+664    	; 0x8410 <__fp_pscA>
    8178:	30 f0       	brcs	.+12     	; 0x8186 <__divsf3+0x18>
    817a:	21 f4       	brne	.+8      	; 0x8184 <__divsf3+0x16>
    817c:	5f 3f       	cpi	r21, 0xFF	; 255
    817e:	19 f0       	breq	.+6      	; 0x8186 <__divsf3+0x18>
    8180:	f0 c0       	rjmp	.+480    	; 0x8362 <__fp_inf>
    8182:	51 11       	cpse	r21, r1
    8184:	d7 c1       	rjmp	.+942    	; 0x8534 <__fp_szero>
    8186:	1c c1       	rjmp	.+568    	; 0x83c0 <__fp_nan>

00008188 <__divsf3x>:
    8188:	9b d1       	rcall	.+822    	; 0x84c0 <__fp_split3>
    818a:	98 f3       	brcs	.-26     	; 0x8172 <__divsf3+0x4>

0000818c <__divsf3_pse>:
    818c:	99 23       	and	r25, r25
    818e:	c9 f3       	breq	.-14     	; 0x8182 <__divsf3+0x14>
    8190:	55 23       	and	r21, r21
    8192:	b1 f3       	breq	.-20     	; 0x8180 <__divsf3+0x12>
    8194:	95 1b       	sub	r25, r21
    8196:	55 0b       	sbc	r21, r21
    8198:	bb 27       	eor	r27, r27
    819a:	aa 27       	eor	r26, r26
    819c:	62 17       	cp	r22, r18
    819e:	73 07       	cpc	r23, r19
    81a0:	84 07       	cpc	r24, r20
    81a2:	38 f0       	brcs	.+14     	; 0x81b2 <__divsf3_pse+0x26>
    81a4:	9f 5f       	subi	r25, 0xFF	; 255
    81a6:	5f 4f       	sbci	r21, 0xFF	; 255
    81a8:	22 0f       	add	r18, r18
    81aa:	33 1f       	adc	r19, r19
    81ac:	44 1f       	adc	r20, r20
    81ae:	aa 1f       	adc	r26, r26
    81b0:	a9 f3       	breq	.-22     	; 0x819c <__divsf3_pse+0x10>
    81b2:	33 d0       	rcall	.+102    	; 0x821a <__divsf3_pse+0x8e>
    81b4:	0e 2e       	mov	r0, r30
    81b6:	3a f0       	brmi	.+14     	; 0x81c6 <__divsf3_pse+0x3a>
    81b8:	e0 e8       	ldi	r30, 0x80	; 128
    81ba:	30 d0       	rcall	.+96     	; 0x821c <__divsf3_pse+0x90>
    81bc:	91 50       	subi	r25, 0x01	; 1
    81be:	50 40       	sbci	r21, 0x00	; 0
    81c0:	e6 95       	lsr	r30
    81c2:	00 1c       	adc	r0, r0
    81c4:	ca f7       	brpl	.-14     	; 0x81b8 <__divsf3_pse+0x2c>
    81c6:	29 d0       	rcall	.+82     	; 0x821a <__divsf3_pse+0x8e>
    81c8:	fe 2f       	mov	r31, r30
    81ca:	27 d0       	rcall	.+78     	; 0x821a <__divsf3_pse+0x8e>
    81cc:	66 0f       	add	r22, r22
    81ce:	77 1f       	adc	r23, r23
    81d0:	88 1f       	adc	r24, r24
    81d2:	bb 1f       	adc	r27, r27
    81d4:	26 17       	cp	r18, r22
    81d6:	37 07       	cpc	r19, r23
    81d8:	48 07       	cpc	r20, r24
    81da:	ab 07       	cpc	r26, r27
    81dc:	b0 e8       	ldi	r27, 0x80	; 128
    81de:	09 f0       	breq	.+2      	; 0x81e2 <__divsf3_pse+0x56>
    81e0:	bb 0b       	sbc	r27, r27
    81e2:	80 2d       	mov	r24, r0
    81e4:	bf 01       	movw	r22, r30
    81e6:	ff 27       	eor	r31, r31
    81e8:	93 58       	subi	r25, 0x83	; 131
    81ea:	5f 4f       	sbci	r21, 0xFF	; 255
    81ec:	2a f0       	brmi	.+10     	; 0x81f8 <__divsf3_pse+0x6c>
    81ee:	9e 3f       	cpi	r25, 0xFE	; 254
    81f0:	51 05       	cpc	r21, r1
    81f2:	68 f0       	brcs	.+26     	; 0x820e <__divsf3_pse+0x82>
    81f4:	b6 c0       	rjmp	.+364    	; 0x8362 <__fp_inf>
    81f6:	9e c1       	rjmp	.+828    	; 0x8534 <__fp_szero>
    81f8:	5f 3f       	cpi	r21, 0xFF	; 255
    81fa:	ec f3       	brlt	.-6      	; 0x81f6 <__divsf3_pse+0x6a>
    81fc:	98 3e       	cpi	r25, 0xE8	; 232
    81fe:	dc f3       	brlt	.-10     	; 0x81f6 <__divsf3_pse+0x6a>
    8200:	86 95       	lsr	r24
    8202:	77 95       	ror	r23
    8204:	67 95       	ror	r22
    8206:	b7 95       	ror	r27
    8208:	f7 95       	ror	r31
    820a:	9f 5f       	subi	r25, 0xFF	; 255
    820c:	c9 f7       	brne	.-14     	; 0x8200 <__divsf3_pse+0x74>
    820e:	88 0f       	add	r24, r24
    8210:	91 1d       	adc	r25, r1
    8212:	96 95       	lsr	r25
    8214:	87 95       	ror	r24
    8216:	97 f9       	bld	r25, 7
    8218:	08 95       	ret
    821a:	e1 e0       	ldi	r30, 0x01	; 1
    821c:	66 0f       	add	r22, r22
    821e:	77 1f       	adc	r23, r23
    8220:	88 1f       	adc	r24, r24
    8222:	bb 1f       	adc	r27, r27
    8224:	62 17       	cp	r22, r18
    8226:	73 07       	cpc	r23, r19
    8228:	84 07       	cpc	r24, r20
    822a:	ba 07       	cpc	r27, r26
    822c:	20 f0       	brcs	.+8      	; 0x8236 <__divsf3_pse+0xaa>
    822e:	62 1b       	sub	r22, r18
    8230:	73 0b       	sbc	r23, r19
    8232:	84 0b       	sbc	r24, r20
    8234:	ba 0b       	sbc	r27, r26
    8236:	ee 1f       	adc	r30, r30
    8238:	88 f7       	brcc	.-30     	; 0x821c <__divsf3_pse+0x90>
    823a:	e0 95       	com	r30
    823c:	08 95       	ret

0000823e <__fixsfsi>:
    823e:	04 d0       	rcall	.+8      	; 0x8248 <__fixunssfsi>
    8240:	68 94       	set
    8242:	b1 11       	cpse	r27, r1
    8244:	77 c1       	rjmp	.+750    	; 0x8534 <__fp_szero>
    8246:	08 95       	ret

00008248 <__fixunssfsi>:
    8248:	43 d1       	rcall	.+646    	; 0x84d0 <__fp_splitA>
    824a:	88 f0       	brcs	.+34     	; 0x826e <__fixunssfsi+0x26>
    824c:	9f 57       	subi	r25, 0x7F	; 127
    824e:	90 f0       	brcs	.+36     	; 0x8274 <__fixunssfsi+0x2c>
    8250:	b9 2f       	mov	r27, r25
    8252:	99 27       	eor	r25, r25
    8254:	b7 51       	subi	r27, 0x17	; 23
    8256:	a0 f0       	brcs	.+40     	; 0x8280 <__fixunssfsi+0x38>
    8258:	d1 f0       	breq	.+52     	; 0x828e <__fixunssfsi+0x46>
    825a:	66 0f       	add	r22, r22
    825c:	77 1f       	adc	r23, r23
    825e:	88 1f       	adc	r24, r24
    8260:	99 1f       	adc	r25, r25
    8262:	1a f0       	brmi	.+6      	; 0x826a <__fixunssfsi+0x22>
    8264:	ba 95       	dec	r27
    8266:	c9 f7       	brne	.-14     	; 0x825a <__fixunssfsi+0x12>
    8268:	12 c0       	rjmp	.+36     	; 0x828e <__fixunssfsi+0x46>
    826a:	b1 30       	cpi	r27, 0x01	; 1
    826c:	81 f0       	breq	.+32     	; 0x828e <__fixunssfsi+0x46>
    826e:	61 d1       	rcall	.+706    	; 0x8532 <__fp_zero>
    8270:	b1 e0       	ldi	r27, 0x01	; 1
    8272:	08 95       	ret
    8274:	5e c1       	rjmp	.+700    	; 0x8532 <__fp_zero>
    8276:	67 2f       	mov	r22, r23
    8278:	78 2f       	mov	r23, r24
    827a:	88 27       	eor	r24, r24
    827c:	b8 5f       	subi	r27, 0xF8	; 248
    827e:	39 f0       	breq	.+14     	; 0x828e <__fixunssfsi+0x46>
    8280:	b9 3f       	cpi	r27, 0xF9	; 249
    8282:	cc f3       	brlt	.-14     	; 0x8276 <__fixunssfsi+0x2e>
    8284:	86 95       	lsr	r24
    8286:	77 95       	ror	r23
    8288:	67 95       	ror	r22
    828a:	b3 95       	inc	r27
    828c:	d9 f7       	brne	.-10     	; 0x8284 <__fixunssfsi+0x3c>
    828e:	3e f4       	brtc	.+14     	; 0x829e <__fixunssfsi+0x56>
    8290:	90 95       	com	r25
    8292:	80 95       	com	r24
    8294:	70 95       	com	r23
    8296:	61 95       	neg	r22
    8298:	7f 4f       	sbci	r23, 0xFF	; 255
    829a:	8f 4f       	sbci	r24, 0xFF	; 255
    829c:	9f 4f       	sbci	r25, 0xFF	; 255
    829e:	08 95       	ret

000082a0 <__floatunsisf>:
    82a0:	e8 94       	clt
    82a2:	09 c0       	rjmp	.+18     	; 0x82b6 <__floatsisf+0x12>

000082a4 <__floatsisf>:
    82a4:	97 fb       	bst	r25, 7
    82a6:	3e f4       	brtc	.+14     	; 0x82b6 <__floatsisf+0x12>
    82a8:	90 95       	com	r25
    82aa:	80 95       	com	r24
    82ac:	70 95       	com	r23
    82ae:	61 95       	neg	r22
    82b0:	7f 4f       	sbci	r23, 0xFF	; 255
    82b2:	8f 4f       	sbci	r24, 0xFF	; 255
    82b4:	9f 4f       	sbci	r25, 0xFF	; 255
    82b6:	99 23       	and	r25, r25
    82b8:	a9 f0       	breq	.+42     	; 0x82e4 <__floatsisf+0x40>
    82ba:	f9 2f       	mov	r31, r25
    82bc:	96 e9       	ldi	r25, 0x96	; 150
    82be:	bb 27       	eor	r27, r27
    82c0:	93 95       	inc	r25
    82c2:	f6 95       	lsr	r31
    82c4:	87 95       	ror	r24
    82c6:	77 95       	ror	r23
    82c8:	67 95       	ror	r22
    82ca:	b7 95       	ror	r27
    82cc:	f1 11       	cpse	r31, r1
    82ce:	f8 cf       	rjmp	.-16     	; 0x82c0 <__floatsisf+0x1c>
    82d0:	fa f4       	brpl	.+62     	; 0x8310 <__floatsisf+0x6c>
    82d2:	bb 0f       	add	r27, r27
    82d4:	11 f4       	brne	.+4      	; 0x82da <__floatsisf+0x36>
    82d6:	60 ff       	sbrs	r22, 0
    82d8:	1b c0       	rjmp	.+54     	; 0x8310 <__floatsisf+0x6c>
    82da:	6f 5f       	subi	r22, 0xFF	; 255
    82dc:	7f 4f       	sbci	r23, 0xFF	; 255
    82de:	8f 4f       	sbci	r24, 0xFF	; 255
    82e0:	9f 4f       	sbci	r25, 0xFF	; 255
    82e2:	16 c0       	rjmp	.+44     	; 0x8310 <__floatsisf+0x6c>
    82e4:	88 23       	and	r24, r24
    82e6:	11 f0       	breq	.+4      	; 0x82ec <__floatsisf+0x48>
    82e8:	96 e9       	ldi	r25, 0x96	; 150
    82ea:	11 c0       	rjmp	.+34     	; 0x830e <__floatsisf+0x6a>
    82ec:	77 23       	and	r23, r23
    82ee:	21 f0       	breq	.+8      	; 0x82f8 <__floatsisf+0x54>
    82f0:	9e e8       	ldi	r25, 0x8E	; 142
    82f2:	87 2f       	mov	r24, r23
    82f4:	76 2f       	mov	r23, r22
    82f6:	05 c0       	rjmp	.+10     	; 0x8302 <__floatsisf+0x5e>
    82f8:	66 23       	and	r22, r22
    82fa:	71 f0       	breq	.+28     	; 0x8318 <__floatsisf+0x74>
    82fc:	96 e8       	ldi	r25, 0x86	; 134
    82fe:	86 2f       	mov	r24, r22
    8300:	70 e0       	ldi	r23, 0x00	; 0
    8302:	60 e0       	ldi	r22, 0x00	; 0
    8304:	2a f0       	brmi	.+10     	; 0x8310 <__floatsisf+0x6c>
    8306:	9a 95       	dec	r25
    8308:	66 0f       	add	r22, r22
    830a:	77 1f       	adc	r23, r23
    830c:	88 1f       	adc	r24, r24
    830e:	da f7       	brpl	.-10     	; 0x8306 <__floatsisf+0x62>
    8310:	88 0f       	add	r24, r24
    8312:	96 95       	lsr	r25
    8314:	87 95       	ror	r24
    8316:	97 f9       	bld	r25, 7
    8318:	08 95       	ret

0000831a <__fp_cmp>:
    831a:	99 0f       	add	r25, r25
    831c:	00 08       	sbc	r0, r0
    831e:	55 0f       	add	r21, r21
    8320:	aa 0b       	sbc	r26, r26
    8322:	e0 e8       	ldi	r30, 0x80	; 128
    8324:	fe ef       	ldi	r31, 0xFE	; 254
    8326:	16 16       	cp	r1, r22
    8328:	17 06       	cpc	r1, r23
    832a:	e8 07       	cpc	r30, r24
    832c:	f9 07       	cpc	r31, r25
    832e:	c0 f0       	brcs	.+48     	; 0x8360 <__fp_cmp+0x46>
    8330:	12 16       	cp	r1, r18
    8332:	13 06       	cpc	r1, r19
    8334:	e4 07       	cpc	r30, r20
    8336:	f5 07       	cpc	r31, r21
    8338:	98 f0       	brcs	.+38     	; 0x8360 <__fp_cmp+0x46>
    833a:	62 1b       	sub	r22, r18
    833c:	73 0b       	sbc	r23, r19
    833e:	84 0b       	sbc	r24, r20
    8340:	95 0b       	sbc	r25, r21
    8342:	39 f4       	brne	.+14     	; 0x8352 <__fp_cmp+0x38>
    8344:	0a 26       	eor	r0, r26
    8346:	61 f0       	breq	.+24     	; 0x8360 <__fp_cmp+0x46>
    8348:	23 2b       	or	r18, r19
    834a:	24 2b       	or	r18, r20
    834c:	25 2b       	or	r18, r21
    834e:	21 f4       	brne	.+8      	; 0x8358 <__fp_cmp+0x3e>
    8350:	08 95       	ret
    8352:	0a 26       	eor	r0, r26
    8354:	09 f4       	brne	.+2      	; 0x8358 <__fp_cmp+0x3e>
    8356:	a1 40       	sbci	r26, 0x01	; 1
    8358:	a6 95       	lsr	r26
    835a:	8f ef       	ldi	r24, 0xFF	; 255
    835c:	81 1d       	adc	r24, r1
    835e:	81 1d       	adc	r24, r1
    8360:	08 95       	ret

00008362 <__fp_inf>:
    8362:	97 f9       	bld	r25, 7
    8364:	9f 67       	ori	r25, 0x7F	; 127
    8366:	80 e8       	ldi	r24, 0x80	; 128
    8368:	70 e0       	ldi	r23, 0x00	; 0
    836a:	60 e0       	ldi	r22, 0x00	; 0
    836c:	08 95       	ret

0000836e <__fp_mintl>:
    836e:	88 23       	and	r24, r24
    8370:	71 f4       	brne	.+28     	; 0x838e <__fp_mintl+0x20>
    8372:	77 23       	and	r23, r23
    8374:	21 f0       	breq	.+8      	; 0x837e <__fp_mintl+0x10>
    8376:	98 50       	subi	r25, 0x08	; 8
    8378:	87 2b       	or	r24, r23
    837a:	76 2f       	mov	r23, r22
    837c:	07 c0       	rjmp	.+14     	; 0x838c <__fp_mintl+0x1e>
    837e:	66 23       	and	r22, r22
    8380:	11 f4       	brne	.+4      	; 0x8386 <__fp_mintl+0x18>
    8382:	99 27       	eor	r25, r25
    8384:	0d c0       	rjmp	.+26     	; 0x83a0 <__fp_mintl+0x32>
    8386:	90 51       	subi	r25, 0x10	; 16
    8388:	86 2b       	or	r24, r22
    838a:	70 e0       	ldi	r23, 0x00	; 0
    838c:	60 e0       	ldi	r22, 0x00	; 0
    838e:	2a f0       	brmi	.+10     	; 0x839a <__fp_mintl+0x2c>
    8390:	9a 95       	dec	r25
    8392:	66 0f       	add	r22, r22
    8394:	77 1f       	adc	r23, r23
    8396:	88 1f       	adc	r24, r24
    8398:	da f7       	brpl	.-10     	; 0x8390 <__fp_mintl+0x22>
    839a:	88 0f       	add	r24, r24
    839c:	96 95       	lsr	r25
    839e:	87 95       	ror	r24
    83a0:	97 f9       	bld	r25, 7
    83a2:	08 95       	ret

000083a4 <__fp_mpack>:
    83a4:	9f 3f       	cpi	r25, 0xFF	; 255
    83a6:	31 f0       	breq	.+12     	; 0x83b4 <__fp_mpack_finite+0xc>

000083a8 <__fp_mpack_finite>:
    83a8:	91 50       	subi	r25, 0x01	; 1
    83aa:	20 f4       	brcc	.+8      	; 0x83b4 <__fp_mpack_finite+0xc>
    83ac:	87 95       	ror	r24
    83ae:	77 95       	ror	r23
    83b0:	67 95       	ror	r22
    83b2:	b7 95       	ror	r27
    83b4:	88 0f       	add	r24, r24
    83b6:	91 1d       	adc	r25, r1
    83b8:	96 95       	lsr	r25
    83ba:	87 95       	ror	r24
    83bc:	97 f9       	bld	r25, 7
    83be:	08 95       	ret

000083c0 <__fp_nan>:
    83c0:	9f ef       	ldi	r25, 0xFF	; 255
    83c2:	80 ec       	ldi	r24, 0xC0	; 192
    83c4:	08 95       	ret

000083c6 <__fp_powser>:
    83c6:	df 93       	push	r29
    83c8:	cf 93       	push	r28
    83ca:	1f 93       	push	r17
    83cc:	0f 93       	push	r16
    83ce:	ff 92       	push	r15
    83d0:	ef 92       	push	r14
    83d2:	df 92       	push	r13
    83d4:	7b 01       	movw	r14, r22
    83d6:	8c 01       	movw	r16, r24
    83d8:	68 94       	set
    83da:	05 c0       	rjmp	.+10     	; 0x83e6 <__fp_powser+0x20>
    83dc:	da 2e       	mov	r13, r26
    83de:	ef 01       	movw	r28, r30
    83e0:	8d d1       	rcall	.+794    	; 0x86fc <__mulsf3x>
    83e2:	fe 01       	movw	r30, r28
    83e4:	e8 94       	clt
    83e6:	a5 91       	lpm	r26, Z+
    83e8:	25 91       	lpm	r18, Z+
    83ea:	35 91       	lpm	r19, Z+
    83ec:	45 91       	lpm	r20, Z+
    83ee:	55 91       	lpm	r21, Z+
    83f0:	ae f3       	brts	.-22     	; 0x83dc <__fp_powser+0x16>
    83f2:	ef 01       	movw	r28, r30
    83f4:	27 de       	rcall	.-946    	; 0x8044 <__addsf3x>
    83f6:	fe 01       	movw	r30, r28
    83f8:	97 01       	movw	r18, r14
    83fa:	a8 01       	movw	r20, r16
    83fc:	da 94       	dec	r13
    83fe:	79 f7       	brne	.-34     	; 0x83de <__fp_powser+0x18>
    8400:	df 90       	pop	r13
    8402:	ef 90       	pop	r14
    8404:	ff 90       	pop	r15
    8406:	0f 91       	pop	r16
    8408:	1f 91       	pop	r17
    840a:	cf 91       	pop	r28
    840c:	df 91       	pop	r29
    840e:	08 95       	ret

00008410 <__fp_pscA>:
    8410:	00 24       	eor	r0, r0
    8412:	0a 94       	dec	r0
    8414:	16 16       	cp	r1, r22
    8416:	17 06       	cpc	r1, r23
    8418:	18 06       	cpc	r1, r24
    841a:	09 06       	cpc	r0, r25
    841c:	08 95       	ret

0000841e <__fp_pscB>:
    841e:	00 24       	eor	r0, r0
    8420:	0a 94       	dec	r0
    8422:	12 16       	cp	r1, r18
    8424:	13 06       	cpc	r1, r19
    8426:	14 06       	cpc	r1, r20
    8428:	05 06       	cpc	r0, r21
    842a:	08 95       	ret
    842c:	c9 cf       	rjmp	.-110    	; 0x83c0 <__fp_nan>

0000842e <__fp_rempio2>:
    842e:	50 d0       	rcall	.+160    	; 0x84d0 <__fp_splitA>
    8430:	e8 f3       	brcs	.-6      	; 0x842c <__fp_pscB+0xe>
    8432:	e8 94       	clt
    8434:	e0 e0       	ldi	r30, 0x00	; 0
    8436:	bb 27       	eor	r27, r27
    8438:	9f 57       	subi	r25, 0x7F	; 127
    843a:	f0 f0       	brcs	.+60     	; 0x8478 <__fp_rempio2+0x4a>
    843c:	2a ed       	ldi	r18, 0xDA	; 218
    843e:	3f e0       	ldi	r19, 0x0F	; 15
    8440:	49 ec       	ldi	r20, 0xC9	; 201
    8442:	06 c0       	rjmp	.+12     	; 0x8450 <__fp_rempio2+0x22>
    8444:	ee 0f       	add	r30, r30
    8446:	bb 0f       	add	r27, r27
    8448:	66 1f       	adc	r22, r22
    844a:	77 1f       	adc	r23, r23
    844c:	88 1f       	adc	r24, r24
    844e:	28 f0       	brcs	.+10     	; 0x845a <__fp_rempio2+0x2c>
    8450:	b2 3a       	cpi	r27, 0xA2	; 162
    8452:	62 07       	cpc	r22, r18
    8454:	73 07       	cpc	r23, r19
    8456:	84 07       	cpc	r24, r20
    8458:	28 f0       	brcs	.+10     	; 0x8464 <__fp_rempio2+0x36>
    845a:	b2 5a       	subi	r27, 0xA2	; 162
    845c:	62 0b       	sbc	r22, r18
    845e:	73 0b       	sbc	r23, r19
    8460:	84 0b       	sbc	r24, r20
    8462:	e3 95       	inc	r30
    8464:	9a 95       	dec	r25
    8466:	72 f7       	brpl	.-36     	; 0x8444 <__fp_rempio2+0x16>
    8468:	80 38       	cpi	r24, 0x80	; 128
    846a:	30 f4       	brcc	.+12     	; 0x8478 <__fp_rempio2+0x4a>
    846c:	9a 95       	dec	r25
    846e:	bb 0f       	add	r27, r27
    8470:	66 1f       	adc	r22, r22
    8472:	77 1f       	adc	r23, r23
    8474:	88 1f       	adc	r24, r24
    8476:	d2 f7       	brpl	.-12     	; 0x846c <__fp_rempio2+0x3e>
    8478:	90 48       	sbci	r25, 0x80	; 128
    847a:	96 cf       	rjmp	.-212    	; 0x83a8 <__fp_mpack_finite>

0000847c <__fp_round>:
    847c:	09 2e       	mov	r0, r25
    847e:	03 94       	inc	r0
    8480:	00 0c       	add	r0, r0
    8482:	11 f4       	brne	.+4      	; 0x8488 <__fp_round+0xc>
    8484:	88 23       	and	r24, r24
    8486:	52 f0       	brmi	.+20     	; 0x849c <__fp_round+0x20>
    8488:	bb 0f       	add	r27, r27
    848a:	40 f4       	brcc	.+16     	; 0x849c <__fp_round+0x20>
    848c:	bf 2b       	or	r27, r31
    848e:	11 f4       	brne	.+4      	; 0x8494 <__fp_round+0x18>
    8490:	60 ff       	sbrs	r22, 0
    8492:	04 c0       	rjmp	.+8      	; 0x849c <__fp_round+0x20>
    8494:	6f 5f       	subi	r22, 0xFF	; 255
    8496:	7f 4f       	sbci	r23, 0xFF	; 255
    8498:	8f 4f       	sbci	r24, 0xFF	; 255
    849a:	9f 4f       	sbci	r25, 0xFF	; 255
    849c:	08 95       	ret

0000849e <__fp_sinus>:
    849e:	ef 93       	push	r30
    84a0:	e0 ff       	sbrs	r30, 0
    84a2:	06 c0       	rjmp	.+12     	; 0x84b0 <__fp_sinus+0x12>
    84a4:	a2 ea       	ldi	r26, 0xA2	; 162
    84a6:	2a ed       	ldi	r18, 0xDA	; 218
    84a8:	3f e0       	ldi	r19, 0x0F	; 15
    84aa:	49 ec       	ldi	r20, 0xC9	; 201
    84ac:	5f eb       	ldi	r21, 0xBF	; 191
    84ae:	ca dd       	rcall	.-1132   	; 0x8044 <__addsf3x>
    84b0:	e5 df       	rcall	.-54     	; 0x847c <__fp_round>
    84b2:	0f 90       	pop	r0
    84b4:	03 94       	inc	r0
    84b6:	01 fc       	sbrc	r0, 1
    84b8:	90 58       	subi	r25, 0x80	; 128
    84ba:	e5 e1       	ldi	r30, 0x15	; 21
    84bc:	f2 e0       	ldi	r31, 0x02	; 2
    84be:	d2 c1       	rjmp	.+932    	; 0x8864 <__fp_powsodd>

000084c0 <__fp_split3>:
    84c0:	57 fd       	sbrc	r21, 7
    84c2:	90 58       	subi	r25, 0x80	; 128
    84c4:	44 0f       	add	r20, r20
    84c6:	55 1f       	adc	r21, r21
    84c8:	59 f0       	breq	.+22     	; 0x84e0 <__fp_splitA+0x10>
    84ca:	5f 3f       	cpi	r21, 0xFF	; 255
    84cc:	71 f0       	breq	.+28     	; 0x84ea <__fp_splitA+0x1a>
    84ce:	47 95       	ror	r20

000084d0 <__fp_splitA>:
    84d0:	88 0f       	add	r24, r24
    84d2:	97 fb       	bst	r25, 7
    84d4:	99 1f       	adc	r25, r25
    84d6:	61 f0       	breq	.+24     	; 0x84f0 <__fp_splitA+0x20>
    84d8:	9f 3f       	cpi	r25, 0xFF	; 255
    84da:	79 f0       	breq	.+30     	; 0x84fa <__fp_splitA+0x2a>
    84dc:	87 95       	ror	r24
    84de:	08 95       	ret
    84e0:	12 16       	cp	r1, r18
    84e2:	13 06       	cpc	r1, r19
    84e4:	14 06       	cpc	r1, r20
    84e6:	55 1f       	adc	r21, r21
    84e8:	f2 cf       	rjmp	.-28     	; 0x84ce <__fp_split3+0xe>
    84ea:	46 95       	lsr	r20
    84ec:	f1 df       	rcall	.-30     	; 0x84d0 <__fp_splitA>
    84ee:	08 c0       	rjmp	.+16     	; 0x8500 <__fp_splitA+0x30>
    84f0:	16 16       	cp	r1, r22
    84f2:	17 06       	cpc	r1, r23
    84f4:	18 06       	cpc	r1, r24
    84f6:	99 1f       	adc	r25, r25
    84f8:	f1 cf       	rjmp	.-30     	; 0x84dc <__fp_splitA+0xc>
    84fa:	86 95       	lsr	r24
    84fc:	71 05       	cpc	r23, r1
    84fe:	61 05       	cpc	r22, r1
    8500:	08 94       	sec
    8502:	08 95       	ret

00008504 <__fp_trunc>:
    8504:	e5 df       	rcall	.-54     	; 0x84d0 <__fp_splitA>
    8506:	a0 f0       	brcs	.+40     	; 0x8530 <__fp_trunc+0x2c>
    8508:	be e7       	ldi	r27, 0x7E	; 126
    850a:	b9 17       	cp	r27, r25
    850c:	88 f4       	brcc	.+34     	; 0x8530 <__fp_trunc+0x2c>
    850e:	bb 27       	eor	r27, r27
    8510:	9f 38       	cpi	r25, 0x8F	; 143
    8512:	60 f4       	brcc	.+24     	; 0x852c <__fp_trunc+0x28>
    8514:	16 16       	cp	r1, r22
    8516:	b1 1d       	adc	r27, r1
    8518:	67 2f       	mov	r22, r23
    851a:	78 2f       	mov	r23, r24
    851c:	88 27       	eor	r24, r24
    851e:	98 5f       	subi	r25, 0xF8	; 248
    8520:	f7 cf       	rjmp	.-18     	; 0x8510 <__fp_trunc+0xc>
    8522:	86 95       	lsr	r24
    8524:	77 95       	ror	r23
    8526:	67 95       	ror	r22
    8528:	b1 1d       	adc	r27, r1
    852a:	93 95       	inc	r25
    852c:	96 39       	cpi	r25, 0x96	; 150
    852e:	c8 f3       	brcs	.-14     	; 0x8522 <__fp_trunc+0x1e>
    8530:	08 95       	ret

00008532 <__fp_zero>:
    8532:	e8 94       	clt

00008534 <__fp_szero>:
    8534:	bb 27       	eor	r27, r27
    8536:	66 27       	eor	r22, r22
    8538:	77 27       	eor	r23, r23
    853a:	cb 01       	movw	r24, r22
    853c:	97 f9       	bld	r25, 7
    853e:	08 95       	ret

00008540 <__gesf2>:
    8540:	ec de       	rcall	.-552    	; 0x831a <__fp_cmp>
    8542:	08 f4       	brcc	.+2      	; 0x8546 <__gesf2+0x6>
    8544:	8f ef       	ldi	r24, 0xFF	; 255
    8546:	08 95       	ret
    8548:	63 df       	rcall	.-314    	; 0x8410 <__fp_pscA>
    854a:	19 f0       	breq	.+6      	; 0x8552 <__gesf2+0x12>
    854c:	68 df       	rcall	.-304    	; 0x841e <__fp_pscB>
    854e:	09 f0       	breq	.+2      	; 0x8552 <__gesf2+0x12>
    8550:	37 cf       	rjmp	.-402    	; 0x83c0 <__fp_nan>
    8552:	07 cf       	rjmp	.-498    	; 0x8362 <__fp_inf>
    8554:	b9 01       	movw	r22, r18
    8556:	ca 01       	movw	r24, r20
    8558:	25 cf       	rjmp	.-438    	; 0x83a4 <__fp_mpack>

0000855a <hypot>:
    855a:	9f 77       	andi	r25, 0x7F	; 127
    855c:	5f 77       	andi	r21, 0x7F	; 127
    855e:	b0 df       	rcall	.-160    	; 0x84c0 <__fp_split3>
    8560:	98 f3       	brcs	.-26     	; 0x8548 <__gesf2+0x8>
    8562:	99 23       	and	r25, r25
    8564:	b9 f3       	breq	.-18     	; 0x8554 <__gesf2+0x14>
    8566:	55 23       	and	r21, r21
    8568:	b9 f3       	breq	.-18     	; 0x8558 <__gesf2+0x18>
    856a:	ff 27       	eor	r31, r31
    856c:	95 17       	cp	r25, r21
    856e:	58 f4       	brcc	.+22     	; 0x8586 <hypot+0x2c>
    8570:	e5 2f       	mov	r30, r21
    8572:	e9 1b       	sub	r30, r25
    8574:	ed 30       	cpi	r30, 0x0D	; 13
    8576:	70 f7       	brcc	.-36     	; 0x8554 <__gesf2+0x14>
    8578:	5e 3b       	cpi	r21, 0xBE	; 190
    857a:	10 f0       	brcs	.+4      	; 0x8580 <hypot+0x26>
    857c:	f1 e4       	ldi	r31, 0x41	; 65
    857e:	1c c0       	rjmp	.+56     	; 0x85b8 <hypot+0x5e>
    8580:	90 34       	cpi	r25, 0x40	; 64
    8582:	e0 f4       	brcc	.+56     	; 0x85bc <hypot+0x62>
    8584:	0a c0       	rjmp	.+20     	; 0x859a <hypot+0x40>
    8586:	e9 2f       	mov	r30, r25
    8588:	e5 1b       	sub	r30, r21
    858a:	ed 30       	cpi	r30, 0x0D	; 13
    858c:	28 f7       	brcc	.-54     	; 0x8558 <__gesf2+0x18>
    858e:	9e 3b       	cpi	r25, 0xBE	; 190
    8590:	10 f0       	brcs	.+4      	; 0x8596 <hypot+0x3c>
    8592:	f1 e4       	ldi	r31, 0x41	; 65
    8594:	11 c0       	rjmp	.+34     	; 0x85b8 <hypot+0x5e>
    8596:	50 34       	cpi	r21, 0x40	; 64
    8598:	88 f4       	brcc	.+34     	; 0x85bc <hypot+0x62>
    859a:	f9 ea       	ldi	r31, 0xA9	; 169
    859c:	88 23       	and	r24, r24
    859e:	2a f0       	brmi	.+10     	; 0x85aa <hypot+0x50>
    85a0:	9a 95       	dec	r25
    85a2:	66 0f       	add	r22, r22
    85a4:	77 1f       	adc	r23, r23
    85a6:	88 1f       	adc	r24, r24
    85a8:	da f7       	brpl	.-10     	; 0x85a0 <hypot+0x46>
    85aa:	44 23       	and	r20, r20
    85ac:	2a f0       	brmi	.+10     	; 0x85b8 <hypot+0x5e>
    85ae:	5a 95       	dec	r21
    85b0:	22 0f       	add	r18, r18
    85b2:	33 1f       	adc	r19, r19
    85b4:	44 1f       	adc	r20, r20
    85b6:	da f7       	brpl	.-10     	; 0x85ae <hypot+0x54>
    85b8:	9f 1b       	sub	r25, r31
    85ba:	5f 1b       	sub	r21, r31
    85bc:	ff 93       	push	r31
    85be:	1f 93       	push	r17
    85c0:	0f 93       	push	r16
    85c2:	ff 92       	push	r15
    85c4:	ef 92       	push	r14
    85c6:	79 01       	movw	r14, r18
    85c8:	8a 01       	movw	r16, r20
    85ca:	bb 27       	eor	r27, r27
    85cc:	ab 2f       	mov	r26, r27
    85ce:	9b 01       	movw	r18, r22
    85d0:	ac 01       	movw	r20, r24
    85d2:	96 d0       	rcall	.+300    	; 0x8700 <__mulsf3_pse>
    85d4:	97 01       	movw	r18, r14
    85d6:	a8 01       	movw	r20, r16
    85d8:	bf 93       	push	r27
    85da:	7b 01       	movw	r14, r22
    85dc:	8c 01       	movw	r16, r24
    85de:	aa 27       	eor	r26, r26
    85e0:	ba 2f       	mov	r27, r26
    85e2:	b9 01       	movw	r22, r18
    85e4:	ca 01       	movw	r24, r20
    85e6:	8c d0       	rcall	.+280    	; 0x8700 <__mulsf3_pse>
    85e8:	af 91       	pop	r26
    85ea:	97 01       	movw	r18, r14
    85ec:	a8 01       	movw	r20, r16
    85ee:	ef 90       	pop	r14
    85f0:	ff 90       	pop	r15
    85f2:	0f 91       	pop	r16
    85f4:	1f 91       	pop	r17
    85f6:	26 dd       	rcall	.-1460   	; 0x8044 <__addsf3x>
    85f8:	41 df       	rcall	.-382    	; 0x847c <__fp_round>
    85fa:	e1 d0       	rcall	.+450    	; 0x87be <sqrt>
    85fc:	4f 91       	pop	r20
    85fe:	40 ff       	sbrs	r20, 0
    8600:	08 95       	ret
    8602:	55 27       	eor	r21, r21
    8604:	47 fd       	sbrc	r20, 7
    8606:	50 95       	com	r21
    8608:	09 c0       	rjmp	.+18     	; 0x861c <ldexp>

0000860a <inverse>:
    860a:	9b 01       	movw	r18, r22
    860c:	ac 01       	movw	r20, r24
    860e:	60 e0       	ldi	r22, 0x00	; 0
    8610:	70 e0       	ldi	r23, 0x00	; 0
    8612:	80 e8       	ldi	r24, 0x80	; 128
    8614:	9f e3       	ldi	r25, 0x3F	; 63
    8616:	ab cd       	rjmp	.-1194   	; 0x816e <__divsf3>
    8618:	a4 ce       	rjmp	.-696    	; 0x8362 <__fp_inf>
    861a:	c4 ce       	rjmp	.-632    	; 0x83a4 <__fp_mpack>

0000861c <ldexp>:
    861c:	59 df       	rcall	.-334    	; 0x84d0 <__fp_splitA>
    861e:	e8 f3       	brcs	.-6      	; 0x861a <inverse+0x10>
    8620:	99 23       	and	r25, r25
    8622:	d9 f3       	breq	.-10     	; 0x861a <inverse+0x10>
    8624:	94 0f       	add	r25, r20
    8626:	51 1d       	adc	r21, r1
    8628:	bb f3       	brvs	.-18     	; 0x8618 <inverse+0xe>
    862a:	91 50       	subi	r25, 0x01	; 1
    862c:	50 40       	sbci	r21, 0x00	; 0
    862e:	94 f0       	brlt	.+36     	; 0x8654 <ldexp+0x38>
    8630:	59 f0       	breq	.+22     	; 0x8648 <ldexp+0x2c>
    8632:	88 23       	and	r24, r24
    8634:	32 f0       	brmi	.+12     	; 0x8642 <ldexp+0x26>
    8636:	66 0f       	add	r22, r22
    8638:	77 1f       	adc	r23, r23
    863a:	88 1f       	adc	r24, r24
    863c:	91 50       	subi	r25, 0x01	; 1
    863e:	50 40       	sbci	r21, 0x00	; 0
    8640:	c1 f7       	brne	.-16     	; 0x8632 <ldexp+0x16>
    8642:	9e 3f       	cpi	r25, 0xFE	; 254
    8644:	51 05       	cpc	r21, r1
    8646:	44 f7       	brge	.-48     	; 0x8618 <inverse+0xe>
    8648:	88 0f       	add	r24, r24
    864a:	91 1d       	adc	r25, r1
    864c:	96 95       	lsr	r25
    864e:	87 95       	ror	r24
    8650:	97 f9       	bld	r25, 7
    8652:	08 95       	ret
    8654:	5f 3f       	cpi	r21, 0xFF	; 255
    8656:	ac f0       	brlt	.+42     	; 0x8682 <ldexp+0x66>
    8658:	98 3e       	cpi	r25, 0xE8	; 232
    865a:	9c f0       	brlt	.+38     	; 0x8682 <ldexp+0x66>
    865c:	bb 27       	eor	r27, r27
    865e:	86 95       	lsr	r24
    8660:	77 95       	ror	r23
    8662:	67 95       	ror	r22
    8664:	b7 95       	ror	r27
    8666:	08 f4       	brcc	.+2      	; 0x866a <ldexp+0x4e>
    8668:	b1 60       	ori	r27, 0x01	; 1
    866a:	93 95       	inc	r25
    866c:	c1 f7       	brne	.-16     	; 0x865e <ldexp+0x42>
    866e:	bb 0f       	add	r27, r27
    8670:	58 f7       	brcc	.-42     	; 0x8648 <ldexp+0x2c>
    8672:	11 f4       	brne	.+4      	; 0x8678 <ldexp+0x5c>
    8674:	60 ff       	sbrs	r22, 0
    8676:	e8 cf       	rjmp	.-48     	; 0x8648 <ldexp+0x2c>
    8678:	6f 5f       	subi	r22, 0xFF	; 255
    867a:	7f 4f       	sbci	r23, 0xFF	; 255
    867c:	8f 4f       	sbci	r24, 0xFF	; 255
    867e:	9f 4f       	sbci	r25, 0xFF	; 255
    8680:	e3 cf       	rjmp	.-58     	; 0x8648 <ldexp+0x2c>
    8682:	58 cf       	rjmp	.-336    	; 0x8534 <__fp_szero>

00008684 <lround>:
    8684:	25 df       	rcall	.-438    	; 0x84d0 <__fp_splitA>
    8686:	58 f1       	brcs	.+86     	; 0x86de <lround+0x5a>
    8688:	9e 57       	subi	r25, 0x7E	; 126
    868a:	58 f1       	brcs	.+86     	; 0x86e2 <lround+0x5e>
    868c:	98 51       	subi	r25, 0x18	; 24
    868e:	a0 f0       	brcs	.+40     	; 0x86b8 <lround+0x34>
    8690:	e9 f0       	breq	.+58     	; 0x86cc <lround+0x48>
    8692:	98 30       	cpi	r25, 0x08	; 8
    8694:	20 f5       	brcc	.+72     	; 0x86de <lround+0x5a>
    8696:	09 2e       	mov	r0, r25
    8698:	99 27       	eor	r25, r25
    869a:	66 0f       	add	r22, r22
    869c:	77 1f       	adc	r23, r23
    869e:	88 1f       	adc	r24, r24
    86a0:	99 1f       	adc	r25, r25
    86a2:	0a 94       	dec	r0
    86a4:	d1 f7       	brne	.-12     	; 0x869a <lround+0x16>
    86a6:	12 c0       	rjmp	.+36     	; 0x86cc <lround+0x48>
    86a8:	06 2e       	mov	r0, r22
    86aa:	67 2f       	mov	r22, r23
    86ac:	78 2f       	mov	r23, r24
    86ae:	88 27       	eor	r24, r24
    86b0:	98 5f       	subi	r25, 0xF8	; 248
    86b2:	11 f4       	brne	.+4      	; 0x86b8 <lround+0x34>
    86b4:	00 0c       	add	r0, r0
    86b6:	07 c0       	rjmp	.+14     	; 0x86c6 <lround+0x42>
    86b8:	99 3f       	cpi	r25, 0xF9	; 249
    86ba:	b4 f3       	brlt	.-20     	; 0x86a8 <lround+0x24>
    86bc:	86 95       	lsr	r24
    86be:	77 95       	ror	r23
    86c0:	67 95       	ror	r22
    86c2:	93 95       	inc	r25
    86c4:	d9 f7       	brne	.-10     	; 0x86bc <lround+0x38>
    86c6:	61 1d       	adc	r22, r1
    86c8:	71 1d       	adc	r23, r1
    86ca:	81 1d       	adc	r24, r1
    86cc:	3e f4       	brtc	.+14     	; 0x86dc <lround+0x58>
    86ce:	90 95       	com	r25
    86d0:	80 95       	com	r24
    86d2:	70 95       	com	r23
    86d4:	61 95       	neg	r22
    86d6:	7f 4f       	sbci	r23, 0xFF	; 255
    86d8:	8f 4f       	sbci	r24, 0xFF	; 255
    86da:	9f 4f       	sbci	r25, 0xFF	; 255
    86dc:	08 95       	ret
    86de:	68 94       	set
    86e0:	29 cf       	rjmp	.-430    	; 0x8534 <__fp_szero>
    86e2:	27 cf       	rjmp	.-434    	; 0x8532 <__fp_zero>

000086e4 <__mulsf3>:
    86e4:	0b d0       	rcall	.+22     	; 0x86fc <__mulsf3x>
    86e6:	ca ce       	rjmp	.-620    	; 0x847c <__fp_round>
    86e8:	93 de       	rcall	.-730    	; 0x8410 <__fp_pscA>
    86ea:	28 f0       	brcs	.+10     	; 0x86f6 <__mulsf3+0x12>
    86ec:	98 de       	rcall	.-720    	; 0x841e <__fp_pscB>
    86ee:	18 f0       	brcs	.+6      	; 0x86f6 <__mulsf3+0x12>
    86f0:	95 23       	and	r25, r21
    86f2:	09 f0       	breq	.+2      	; 0x86f6 <__mulsf3+0x12>
    86f4:	36 ce       	rjmp	.-916    	; 0x8362 <__fp_inf>
    86f6:	64 ce       	rjmp	.-824    	; 0x83c0 <__fp_nan>
    86f8:	11 24       	eor	r1, r1
    86fa:	1c cf       	rjmp	.-456    	; 0x8534 <__fp_szero>

000086fc <__mulsf3x>:
    86fc:	e1 de       	rcall	.-574    	; 0x84c0 <__fp_split3>
    86fe:	a0 f3       	brcs	.-24     	; 0x86e8 <__mulsf3+0x4>

00008700 <__mulsf3_pse>:
    8700:	95 9f       	mul	r25, r21
    8702:	d1 f3       	breq	.-12     	; 0x86f8 <__mulsf3+0x14>
    8704:	95 0f       	add	r25, r21
    8706:	50 e0       	ldi	r21, 0x00	; 0
    8708:	55 1f       	adc	r21, r21
    870a:	62 9f       	mul	r22, r18
    870c:	f0 01       	movw	r30, r0
    870e:	72 9f       	mul	r23, r18
    8710:	bb 27       	eor	r27, r27
    8712:	f0 0d       	add	r31, r0
    8714:	b1 1d       	adc	r27, r1
    8716:	63 9f       	mul	r22, r19
    8718:	aa 27       	eor	r26, r26
    871a:	f0 0d       	add	r31, r0
    871c:	b1 1d       	adc	r27, r1
    871e:	aa 1f       	adc	r26, r26
    8720:	64 9f       	mul	r22, r20
    8722:	66 27       	eor	r22, r22
    8724:	b0 0d       	add	r27, r0
    8726:	a1 1d       	adc	r26, r1
    8728:	66 1f       	adc	r22, r22
    872a:	82 9f       	mul	r24, r18
    872c:	22 27       	eor	r18, r18
    872e:	b0 0d       	add	r27, r0
    8730:	a1 1d       	adc	r26, r1
    8732:	62 1f       	adc	r22, r18
    8734:	73 9f       	mul	r23, r19
    8736:	b0 0d       	add	r27, r0
    8738:	a1 1d       	adc	r26, r1
    873a:	62 1f       	adc	r22, r18
    873c:	83 9f       	mul	r24, r19
    873e:	a0 0d       	add	r26, r0
    8740:	61 1d       	adc	r22, r1
    8742:	22 1f       	adc	r18, r18
    8744:	74 9f       	mul	r23, r20
    8746:	33 27       	eor	r19, r19
    8748:	a0 0d       	add	r26, r0
    874a:	61 1d       	adc	r22, r1
    874c:	23 1f       	adc	r18, r19
    874e:	84 9f       	mul	r24, r20
    8750:	60 0d       	add	r22, r0
    8752:	21 1d       	adc	r18, r1
    8754:	82 2f       	mov	r24, r18
    8756:	76 2f       	mov	r23, r22
    8758:	6a 2f       	mov	r22, r26
    875a:	11 24       	eor	r1, r1
    875c:	9f 57       	subi	r25, 0x7F	; 127
    875e:	50 40       	sbci	r21, 0x00	; 0
    8760:	8a f0       	brmi	.+34     	; 0x8784 <__mulsf3_pse+0x84>
    8762:	e1 f0       	breq	.+56     	; 0x879c <__mulsf3_pse+0x9c>
    8764:	88 23       	and	r24, r24
    8766:	4a f0       	brmi	.+18     	; 0x877a <__mulsf3_pse+0x7a>
    8768:	ee 0f       	add	r30, r30
    876a:	ff 1f       	adc	r31, r31
    876c:	bb 1f       	adc	r27, r27
    876e:	66 1f       	adc	r22, r22
    8770:	77 1f       	adc	r23, r23
    8772:	88 1f       	adc	r24, r24
    8774:	91 50       	subi	r25, 0x01	; 1
    8776:	50 40       	sbci	r21, 0x00	; 0
    8778:	a9 f7       	brne	.-22     	; 0x8764 <__mulsf3_pse+0x64>
    877a:	9e 3f       	cpi	r25, 0xFE	; 254
    877c:	51 05       	cpc	r21, r1
    877e:	70 f0       	brcs	.+28     	; 0x879c <__mulsf3_pse+0x9c>
    8780:	f0 cd       	rjmp	.-1056   	; 0x8362 <__fp_inf>
    8782:	d8 ce       	rjmp	.-592    	; 0x8534 <__fp_szero>
    8784:	5f 3f       	cpi	r21, 0xFF	; 255
    8786:	ec f3       	brlt	.-6      	; 0x8782 <__mulsf3_pse+0x82>
    8788:	98 3e       	cpi	r25, 0xE8	; 232
    878a:	dc f3       	brlt	.-10     	; 0x8782 <__mulsf3_pse+0x82>
    878c:	86 95       	lsr	r24
    878e:	77 95       	ror	r23
    8790:	67 95       	ror	r22
    8792:	b7 95       	ror	r27
    8794:	f7 95       	ror	r31
    8796:	e7 95       	ror	r30
    8798:	9f 5f       	subi	r25, 0xFF	; 255
    879a:	c1 f7       	brne	.-16     	; 0x878c <__mulsf3_pse+0x8c>
    879c:	fe 2b       	or	r31, r30
    879e:	88 0f       	add	r24, r24
    87a0:	91 1d       	adc	r25, r1
    87a2:	96 95       	lsr	r25
    87a4:	87 95       	ror	r24
    87a6:	97 f9       	bld	r25, 7
    87a8:	08 95       	ret

000087aa <sin>:
    87aa:	9f 93       	push	r25
    87ac:	40 de       	rcall	.-896    	; 0x842e <__fp_rempio2>
    87ae:	0f 90       	pop	r0
    87b0:	07 fc       	sbrc	r0, 7
    87b2:	ee 5f       	subi	r30, 0xFE	; 254
    87b4:	74 ce       	rjmp	.-792    	; 0x849e <__fp_sinus>
    87b6:	11 f4       	brne	.+4      	; 0x87bc <sin+0x12>
    87b8:	0e f4       	brtc	.+2      	; 0x87bc <sin+0x12>
    87ba:	02 ce       	rjmp	.-1020   	; 0x83c0 <__fp_nan>
    87bc:	f3 cd       	rjmp	.-1050   	; 0x83a4 <__fp_mpack>

000087be <sqrt>:
    87be:	88 de       	rcall	.-752    	; 0x84d0 <__fp_splitA>
    87c0:	d0 f3       	brcs	.-12     	; 0x87b6 <sin+0xc>
    87c2:	99 23       	and	r25, r25
    87c4:	d9 f3       	breq	.-10     	; 0x87bc <sin+0x12>
    87c6:	ce f3       	brts	.-14     	; 0x87ba <sin+0x10>
    87c8:	9f 57       	subi	r25, 0x7F	; 127
    87ca:	55 0b       	sbc	r21, r21
    87cc:	87 ff       	sbrs	r24, 7
    87ce:	43 d0       	rcall	.+134    	; 0x8856 <__fp_norm2>
    87d0:	00 24       	eor	r0, r0
    87d2:	a0 e6       	ldi	r26, 0x60	; 96
    87d4:	40 ea       	ldi	r20, 0xA0	; 160
    87d6:	90 01       	movw	r18, r0
    87d8:	80 58       	subi	r24, 0x80	; 128
    87da:	56 95       	lsr	r21
    87dc:	97 95       	ror	r25
    87de:	28 f4       	brcc	.+10     	; 0x87ea <sqrt+0x2c>
    87e0:	80 5c       	subi	r24, 0xC0	; 192
    87e2:	66 0f       	add	r22, r22
    87e4:	77 1f       	adc	r23, r23
    87e6:	88 1f       	adc	r24, r24
    87e8:	20 f0       	brcs	.+8      	; 0x87f2 <sqrt+0x34>
    87ea:	26 17       	cp	r18, r22
    87ec:	37 07       	cpc	r19, r23
    87ee:	48 07       	cpc	r20, r24
    87f0:	30 f4       	brcc	.+12     	; 0x87fe <sqrt+0x40>
    87f2:	62 1b       	sub	r22, r18
    87f4:	73 0b       	sbc	r23, r19
    87f6:	84 0b       	sbc	r24, r20
    87f8:	20 29       	or	r18, r0
    87fa:	31 29       	or	r19, r1
    87fc:	4a 2b       	or	r20, r26
    87fe:	a6 95       	lsr	r26
    8800:	17 94       	ror	r1
    8802:	07 94       	ror	r0
    8804:	20 25       	eor	r18, r0
    8806:	31 25       	eor	r19, r1
    8808:	4a 27       	eor	r20, r26
    880a:	58 f7       	brcc	.-42     	; 0x87e2 <sqrt+0x24>
    880c:	66 0f       	add	r22, r22
    880e:	77 1f       	adc	r23, r23
    8810:	88 1f       	adc	r24, r24
    8812:	20 f0       	brcs	.+8      	; 0x881c <sqrt+0x5e>
    8814:	26 17       	cp	r18, r22
    8816:	37 07       	cpc	r19, r23
    8818:	48 07       	cpc	r20, r24
    881a:	30 f4       	brcc	.+12     	; 0x8828 <sqrt+0x6a>
    881c:	62 0b       	sbc	r22, r18
    881e:	73 0b       	sbc	r23, r19
    8820:	84 0b       	sbc	r24, r20
    8822:	20 0d       	add	r18, r0
    8824:	31 1d       	adc	r19, r1
    8826:	41 1d       	adc	r20, r1
    8828:	a0 95       	com	r26
    882a:	81 f7       	brne	.-32     	; 0x880c <sqrt+0x4e>
    882c:	b9 01       	movw	r22, r18
    882e:	84 2f       	mov	r24, r20
    8830:	91 58       	subi	r25, 0x81	; 129
    8832:	88 0f       	add	r24, r24
    8834:	96 95       	lsr	r25
    8836:	87 95       	ror	r24
    8838:	08 95       	ret

0000883a <square>:
    883a:	9b 01       	movw	r18, r22
    883c:	ac 01       	movw	r20, r24
    883e:	52 cf       	rjmp	.-348    	; 0x86e4 <__mulsf3>

00008840 <trunc>:
    8840:	61 de       	rcall	.-830    	; 0x8504 <__fp_trunc>
    8842:	20 f0       	brcs	.+8      	; 0x884c <trunc+0xc>
    8844:	9f 37       	cpi	r25, 0x7F	; 127
    8846:	08 f4       	brcc	.+2      	; 0x884a <trunc+0xa>
    8848:	75 ce       	rjmp	.-790    	; 0x8534 <__fp_szero>
    884a:	91 cd       	rjmp	.-1246   	; 0x836e <__fp_mintl>
    884c:	ab cd       	rjmp	.-1194   	; 0x83a4 <__fp_mpack>

0000884e <__unordsf2>:
    884e:	65 dd       	rcall	.-1334   	; 0x831a <__fp_cmp>
    8850:	88 0b       	sbc	r24, r24
    8852:	99 0b       	sbc	r25, r25
    8854:	08 95       	ret

00008856 <__fp_norm2>:
    8856:	91 50       	subi	r25, 0x01	; 1
    8858:	50 40       	sbci	r21, 0x00	; 0
    885a:	66 0f       	add	r22, r22
    885c:	77 1f       	adc	r23, r23
    885e:	88 1f       	adc	r24, r24
    8860:	d2 f7       	brpl	.-12     	; 0x8856 <__fp_norm2>
    8862:	08 95       	ret

00008864 <__fp_powsodd>:
    8864:	9f 93       	push	r25
    8866:	8f 93       	push	r24
    8868:	7f 93       	push	r23
    886a:	6f 93       	push	r22
    886c:	ff 93       	push	r31
    886e:	ef 93       	push	r30
    8870:	9b 01       	movw	r18, r22
    8872:	ac 01       	movw	r20, r24
    8874:	37 df       	rcall	.-402    	; 0x86e4 <__mulsf3>
    8876:	ef 91       	pop	r30
    8878:	ff 91       	pop	r31
    887a:	a5 dd       	rcall	.-1206   	; 0x83c6 <__fp_powser>
    887c:	2f 91       	pop	r18
    887e:	3f 91       	pop	r19
    8880:	4f 91       	pop	r20
    8882:	5f 91       	pop	r21
    8884:	2f cf       	rjmp	.-418    	; 0x86e4 <__mulsf3>

00008886 <__mulsi3>:
    8886:	62 9f       	mul	r22, r18
    8888:	d0 01       	movw	r26, r0
    888a:	73 9f       	mul	r23, r19
    888c:	f0 01       	movw	r30, r0
    888e:	82 9f       	mul	r24, r18
    8890:	e0 0d       	add	r30, r0
    8892:	f1 1d       	adc	r31, r1
    8894:	64 9f       	mul	r22, r20
    8896:	e0 0d       	add	r30, r0
    8898:	f1 1d       	adc	r31, r1
    889a:	92 9f       	mul	r25, r18
    889c:	f0 0d       	add	r31, r0
    889e:	83 9f       	mul	r24, r19
    88a0:	f0 0d       	add	r31, r0
    88a2:	74 9f       	mul	r23, r20
    88a4:	f0 0d       	add	r31, r0
    88a6:	65 9f       	mul	r22, r21
    88a8:	f0 0d       	add	r31, r0
    88aa:	99 27       	eor	r25, r25
    88ac:	72 9f       	mul	r23, r18
    88ae:	b0 0d       	add	r27, r0
    88b0:	e1 1d       	adc	r30, r1
    88b2:	f9 1f       	adc	r31, r25
    88b4:	63 9f       	mul	r22, r19
    88b6:	b0 0d       	add	r27, r0
    88b8:	e1 1d       	adc	r30, r1
    88ba:	f9 1f       	adc	r31, r25
    88bc:	bd 01       	movw	r22, r26
    88be:	cf 01       	movw	r24, r30
    88c0:	11 24       	eor	r1, r1
    88c2:	08 95       	ret

000088c4 <__udivmodsi4>:
    88c4:	a1 e2       	ldi	r26, 0x21	; 33
    88c6:	1a 2e       	mov	r1, r26
    88c8:	aa 1b       	sub	r26, r26
    88ca:	bb 1b       	sub	r27, r27
    88cc:	fd 01       	movw	r30, r26
    88ce:	0d c0       	rjmp	.+26     	; 0x88ea <__udivmodsi4_ep>

000088d0 <__udivmodsi4_loop>:
    88d0:	aa 1f       	adc	r26, r26
    88d2:	bb 1f       	adc	r27, r27
    88d4:	ee 1f       	adc	r30, r30
    88d6:	ff 1f       	adc	r31, r31
    88d8:	a2 17       	cp	r26, r18
    88da:	b3 07       	cpc	r27, r19
    88dc:	e4 07       	cpc	r30, r20
    88de:	f5 07       	cpc	r31, r21
    88e0:	20 f0       	brcs	.+8      	; 0x88ea <__udivmodsi4_ep>
    88e2:	a2 1b       	sub	r26, r18
    88e4:	b3 0b       	sbc	r27, r19
    88e6:	e4 0b       	sbc	r30, r20
    88e8:	f5 0b       	sbc	r31, r21

000088ea <__udivmodsi4_ep>:
    88ea:	66 1f       	adc	r22, r22
    88ec:	77 1f       	adc	r23, r23
    88ee:	88 1f       	adc	r24, r24
    88f0:	99 1f       	adc	r25, r25
    88f2:	1a 94       	dec	r1
    88f4:	69 f7       	brne	.-38     	; 0x88d0 <__udivmodsi4_loop>
    88f6:	60 95       	com	r22
    88f8:	70 95       	com	r23
    88fa:	80 95       	com	r24
    88fc:	90 95       	com	r25
    88fe:	9b 01       	movw	r18, r22
    8900:	ac 01       	movw	r20, r24
    8902:	bd 01       	movw	r22, r26
    8904:	cf 01       	movw	r24, r30
    8906:	08 95       	ret

00008908 <__prologue_saves__>:
    8908:	2f 92       	push	r2
    890a:	3f 92       	push	r3
    890c:	4f 92       	push	r4
    890e:	5f 92       	push	r5
    8910:	6f 92       	push	r6
    8912:	7f 92       	push	r7
    8914:	8f 92       	push	r8
    8916:	9f 92       	push	r9
    8918:	af 92       	push	r10
    891a:	bf 92       	push	r11
    891c:	cf 92       	push	r12
    891e:	df 92       	push	r13
    8920:	ef 92       	push	r14
    8922:	ff 92       	push	r15
    8924:	0f 93       	push	r16
    8926:	1f 93       	push	r17
    8928:	cf 93       	push	r28
    892a:	df 93       	push	r29
    892c:	cd b7       	in	r28, 0x3d	; 61
    892e:	de b7       	in	r29, 0x3e	; 62
    8930:	ca 1b       	sub	r28, r26
    8932:	db 0b       	sbc	r29, r27
    8934:	0f b6       	in	r0, 0x3f	; 63
    8936:	f8 94       	cli
    8938:	de bf       	out	0x3e, r29	; 62
    893a:	0f be       	out	0x3f, r0	; 63
    893c:	cd bf       	out	0x3d, r28	; 61
    893e:	19 94       	eijmp

00008940 <__epilogue_restores__>:
    8940:	2a 88       	ldd	r2, Y+18	; 0x12
    8942:	39 88       	ldd	r3, Y+17	; 0x11
    8944:	48 88       	ldd	r4, Y+16	; 0x10
    8946:	5f 84       	ldd	r5, Y+15	; 0x0f
    8948:	6e 84       	ldd	r6, Y+14	; 0x0e
    894a:	7d 84       	ldd	r7, Y+13	; 0x0d
    894c:	8c 84       	ldd	r8, Y+12	; 0x0c
    894e:	9b 84       	ldd	r9, Y+11	; 0x0b
    8950:	aa 84       	ldd	r10, Y+10	; 0x0a
    8952:	b9 84       	ldd	r11, Y+9	; 0x09
    8954:	c8 84       	ldd	r12, Y+8	; 0x08
    8956:	df 80       	ldd	r13, Y+7	; 0x07
    8958:	ee 80       	ldd	r14, Y+6	; 0x06
    895a:	fd 80       	ldd	r15, Y+5	; 0x05
    895c:	0c 81       	ldd	r16, Y+4	; 0x04
    895e:	1b 81       	ldd	r17, Y+3	; 0x03
    8960:	aa 81       	ldd	r26, Y+2	; 0x02
    8962:	b9 81       	ldd	r27, Y+1	; 0x01
    8964:	ce 0f       	add	r28, r30
    8966:	d1 1d       	adc	r29, r1
    8968:	0f b6       	in	r0, 0x3f	; 63
    896a:	f8 94       	cli
    896c:	de bf       	out	0x3e, r29	; 62
    896e:	0f be       	out	0x3f, r0	; 63
    8970:	cd bf       	out	0x3d, r28	; 61
    8972:	ed 01       	movw	r28, r26
    8974:	08 95       	ret

00008976 <strtod>:
    8976:	8f 92       	push	r8
    8978:	9f 92       	push	r9
    897a:	af 92       	push	r10
    897c:	bf 92       	push	r11
    897e:	cf 92       	push	r12
    8980:	df 92       	push	r13
    8982:	ef 92       	push	r14
    8984:	ff 92       	push	r15
    8986:	0f 93       	push	r16
    8988:	1f 93       	push	r17
    898a:	cf 93       	push	r28
    898c:	df 93       	push	r29
    898e:	ec 01       	movw	r28, r24
    8990:	5b 01       	movw	r10, r22
    8992:	61 15       	cp	r22, r1
    8994:	71 05       	cpc	r23, r1
    8996:	19 f0       	breq	.+6      	; 0x899e <strtod+0x28>
    8998:	fb 01       	movw	r30, r22
    899a:	80 83       	st	Z, r24
    899c:	91 83       	std	Z+1, r25	; 0x01
    899e:	f9 90       	ld	r15, Y+
    89a0:	8f 2d       	mov	r24, r15
    89a2:	90 e0       	ldi	r25, 0x00	; 0
    89a4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <isspace>
    89a8:	89 2b       	or	r24, r25
    89aa:	c9 f7       	brne	.-14     	; 0x899e <strtod+0x28>
    89ac:	fd e2       	ldi	r31, 0x2D	; 45
    89ae:	ff 16       	cp	r15, r31
    89b0:	21 f4       	brne	.+8      	; 0x89ba <strtod+0x44>
    89b2:	f9 90       	ld	r15, Y+
    89b4:	ee 24       	eor	r14, r14
    89b6:	e3 94       	inc	r14
    89b8:	05 c0       	rjmp	.+10     	; 0x89c4 <strtod+0x4e>
    89ba:	2b e2       	ldi	r18, 0x2B	; 43
    89bc:	f2 16       	cp	r15, r18
    89be:	09 f4       	brne	.+2      	; 0x89c2 <strtod+0x4c>
    89c0:	f9 90       	ld	r15, Y+
    89c2:	ee 24       	eor	r14, r14
    89c4:	8e 01       	movw	r16, r28
    89c6:	01 50       	subi	r16, 0x01	; 1
    89c8:	10 40       	sbci	r17, 0x00	; 0
    89ca:	c8 01       	movw	r24, r16
    89cc:	69 ef       	ldi	r22, 0xF9	; 249
    89ce:	7d e1       	ldi	r23, 0x1D	; 29
    89d0:	43 e0       	ldi	r20, 0x03	; 3
    89d2:	50 e0       	ldi	r21, 0x00	; 0
    89d4:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <strncasecmp_P>
    89d8:	89 2b       	or	r24, r25
    89da:	01 f5       	brne	.+64     	; 0x8a1c <strtod+0xa6>
    89dc:	8e 01       	movw	r16, r28
    89de:	0e 5f       	subi	r16, 0xFE	; 254
    89e0:	1f 4f       	sbci	r17, 0xFF	; 255
    89e2:	c8 01       	movw	r24, r16
    89e4:	6c ef       	ldi	r22, 0xFC	; 252
    89e6:	7d e1       	ldi	r23, 0x1D	; 29
    89e8:	45 e0       	ldi	r20, 0x05	; 5
    89ea:	50 e0       	ldi	r21, 0x00	; 0
    89ec:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <strncasecmp_P>
    89f0:	89 2b       	or	r24, r25
    89f2:	19 f4       	brne	.+6      	; 0x89fa <strtod+0x84>
    89f4:	8e 01       	movw	r16, r28
    89f6:	09 5f       	subi	r16, 0xF9	; 249
    89f8:	1f 4f       	sbci	r17, 0xFF	; 255
    89fa:	a1 14       	cp	r10, r1
    89fc:	b1 04       	cpc	r11, r1
    89fe:	19 f0       	breq	.+6      	; 0x8a06 <strtod+0x90>
    8a00:	f5 01       	movw	r30, r10
    8a02:	00 83       	st	Z, r16
    8a04:	11 83       	std	Z+1, r17	; 0x01
    8a06:	e0 fc       	sbrc	r14, 0
    8a08:	04 c0       	rjmp	.+8      	; 0x8a12 <strtod+0x9c>
    8a0a:	70 e0       	ldi	r23, 0x00	; 0
    8a0c:	90 e0       	ldi	r25, 0x00	; 0
    8a0e:	80 e8       	ldi	r24, 0x80	; 128
    8a10:	14 c0       	rjmp	.+40     	; 0x8a3a <strtod+0xc4>
    8a12:	70 e0       	ldi	r23, 0x00	; 0
    8a14:	90 e0       	ldi	r25, 0x00	; 0
    8a16:	80 e8       	ldi	r24, 0x80	; 128
    8a18:	6f ef       	ldi	r22, 0xFF	; 255
    8a1a:	08 c1       	rjmp	.+528    	; 0x8c2c <strtod+0x2b6>
    8a1c:	c8 01       	movw	r24, r16
    8a1e:	61 e0       	ldi	r22, 0x01	; 1
    8a20:	7e e1       	ldi	r23, 0x1E	; 30
    8a22:	43 e0       	ldi	r20, 0x03	; 3
    8a24:	50 e0       	ldi	r21, 0x00	; 0
    8a26:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <strncasecmp_P>
    8a2a:	89 2b       	or	r24, r25
    8a2c:	69 f4       	brne	.+26     	; 0x8a48 <strtod+0xd2>
    8a2e:	a1 14       	cp	r10, r1
    8a30:	b1 04       	cpc	r11, r1
    8a32:	29 f4       	brne	.+10     	; 0x8a3e <strtod+0xc8>
    8a34:	70 e0       	ldi	r23, 0x00	; 0
    8a36:	90 e0       	ldi	r25, 0x00	; 0
    8a38:	80 ec       	ldi	r24, 0xC0	; 192
    8a3a:	6f e7       	ldi	r22, 0x7F	; 127
    8a3c:	f7 c0       	rjmp	.+494    	; 0x8c2c <strtod+0x2b6>
    8a3e:	22 96       	adiw	r28, 0x02	; 2
    8a40:	f5 01       	movw	r30, r10
    8a42:	c0 83       	st	Z, r28
    8a44:	d1 83       	std	Z+1, r29	; 0x01
    8a46:	f6 cf       	rjmp	.-20     	; 0x8a34 <strtod+0xbe>
    8a48:	88 24       	eor	r8, r8
    8a4a:	99 24       	eor	r9, r9
    8a4c:	40 e0       	ldi	r20, 0x00	; 0
    8a4e:	50 e0       	ldi	r21, 0x00	; 0
    8a50:	60 e0       	ldi	r22, 0x00	; 0
    8a52:	70 e0       	ldi	r23, 0x00	; 0
    8a54:	ef 2d       	mov	r30, r15
    8a56:	e0 53       	subi	r30, 0x30	; 48
    8a58:	ea 30       	cpi	r30, 0x0A	; 10
    8a5a:	a0 f5       	brcc	.+104    	; 0x8ac4 <strtod+0x14e>
    8a5c:	f2 e0       	ldi	r31, 0x02	; 2
    8a5e:	ef 2a       	or	r14, r31
    8a60:	8e 2d       	mov	r24, r14
    8a62:	90 e0       	ldi	r25, 0x00	; 0
    8a64:	9c 01       	movw	r18, r24
    8a66:	28 70       	andi	r18, 0x08	; 8
    8a68:	30 70       	andi	r19, 0x00	; 0
    8a6a:	e2 fe       	sbrs	r14, 2
    8a6c:	06 c0       	rjmp	.+12     	; 0x8a7a <strtod+0x104>
    8a6e:	23 2b       	or	r18, r19
    8a70:	79 f5       	brne	.+94     	; 0x8ad0 <strtod+0x15a>
    8a72:	08 94       	sec
    8a74:	81 1c       	adc	r8, r1
    8a76:	91 1c       	adc	r9, r1
    8a78:	2b c0       	rjmp	.+86     	; 0x8ad0 <strtod+0x15a>
    8a7a:	23 2b       	or	r18, r19
    8a7c:	19 f0       	breq	.+6      	; 0x8a84 <strtod+0x10e>
    8a7e:	08 94       	sec
    8a80:	81 08       	sbc	r8, r1
    8a82:	91 08       	sbc	r9, r1
    8a84:	db 01       	movw	r26, r22
    8a86:	ca 01       	movw	r24, r20
    8a88:	12 e0       	ldi	r17, 0x02	; 2
    8a8a:	88 0f       	add	r24, r24
    8a8c:	99 1f       	adc	r25, r25
    8a8e:	aa 1f       	adc	r26, r26
    8a90:	bb 1f       	adc	r27, r27
    8a92:	1a 95       	dec	r17
    8a94:	d1 f7       	brne	.-12     	; 0x8a8a <strtod+0x114>
    8a96:	48 0f       	add	r20, r24
    8a98:	59 1f       	adc	r21, r25
    8a9a:	6a 1f       	adc	r22, r26
    8a9c:	7b 1f       	adc	r23, r27
    8a9e:	44 0f       	add	r20, r20
    8aa0:	55 1f       	adc	r21, r21
    8aa2:	66 1f       	adc	r22, r22
    8aa4:	77 1f       	adc	r23, r23
    8aa6:	4e 0f       	add	r20, r30
    8aa8:	51 1d       	adc	r21, r1
    8aaa:	61 1d       	adc	r22, r1
    8aac:	71 1d       	adc	r23, r1
    8aae:	48 39       	cpi	r20, 0x98	; 152
    8ab0:	29 e9       	ldi	r18, 0x99	; 153
    8ab2:	52 07       	cpc	r21, r18
    8ab4:	29 e9       	ldi	r18, 0x99	; 153
    8ab6:	62 07       	cpc	r22, r18
    8ab8:	29 e1       	ldi	r18, 0x19	; 25
    8aba:	72 07       	cpc	r23, r18
    8abc:	48 f0       	brcs	.+18     	; 0x8ad0 <strtod+0x15a>
    8abe:	84 e0       	ldi	r24, 0x04	; 4
    8ac0:	e8 2a       	or	r14, r24
    8ac2:	06 c0       	rjmp	.+12     	; 0x8ad0 <strtod+0x15a>
    8ac4:	ee 3f       	cpi	r30, 0xFE	; 254
    8ac6:	31 f4       	brne	.+12     	; 0x8ad4 <strtod+0x15e>
    8ac8:	e3 fc       	sbrc	r14, 3
    8aca:	39 c0       	rjmp	.+114    	; 0x8b3e <strtod+0x1c8>
    8acc:	98 e0       	ldi	r25, 0x08	; 8
    8ace:	e9 2a       	or	r14, r25
    8ad0:	f9 90       	ld	r15, Y+
    8ad2:	c0 cf       	rjmp	.-128    	; 0x8a54 <strtod+0xde>
    8ad4:	e5 33       	cpi	r30, 0x35	; 53
    8ad6:	11 f0       	breq	.+4      	; 0x8adc <strtod+0x166>
    8ad8:	e5 31       	cpi	r30, 0x15	; 21
    8ada:	89 f5       	brne	.+98     	; 0x8b3e <strtod+0x1c8>
    8adc:	29 91       	ld	r18, Y+
    8ade:	2d 32       	cpi	r18, 0x2D	; 45
    8ae0:	19 f4       	brne	.+6      	; 0x8ae8 <strtod+0x172>
    8ae2:	e0 e1       	ldi	r30, 0x10	; 16
    8ae4:	ee 2a       	or	r14, r30
    8ae6:	05 c0       	rjmp	.+10     	; 0x8af2 <strtod+0x17c>
    8ae8:	2b 32       	cpi	r18, 0x2B	; 43
    8aea:	19 f0       	breq	.+6      	; 0x8af2 <strtod+0x17c>
    8aec:	81 e0       	ldi	r24, 0x01	; 1
    8aee:	90 e0       	ldi	r25, 0x00	; 0
    8af0:	03 c0       	rjmp	.+6      	; 0x8af8 <strtod+0x182>
    8af2:	29 91       	ld	r18, Y+
    8af4:	82 e0       	ldi	r24, 0x02	; 2
    8af6:	90 e0       	ldi	r25, 0x00	; 0
    8af8:	e2 2f       	mov	r30, r18
    8afa:	e0 53       	subi	r30, 0x30	; 48
    8afc:	ea 30       	cpi	r30, 0x0A	; 10
    8afe:	18 f0       	brcs	.+6      	; 0x8b06 <strtod+0x190>
    8b00:	c8 1b       	sub	r28, r24
    8b02:	d9 0b       	sbc	r29, r25
    8b04:	1c c0       	rjmp	.+56     	; 0x8b3e <strtod+0x1c8>
    8b06:	20 e0       	ldi	r18, 0x00	; 0
    8b08:	30 e0       	ldi	r19, 0x00	; 0
    8b0a:	fc e0       	ldi	r31, 0x0C	; 12
    8b0c:	20 38       	cpi	r18, 0x80	; 128
    8b0e:	3f 07       	cpc	r19, r31
    8b10:	5c f4       	brge	.+22     	; 0x8b28 <strtod+0x1b2>
    8b12:	c9 01       	movw	r24, r18
    8b14:	88 0f       	add	r24, r24
    8b16:	99 1f       	adc	r25, r25
    8b18:	88 0f       	add	r24, r24
    8b1a:	99 1f       	adc	r25, r25
    8b1c:	28 0f       	add	r18, r24
    8b1e:	39 1f       	adc	r19, r25
    8b20:	22 0f       	add	r18, r18
    8b22:	33 1f       	adc	r19, r19
    8b24:	2e 0f       	add	r18, r30
    8b26:	31 1d       	adc	r19, r1
    8b28:	e9 91       	ld	r30, Y+
    8b2a:	e0 53       	subi	r30, 0x30	; 48
    8b2c:	ea 30       	cpi	r30, 0x0A	; 10
    8b2e:	68 f3       	brcs	.-38     	; 0x8b0a <strtod+0x194>
    8b30:	e4 fe       	sbrs	r14, 4
    8b32:	03 c0       	rjmp	.+6      	; 0x8b3a <strtod+0x1c4>
    8b34:	30 95       	com	r19
    8b36:	21 95       	neg	r18
    8b38:	3f 4f       	sbci	r19, 0xFF	; 255
    8b3a:	82 0e       	add	r8, r18
    8b3c:	93 1e       	adc	r9, r19
    8b3e:	ce 2c       	mov	r12, r14
    8b40:	dd 24       	eor	r13, r13
    8b42:	e1 fe       	sbrs	r14, 1
    8b44:	07 c0       	rjmp	.+14     	; 0x8b54 <strtod+0x1de>
    8b46:	a1 14       	cp	r10, r1
    8b48:	b1 04       	cpc	r11, r1
    8b4a:	21 f0       	breq	.+8      	; 0x8b54 <strtod+0x1de>
    8b4c:	21 97       	sbiw	r28, 0x01	; 1
    8b4e:	f5 01       	movw	r30, r10
    8b50:	c0 83       	st	Z, r28
    8b52:	d1 83       	std	Z+1, r29	; 0x01
    8b54:	cb 01       	movw	r24, r22
    8b56:	ba 01       	movw	r22, r20
    8b58:	0e 94 50 41 	call	0x82a0	; 0x82a0 <__floatunsisf>
    8b5c:	7b 01       	movw	r14, r22
    8b5e:	8c 01       	movw	r16, r24
    8b60:	f3 e0       	ldi	r31, 0x03	; 3
    8b62:	cf 22       	and	r12, r31
    8b64:	dd 24       	eor	r13, r13
    8b66:	23 e0       	ldi	r18, 0x03	; 3
    8b68:	c2 16       	cp	r12, r18
    8b6a:	d1 04       	cpc	r13, r1
    8b6c:	21 f4       	brne	.+8      	; 0x8b76 <strtod+0x200>
    8b6e:	17 fb       	bst	r17, 7
    8b70:	10 95       	com	r17
    8b72:	17 f9       	bld	r17, 7
    8b74:	10 95       	com	r17
    8b76:	57 01       	movw	r10, r14
    8b78:	68 01       	movw	r12, r16
    8b7a:	c8 01       	movw	r24, r16
    8b7c:	b7 01       	movw	r22, r14
    8b7e:	20 e0       	ldi	r18, 0x00	; 0
    8b80:	30 e0       	ldi	r19, 0x00	; 0
    8b82:	40 e0       	ldi	r20, 0x00	; 0
    8b84:	50 e0       	ldi	r21, 0x00	; 0
    8b86:	0e 94 b0 40 	call	0x8160	; 0x8160 <__cmpsf2>
    8b8a:	88 23       	and	r24, r24
    8b8c:	09 f4       	brne	.+2      	; 0x8b90 <strtod+0x21a>
    8b8e:	4a c0       	rjmp	.+148    	; 0x8c24 <strtod+0x2ae>
    8b90:	97 fe       	sbrs	r9, 7
    8b92:	0d c0       	rjmp	.+26     	; 0x8bae <strtod+0x238>
    8b94:	28 e1       	ldi	r18, 0x18	; 24
    8b96:	e2 2e       	mov	r14, r18
    8b98:	2e e1       	ldi	r18, 0x1E	; 30
    8b9a:	f2 2e       	mov	r15, r18
    8b9c:	90 94       	com	r9
    8b9e:	81 94       	neg	r8
    8ba0:	91 08       	sbc	r9, r1
    8ba2:	93 94       	inc	r9
    8ba4:	c0 e2       	ldi	r28, 0x20	; 32
    8ba6:	d0 e0       	ldi	r29, 0x00	; 0
    8ba8:	00 e0       	ldi	r16, 0x00	; 0
    8baa:	10 e0       	ldi	r17, 0x00	; 0
    8bac:	12 c0       	rjmp	.+36     	; 0x8bd2 <strtod+0x25c>
    8bae:	90 e3       	ldi	r25, 0x30	; 48
    8bb0:	e9 2e       	mov	r14, r25
    8bb2:	9e e1       	ldi	r25, 0x1E	; 30
    8bb4:	f9 2e       	mov	r15, r25
    8bb6:	f6 cf       	rjmp	.-20     	; 0x8ba4 <strtod+0x22e>
    8bb8:	f7 01       	movw	r30, r14
    8bba:	25 91       	lpm	r18, Z+
    8bbc:	35 91       	lpm	r19, Z+
    8bbe:	45 91       	lpm	r20, Z+
    8bc0:	54 91       	lpm	r21, Z+
    8bc2:	c6 01       	movw	r24, r12
    8bc4:	b5 01       	movw	r22, r10
    8bc6:	0e 94 72 43 	call	0x86e4	; 0x86e4 <__mulsf3>
    8bca:	5b 01       	movw	r10, r22
    8bcc:	6c 01       	movw	r12, r24
    8bce:	8c 1a       	sub	r8, r28
    8bd0:	9d 0a       	sbc	r9, r29
    8bd2:	8c 16       	cp	r8, r28
    8bd4:	9d 06       	cpc	r9, r29
    8bd6:	84 f7       	brge	.-32     	; 0x8bb8 <strtod+0x242>
    8bd8:	d5 95       	asr	r29
    8bda:	c7 95       	ror	r28
    8bdc:	0f 5f       	subi	r16, 0xFF	; 255
    8bde:	1f 4f       	sbci	r17, 0xFF	; 255
    8be0:	06 30       	cpi	r16, 0x06	; 6
    8be2:	11 05       	cpc	r17, r1
    8be4:	29 f0       	breq	.+10     	; 0x8bf0 <strtod+0x27a>
    8be6:	8c ef       	ldi	r24, 0xFC	; 252
    8be8:	9f ef       	ldi	r25, 0xFF	; 255
    8bea:	e8 0e       	add	r14, r24
    8bec:	f9 1e       	adc	r15, r25
    8bee:	f1 cf       	rjmp	.-30     	; 0x8bd2 <strtod+0x25c>
    8bf0:	c5 01       	movw	r24, r10
    8bf2:	d6 01       	movw	r26, r12
    8bf4:	7c 01       	movw	r14, r24
    8bf6:	8d 01       	movw	r16, r26
    8bf8:	8c 2d       	mov	r24, r12
    8bfa:	88 0f       	add	r24, r24
    8bfc:	8d 2d       	mov	r24, r13
    8bfe:	88 1f       	adc	r24, r24
    8c00:	8f 3f       	cpi	r24, 0xFF	; 255
    8c02:	51 f0       	breq	.+20     	; 0x8c18 <strtod+0x2a2>
    8c04:	c6 01       	movw	r24, r12
    8c06:	b5 01       	movw	r22, r10
    8c08:	20 e0       	ldi	r18, 0x00	; 0
    8c0a:	30 e0       	ldi	r19, 0x00	; 0
    8c0c:	40 e0       	ldi	r20, 0x00	; 0
    8c0e:	50 e0       	ldi	r21, 0x00	; 0
    8c10:	0e 94 b0 40 	call	0x8160	; 0x8160 <__cmpsf2>
    8c14:	88 23       	and	r24, r24
    8c16:	31 f4       	brne	.+12     	; 0x8c24 <strtod+0x2ae>
    8c18:	82 e2       	ldi	r24, 0x22	; 34
    8c1a:	90 e0       	ldi	r25, 0x00	; 0
    8c1c:	80 93 10 25 	sts	0x2510, r24
    8c20:	90 93 11 25 	sts	0x2511, r25
    8c24:	7e 2d       	mov	r23, r14
    8c26:	9f 2d       	mov	r25, r15
    8c28:	80 2f       	mov	r24, r16
    8c2a:	61 2f       	mov	r22, r17
    8c2c:	27 2f       	mov	r18, r23
    8c2e:	39 2f       	mov	r19, r25
    8c30:	48 2f       	mov	r20, r24
    8c32:	56 2f       	mov	r21, r22
    8c34:	b9 01       	movw	r22, r18
    8c36:	ca 01       	movw	r24, r20
    8c38:	df 91       	pop	r29
    8c3a:	cf 91       	pop	r28
    8c3c:	1f 91       	pop	r17
    8c3e:	0f 91       	pop	r16
    8c40:	ff 90       	pop	r15
    8c42:	ef 90       	pop	r14
    8c44:	df 90       	pop	r13
    8c46:	cf 90       	pop	r12
    8c48:	bf 90       	pop	r11
    8c4a:	af 90       	pop	r10
    8c4c:	9f 90       	pop	r9
    8c4e:	8f 90       	pop	r8
    8c50:	08 95       	ret

00008c52 <atoi>:
    8c52:	fc 01       	movw	r30, r24
    8c54:	88 27       	eor	r24, r24
    8c56:	99 27       	eor	r25, r25
    8c58:	e8 94       	clt
    8c5a:	21 91       	ld	r18, Z+
    8c5c:	20 32       	cpi	r18, 0x20	; 32
    8c5e:	e9 f3       	breq	.-6      	; 0x8c5a <atoi+0x8>
    8c60:	29 30       	cpi	r18, 0x09	; 9
    8c62:	10 f0       	brcs	.+4      	; 0x8c68 <atoi+0x16>
    8c64:	2e 30       	cpi	r18, 0x0E	; 14
    8c66:	c8 f3       	brcs	.-14     	; 0x8c5a <atoi+0x8>
    8c68:	2b 32       	cpi	r18, 0x2B	; 43
    8c6a:	41 f0       	breq	.+16     	; 0x8c7c <atoi+0x2a>
    8c6c:	2d 32       	cpi	r18, 0x2D	; 45
    8c6e:	39 f4       	brne	.+14     	; 0x8c7e <atoi+0x2c>
    8c70:	68 94       	set
    8c72:	04 c0       	rjmp	.+8      	; 0x8c7c <atoi+0x2a>
    8c74:	0e 94 55 47 	call	0x8eaa	; 0x8eaa <__mulhi_const_10>
    8c78:	82 0f       	add	r24, r18
    8c7a:	91 1d       	adc	r25, r1
    8c7c:	21 91       	ld	r18, Z+
    8c7e:	20 53       	subi	r18, 0x30	; 48
    8c80:	2a 30       	cpi	r18, 0x0A	; 10
    8c82:	c0 f3       	brcs	.-16     	; 0x8c74 <atoi+0x22>
    8c84:	1e f4       	brtc	.+6      	; 0x8c8c <atoi+0x3a>
    8c86:	90 95       	com	r25
    8c88:	81 95       	neg	r24
    8c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c8c:	08 95       	ret

00008c8e <__ftoa_engine>:
    8c8e:	28 30       	cpi	r18, 0x08	; 8
    8c90:	08 f0       	brcs	.+2      	; 0x8c94 <__ftoa_engine+0x6>
    8c92:	27 e0       	ldi	r18, 0x07	; 7
    8c94:	33 27       	eor	r19, r19
    8c96:	da 01       	movw	r26, r20
    8c98:	99 0f       	add	r25, r25
    8c9a:	31 1d       	adc	r19, r1
    8c9c:	87 fd       	sbrc	r24, 7
    8c9e:	91 60       	ori	r25, 0x01	; 1
    8ca0:	00 96       	adiw	r24, 0x00	; 0
    8ca2:	61 05       	cpc	r22, r1
    8ca4:	71 05       	cpc	r23, r1
    8ca6:	39 f4       	brne	.+14     	; 0x8cb6 <__ftoa_engine+0x28>
    8ca8:	32 60       	ori	r19, 0x02	; 2
    8caa:	2e 5f       	subi	r18, 0xFE	; 254
    8cac:	3d 93       	st	X+, r19
    8cae:	30 e3       	ldi	r19, 0x30	; 48
    8cb0:	2a 95       	dec	r18
    8cb2:	e1 f7       	brne	.-8      	; 0x8cac <__ftoa_engine+0x1e>
    8cb4:	08 95       	ret
    8cb6:	9f 3f       	cpi	r25, 0xFF	; 255
    8cb8:	30 f0       	brcs	.+12     	; 0x8cc6 <__ftoa_engine+0x38>
    8cba:	80 38       	cpi	r24, 0x80	; 128
    8cbc:	71 05       	cpc	r23, r1
    8cbe:	61 05       	cpc	r22, r1
    8cc0:	09 f0       	breq	.+2      	; 0x8cc4 <__ftoa_engine+0x36>
    8cc2:	3c 5f       	subi	r19, 0xFC	; 252
    8cc4:	3c 5f       	subi	r19, 0xFC	; 252
    8cc6:	3d 93       	st	X+, r19
    8cc8:	91 30       	cpi	r25, 0x01	; 1
    8cca:	08 f0       	brcs	.+2      	; 0x8cce <__ftoa_engine+0x40>
    8ccc:	80 68       	ori	r24, 0x80	; 128
    8cce:	91 1d       	adc	r25, r1
    8cd0:	df 93       	push	r29
    8cd2:	cf 93       	push	r28
    8cd4:	1f 93       	push	r17
    8cd6:	0f 93       	push	r16
    8cd8:	ff 92       	push	r15
    8cda:	ef 92       	push	r14
    8cdc:	19 2f       	mov	r17, r25
    8cde:	98 7f       	andi	r25, 0xF8	; 248
    8ce0:	96 95       	lsr	r25
    8ce2:	e9 2f       	mov	r30, r25
    8ce4:	96 95       	lsr	r25
    8ce6:	96 95       	lsr	r25
    8ce8:	e9 0f       	add	r30, r25
    8cea:	ff 27       	eor	r31, r31
    8cec:	e2 57       	subi	r30, 0x72	; 114
    8cee:	f1 4e       	sbci	r31, 0xE1	; 225
    8cf0:	99 27       	eor	r25, r25
    8cf2:	33 27       	eor	r19, r19
    8cf4:	ee 24       	eor	r14, r14
    8cf6:	ff 24       	eor	r15, r15
    8cf8:	a7 01       	movw	r20, r14
    8cfa:	e7 01       	movw	r28, r14
    8cfc:	05 90       	lpm	r0, Z+
    8cfe:	08 94       	sec
    8d00:	07 94       	ror	r0
    8d02:	28 f4       	brcc	.+10     	; 0x8d0e <__ftoa_engine+0x80>
    8d04:	36 0f       	add	r19, r22
    8d06:	e7 1e       	adc	r14, r23
    8d08:	f8 1e       	adc	r15, r24
    8d0a:	49 1f       	adc	r20, r25
    8d0c:	51 1d       	adc	r21, r1
    8d0e:	66 0f       	add	r22, r22
    8d10:	77 1f       	adc	r23, r23
    8d12:	88 1f       	adc	r24, r24
    8d14:	99 1f       	adc	r25, r25
    8d16:	06 94       	lsr	r0
    8d18:	a1 f7       	brne	.-24     	; 0x8d02 <__ftoa_engine+0x74>
    8d1a:	05 90       	lpm	r0, Z+
    8d1c:	07 94       	ror	r0
    8d1e:	28 f4       	brcc	.+10     	; 0x8d2a <__ftoa_engine+0x9c>
    8d20:	e7 0e       	add	r14, r23
    8d22:	f8 1e       	adc	r15, r24
    8d24:	49 1f       	adc	r20, r25
    8d26:	56 1f       	adc	r21, r22
    8d28:	c1 1d       	adc	r28, r1
    8d2a:	77 0f       	add	r23, r23
    8d2c:	88 1f       	adc	r24, r24
    8d2e:	99 1f       	adc	r25, r25
    8d30:	66 1f       	adc	r22, r22
    8d32:	06 94       	lsr	r0
    8d34:	a1 f7       	brne	.-24     	; 0x8d1e <__ftoa_engine+0x90>
    8d36:	05 90       	lpm	r0, Z+
    8d38:	07 94       	ror	r0
    8d3a:	28 f4       	brcc	.+10     	; 0x8d46 <__ftoa_engine+0xb8>
    8d3c:	f8 0e       	add	r15, r24
    8d3e:	49 1f       	adc	r20, r25
    8d40:	56 1f       	adc	r21, r22
    8d42:	c7 1f       	adc	r28, r23
    8d44:	d1 1d       	adc	r29, r1
    8d46:	88 0f       	add	r24, r24
    8d48:	99 1f       	adc	r25, r25
    8d4a:	66 1f       	adc	r22, r22
    8d4c:	77 1f       	adc	r23, r23
    8d4e:	06 94       	lsr	r0
    8d50:	a1 f7       	brne	.-24     	; 0x8d3a <__ftoa_engine+0xac>
    8d52:	05 90       	lpm	r0, Z+
    8d54:	07 94       	ror	r0
    8d56:	20 f4       	brcc	.+8      	; 0x8d60 <__ftoa_engine+0xd2>
    8d58:	49 0f       	add	r20, r25
    8d5a:	56 1f       	adc	r21, r22
    8d5c:	c7 1f       	adc	r28, r23
    8d5e:	d8 1f       	adc	r29, r24
    8d60:	99 0f       	add	r25, r25
    8d62:	66 1f       	adc	r22, r22
    8d64:	77 1f       	adc	r23, r23
    8d66:	88 1f       	adc	r24, r24
    8d68:	06 94       	lsr	r0
    8d6a:	a9 f7       	brne	.-22     	; 0x8d56 <__ftoa_engine+0xc8>
    8d6c:	84 91       	lpm	r24, Z+
    8d6e:	10 95       	com	r17
    8d70:	17 70       	andi	r17, 0x07	; 7
    8d72:	41 f0       	breq	.+16     	; 0x8d84 <__ftoa_engine+0xf6>
    8d74:	d6 95       	lsr	r29
    8d76:	c7 95       	ror	r28
    8d78:	57 95       	ror	r21
    8d7a:	47 95       	ror	r20
    8d7c:	f7 94       	ror	r15
    8d7e:	e7 94       	ror	r14
    8d80:	1a 95       	dec	r17
    8d82:	c1 f7       	brne	.-16     	; 0x8d74 <__ftoa_engine+0xe6>
    8d84:	e4 e3       	ldi	r30, 0x34	; 52
    8d86:	fe e1       	ldi	r31, 0x1E	; 30
    8d88:	68 94       	set
    8d8a:	15 90       	lpm	r1, Z+
    8d8c:	15 91       	lpm	r17, Z+
    8d8e:	35 91       	lpm	r19, Z+
    8d90:	65 91       	lpm	r22, Z+
    8d92:	95 91       	lpm	r25, Z+
    8d94:	05 90       	lpm	r0, Z+
    8d96:	7f e2       	ldi	r23, 0x2F	; 47
    8d98:	73 95       	inc	r23
    8d9a:	e1 18       	sub	r14, r1
    8d9c:	f1 0a       	sbc	r15, r17
    8d9e:	43 0b       	sbc	r20, r19
    8da0:	56 0b       	sbc	r21, r22
    8da2:	c9 0b       	sbc	r28, r25
    8da4:	d0 09       	sbc	r29, r0
    8da6:	c0 f7       	brcc	.-16     	; 0x8d98 <__ftoa_engine+0x10a>
    8da8:	e1 0c       	add	r14, r1
    8daa:	f1 1e       	adc	r15, r17
    8dac:	43 1f       	adc	r20, r19
    8dae:	56 1f       	adc	r21, r22
    8db0:	c9 1f       	adc	r28, r25
    8db2:	d0 1d       	adc	r29, r0
    8db4:	7e f4       	brtc	.+30     	; 0x8dd4 <__ftoa_engine+0x146>
    8db6:	70 33       	cpi	r23, 0x30	; 48
    8db8:	11 f4       	brne	.+4      	; 0x8dbe <__ftoa_engine+0x130>
    8dba:	8a 95       	dec	r24
    8dbc:	e6 cf       	rjmp	.-52     	; 0x8d8a <__ftoa_engine+0xfc>
    8dbe:	e8 94       	clt
    8dc0:	01 50       	subi	r16, 0x01	; 1
    8dc2:	30 f0       	brcs	.+12     	; 0x8dd0 <__ftoa_engine+0x142>
    8dc4:	08 0f       	add	r16, r24
    8dc6:	0a f4       	brpl	.+2      	; 0x8dca <__ftoa_engine+0x13c>
    8dc8:	00 27       	eor	r16, r16
    8dca:	02 17       	cp	r16, r18
    8dcc:	08 f4       	brcc	.+2      	; 0x8dd0 <__ftoa_engine+0x142>
    8dce:	20 2f       	mov	r18, r16
    8dd0:	23 95       	inc	r18
    8dd2:	02 2f       	mov	r16, r18
    8dd4:	7a 33       	cpi	r23, 0x3A	; 58
    8dd6:	28 f0       	brcs	.+10     	; 0x8de2 <__ftoa_engine+0x154>
    8dd8:	79 e3       	ldi	r23, 0x39	; 57
    8dda:	7d 93       	st	X+, r23
    8ddc:	2a 95       	dec	r18
    8dde:	e9 f7       	brne	.-6      	; 0x8dda <__ftoa_engine+0x14c>
    8de0:	10 c0       	rjmp	.+32     	; 0x8e02 <__ftoa_engine+0x174>
    8de2:	7d 93       	st	X+, r23
    8de4:	2a 95       	dec	r18
    8de6:	89 f6       	brne	.-94     	; 0x8d8a <__ftoa_engine+0xfc>
    8de8:	06 94       	lsr	r0
    8dea:	97 95       	ror	r25
    8dec:	67 95       	ror	r22
    8dee:	37 95       	ror	r19
    8df0:	17 95       	ror	r17
    8df2:	17 94       	ror	r1
    8df4:	e1 18       	sub	r14, r1
    8df6:	f1 0a       	sbc	r15, r17
    8df8:	43 0b       	sbc	r20, r19
    8dfa:	56 0b       	sbc	r21, r22
    8dfc:	c9 0b       	sbc	r28, r25
    8dfe:	d0 09       	sbc	r29, r0
    8e00:	98 f0       	brcs	.+38     	; 0x8e28 <__ftoa_engine+0x19a>
    8e02:	23 95       	inc	r18
    8e04:	7e 91       	ld	r23, -X
    8e06:	73 95       	inc	r23
    8e08:	7a 33       	cpi	r23, 0x3A	; 58
    8e0a:	08 f0       	brcs	.+2      	; 0x8e0e <__ftoa_engine+0x180>
    8e0c:	70 e3       	ldi	r23, 0x30	; 48
    8e0e:	7c 93       	st	X, r23
    8e10:	20 13       	cpse	r18, r16
    8e12:	b8 f7       	brcc	.-18     	; 0x8e02 <__ftoa_engine+0x174>
    8e14:	7e 91       	ld	r23, -X
    8e16:	70 61       	ori	r23, 0x10	; 16
    8e18:	7d 93       	st	X+, r23
    8e1a:	30 f0       	brcs	.+12     	; 0x8e28 <__ftoa_engine+0x19a>
    8e1c:	83 95       	inc	r24
    8e1e:	71 e3       	ldi	r23, 0x31	; 49
    8e20:	7d 93       	st	X+, r23
    8e22:	70 e3       	ldi	r23, 0x30	; 48
    8e24:	2a 95       	dec	r18
    8e26:	e1 f7       	brne	.-8      	; 0x8e20 <__ftoa_engine+0x192>
    8e28:	11 24       	eor	r1, r1
    8e2a:	ef 90       	pop	r14
    8e2c:	ff 90       	pop	r15
    8e2e:	0f 91       	pop	r16
    8e30:	1f 91       	pop	r17
    8e32:	cf 91       	pop	r28
    8e34:	df 91       	pop	r29
    8e36:	99 27       	eor	r25, r25
    8e38:	87 fd       	sbrc	r24, 7
    8e3a:	90 95       	com	r25
    8e3c:	08 95       	ret

00008e3e <isspace>:
    8e3e:	91 11       	cpse	r25, r1
    8e40:	21 c1       	rjmp	.+578    	; 0x9084 <__ctype_isfalse>
    8e42:	80 32       	cpi	r24, 0x20	; 32
    8e44:	19 f0       	breq	.+6      	; 0x8e4c <isspace+0xe>
    8e46:	89 50       	subi	r24, 0x09	; 9
    8e48:	85 50       	subi	r24, 0x05	; 5
    8e4a:	d0 f7       	brcc	.-12     	; 0x8e40 <isspace+0x2>
    8e4c:	08 95       	ret

00008e4e <strncasecmp_P>:
    8e4e:	fb 01       	movw	r30, r22
    8e50:	dc 01       	movw	r26, r24
    8e52:	41 50       	subi	r20, 0x01	; 1
    8e54:	50 40       	sbci	r21, 0x00	; 0
    8e56:	88 f0       	brcs	.+34     	; 0x8e7a <strncasecmp_P+0x2c>
    8e58:	8d 91       	ld	r24, X+
    8e5a:	81 34       	cpi	r24, 0x41	; 65
    8e5c:	1c f0       	brlt	.+6      	; 0x8e64 <strncasecmp_P+0x16>
    8e5e:	8b 35       	cpi	r24, 0x5B	; 91
    8e60:	0c f4       	brge	.+2      	; 0x8e64 <strncasecmp_P+0x16>
    8e62:	80 5e       	subi	r24, 0xE0	; 224
    8e64:	65 91       	lpm	r22, Z+
    8e66:	61 34       	cpi	r22, 0x41	; 65
    8e68:	1c f0       	brlt	.+6      	; 0x8e70 <strncasecmp_P+0x22>
    8e6a:	6b 35       	cpi	r22, 0x5B	; 91
    8e6c:	0c f4       	brge	.+2      	; 0x8e70 <strncasecmp_P+0x22>
    8e6e:	60 5e       	subi	r22, 0xE0	; 224
    8e70:	86 1b       	sub	r24, r22
    8e72:	61 11       	cpse	r22, r1
    8e74:	71 f3       	breq	.-36     	; 0x8e52 <strncasecmp_P+0x4>
    8e76:	99 0b       	sbc	r25, r25
    8e78:	08 95       	ret
    8e7a:	88 1b       	sub	r24, r24
    8e7c:	fc cf       	rjmp	.-8      	; 0x8e76 <strncasecmp_P+0x28>

00008e7e <strnlen_P>:
    8e7e:	fc 01       	movw	r30, r24
    8e80:	05 90       	lpm	r0, Z+
    8e82:	61 50       	subi	r22, 0x01	; 1
    8e84:	70 40       	sbci	r23, 0x00	; 0
    8e86:	01 10       	cpse	r0, r1
    8e88:	d8 f7       	brcc	.-10     	; 0x8e80 <strnlen_P+0x2>
    8e8a:	80 95       	com	r24
    8e8c:	90 95       	com	r25
    8e8e:	8e 0f       	add	r24, r30
    8e90:	9f 1f       	adc	r25, r31
    8e92:	08 95       	ret

00008e94 <strnlen>:
    8e94:	fc 01       	movw	r30, r24
    8e96:	61 50       	subi	r22, 0x01	; 1
    8e98:	70 40       	sbci	r23, 0x00	; 0
    8e9a:	01 90       	ld	r0, Z+
    8e9c:	01 10       	cpse	r0, r1
    8e9e:	d8 f7       	brcc	.-10     	; 0x8e96 <strnlen+0x2>
    8ea0:	80 95       	com	r24
    8ea2:	90 95       	com	r25
    8ea4:	8e 0f       	add	r24, r30
    8ea6:	9f 1f       	adc	r25, r31
    8ea8:	08 95       	ret

00008eaa <__mulhi_const_10>:
    8eaa:	7a e0       	ldi	r23, 0x0A	; 10
    8eac:	97 9f       	mul	r25, r23
    8eae:	90 2d       	mov	r25, r0
    8eb0:	87 9f       	mul	r24, r23
    8eb2:	80 2d       	mov	r24, r0
    8eb4:	91 0d       	add	r25, r1
    8eb6:	11 24       	eor	r1, r1
    8eb8:	08 95       	ret

00008eba <clearerr>:
    8eba:	fc 01       	movw	r30, r24
    8ebc:	83 81       	ldd	r24, Z+3	; 0x03
    8ebe:	8f 7c       	andi	r24, 0xCF	; 207
    8ec0:	83 83       	std	Z+3, r24	; 0x03
    8ec2:	08 95       	ret

00008ec4 <fgets>:
    8ec4:	cf 92       	push	r12
    8ec6:	df 92       	push	r13
    8ec8:	ef 92       	push	r14
    8eca:	ff 92       	push	r15
    8ecc:	0f 93       	push	r16
    8ece:	1f 93       	push	r17
    8ed0:	cf 93       	push	r28
    8ed2:	df 93       	push	r29
    8ed4:	7c 01       	movw	r14, r24
    8ed6:	6a 01       	movw	r12, r20
    8ed8:	fa 01       	movw	r30, r20
    8eda:	83 81       	ldd	r24, Z+3	; 0x03
    8edc:	80 ff       	sbrs	r24, 0
    8ede:	19 c0       	rjmp	.+50     	; 0x8f12 <fgets+0x4e>
    8ee0:	16 16       	cp	r1, r22
    8ee2:	17 06       	cpc	r1, r23
    8ee4:	b4 f4       	brge	.+44     	; 0x8f12 <fgets+0x4e>
    8ee6:	eb 01       	movw	r28, r22
    8ee8:	21 97       	sbiw	r28, 0x01	; 1
    8eea:	87 01       	movw	r16, r14
    8eec:	0d c0       	rjmp	.+26     	; 0x8f08 <fgets+0x44>
    8eee:	c6 01       	movw	r24, r12
    8ef0:	0e 94 45 48 	call	0x908a	; 0x908a <fgetc>
    8ef4:	ff ef       	ldi	r31, 0xFF	; 255
    8ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    8ef8:	9f 07       	cpc	r25, r31
    8efa:	59 f0       	breq	.+22     	; 0x8f12 <fgets+0x4e>
    8efc:	f8 01       	movw	r30, r16
    8efe:	81 93       	st	Z+, r24
    8f00:	8f 01       	movw	r16, r30
    8f02:	0a 97       	sbiw	r24, 0x0a	; 10
    8f04:	19 f0       	breq	.+6      	; 0x8f0c <fgets+0x48>
    8f06:	21 97       	sbiw	r28, 0x01	; 1
    8f08:	20 97       	sbiw	r28, 0x00	; 0
    8f0a:	89 f7       	brne	.-30     	; 0x8eee <fgets+0x2a>
    8f0c:	f8 01       	movw	r30, r16
    8f0e:	10 82       	st	Z, r1
    8f10:	02 c0       	rjmp	.+4      	; 0x8f16 <fgets+0x52>
    8f12:	ee 24       	eor	r14, r14
    8f14:	ff 24       	eor	r15, r15
    8f16:	c7 01       	movw	r24, r14
    8f18:	df 91       	pop	r29
    8f1a:	cf 91       	pop	r28
    8f1c:	1f 91       	pop	r17
    8f1e:	0f 91       	pop	r16
    8f20:	ff 90       	pop	r15
    8f22:	ef 90       	pop	r14
    8f24:	df 90       	pop	r13
    8f26:	cf 90       	pop	r12
    8f28:	08 95       	ret

00008f2a <fputc>:
    8f2a:	0f 93       	push	r16
    8f2c:	1f 93       	push	r17
    8f2e:	cf 93       	push	r28
    8f30:	df 93       	push	r29
    8f32:	8c 01       	movw	r16, r24
    8f34:	eb 01       	movw	r28, r22
    8f36:	8b 81       	ldd	r24, Y+3	; 0x03
    8f38:	81 ff       	sbrs	r24, 1
    8f3a:	1b c0       	rjmp	.+54     	; 0x8f72 <fputc+0x48>
    8f3c:	82 ff       	sbrs	r24, 2
    8f3e:	0d c0       	rjmp	.+26     	; 0x8f5a <fputc+0x30>
    8f40:	2e 81       	ldd	r18, Y+6	; 0x06
    8f42:	3f 81       	ldd	r19, Y+7	; 0x07
    8f44:	8c 81       	ldd	r24, Y+4	; 0x04
    8f46:	9d 81       	ldd	r25, Y+5	; 0x05
    8f48:	28 17       	cp	r18, r24
    8f4a:	39 07       	cpc	r19, r25
    8f4c:	64 f4       	brge	.+24     	; 0x8f66 <fputc+0x3c>
    8f4e:	e8 81       	ld	r30, Y
    8f50:	f9 81       	ldd	r31, Y+1	; 0x01
    8f52:	01 93       	st	Z+, r16
    8f54:	e8 83       	st	Y, r30
    8f56:	f9 83       	std	Y+1, r31	; 0x01
    8f58:	06 c0       	rjmp	.+12     	; 0x8f66 <fputc+0x3c>
    8f5a:	e8 85       	ldd	r30, Y+8	; 0x08
    8f5c:	f9 85       	ldd	r31, Y+9	; 0x09
    8f5e:	80 2f       	mov	r24, r16
    8f60:	19 95       	eicall
    8f62:	89 2b       	or	r24, r25
    8f64:	31 f4       	brne	.+12     	; 0x8f72 <fputc+0x48>
    8f66:	8e 81       	ldd	r24, Y+6	; 0x06
    8f68:	9f 81       	ldd	r25, Y+7	; 0x07
    8f6a:	01 96       	adiw	r24, 0x01	; 1
    8f6c:	8e 83       	std	Y+6, r24	; 0x06
    8f6e:	9f 83       	std	Y+7, r25	; 0x07
    8f70:	02 c0       	rjmp	.+4      	; 0x8f76 <fputc+0x4c>
    8f72:	0f ef       	ldi	r16, 0xFF	; 255
    8f74:	1f ef       	ldi	r17, 0xFF	; 255
    8f76:	c8 01       	movw	r24, r16
    8f78:	df 91       	pop	r29
    8f7a:	cf 91       	pop	r28
    8f7c:	1f 91       	pop	r17
    8f7e:	0f 91       	pop	r16
    8f80:	08 95       	ret

00008f82 <printf_P>:
    8f82:	df 93       	push	r29
    8f84:	cf 93       	push	r28
    8f86:	cd b7       	in	r28, 0x3d	; 61
    8f88:	de b7       	in	r29, 0x3e	; 62
    8f8a:	fe 01       	movw	r30, r28
    8f8c:	36 96       	adiw	r30, 0x06	; 6
    8f8e:	61 91       	ld	r22, Z+
    8f90:	71 91       	ld	r23, Z+
    8f92:	a0 91 0c 25 	lds	r26, 0x250C
    8f96:	b0 91 0d 25 	lds	r27, 0x250D
    8f9a:	13 96       	adiw	r26, 0x03	; 3
    8f9c:	8c 91       	ld	r24, X
    8f9e:	13 97       	sbiw	r26, 0x03	; 3
    8fa0:	88 60       	ori	r24, 0x08	; 8
    8fa2:	13 96       	adiw	r26, 0x03	; 3
    8fa4:	8c 93       	st	X, r24
    8fa6:	80 91 0c 25 	lds	r24, 0x250C
    8faa:	90 91 0d 25 	lds	r25, 0x250D
    8fae:	af 01       	movw	r20, r30
    8fb0:	0e 94 66 3c 	call	0x78cc	; 0x78cc <vfprintf>
    8fb4:	e0 91 0c 25 	lds	r30, 0x250C
    8fb8:	f0 91 0d 25 	lds	r31, 0x250D
    8fbc:	23 81       	ldd	r18, Z+3	; 0x03
    8fbe:	27 7f       	andi	r18, 0xF7	; 247
    8fc0:	23 83       	std	Z+3, r18	; 0x03
    8fc2:	cf 91       	pop	r28
    8fc4:	df 91       	pop	r29
    8fc6:	08 95       	ret

00008fc8 <__ultoa_invert>:
    8fc8:	fa 01       	movw	r30, r20
    8fca:	aa 27       	eor	r26, r26
    8fcc:	28 30       	cpi	r18, 0x08	; 8
    8fce:	51 f1       	breq	.+84     	; 0x9024 <__ultoa_invert+0x5c>
    8fd0:	20 31       	cpi	r18, 0x10	; 16
    8fd2:	81 f1       	breq	.+96     	; 0x9034 <__ultoa_invert+0x6c>
    8fd4:	e8 94       	clt
    8fd6:	6f 93       	push	r22
    8fd8:	6e 7f       	andi	r22, 0xFE	; 254
    8fda:	6e 5f       	subi	r22, 0xFE	; 254
    8fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    8fde:	8f 4f       	sbci	r24, 0xFF	; 255
    8fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    8fe2:	af 4f       	sbci	r26, 0xFF	; 255
    8fe4:	b1 e0       	ldi	r27, 0x01	; 1
    8fe6:	3e d0       	rcall	.+124    	; 0x9064 <__ultoa_invert+0x9c>
    8fe8:	b4 e0       	ldi	r27, 0x04	; 4
    8fea:	3c d0       	rcall	.+120    	; 0x9064 <__ultoa_invert+0x9c>
    8fec:	67 0f       	add	r22, r23
    8fee:	78 1f       	adc	r23, r24
    8ff0:	89 1f       	adc	r24, r25
    8ff2:	9a 1f       	adc	r25, r26
    8ff4:	a1 1d       	adc	r26, r1
    8ff6:	68 0f       	add	r22, r24
    8ff8:	79 1f       	adc	r23, r25
    8ffa:	8a 1f       	adc	r24, r26
    8ffc:	91 1d       	adc	r25, r1
    8ffe:	a1 1d       	adc	r26, r1
    9000:	6a 0f       	add	r22, r26
    9002:	71 1d       	adc	r23, r1
    9004:	81 1d       	adc	r24, r1
    9006:	91 1d       	adc	r25, r1
    9008:	a1 1d       	adc	r26, r1
    900a:	20 d0       	rcall	.+64     	; 0x904c <__ultoa_invert+0x84>
    900c:	09 f4       	brne	.+2      	; 0x9010 <__ultoa_invert+0x48>
    900e:	68 94       	set
    9010:	3f 91       	pop	r19
    9012:	2a e0       	ldi	r18, 0x0A	; 10
    9014:	26 9f       	mul	r18, r22
    9016:	11 24       	eor	r1, r1
    9018:	30 19       	sub	r19, r0
    901a:	30 5d       	subi	r19, 0xD0	; 208
    901c:	31 93       	st	Z+, r19
    901e:	de f6       	brtc	.-74     	; 0x8fd6 <__ultoa_invert+0xe>
    9020:	cf 01       	movw	r24, r30
    9022:	08 95       	ret
    9024:	46 2f       	mov	r20, r22
    9026:	47 70       	andi	r20, 0x07	; 7
    9028:	40 5d       	subi	r20, 0xD0	; 208
    902a:	41 93       	st	Z+, r20
    902c:	b3 e0       	ldi	r27, 0x03	; 3
    902e:	0f d0       	rcall	.+30     	; 0x904e <__ultoa_invert+0x86>
    9030:	c9 f7       	brne	.-14     	; 0x9024 <__ultoa_invert+0x5c>
    9032:	f6 cf       	rjmp	.-20     	; 0x9020 <__ultoa_invert+0x58>
    9034:	46 2f       	mov	r20, r22
    9036:	4f 70       	andi	r20, 0x0F	; 15
    9038:	40 5d       	subi	r20, 0xD0	; 208
    903a:	4a 33       	cpi	r20, 0x3A	; 58
    903c:	18 f0       	brcs	.+6      	; 0x9044 <__ultoa_invert+0x7c>
    903e:	49 5d       	subi	r20, 0xD9	; 217
    9040:	31 fd       	sbrc	r19, 1
    9042:	40 52       	subi	r20, 0x20	; 32
    9044:	41 93       	st	Z+, r20
    9046:	02 d0       	rcall	.+4      	; 0x904c <__ultoa_invert+0x84>
    9048:	a9 f7       	brne	.-22     	; 0x9034 <__ultoa_invert+0x6c>
    904a:	ea cf       	rjmp	.-44     	; 0x9020 <__ultoa_invert+0x58>
    904c:	b4 e0       	ldi	r27, 0x04	; 4
    904e:	a6 95       	lsr	r26
    9050:	97 95       	ror	r25
    9052:	87 95       	ror	r24
    9054:	77 95       	ror	r23
    9056:	67 95       	ror	r22
    9058:	ba 95       	dec	r27
    905a:	c9 f7       	brne	.-14     	; 0x904e <__ultoa_invert+0x86>
    905c:	00 97       	sbiw	r24, 0x00	; 0
    905e:	61 05       	cpc	r22, r1
    9060:	71 05       	cpc	r23, r1
    9062:	08 95       	ret
    9064:	9b 01       	movw	r18, r22
    9066:	ac 01       	movw	r20, r24
    9068:	0a 2e       	mov	r0, r26
    906a:	06 94       	lsr	r0
    906c:	57 95       	ror	r21
    906e:	47 95       	ror	r20
    9070:	37 95       	ror	r19
    9072:	27 95       	ror	r18
    9074:	ba 95       	dec	r27
    9076:	c9 f7       	brne	.-14     	; 0x906a <__ultoa_invert+0xa2>
    9078:	62 0f       	add	r22, r18
    907a:	73 1f       	adc	r23, r19
    907c:	84 1f       	adc	r24, r20
    907e:	95 1f       	adc	r25, r21
    9080:	a0 1d       	adc	r26, r0
    9082:	08 95       	ret

00009084 <__ctype_isfalse>:
    9084:	99 27       	eor	r25, r25
    9086:	88 27       	eor	r24, r24

00009088 <__ctype_istrue>:
    9088:	08 95       	ret

0000908a <fgetc>:
    908a:	cf 93       	push	r28
    908c:	df 93       	push	r29
    908e:	ec 01       	movw	r28, r24
    9090:	4b 81       	ldd	r20, Y+3	; 0x03
    9092:	40 ff       	sbrs	r20, 0
    9094:	1a c0       	rjmp	.+52     	; 0x90ca <fgetc+0x40>
    9096:	46 ff       	sbrs	r20, 6
    9098:	0a c0       	rjmp	.+20     	; 0x90ae <fgetc+0x24>
    909a:	4f 7b       	andi	r20, 0xBF	; 191
    909c:	4b 83       	std	Y+3, r20	; 0x03
    909e:	8e 81       	ldd	r24, Y+6	; 0x06
    90a0:	9f 81       	ldd	r25, Y+7	; 0x07
    90a2:	01 96       	adiw	r24, 0x01	; 1
    90a4:	8e 83       	std	Y+6, r24	; 0x06
    90a6:	9f 83       	std	Y+7, r25	; 0x07
    90a8:	8a 81       	ldd	r24, Y+2	; 0x02
    90aa:	28 2f       	mov	r18, r24
    90ac:	2b c0       	rjmp	.+86     	; 0x9104 <fgetc+0x7a>
    90ae:	42 ff       	sbrs	r20, 2
    90b0:	13 c0       	rjmp	.+38     	; 0x90d8 <fgetc+0x4e>
    90b2:	e8 81       	ld	r30, Y
    90b4:	f9 81       	ldd	r31, Y+1	; 0x01
    90b6:	80 81       	ld	r24, Z
    90b8:	28 2f       	mov	r18, r24
    90ba:	33 27       	eor	r19, r19
    90bc:	27 fd       	sbrc	r18, 7
    90be:	30 95       	com	r19
    90c0:	21 15       	cp	r18, r1
    90c2:	31 05       	cpc	r19, r1
    90c4:	29 f4       	brne	.+10     	; 0x90d0 <fgetc+0x46>
    90c6:	40 62       	ori	r20, 0x20	; 32
    90c8:	4b 83       	std	Y+3, r20	; 0x03
    90ca:	2f ef       	ldi	r18, 0xFF	; 255
    90cc:	3f ef       	ldi	r19, 0xFF	; 255
    90ce:	1b c0       	rjmp	.+54     	; 0x9106 <fgetc+0x7c>
    90d0:	31 96       	adiw	r30, 0x01	; 1
    90d2:	e8 83       	st	Y, r30
    90d4:	f9 83       	std	Y+1, r31	; 0x01
    90d6:	11 c0       	rjmp	.+34     	; 0x90fa <fgetc+0x70>
    90d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    90da:	fb 85       	ldd	r31, Y+11	; 0x0b
    90dc:	ce 01       	movw	r24, r28
    90de:	19 95       	eicall
    90e0:	9c 01       	movw	r18, r24
    90e2:	97 ff       	sbrs	r25, 7
    90e4:	0a c0       	rjmp	.+20     	; 0x90fa <fgetc+0x70>
    90e6:	9b 81       	ldd	r25, Y+3	; 0x03
    90e8:	2f 5f       	subi	r18, 0xFF	; 255
    90ea:	3f 4f       	sbci	r19, 0xFF	; 255
    90ec:	11 f0       	breq	.+4      	; 0x90f2 <fgetc+0x68>
    90ee:	80 e2       	ldi	r24, 0x20	; 32
    90f0:	01 c0       	rjmp	.+2      	; 0x90f4 <fgetc+0x6a>
    90f2:	80 e1       	ldi	r24, 0x10	; 16
    90f4:	89 2b       	or	r24, r25
    90f6:	8b 83       	std	Y+3, r24	; 0x03
    90f8:	e8 cf       	rjmp	.-48     	; 0x90ca <fgetc+0x40>
    90fa:	8e 81       	ldd	r24, Y+6	; 0x06
    90fc:	9f 81       	ldd	r25, Y+7	; 0x07
    90fe:	01 96       	adiw	r24, 0x01	; 1
    9100:	8e 83       	std	Y+6, r24	; 0x06
    9102:	9f 83       	std	Y+7, r25	; 0x07
    9104:	30 e0       	ldi	r19, 0x00	; 0
    9106:	c9 01       	movw	r24, r18
    9108:	df 91       	pop	r29
    910a:	cf 91       	pop	r28
    910c:	08 95       	ret

0000910e <_exit>:
    910e:	f8 94       	cli

00009110 <__stop_program>:
    9110:	ff cf       	rjmp	.-2      	; 0x9110 <__stop_program>
